From 748507c780a39c8e31276bf29dd18d7b32a91b34 Mon Sep 17 00:00:00 2001
From: Tom Lane <tgl@sss.pgh.pa.us>
Date: Wed, 22 Apr 2020 15:27:43 -0400
Subject: [PATCH] Sync up some inconsistent comments in config/c-compiler.m4.

Make header/trailer comments agree with the actual names of some macros.
These seem like legit names in earlier iterations of respective patches
(commit b779168ff "Detect PG_PRINTF_ATTRIBUTE automatically." and
commit 6869b4f25 "Add C++ support to configure.") but the macro had
been renamed out of sync with the header / trailer comment in the final
committed patch.

Even more nitpickily, make the dashed underlines agree with the lengths
of the macro names everyplace.  There doesn't seem to have been any
meeting of the minds previously on whether those should match or not,
but at least some people have been trying to make 'em match.

Jesse Zhang, Tom Lane

Discussion: https://postgr.es/m/CAGf+fX7DDyq6WfCy6X_KtD28MkbNBE6NkRi26fSf25dfUwX0zw@mail.gmail.com
---
 config/c-compiler.m4 | 36 ++++++++++++++++++------------------
 1 file changed, 18 insertions(+), 18 deletions(-)

diff --git a/config/c-compiler.m4 b/config/c-compiler.m4
index 501b74b3a196..780e906eccd3 100644
--- a/config/c-compiler.m4
+++ b/config/c-compiler.m4
@@ -2,8 +2,8 @@
 # config/c-compiler.m4
 
 
-# PGAC_C_PRINTF_ARCHETYPE
-# -----------------------
+# PGAC_PRINTF_ARCHETYPE
+# ---------------------
 # Select the format archetype to be used by gcc to check printf-type functions.
 # We prefer "gnu_printf", as that most closely matches the features supported
 # by src/port/snprintf.c (particularly the %m conversion spec).  However,
@@ -93,7 +93,7 @@ undefine([Ac_cachevar])dnl
 
 
 # PGAC_TYPE_128BIT_INT
-# ---------------------
+# --------------------
 # Check if __int128 is a working 128 bit integer type, and if so
 # define PG_INT128_TYPE to that typename, and define ALIGNOF_PG_INT128_TYPE
 # as its alignment requirement.
@@ -282,7 +282,7 @@ fi])# PGAC_C_BUILTIN_CONSTANT_P
 
 
 # PGAC_C_BUILTIN_OP_OVERFLOW
-# -------------------------
+# --------------------------
 # Check if the C compiler understands __builtin_$op_overflow(),
 # and define HAVE__BUILTIN_OP_OVERFLOW if so.
 #
@@ -331,7 +331,7 @@ fi])# PGAC_C_BUILTIN_UNREACHABLE
 
 
 # PGAC_C_COMPUTED_GOTO
-# -----------------------
+# --------------------
 # Check if the C compiler knows computed gotos (gcc extension, also
 # available in at least clang).  If so, define HAVE_COMPUTED_GOTO.
 #
@@ -382,7 +382,7 @@ fi])# PGAC_CHECK_BUILTIN_FUNC
 
 
 # PGAC_PROG_VARCC_VARFLAGS_OPT
-# -----------------------
+# ----------------------------
 # Given a compiler, variable name and a string, check if the compiler
 # supports the string as a command-line option. If it does, add the
 # string to the given variable.
@@ -420,7 +420,7 @@ PGAC_PROG_VARCC_VARFLAGS_OPT(CC, CFLAGS, $1)
 
 
 # PGAC_PROG_CC_VAR_OPT
-# -----------------------
+# --------------------
 # Given a variable name and a string, check if the compiler supports
 # the string as a command-line option. If it does, add the string to
 # the given variable.
@@ -431,7 +431,7 @@ AC_DEFUN([PGAC_PROG_CC_VAR_OPT],
 
 
 # PGAC_PROG_VARCXX_VARFLAGS_OPT
-# -----------------------
+# -----------------------------
 # Given a compiler, variable name and a string, check if the compiler
 # supports the string as a command-line option. If it does, add the
 # string to the given variable.
@@ -461,12 +461,12 @@ undefine([Ac_cachevar])dnl
 
 
 # PGAC_PROG_CXX_CFLAGS_OPT
-# -----------------------
+# ------------------------
 # Given a string, check if the compiler supports the string as a
 # command-line option. If it does, add the string to CXXFLAGS.
 AC_DEFUN([PGAC_PROG_CXX_CFLAGS_OPT],
 [PGAC_PROG_VARCXX_VARFLAGS_OPT(CXX, CXXFLAGS, $1)
-])# PGAC_PROG_CXX_VAR_OPT
+])# PGAC_PROG_CXX_CFLAGS_OPT
 
 
 
@@ -494,7 +494,7 @@ undefine([Ac_cachevar])dnl
 ])# PGAC_PROG_CC_LDFLAGS_OPT
 
 # PGAC_HAVE_GCC__SYNC_CHAR_TAS
-# -------------------------
+# ----------------------------
 # Check if the C compiler understands __sync_lock_test_and_set(char),
 # and define HAVE_GCC__SYNC_CHAR_TAS
 #
@@ -514,7 +514,7 @@ if test x"$pgac_cv_gcc_sync_char_tas" = x"yes"; then
 fi])# PGAC_HAVE_GCC__SYNC_CHAR_TAS
 
 # PGAC_HAVE_GCC__SYNC_INT32_TAS
-# -------------------------
+# -----------------------------
 # Check if the C compiler understands __sync_lock_test_and_set(),
 # and define HAVE_GCC__SYNC_INT32_TAS
 AC_DEFUN([PGAC_HAVE_GCC__SYNC_INT32_TAS],
@@ -530,7 +530,7 @@ if test x"$pgac_cv_gcc_sync_int32_tas" = x"yes"; then
 fi])# PGAC_HAVE_GCC__SYNC_INT32_TAS
 
 # PGAC_HAVE_GCC__SYNC_INT32_CAS
-# -------------------------
+# -----------------------------
 # Check if the C compiler understands __sync_compare_and_swap() for 32bit
 # types, and define HAVE_GCC__SYNC_INT32_CAS if so.
 AC_DEFUN([PGAC_HAVE_GCC__SYNC_INT32_CAS],
@@ -545,7 +545,7 @@ if test x"$pgac_cv_gcc_sync_int32_cas" = x"yes"; then
 fi])# PGAC_HAVE_GCC__SYNC_INT32_CAS
 
 # PGAC_HAVE_GCC__SYNC_INT64_CAS
-# -------------------------
+# -----------------------------
 # Check if the C compiler understands __sync_compare_and_swap() for 64bit
 # types, and define HAVE_GCC__SYNC_INT64_CAS if so.
 AC_DEFUN([PGAC_HAVE_GCC__SYNC_INT64_CAS],
@@ -560,7 +560,7 @@ if test x"$pgac_cv_gcc_sync_int64_cas" = x"yes"; then
 fi])# PGAC_HAVE_GCC__SYNC_INT64_CAS
 
 # PGAC_HAVE_GCC__ATOMIC_INT32_CAS
-# -------------------------
+# -------------------------------
 # Check if the C compiler understands __atomic_compare_exchange_n() for 32bit
 # types, and define HAVE_GCC__ATOMIC_INT32_CAS if so.
 AC_DEFUN([PGAC_HAVE_GCC__ATOMIC_INT32_CAS],
@@ -576,7 +576,7 @@ if test x"$pgac_cv_gcc_atomic_int32_cas" = x"yes"; then
 fi])# PGAC_HAVE_GCC__ATOMIC_INT32_CAS
 
 # PGAC_HAVE_GCC__ATOMIC_INT64_CAS
-# -------------------------
+# -------------------------------
 # Check if the C compiler understands __atomic_compare_exchange_n() for 64bit
 # types, and define HAVE_GCC__ATOMIC_INT64_CAS if so.
 AC_DEFUN([PGAC_HAVE_GCC__ATOMIC_INT64_CAS],
@@ -592,7 +592,7 @@ if test x"$pgac_cv_gcc_atomic_int64_cas" = x"yes"; then
 fi])# PGAC_HAVE_GCC__ATOMIC_INT64_CAS
 
 # PGAC_SSE42_CRC32_INTRINSICS
-# -----------------------
+# ---------------------------
 # Check if the compiler supports the x86 CRC instructions added in SSE 4.2,
 # using the _mm_crc32_u8 and _mm_crc32_u32 intrinsic functions. (We don't
 # test the 8-byte variant, _mm_crc32_u64, but it is assumed to be present if
@@ -623,7 +623,7 @@ undefine([Ac_cachevar])dnl
 
 
 # PGAC_ARMV8_CRC32C_INTRINSICS
-# -----------------------
+# ----------------------------
 # Check if the compiler supports the CRC32C instructions using the __crc32cb,
 # __crc32ch, __crc32cw, and __crc32cd intrinsic functions. These instructions
 # were first introduced in ARMv8 in the optional CRC Extension, and became
