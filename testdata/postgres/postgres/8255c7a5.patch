From 8255c7a5eeba8f1a38b7a431c04909bde4f5e67d Mon Sep 17 00:00:00 2001
From: Tom Lane <tgl@sss.pgh.pa.us>
Date: Wed, 22 May 2019 13:04:48 -0400
Subject: [PATCH] Phase 2 pgindent run for v12.

Switch to 2.1 version of pg_bsd_indent.  This formats
multiline function declarations "correctly", that is with
additional lines of parameter declarations indented to match
where the first line's left parenthesis is.

Discussion: https://postgr.es/m/CAEepm=0P3FeTXRcU5B2W3jv3PgRVZ-kGUXLGfd42FFhUROO3ug@mail.gmail.com
---
 contrib/amcheck/verify_nbtree.c               |  40 +-
 contrib/auto_explain/auto_explain.c           |   4 +-
 contrib/bloom/bloom.h                         |  22 +-
 contrib/btree_gist/btree_utils_num.h          |  14 +-
 contrib/btree_gist/btree_utils_var.h          |  14 +-
 contrib/dblink/dblink.c                       |  18 +-
 contrib/file_fdw/file_fdw.c                   |  48 +-
 contrib/intarray/_int_selfuncs.c              |   2 +-
 contrib/jsonb_plpython/jsonb_plpython.c       |   2 +-
 contrib/ltree/lquery_op.c                     |   2 +-
 contrib/ltree/ltree.h                         |   8 +-
 contrib/pageinspect/brinfuncs.c               |   2 +-
 contrib/pageinspect/rawpage.c                 |   2 +-
 .../pg_stat_statements/pg_stat_statements.c   |  34 +-
 contrib/pg_trgm/trgm.h                        |   2 +-
 contrib/pg_trgm/trgm_regexp.c                 |   6 +-
 contrib/pg_visibility/pg_visibility.c         |   4 +-
 contrib/pgcrypto/imath.c                      |  10 +-
 contrib/pgcrypto/mbuf.h                       |  12 +-
 contrib/pgcrypto/pgp-decrypt.c                |   4 +-
 contrib/pgcrypto/pgp.h                        |  32 +-
 contrib/pgcrypto/px-crypt.h                   |  24 +-
 contrib/pgstattuple/pgstattuple.c             |  18 +-
 contrib/postgres_fdw/connection.c             |  10 +-
 contrib/postgres_fdw/deparse.c                |  64 +--
 contrib/postgres_fdw/postgres_fdw.c           | 252 +++++-----
 contrib/postgres_fdw/postgres_fdw.h           |  92 ++--
 contrib/sepgsql/sepgsql.h                     |  54 +--
 contrib/tablefunc/tablefunc.c                 |  58 +--
 contrib/test_decoding/test_decoding.c         |  30 +-
 contrib/tsm_system_rows/tsm_system_rows.c     |  20 +-
 contrib/tsm_system_time/tsm_system_time.c     |  20 +-
 contrib/xml2/xpath.c                          |   8 +-
 src/backend/access/brin/brin.c                |   6 +-
 src/backend/access/brin/brin_inclusion.c      |   4 +-
 src/backend/access/brin/brin_minmax.c         |   2 +-
 src/backend/access/brin/brin_pageops.c        |   2 +-
 src/backend/access/brin/brin_revmap.c         |   4 +-
 src/backend/access/brin/brin_tuple.c          |   4 +-
 src/backend/access/common/printtup.c          |   6 +-
 src/backend/access/common/reloptions.c        |   2 +-
 src/backend/access/gin/ginbtree.c             |   6 +-
 src/backend/access/gin/gindatapage.c          |  12 +-
 src/backend/access/gin/ginentrypage.c         |   8 +-
 src/backend/access/gist/gist.c                |  14 +-
 src/backend/access/gist/gistbuild.c           |  28 +-
 src/backend/access/gist/gistbuildbuffers.c    |  10 +-
 src/backend/access/gist/gistproc.c            |   4 +-
 src/backend/access/gist/gistvacuum.c          |  10 +-
 src/backend/access/hash/hash.c                |  10 +-
 src/backend/access/hash/hashinsert.c          |   2 +-
 src/backend/access/hash/hashpage.c            |  14 +-
 src/backend/access/hash/hashsearch.c          |  10 +-
 src/backend/access/heap/heapam.c              |  42 +-
 src/backend/access/heap/heapam_handler.c      |   8 +-
 src/backend/access/heap/pruneheap.c           |  10 +-
 src/backend/access/heap/syncscan.c            |   2 +-
 src/backend/access/heap/tuptoaster.c          |  14 +-
 src/backend/access/heap/vacuumlazy.c          |  24 +-
 src/backend/access/index/indexam.c            |   4 +-
 src/backend/access/nbtree/nbtinsert.c         |  34 +-
 src/backend/access/nbtree/nbtpage.c           |   8 +-
 src/backend/access/nbtree/nbtree.c            |   6 +-
 src/backend/access/nbtree/nbtsearch.c         |   6 +-
 src/backend/access/nbtree/nbtsort.c           |  22 +-
 src/backend/access/nbtree/nbtsplitloc.c       |  20 +-
 src/backend/access/nbtree/nbtutils.c          |  22 +-
 src/backend/access/tablesample/bernoulli.c    |  20 +-
 src/backend/access/tablesample/system.c       |  20 +-
 src/backend/access/transam/clog.c             |  18 +-
 src/backend/access/transam/commit_ts.c        |  10 +-
 src/backend/access/transam/generic_xlog.c     |   8 +-
 src/backend/access/transam/multixact.c        |  12 +-
 src/backend/access/transam/slru.c             |   4 +-
 src/backend/access/transam/twophase.c         |  36 +-
 src/backend/access/transam/xact.c             |   6 +-
 src/backend/access/transam/xlog.c             |  32 +-
 src/backend/access/transam/xloginsert.c       |   6 +-
 src/backend/access/transam/xlogreader.c       |   8 +-
 src/backend/catalog/aclchk.c                  |  26 +-
 src/backend/catalog/dependency.c              |  36 +-
 src/backend/catalog/heap.c                    |  50 +-
 src/backend/catalog/index.c                   |  40 +-
 src/backend/catalog/namespace.c               |   2 +-
 src/backend/catalog/objectaddress.c           |  32 +-
 src/backend/catalog/partition.c               |   2 +-
 src/backend/catalog/pg_aggregate.c            |   6 +-
 src/backend/catalog/pg_operator.c             |  42 +-
 src/backend/catalog/pg_proc.c                 |   6 +-
 src/backend/catalog/pg_shdepend.c             |  28 +-
 src/backend/catalog/toasting.c                |   4 +-
 src/backend/commands/analyze.c                |  58 +--
 src/backend/commands/async.c                  |   6 +-
 src/backend/commands/cluster.c                |   4 +-
 src/backend/commands/copy.c                   |  22 +-
 src/backend/commands/dbcommands.c             |  10 +-
 src/backend/commands/dropcmds.c               |   8 +-
 src/backend/commands/event_trigger.c          |  10 +-
 src/backend/commands/explain.c                |  74 +--
 src/backend/commands/extension.c              |  36 +-
 src/backend/commands/indexcmds.c              |  26 +-
 src/backend/commands/lockcmds.c               |   2 +-
 src/backend/commands/matview.c                |   4 +-
 src/backend/commands/opclasscmds.c            |  24 +-
 src/backend/commands/policy.c                 |   2 +-
 src/backend/commands/prepare.c                |   2 +-
 src/backend/commands/proclang.c               |   4 +-
 src/backend/commands/publicationcmds.c        |   2 +-
 src/backend/commands/sequence.c               |  12 +-
 src/backend/commands/statscmds.c              |   2 +-
 src/backend/commands/tablecmds.c              | 220 ++++-----
 src/backend/commands/tablespace.c             |   2 +-
 src/backend/commands/trigger.c                |  54 +--
 src/backend/commands/tsearchcmds.c            |   4 +-
 src/backend/commands/typecmds.c               |  10 +-
 src/backend/commands/user.c                   |   8 +-
 src/backend/commands/vacuum.c                 |   6 +-
 src/backend/executor/execCurrent.c            |   2 +-
 src/backend/executor/execExpr.c               |  24 +-
 src/backend/executor/execExprInterp.c         |   4 +-
 src/backend/executor/execIndexing.c           |  18 +-
 src/backend/executor/execMain.c               |  28 +-
 src/backend/executor/execParallel.c           |  10 +-
 src/backend/executor/execPartition.c          |  56 +--
 src/backend/executor/execSRF.c                |  12 +-
 src/backend/executor/execTuples.c             |  10 +-
 src/backend/executor/functions.c              |  18 +-
 src/backend/executor/instrument.c             |   2 +-
 src/backend/executor/nodeAgg.c                |  62 +--
 src/backend/executor/nodeBitmapHeapscan.c     |   8 +-
 src/backend/executor/nodeGatherMerge.c        |   4 +-
 src/backend/executor/nodeHash.c               |  26 +-
 src/backend/executor/nodeHashjoin.c           |  14 +-
 src/backend/executor/nodeIndexonlyscan.c      |   2 +-
 src/backend/executor/nodeIndexscan.c          |  12 +-
 src/backend/executor/nodeModifyTable.c        |  24 +-
 src/backend/executor/nodeSubplan.c            |  10 +-
 src/backend/executor/nodeWindowAgg.c          |  34 +-
 src/backend/executor/spi.c                    |  14 +-
 src/backend/jit/llvm/llvmjit_expr.c           |  10 +-
 src/backend/lib/bloomfilter.c                 |   2 +-
 src/backend/lib/dshash.c                      |  26 +-
 src/backend/lib/integerset.c                  |  10 +-
 src/backend/lib/pairingheap.c                 |   4 +-
 src/backend/libpq/auth-scram.c                |   2 +-
 src/backend/libpq/auth.c                      |  16 +-
 src/backend/libpq/be-gssapi-common.h          |   4 +-
 src/backend/libpq/be-secure-openssl.c         |   4 +-
 src/backend/libpq/hba.c                       |  10 +-
 src/backend/libpq/ifaddr.c                    |  12 +-
 src/backend/nodes/nodeFuncs.c                 |   2 +-
 src/backend/nodes/tidbitmap.c                 |   8 +-
 src/backend/optimizer/geqo/geqo_eval.c        |   4 +-
 src/backend/optimizer/path/allpaths.c         |  64 +--
 src/backend/optimizer/path/clausesel.c        |   4 +-
 src/backend/optimizer/path/costsize.c         |  36 +-
 src/backend/optimizer/path/equivclass.c       |  46 +-
 src/backend/optimizer/path/indxpath.c         | 156 +++----
 src/backend/optimizer/path/joinpath.c         |  82 ++--
 src/backend/optimizer/path/joinrels.c         |  30 +-
 src/backend/optimizer/path/pathkeys.c         |   4 +-
 src/backend/optimizer/plan/analyzejoins.c     |  14 +-
 src/backend/optimizer/plan/createplan.c       | 242 +++++-----
 src/backend/optimizer/plan/initsplan.c        |  40 +-
 src/backend/optimizer/plan/planagg.c          |   2 +-
 src/backend/optimizer/plan/planner.c          | 162 +++----
 src/backend/optimizer/plan/setrefs.c          |  68 +--
 src/backend/optimizer/plan/subselect.c        |  30 +-
 src/backend/optimizer/prep/prepjointree.c     |  60 +--
 src/backend/optimizer/prep/preptlist.c        |   2 +-
 src/backend/optimizer/prep/prepunion.c        |  54 +--
 src/backend/optimizer/util/appendinfo.c       |  10 +-
 src/backend/optimizer/util/clauses.c          |  50 +-
 src/backend/optimizer/util/inherit.c          |  20 +-
 src/backend/optimizer/util/orclauses.c        |   2 +-
 src/backend/optimizer/util/pathnode.c         |   4 +-
 src/backend/optimizer/util/plancat.c          |  18 +-
 src/backend/optimizer/util/predtest.c         |  14 +-
 src/backend/optimizer/util/relnode.c          |  34 +-
 src/backend/optimizer/util/restrictinfo.c     |  30 +-
 src/backend/optimizer/util/tlist.c            |   4 +-
 src/backend/optimizer/util/var.c              |   8 +-
 src/backend/parser/analyze.c                  |  22 +-
 src/backend/parser/parse_agg.c                |  24 +-
 src/backend/parser/parse_clause.c             |  50 +-
 src/backend/parser/parse_coerce.c             |  26 +-
 src/backend/parser/parse_collate.c            |  18 +-
 src/backend/parser/parse_expr.c               |  20 +-
 src/backend/parser/parse_func.c               |  12 +-
 src/backend/parser/parse_oper.c               |  16 +-
 src/backend/parser/parse_param.c              |   4 +-
 src/backend/parser/parse_relation.c           |  22 +-
 src/backend/parser/parse_target.c             |  48 +-
 src/backend/parser/parse_type.c               |   2 +-
 src/backend/parser/parse_utilcmd.c            |  26 +-
 src/backend/partitioning/partbounds.c         |  46 +-
 src/backend/partitioning/partprune.c          |  86 ++--
 src/backend/port/sysv_sema.c                  |   4 +-
 src/backend/port/sysv_shmem.c                 |   4 +-
 src/backend/postmaster/autovacuum.c           |  24 +-
 src/backend/postmaster/pgstat.c               |   2 +-
 src/backend/postmaster/postmaster.c           |   6 +-
 src/backend/postmaster/syslogger.c            |   2 +-
 src/backend/regex/regcomp.c                   |   8 +-
 src/backend/regex/regprefix.c                 |   4 +-
 src/backend/replication/basebackup.c          |   8 +-
 .../libpqwalreceiver/libpqwalreceiver.c       |  36 +-
 src/backend/replication/logical/decode.c      |   4 +-
 src/backend/replication/logical/logical.c     |  12 +-
 src/backend/replication/logical/proto.c       |   2 +-
 .../replication/logical/reorderbuffer.c       |  22 +-
 src/backend/replication/pgoutput/pgoutput.c   |  20 +-
 src/backend/replication/syncrep.c             |  18 +-
 src/backend/rewrite/rewriteDefine.c           |   2 +-
 src/backend/rewrite/rewriteHandler.c          |  32 +-
 src/backend/rewrite/rewriteManip.c            |   6 +-
 src/backend/rewrite/rowsecurity.c             |  28 +-
 src/backend/statistics/dependencies.c         |  14 +-
 src/backend/statistics/extended_stats.c       |   6 +-
 src/backend/statistics/mcv.c                  |   6 +-
 src/backend/statistics/mvdistinct.c           |   4 +-
 src/backend/storage/buffer/bufmgr.c           |  18 +-
 src/backend/storage/buffer/freelist.c         |   4 +-
 src/backend/storage/file/fd.c                 |   8 +-
 src/backend/storage/file/reinit.c             |   4 +-
 src/backend/storage/freespace/freespace.c     |   8 +-
 src/backend/storage/ipc/dsm.c                 |   2 +-
 src/backend/storage/ipc/dsm_impl.c            |  16 +-
 src/backend/storage/ipc/latch.c               |   2 +-
 src/backend/storage/ipc/procarray.c           |  12 +-
 src/backend/storage/ipc/shm_mq.c              |  10 +-
 src/backend/storage/ipc/standby.c             |   2 +-
 src/backend/storage/lmgr/deadlock.c           |  10 +-
 src/backend/storage/lmgr/lock.c               |  16 +-
 src/backend/storage/lmgr/predicate.c          |  22 +-
 src/backend/storage/smgr/md.c                 |  20 +-
 src/backend/tcop/fastpath.c                   |   4 +-
 src/backend/tcop/pquery.c                     |  30 +-
 src/backend/tcop/utility.c                    |  14 +-
 src/backend/tsearch/ts_selfuncs.c             |   6 +-
 src/backend/tsearch/ts_typanalyze.c           |   6 +-
 src/backend/utils/adt/acl.c                   |   6 +-
 src/backend/utils/adt/array_expanded.c        |   4 +-
 src/backend/utils/adt/array_selfuncs.c        |  28 +-
 src/backend/utils/adt/array_typanalyze.c      |   2 +-
 src/backend/utils/adt/arrayfuncs.c            | 108 ++---
 src/backend/utils/adt/ascii.c                 |   2 +-
 src/backend/utils/adt/datetime.c              |  34 +-
 src/backend/utils/adt/expandedrecord.c        |   8 +-
 src/backend/utils/adt/formatting.c            |  12 +-
 src/backend/utils/adt/geo_ops.c               |   8 +-
 src/backend/utils/adt/inet_cidr_ntop.c        |   4 +-
 src/backend/utils/adt/json.c                  |  22 +-
 src/backend/utils/adt/jsonb.c                 |  18 +-
 src/backend/utils/adt/jsonb_gin.c             |   2 +-
 src/backend/utils/adt/jsonb_util.c            |   8 +-
 src/backend/utils/adt/jsonfuncs.c             |  56 +--
 src/backend/utils/adt/jsonpath.c              |   8 +-
 src/backend/utils/adt/jsonpath_exec.c         |  74 +--
 src/backend/utils/adt/like.c                  |  16 +-
 src/backend/utils/adt/like_support.c          |  48 +-
 src/backend/utils/adt/network.c               |  14 +-
 src/backend/utils/adt/network_selfuncs.c      |  36 +-
 src/backend/utils/adt/network_spgist.c        |   4 +-
 src/backend/utils/adt/numeric.c               |  48 +-
 src/backend/utils/adt/oracle_compat.c         |   4 +-
 src/backend/utils/adt/rangetypes.c            |  12 +-
 src/backend/utils/adt/rangetypes_gist.c       |  36 +-
 src/backend/utils/adt/rangetypes_selfuncs.c   |  38 +-
 src/backend/utils/adt/rangetypes_spgist.c     |  12 +-
 src/backend/utils/adt/rangetypes_typanalyze.c |   2 +-
 src/backend/utils/adt/regexp.c                |  10 +-
 src/backend/utils/adt/regproc.c               |   2 +-
 src/backend/utils/adt/ri_triggers.c           |  50 +-
 src/backend/utils/adt/ruleutils.c             | 140 +++---
 src/backend/utils/adt/selfuncs.c              |  72 +--
 src/backend/utils/adt/varbit.c                |   2 +-
 src/backend/utils/adt/varlena.c               |  30 +-
 src/backend/utils/adt/windowfuncs.c           |   2 +-
 src/backend/utils/adt/xml.c                   |  46 +-
 src/backend/utils/cache/catcache.c            |  34 +-
 src/backend/utils/cache/evtcache.c            |   2 +-
 src/backend/utils/cache/plancache.c           |   6 +-
 src/backend/utils/cache/relcache.c            |  16 +-
 src/backend/utils/cache/relmapper.c           |   8 +-
 src/backend/utils/cache/typcache.c            |   4 +-
 src/backend/utils/fmgr/dfmgr.c                |   2 +-
 src/backend/utils/fmgr/fmgr.c                 |   4 +-
 src/backend/utils/fmgr/funcapi.c              |  12 +-
 src/backend/utils/mb/mbutils.c                |   2 +-
 src/backend/utils/misc/guc.c                  |  28 +-
 src/backend/utils/misc/tzparser.c             |  10 +-
 src/backend/utils/mmgr/aset.c                 |   4 +-
 src/backend/utils/mmgr/dsa.c                  |  20 +-
 src/backend/utils/mmgr/freepage.c             |  28 +-
 src/backend/utils/mmgr/generation.c           |   4 +-
 src/backend/utils/mmgr/mcxt.c                 |   6 +-
 src/backend/utils/mmgr/slab.c                 |   4 +-
 src/backend/utils/resowner/resowner.c         |   6 +-
 src/backend/utils/sort/logtape.c              |   2 +-
 src/backend/utils/sort/sharedtuplestore.c     |   2 +-
 src/backend/utils/sort/tuplesort.c            |  40 +-
 src/backend/utils/sort/tuplestore.c           |   4 +-
 src/backend/utils/time/snapmgr.c              |   4 +-
 src/bin/initdb/findtimezone.c                 |   6 +-
 src/bin/initdb/initdb.c                       |   4 +-
 src/bin/pg_basebackup/pg_basebackup.c         |   2 +-
 src/bin/pg_basebackup/pg_receivewal.c         |   2 +-
 src/bin/pg_basebackup/pg_recvlogical.c        |   2 +-
 src/bin/pg_basebackup/receivelog.c            |  18 +-
 src/bin/pg_basebackup/receivelog.h            |   2 +-
 src/bin/pg_basebackup/streamutil.h            |  16 +-
 src/bin/pg_basebackup/walmethods.h            |   2 +-
 src/bin/pg_dump/common.c                      |   8 +-
 src/bin/pg_dump/compress_io.c                 |   8 +-
 src/bin/pg_dump/compress_io.h                 |   4 +-
 src/bin/pg_dump/dumputils.c                   |   8 +-
 src/bin/pg_dump/dumputils.h                   |  34 +-
 src/bin/pg_dump/parallel.c                    |   6 +-
 src/bin/pg_dump/parallel.h                    |  12 +-
 src/bin/pg_dump/pg_backup.h                   |  14 +-
 src/bin/pg_dump/pg_backup_archiver.c          |  36 +-
 src/bin/pg_dump/pg_backup_archiver.h          |   2 +-
 src/bin/pg_dump/pg_backup_db.h                |   2 +-
 src/bin/pg_dump/pg_backup_directory.c         |   2 +-
 src/bin/pg_dump/pg_dump.c                     |  86 ++--
 src/bin/pg_dump/pg_dump.h                     |  12 +-
 src/bin/pg_dump/pg_dump_sort.c                |  22 +-
 src/bin/pg_dump/pg_dumpall.c                  |  10 +-
 src/bin/pg_rewind/copy_fetch.c                |   2 +-
 src/bin/pg_rewind/filemap.c                   |   2 +-
 src/bin/pg_rewind/filemap.h                   |   6 +-
 src/bin/pg_rewind/parsexlog.c                 |   8 +-
 src/bin/pg_rewind/pg_rewind.c                 |   4 +-
 src/bin/pg_rewind/pg_rewind.h                 |  12 +-
 src/bin/pg_upgrade/info.c                     |   8 +-
 src/bin/pg_upgrade/option.c                   |   4 +-
 src/bin/pg_upgrade/pg_upgrade.h               |  58 +--
 src/bin/pgbench/pgbench.c                     |   6 +-
 src/bin/pgbench/pgbench.h                     |  16 +-
 src/bin/psql/command.c                        |  66 +--
 src/bin/psql/command.h                        |  12 +-
 src/bin/psql/common.h                         |   2 +-
 src/bin/psql/copy.h                           |   4 +-
 src/bin/psql/crosstabview.c                   |  10 +-
 src/bin/psql/describe.c                       |  14 +-
 src/bin/psql/startup.c                        |   4 +-
 src/bin/psql/stringutils.h                    |  16 +-
 src/bin/psql/tab-complete.c                   |  10 +-
 src/bin/psql/variables.h                      |  14 +-
 src/bin/scripts/clusterdb.c                   |  12 +-
 src/bin/scripts/common.h                      |  26 +-
 src/bin/scripts/reindexdb.c                   |  24 +-
 src/bin/scripts/vacuumdb.c                    |  32 +-
 src/common/file_utils.c                       |   4 +-
 src/common/ip.c                               |  16 +-
 src/fe_utils/print.c                          |   4 +-
 src/include/access/amvalidate.h               |   4 +-
 src/include/access/brin_internal.h            |  18 +-
 src/include/access/brin_pageops.h             |  20 +-
 src/include/access/brin_revmap.h              |  12 +-
 src/include/access/brin_tuple.h               |  12 +-
 src/include/access/clog.h                     |   2 +-
 src/include/access/commit_ts.h                |  12 +-
 src/include/access/genam.h                    |  78 ++--
 src/include/access/generic_xlog.h             |   2 +-
 src/include/access/gin.h                      |   2 +-
 src/include/access/gin_private.h              |  92 ++--
 src/include/access/gist_private.h             | 130 +++---
 src/include/access/gistscan.h                 |   2 +-
 src/include/access/hash.h                     |  80 ++--
 src/include/access/heapam.h                   |  84 ++--
 src/include/access/heapam_xlog.h              |  32 +-
 src/include/access/hio.h                      |   8 +-
 src/include/access/htup.h                     |   2 +-
 src/include/access/htup_details.h             |  40 +-
 src/include/access/itup.h                     |   8 +-
 src/include/access/multixact.h                |  38 +-
 src/include/access/nbtree.h                   |  56 +--
 src/include/access/parallel.h                 |   2 +-
 src/include/access/printsimple.h              |   2 +-
 src/include/access/printtup.h                 |   6 +-
 src/include/access/relation.h                 |   2 +-
 src/include/access/reloptions.h               |  28 +-
 src/include/access/rewriteheap.h              |   6 +-
 src/include/access/skey.h                     |  36 +-
 src/include/access/slru.h                     |  14 +-
 src/include/access/spgist.h                   |  18 +-
 src/include/access/spgist_private.h           |  38 +-
 src/include/access/table.h                    |   2 +-
 src/include/access/tableam.h                  |  30 +-
 src/include/access/timeline.h                 |   4 +-
 src/include/access/transam.h                  |   4 +-
 src/include/access/tupconvert.h               |  18 +-
 src/include/access/tupdesc.h                  |  26 +-
 src/include/access/tuptoaster.h               |  16 +-
 src/include/access/twophase.h                 |  10 +-
 src/include/access/twophase_rmgr.h            |   2 +-
 src/include/access/visibilitymap.h            |   8 +-
 src/include/access/xact.h                     |  22 +-
 src/include/access/xlog.h                     |  12 +-
 src/include/access/xlog_internal.h            |   6 +-
 src/include/access/xloginsert.h               |   8 +-
 src/include/access/xlogreader.h               |  14 +-
 src/include/access/xlogutils.h                |  22 +-
 src/include/bootstrap/bootstrap.h             |  14 +-
 src/include/c.h                               |  12 +-
 src/include/catalog/catalog.h                 |   8 +-
 src/include/catalog/dependency.h              |  64 +--
 src/include/catalog/heap.h                    | 134 +++---
 src/include/catalog/index.h                   |  98 ++--
 src/include/catalog/indexing.h                |   8 +-
 src/include/catalog/namespace.h               |  34 +-
 src/include/catalog/objectaccess.h            |   6 +-
 src/include/catalog/objectaddress.h           |  16 +-
 src/include/catalog/partition.h               |   6 +-
 src/include/catalog/pg_aggregate.h            |  62 +--
 src/include/catalog/pg_collation.h            |  18 +-
 src/include/catalog/pg_constraint.h           |  84 ++--
 src/include/catalog/pg_conversion.h           |  10 +-
 src/include/catalog/pg_db_role_setting.h      |   2 +-
 src/include/catalog/pg_enum.h                 |   6 +-
 src/include/catalog/pg_inherits.h             |   4 +-
 src/include/catalog/pg_operator.h             |  20 +-
 src/include/catalog/pg_proc.h                 |  50 +-
 src/include/catalog/pg_publication.h          |   2 +-
 src/include/catalog/pg_range.h                |   4 +-
 src/include/catalog/pg_subscription_rel.h     |   6 +-
 src/include/catalog/pg_type.h                 |  83 ++--
 src/include/catalog/storage.h                 |   2 +-
 src/include/catalog/toasting.h                |   6 +-
 src/include/commands/alter.h                  |  10 +-
 src/include/commands/async.h                  |   4 +-
 src/include/commands/cluster.h                |  20 +-
 src/include/commands/copy.h                   |  10 +-
 src/include/commands/createas.h               |   2 +-
 src/include/commands/defrem.h                 |  76 ++--
 src/include/commands/event_trigger.h          |  18 +-
 src/include/commands/explain.h                |  30 +-
 src/include/commands/extension.h              |  10 +-
 src/include/commands/matview.h                |   2 +-
 src/include/commands/policy.h                 |   4 +-
 src/include/commands/portalcmds.h             |   4 +-
 src/include/commands/prepare.h                |  16 +-
 src/include/commands/schemacmds.h             |   6 +-
 src/include/commands/seclabel.h               |   6 +-
 src/include/commands/subscriptioncmds.h       |   2 +-
 src/include/commands/tablecmds.h              |  32 +-
 src/include/commands/trigger.h                | 106 ++---
 src/include/commands/typecmds.h               |  14 +-
 src/include/commands/vacuum.h                 |  48 +-
 src/include/commands/view.h                   |   2 +-
 src/include/common/config_info.h              |   2 +-
 src/include/common/controldata_utils.h        |   2 +-
 src/include/common/ip.h                       |  14 +-
 src/include/common/md5.h                      |   2 +-
 src/include/common/pg_lzcompress.h            |   4 +-
 src/include/common/relpath.h                  |   2 +-
 src/include/common/scram-common.h             |   4 +-
 src/include/common/sha2.h                     |   8 +-
 src/include/common/string.h                   |   4 +-
 src/include/executor/execExpr.h               |  38 +-
 src/include/executor/execParallel.h           |   6 +-
 src/include/executor/execPartition.h          |  18 +-
 src/include/executor/execdesc.h               |  14 +-
 src/include/executor/executor.h               | 218 ++++-----
 src/include/executor/functions.h              |  12 +-
 src/include/executor/nodeBitmapHeapscan.h     |   8 +-
 src/include/executor/nodeCustom.h             |  10 +-
 src/include/executor/nodeForeignscan.h        |   8 +-
 src/include/executor/nodeGatherMerge.h        |   4 +-
 src/include/executor/nodeHash.h               |  48 +-
 src/include/executor/nodeHashjoin.h           |   4 +-
 src/include/executor/nodeIndexonlyscan.h      |   8 +-
 src/include/executor/nodeIndexscan.h          |  14 +-
 src/include/executor/nodeSeqscan.h            |   2 +-
 src/include/executor/spi.h                    |  54 +--
 src/include/executor/tqueue.h                 |   2 +-
 src/include/executor/tstoreReceiver.h         |   6 +-
 src/include/executor/tuptable.h               |  32 +-
 src/include/fe_utils/mbprint.h                |   4 +-
 src/include/fe_utils/print.h                  |  16 +-
 src/include/fe_utils/psqlscan.h               |   8 +-
 src/include/fe_utils/psqlscan_int.h           |  16 +-
 src/include/fe_utils/string_utils.h           |  22 +-
 src/include/fmgr.h                            | 154 +++----
 src/include/foreign/fdwapi.h                  |   2 +-
 src/include/foreign/foreign.h                 |   6 +-
 src/include/funcapi.h                         |  38 +-
 src/include/getaddrinfo.h                     |  10 +-
 src/include/getopt_long.h                     |   6 +-
 src/include/lib/binaryheap.h                  |   4 +-
 src/include/lib/bloomfilter.h                 |   6 +-
 src/include/lib/dshash.h                      |  14 +-
 src/include/lib/knapsack.h                    |   2 +-
 src/include/lib/pairingheap.h                 |   6 +-
 src/include/lib/rbtree.h                      |  12 +-
 src/include/lib/simplehash.h                  |   2 +-
 src/include/lib/stringinfo.h                  |   4 +-
 src/include/libpq/be-fsstubs.h                |   2 +-
 src/include/libpq/crypt.h                     |  12 +-
 src/include/libpq/hba.h                       |   6 +-
 src/include/libpq/ifaddr.h                    |  10 +-
 src/include/libpq/libpq.h                     |  12 +-
 src/include/libpq/pqformat.h                  |   2 +-
 src/include/libpq/scram.h                     |   8 +-
 src/include/mb/pg_wchar.h                     |  66 +--
 src/include/miscadmin.h                       |   4 +-
 src/include/nodes/extensible.h                |   4 +-
 src/include/nodes/makefuncs.h                 |  52 +--
 src/include/nodes/nodeFuncs.h                 |   2 +-
 src/include/nodes/nodes.h                     |   4 +-
 src/include/nodes/print.h                     |   2 +-
 src/include/nodes/tidbitmap.h                 |   6 +-
 src/include/optimizer/appendinfo.h            |  16 +-
 src/include/optimizer/clauses.h               |   4 +-
 src/include/optimizer/cost.h                  | 162 +++----
 src/include/optimizer/geqo.h                  |   2 +-
 src/include/optimizer/geqo_recombination.h    |  20 +-
 src/include/optimizer/geqo_selection.h        |   4 +-
 src/include/optimizer/inherit.h               |   6 +-
 src/include/optimizer/joininfo.h              |  10 +-
 src/include/optimizer/optimizer.h             |  58 +--
 src/include/optimizer/paramassign.h           |  10 +-
 src/include/optimizer/pathnode.h              | 430 +++++++++---------
 src/include/optimizer/paths.h                 | 164 +++----
 src/include/optimizer/placeholder.h           |  10 +-
 src/include/optimizer/plancat.h               |  40 +-
 src/include/optimizer/planmain.h              |  56 +--
 src/include/optimizer/planner.h               |  10 +-
 src/include/optimizer/restrictinfo.h          |  28 +-
 src/include/optimizer/subselect.h             |  18 +-
 src/include/optimizer/tlist.h                 |   6 +-
 src/include/parser/analyze.h                  |  16 +-
 src/include/parser/gramparse.h                |   4 +-
 src/include/parser/parse_agg.h                |  54 +--
 src/include/parser/parse_clause.h             |  34 +-
 src/include/parser/parse_coerce.h             |  74 +--
 src/include/parser/parse_cte.h                |   2 +-
 src/include/parser/parse_func.h               |  48 +-
 src/include/parser/parse_node.h               |  16 +-
 src/include/parser/parse_oper.h               |  28 +-
 src/include/parser/parse_param.h              |   4 +-
 src/include/parser/parse_relation.h           | 130 +++---
 src/include/parser/parse_target.h             |  28 +-
 src/include/parser/parse_type.h               |  10 +-
 src/include/parser/parse_utilcmd.h            |  14 +-
 src/include/parser/parsetree.h                |   4 +-
 src/include/parser/scanner.h                  |  10 +-
 src/include/parser/scansup.h                  |   4 +-
 src/include/partitioning/partbounds.h         |  46 +-
 src/include/partitioning/partdesc.h           |   2 +-
 src/include/partitioning/partprune.h          |  10 +-
 src/include/pgstat.h                          |  20 +-
 src/include/pgtar.h                           |   2 +-
 src/include/pgtime.h                          |  24 +-
 src/include/port.h                            |  28 +-
 src/include/postmaster/autovacuum.h           |   2 +-
 src/include/postmaster/bgworker.h             |   4 +-
 src/include/regex/regex.h                     |   4 +-
 src/include/regex/regexport.h                 |   4 +-
 src/include/replication/decode.h              |   4 +-
 src/include/replication/logical.h             |  30 +-
 src/include/replication/logicalfuncs.h        |   8 +-
 src/include/replication/logicalproto.h        |  24 +-
 src/include/replication/logicalrelation.h     |   4 +-
 src/include/replication/message.h             |   2 +-
 src/include/replication/origin.h              |  10 +-
 src/include/replication/reorderbuffer.h       |  34 +-
 src/include/replication/slot.h                |   2 +-
 src/include/replication/snapbuild.h           |  16 +-
 src/include/replication/walreceiver.h         |   2 +-
 src/include/replication/worker_internal.h     |   8 +-
 src/include/rewrite/rewriteDefine.h           |  16 +-
 src/include/rewrite/rewriteHandler.h          |  14 +-
 src/include/rewrite/rewriteManip.h            |  36 +-
 src/include/rewrite/rowsecurity.h             |   6 +-
 .../statistics/extended_stats_internal.h      |  46 +-
 src/include/statistics/statistics.h           |  30 +-
 src/include/storage/buf_internals.h           |  10 +-
 src/include/storage/bufmgr.h                  |  18 +-
 src/include/storage/bufpage.h                 |   4 +-
 src/include/storage/dsm.h                     |   4 +-
 src/include/storage/dsm_impl.h                |   6 +-
 src/include/storage/fd.h                      |   4 +-
 src/include/storage/freespace.h               |  12 +-
 src/include/storage/fsm_internals.h           |   4 +-
 src/include/storage/itemptr.h                 |   4 +-
 src/include/storage/latch.h                   |  18 +-
 src/include/storage/lmgr.h                    |  20 +-
 src/include/storage/lock.h                    |  42 +-
 src/include/storage/md.h                      |  12 +-
 src/include/storage/pg_shmem.h                |   2 +-
 src/include/storage/predicate.h               |   8 +-
 src/include/storage/predicate_internals.h     |   4 +-
 src/include/storage/procarray.h               |  22 +-
 src/include/storage/procsignal.h              |   4 +-
 src/include/storage/reinit.h                  |   2 +-
 src/include/storage/sharedfileset.h           |   2 +-
 src/include/storage/shm_mq.h                  |   8 +-
 src/include/storage/shmem.h                   |   6 +-
 src/include/storage/sinval.h                  |  14 +-
 src/include/storage/smgr.h                    |  12 +-
 src/include/storage/standby.h                 |   6 +-
 src/include/storage/standbydefs.h             |   6 +-
 src/include/storage/sync.h                    |   2 +-
 src/include/tcop/pquery.h                     |  14 +-
 src/include/tcop/tcopprot.h                   |  28 +-
 src/include/tcop/utility.h                    |  12 +-
 src/include/tsearch/ts_locale.h               |   2 +-
 src/include/tsearch/ts_public.h               |   4 +-
 src/include/tsearch/ts_utils.h                |  20 +-
 src/include/utils/acl.h                       |  44 +-
 src/include/utils/array.h                     | 112 ++---
 src/include/utils/builtins.h                  |  18 +-
 src/include/utils/catcache.h                  |  28 +-
 src/include/utils/datetime.h                  |  42 +-
 src/include/utils/datum.h                     |   8 +-
 src/include/utils/dsa.h                       |   2 +-
 src/include/utils/elog.h                      |  16 +-
 src/include/utils/expandeddatum.h             |   6 +-
 src/include/utils/expandedrecord.h            |  28 +-
 src/include/utils/float.h                     |   6 +-
 src/include/utils/freepage.h                  |   4 +-
 src/include/utils/guc.h                       | 148 +++---
 src/include/utils/guc_tables.h                |   2 +-
 src/include/utils/hashutils.h                 |   2 +-
 src/include/utils/hsearch.h                   |  10 +-
 src/include/utils/index_selfuncs.h            |  84 ++--
 src/include/utils/inval.h                     |  10 +-
 src/include/utils/jsonapi.h                   |  12 +-
 src/include/utils/jsonb.h                     |  18 +-
 src/include/utils/jsonpath.h                  |   2 +-
 src/include/utils/logtape.h                   |  16 +-
 src/include/utils/lsyscache.h                 |  46 +-
 src/include/utils/memutils.h                  |  30 +-
 src/include/utils/numeric.h                   |  10 +-
 src/include/utils/palloc.h                    |   4 +-
 src/include/utils/pg_locale.h                 |   4 +-
 src/include/utils/plancache.h                 |  34 +-
 src/include/utils/portal.h                    |  20 +-
 src/include/utils/ps_status.h                 |   2 +-
 src/include/utils/rangetypes.h                |  40 +-
 src/include/utils/regproc.h                   |   4 +-
 src/include/utils/relcache.h                  |  30 +-
 src/include/utils/relmapper.h                 |   2 +-
 src/include/utils/resowner.h                  |  14 +-
 src/include/utils/resowner_private.h          |  36 +-
 src/include/utils/ruleutils.h                 |   6 +-
 src/include/utils/sampling.h                  |   4 +-
 src/include/utils/selfuncs.h                  |  92 ++--
 src/include/utils/sharedtuplestore.h          |  22 +-
 src/include/utils/snapmgr.h                   |   4 +-
 src/include/utils/sortsupport.h               |   2 +-
 src/include/utils/spccache.h                  |   4 +-
 src/include/utils/syscache.h                  |  24 +-
 src/include/utils/timestamp.h                 |  10 +-
 src/include/utils/tuplesort.h                 |  60 +--
 src/include/utils/tuplestore.h                |  14 +-
 src/include/utils/typcache.h                  |   8 +-
 src/include/utils/varlena.h                   |  24 +-
 src/include/utils/xml.h                       |   6 +-
 src/include/windowapi.h                       |  10 +-
 src/interfaces/ecpg/ecpglib/ecpglib_extern.h  |  22 +-
 src/interfaces/ecpg/ecpglib/prepare.c         |   2 +-
 src/interfaces/ecpg/pgtypeslib/dt.h           |   8 +-
 src/interfaces/ecpg/preproc/type.c            |   6 +-
 src/interfaces/ecpg/preproc/type.h            |   8 +-
 src/interfaces/libpq/fe-auth-scram.c          |   4 +-
 src/interfaces/libpq/fe-auth.h                |   8 +-
 src/interfaces/libpq/fe-connect.c             |  46 +-
 src/interfaces/libpq/fe-exec.c                |  24 +-
 src/interfaces/libpq/fe-gssapi-common.h       |   4 +-
 src/interfaces/libpq/fe-misc.c                |   4 +-
 src/interfaces/libpq/fe-print.c               |  18 +-
 src/interfaces/libpq/fe-protocol3.c           |   6 +-
 src/interfaces/libpq/fe-secure-common.h       |   6 +-
 src/interfaces/libpq/fe-secure-openssl.c      |   6 +-
 src/interfaces/libpq/libpq-events.h           |   4 +-
 src/interfaces/libpq/libpq-fe.h               | 143 +++---
 src/interfaces/libpq/libpq-int.h              |  38 +-
 src/interfaces/libpq/pqexpbuffer.h            |   2 +-
 src/pl/plperl/plperl.c                        |  18 +-
 src/pl/plpgsql/src/pl_comp.c                  |  24 +-
 src/pl/plpgsql/src/pl_exec.c                  | 274 +++++------
 src/pl/plpgsql/src/plpgsql.h                  |  58 +--
 src/pl/plpython/plpy_elog.c                   |  12 +-
 src/pl/plpython/plpy_elog.h                   |   2 +-
 src/pl/plpython/plpy_exec.c                   |   4 +-
 src/pl/plpython/plpy_plpymodule.c             |   6 +-
 src/pl/plpython/plpy_spi.c                    |   2 +-
 src/pl/plpython/plpy_typeio.c                 |  20 +-
 src/pl/plpython/plpy_typeio.h                 |  18 +-
 src/pl/tcl/pltcl.c                            |  82 ++--
 src/port/inet_net_ntop.c                      |   4 +-
 src/port/path.c                               |   2 +-
 src/port/qsort.c                              |   2 +-
 src/port/qsort_arg.c                          |   2 +-
 src/port/snprintf.c                           |  14 +-
 src/test/isolation/isolationtester.c          |   2 +-
 src/test/modules/test_shm_mq/setup.c          |  10 +-
 src/test/modules/test_shm_mq/test.c           |   2 +-
 src/test/modules/test_shm_mq/test_shm_mq.h    |   4 +-
 src/test/modules/test_shm_mq/worker.c         |   4 +-
 src/test/regress/pg_regress.h                 |   4 +-
 src/timezone/localtime.c                      |   2 +-
 src/timezone/pgtz.c                           |   4 +-
 src/timezone/pgtz.h                           |   4 +-
 src/timezone/strftime.c                       |   2 +-
 src/timezone/zic.c                            |   8 +-
 src/tools/pgindent/pgindent                   |  18 +-
 src/tutorial/funcs.c                          |   4 +-
 712 files changed, 7437 insertions(+), 7451 deletions(-)

diff --git a/contrib/amcheck/verify_nbtree.c b/contrib/amcheck/verify_nbtree.c
index c935abc7e096..de0a98f6d952 100644
--- a/contrib/amcheck/verify_nbtree.c
+++ b/contrib/amcheck/verify_nbtree.c
@@ -126,45 +126,45 @@ PG_FUNCTION_INFO_V1(bt_index_check);
 PG_FUNCTION_INFO_V1(bt_index_parent_check);
 
 static void bt_index_check_internal(Oid indrelid, bool parentcheck,
-						bool heapallindexed, bool rootdescend);
+									bool heapallindexed, bool rootdescend);
 static inline void btree_index_checkable(Relation rel);
 static void bt_check_every_level(Relation rel, Relation heaprel,
-					 bool heapkeyspace, bool readonly, bool heapallindexed,
-					 bool rootdescend);
+								 bool heapkeyspace, bool readonly, bool heapallindexed,
+								 bool rootdescend);
 static BtreeLevel bt_check_level_from_leftmost(BtreeCheckState *state,
-							 BtreeLevel level);
+											   BtreeLevel level);
 static void bt_target_page_check(BtreeCheckState *state);
 static BTScanInsert bt_right_page_check_scankey(BtreeCheckState *state);
 static void bt_downlink_check(BtreeCheckState *state, BTScanInsert targetkey,
-				  BlockNumber childblock);
+							  BlockNumber childblock);
 static void bt_downlink_missing_check(BtreeCheckState *state);
 static void bt_tuple_present_callback(Relation index, HeapTuple htup,
-						  Datum *values, bool *isnull,
-						  bool tupleIsAlive, void *checkstate);
+									  Datum *values, bool *isnull,
+									  bool tupleIsAlive, void *checkstate);
 static IndexTuple bt_normalize_tuple(BtreeCheckState *state,
-				   IndexTuple itup);
+									 IndexTuple itup);
 static bool bt_rootdescend(BtreeCheckState *state, IndexTuple itup);
 static inline bool offset_is_negative_infinity(BTPageOpaque opaque,
-							OffsetNumber offset);
+											   OffsetNumber offset);
 static inline bool invariant_l_offset(BtreeCheckState *state, BTScanInsert key,
-				   OffsetNumber upperbound);
+									  OffsetNumber upperbound);
 static inline bool invariant_leq_offset(BtreeCheckState *state,
-					 BTScanInsert key,
-					 OffsetNumber upperbound);
+										BTScanInsert key,
+										OffsetNumber upperbound);
 static inline bool invariant_g_offset(BtreeCheckState *state, BTScanInsert key,
-				   OffsetNumber lowerbound);
+									  OffsetNumber lowerbound);
 static inline bool invariant_l_nontarget_offset(BtreeCheckState *state,
-							 BTScanInsert key,
-							 BlockNumber nontargetblock,
-							 Page nontarget,
-							 OffsetNumber upperbound);
+												BTScanInsert key,
+												BlockNumber nontargetblock,
+												Page nontarget,
+												OffsetNumber upperbound);
 static Page palloc_btree_page(BtreeCheckState *state, BlockNumber blocknum);
 static inline BTScanInsert bt_mkscankey_pivotsearch(Relation rel,
-						 IndexTuple itup);
+													IndexTuple itup);
 static ItemId PageGetItemIdCareful(BtreeCheckState *state, BlockNumber block,
-					 Page page, OffsetNumber offset);
+								   Page page, OffsetNumber offset);
 static inline ItemPointer BTreeTupleGetHeapTIDCareful(BtreeCheckState *state,
-							IndexTuple itup, bool nonpivot);
+													  IndexTuple itup, bool nonpivot);
 
 /*
  * bt_index_check(index regclass, heapallindexed boolean)
diff --git a/contrib/auto_explain/auto_explain.c b/contrib/auto_explain/auto_explain.c
index edc50f9368f2..c810a41a7991 100644
--- a/contrib/auto_explain/auto_explain.c
+++ b/contrib/auto_explain/auto_explain.c
@@ -77,8 +77,8 @@ void		_PG_fini(void);
 
 static void explain_ExecutorStart(QueryDesc *queryDesc, int eflags);
 static void explain_ExecutorRun(QueryDesc *queryDesc,
-					ScanDirection direction,
-					uint64 count, bool execute_once);
+								ScanDirection direction,
+								uint64 count, bool execute_once);
 static void explain_ExecutorFinish(QueryDesc *queryDesc);
 static void explain_ExecutorEnd(QueryDesc *queryDesc);
 
diff --git a/contrib/bloom/bloom.h b/contrib/bloom/bloom.h
index 7c18eaa50866..010148eb032b 100644
--- a/contrib/bloom/bloom.h
+++ b/contrib/bloom/bloom.h
@@ -189,26 +189,26 @@ extern bool blvalidate(Oid opclassoid);
 
 /* index access method interface functions */
 extern bool blinsert(Relation index, Datum *values, bool *isnull,
-		 ItemPointer ht_ctid, Relation heapRel,
-		 IndexUniqueCheck checkUnique,
-		 struct IndexInfo *indexInfo);
+					 ItemPointer ht_ctid, Relation heapRel,
+					 IndexUniqueCheck checkUnique,
+					 struct IndexInfo *indexInfo);
 extern IndexScanDesc blbeginscan(Relation r, int nkeys, int norderbys);
 extern int64 blgetbitmap(IndexScanDesc scan, TIDBitmap *tbm);
 extern void blrescan(IndexScanDesc scan, ScanKey scankey, int nscankeys,
-		 ScanKey orderbys, int norderbys);
+					 ScanKey orderbys, int norderbys);
 extern void blendscan(IndexScanDesc scan);
 extern IndexBuildResult *blbuild(Relation heap, Relation index,
-		struct IndexInfo *indexInfo);
+								 struct IndexInfo *indexInfo);
 extern void blbuildempty(Relation index);
 extern IndexBulkDeleteResult *blbulkdelete(IndexVacuumInfo *info,
-			 IndexBulkDeleteResult *stats, IndexBulkDeleteCallback callback,
-			 void *callback_state);
+										   IndexBulkDeleteResult *stats, IndexBulkDeleteCallback callback,
+										   void *callback_state);
 extern IndexBulkDeleteResult *blvacuumcleanup(IndexVacuumInfo *info,
-				IndexBulkDeleteResult *stats);
+											  IndexBulkDeleteResult *stats);
 extern bytea *bloptions(Datum reloptions, bool validate);
 extern void blcostestimate(PlannerInfo *root, IndexPath *path,
-			   double loop_count, Cost *indexStartupCost,
-			   Cost *indexTotalCost, Selectivity *indexSelectivity,
-			   double *indexCorrelation, double *indexPages);
+						   double loop_count, Cost *indexStartupCost,
+						   Cost *indexTotalCost, Selectivity *indexSelectivity,
+						   double *indexCorrelation, double *indexPages);
 
 #endif
diff --git a/contrib/btree_gist/btree_utils_num.h b/contrib/btree_gist/btree_utils_num.h
index d7945f856c89..50907b3b5c67 100644
--- a/contrib/btree_gist/btree_utils_num.h
+++ b/contrib/btree_gist/btree_utils_num.h
@@ -110,26 +110,26 @@ do {															\
 extern Interval *abs_interval(Interval *a);
 
 extern bool gbt_num_consistent(const GBT_NUMKEY_R *key, const void *query,
-				   const StrategyNumber *strategy, bool is_leaf,
-				   const gbtree_ninfo *tinfo, FmgrInfo *flinfo);
+							   const StrategyNumber *strategy, bool is_leaf,
+							   const gbtree_ninfo *tinfo, FmgrInfo *flinfo);
 
 extern float8 gbt_num_distance(const GBT_NUMKEY_R *key, const void *query,
-				 bool is_leaf, const gbtree_ninfo *tinfo, FmgrInfo *flinfo);
+							   bool is_leaf, const gbtree_ninfo *tinfo, FmgrInfo *flinfo);
 
 extern GIST_SPLITVEC *gbt_num_picksplit(const GistEntryVector *entryvec, GIST_SPLITVEC *v,
-				  const gbtree_ninfo *tinfo, FmgrInfo *flinfo);
+										const gbtree_ninfo *tinfo, FmgrInfo *flinfo);
 
 extern GISTENTRY *gbt_num_compress(GISTENTRY *entry, const gbtree_ninfo *tinfo);
 
 extern GISTENTRY *gbt_num_fetch(GISTENTRY *entry, const gbtree_ninfo *tinfo);
 
 extern void *gbt_num_union(GBT_NUMKEY *out, const GistEntryVector *entryvec,
-			  const gbtree_ninfo *tinfo, FmgrInfo *flinfo);
+						   const gbtree_ninfo *tinfo, FmgrInfo *flinfo);
 
 extern bool gbt_num_same(const GBT_NUMKEY *a, const GBT_NUMKEY *b,
-			 const gbtree_ninfo *tinfo, FmgrInfo *flinfo);
+						 const gbtree_ninfo *tinfo, FmgrInfo *flinfo);
 
 extern void gbt_num_bin_union(Datum *u, GBT_NUMKEY *e,
-				  const gbtree_ninfo *tinfo, FmgrInfo *flinfo);
+							  const gbtree_ninfo *tinfo, FmgrInfo *flinfo);
 
 #endif
diff --git a/contrib/btree_gist/btree_utils_var.h b/contrib/btree_gist/btree_utils_var.h
index 15d847c13945..1f2ca43e6bc0 100644
--- a/contrib/btree_gist/btree_utils_var.h
+++ b/contrib/btree_gist/btree_utils_var.h
@@ -52,22 +52,22 @@ extern GBT_VARKEY *gbt_var_key_copy(const GBT_VARKEY_R *u);
 extern GISTENTRY *gbt_var_compress(GISTENTRY *entry, const gbtree_vinfo *tinfo);
 
 extern GBT_VARKEY *gbt_var_union(const GistEntryVector *entryvec, int32 *size,
-			  Oid collation, const gbtree_vinfo *tinfo, FmgrInfo *flinfo);
+								 Oid collation, const gbtree_vinfo *tinfo, FmgrInfo *flinfo);
 
 extern bool gbt_var_same(Datum d1, Datum d2, Oid collation,
-			 const gbtree_vinfo *tinfo, FmgrInfo *flinfo);
+						 const gbtree_vinfo *tinfo, FmgrInfo *flinfo);
 
 extern float *gbt_var_penalty(float *res, const GISTENTRY *o, const GISTENTRY *n,
-				Oid collation, const gbtree_vinfo *tinfo, FmgrInfo *flinfo);
+							  Oid collation, const gbtree_vinfo *tinfo, FmgrInfo *flinfo);
 
 extern bool gbt_var_consistent(GBT_VARKEY_R *key, const void *query,
-				   StrategyNumber strategy, Oid collation, bool is_leaf,
-				   const gbtree_vinfo *tinfo, FmgrInfo *flinfo);
+							   StrategyNumber strategy, Oid collation, bool is_leaf,
+							   const gbtree_vinfo *tinfo, FmgrInfo *flinfo);
 
 extern GIST_SPLITVEC *gbt_var_picksplit(const GistEntryVector *entryvec, GIST_SPLITVEC *v,
-				  Oid collation, const gbtree_vinfo *tinfo, FmgrInfo *flinfo);
+										Oid collation, const gbtree_vinfo *tinfo, FmgrInfo *flinfo);
 
 extern void gbt_var_bin_union(Datum *u, GBT_VARKEY *e, Oid collation,
-				  const gbtree_vinfo *tinfo, FmgrInfo *flinfo);
+							  const gbtree_vinfo *tinfo, FmgrInfo *flinfo);
 
 #endif
diff --git a/contrib/dblink/dblink.c b/contrib/dblink/dblink.c
index d35e5ba3d88c..e432457e2d53 100644
--- a/contrib/dblink/dblink.c
+++ b/contrib/dblink/dblink.c
@@ -89,12 +89,12 @@ typedef struct storeInfo
 static Datum dblink_record_internal(FunctionCallInfo fcinfo, bool is_async);
 static void prepTuplestoreResult(FunctionCallInfo fcinfo);
 static void materializeResult(FunctionCallInfo fcinfo, PGconn *conn,
-				  PGresult *res);
+							  PGresult *res);
 static void materializeQueryResult(FunctionCallInfo fcinfo,
-					   PGconn *conn,
-					   const char *conname,
-					   const char *sql,
-					   bool fail);
+								   PGconn *conn,
+								   const char *conname,
+								   const char *sql,
+								   bool fail);
 static PGresult *storeQueryResult(volatile storeInfo *sinfo, PGconn *conn, const char *sql);
 static void storeRow(volatile storeInfo *sinfo, PGresult *res, bool first);
 static remoteConn *getConnectionByName(const char *name);
@@ -114,14 +114,14 @@ static char *generate_relation_name(Relation rel);
 static void dblink_connstr_check(const char *connstr);
 static void dblink_security_check(PGconn *conn, remoteConn *rconn);
 static void dblink_res_error(PGconn *conn, const char *conname, PGresult *res,
-				 bool fail, const char *fmt,...) pg_attribute_printf(5, 6);
+							 bool fail, const char *fmt,...) pg_attribute_printf(5, 6);
 static char *get_connect_string(const char *servername);
 static char *escape_param_str(const char *from);
 static void validate_pkattnums(Relation rel,
-				   int2vector *pkattnums_arg, int32 pknumatts_arg,
-				   int **pkattnums, int *pknumatts);
+							   int2vector *pkattnums_arg, int32 pknumatts_arg,
+							   int **pkattnums, int *pknumatts);
 static bool is_valid_dblink_option(const PQconninfoOption *options,
-					   const char *option, Oid context);
+								   const char *option, Oid context);
 static int	applyRemoteGucs(PGconn *conn);
 static void restoreLocalGucs(int nestlevel);
 
diff --git a/contrib/file_fdw/file_fdw.c b/contrib/file_fdw/file_fdw.c
index 99baa496bd1e..412dcabe55e2 100644
--- a/contrib/file_fdw/file_fdw.c
+++ b/contrib/file_fdw/file_fdw.c
@@ -117,49 +117,49 @@ PG_FUNCTION_INFO_V1(file_fdw_validator);
  * FDW callback routines
  */
 static void fileGetForeignRelSize(PlannerInfo *root,
-					  RelOptInfo *baserel,
-					  Oid foreigntableid);
+								  RelOptInfo *baserel,
+								  Oid foreigntableid);
 static void fileGetForeignPaths(PlannerInfo *root,
-					RelOptInfo *baserel,
-					Oid foreigntableid);
+								RelOptInfo *baserel,
+								Oid foreigntableid);
 static ForeignScan *fileGetForeignPlan(PlannerInfo *root,
-				   RelOptInfo *baserel,
-				   Oid foreigntableid,
-				   ForeignPath *best_path,
-				   List *tlist,
-				   List *scan_clauses,
-				   Plan *outer_plan);
+									   RelOptInfo *baserel,
+									   Oid foreigntableid,
+									   ForeignPath *best_path,
+									   List *tlist,
+									   List *scan_clauses,
+									   Plan *outer_plan);
 static void fileExplainForeignScan(ForeignScanState *node, ExplainState *es);
 static void fileBeginForeignScan(ForeignScanState *node, int eflags);
 static TupleTableSlot *fileIterateForeignScan(ForeignScanState *node);
 static void fileReScanForeignScan(ForeignScanState *node);
 static void fileEndForeignScan(ForeignScanState *node);
 static bool fileAnalyzeForeignTable(Relation relation,
-						AcquireSampleRowsFunc *func,
-						BlockNumber *totalpages);
+									AcquireSampleRowsFunc *func,
+									BlockNumber *totalpages);
 static bool fileIsForeignScanParallelSafe(PlannerInfo *root, RelOptInfo *rel,
-							  RangeTblEntry *rte);
+										  RangeTblEntry *rte);
 
 /*
  * Helper functions
  */
 static bool is_valid_option(const char *option, Oid context);
 static void fileGetOptions(Oid foreigntableid,
-			   char **filename,
-			   bool *is_program,
-			   List **other_options);
+						   char **filename,
+						   bool *is_program,
+						   List **other_options);
 static List *get_file_fdw_attribute_options(Oid relid);
 static bool check_selective_binary_conversion(RelOptInfo *baserel,
-								  Oid foreigntableid,
-								  List **columns);
+											  Oid foreigntableid,
+											  List **columns);
 static void estimate_size(PlannerInfo *root, RelOptInfo *baserel,
-			  FileFdwPlanState *fdw_private);
+						  FileFdwPlanState *fdw_private);
 static void estimate_costs(PlannerInfo *root, RelOptInfo *baserel,
-			   FileFdwPlanState *fdw_private,
-			   Cost *startup_cost, Cost *total_cost);
-static int file_acquire_sample_rows(Relation onerel, int elevel,
-						 HeapTuple *rows, int targrows,
-						 double *totalrows, double *totaldeadrows);
+						   FileFdwPlanState *fdw_private,
+						   Cost *startup_cost, Cost *total_cost);
+static int	file_acquire_sample_rows(Relation onerel, int elevel,
+									 HeapTuple *rows, int targrows,
+									 double *totalrows, double *totaldeadrows);
 
 
 /*
diff --git a/contrib/intarray/_int_selfuncs.c b/contrib/intarray/_int_selfuncs.c
index 6ebe0ab9a89e..b3e63df72c65 100644
--- a/contrib/intarray/_int_selfuncs.c
+++ b/contrib/intarray/_int_selfuncs.c
@@ -35,7 +35,7 @@ PG_FUNCTION_INFO_V1(_int_matchsel);
 
 
 static Selectivity int_query_opr_selec(ITEM *item, Datum *values, float4 *freqs,
-					int nmncelems, float4 minfreq);
+									   int nmncelems, float4 minfreq);
 static int	compare_val_int4(const void *a, const void *b);
 
 /*
diff --git a/contrib/jsonb_plpython/jsonb_plpython.c b/contrib/jsonb_plpython/jsonb_plpython.c
index 24e7c6559d63..ea8fd5b3e68d 100644
--- a/contrib/jsonb_plpython/jsonb_plpython.c
+++ b/contrib/jsonb_plpython/jsonb_plpython.c
@@ -26,7 +26,7 @@ static PyObject *decimal_constructor;
 
 static PyObject *PLyObject_FromJsonbContainer(JsonbContainer *jsonb);
 static JsonbValue *PLyObject_ToJsonbValue(PyObject *obj,
-					   JsonbParseState **jsonb_state, bool is_elem);
+										  JsonbParseState **jsonb_state, bool is_elem);
 
 #if PY_MAJOR_VERSION >= 3
 typedef PyObject *(*PLyUnicode_FromStringAndSize_t)
diff --git a/contrib/ltree/lquery_op.c b/contrib/ltree/lquery_op.c
index b6d2deb1af4b..62172d5ea148 100644
--- a/contrib/ltree/lquery_op.c
+++ b/contrib/ltree/lquery_op.c
@@ -50,7 +50,7 @@ getlexeme(char *start, char *end, int *len)
 }
 
 bool
-			compare_subnode(ltree_level *t, char *qn, int len, int (*cmpptr) (const char *, const char *, size_t), bool anyend)
+compare_subnode(ltree_level *t, char *qn, int len, int (*cmpptr) (const char *, const char *, size_t), bool anyend)
 {
 	char	   *endt = t->name + t->len;
 	char	   *endq = qn + len;
diff --git a/contrib/ltree/ltree.h b/contrib/ltree/ltree.h
index e4b8c84fa621..366e58004c72 100644
--- a/contrib/ltree/ltree.h
+++ b/contrib/ltree/ltree.h
@@ -155,13 +155,13 @@ Datum		ltree_textadd(PG_FUNCTION_ARGS);
 /* Util function */
 Datum		ltree_in(PG_FUNCTION_ARGS);
 
-bool ltree_execute(ITEM *curitem, void *checkval,
-			  bool calcnot, bool (*chkcond) (void *checkval, ITEM *val));
+bool		ltree_execute(ITEM *curitem, void *checkval,
+						  bool calcnot, bool (*chkcond) (void *checkval, ITEM *val));
 
 int			ltree_compare(const ltree *a, const ltree *b);
 bool		inner_isparent(const ltree *c, const ltree *p);
-bool compare_subnode(ltree_level *t, char *q, int len,
-				int (*cmpptr) (const char *, const char *, size_t), bool anyend);
+bool		compare_subnode(ltree_level *t, char *q, int len,
+							int (*cmpptr) (const char *, const char *, size_t), bool anyend);
 ltree	   *lca_inner(ltree **a, int len);
 int			ltree_strncasecmp(const char *a, const char *b, size_t s);
 
diff --git a/contrib/pageinspect/brinfuncs.c b/contrib/pageinspect/brinfuncs.c
index f93690f3a82c..04140eccb840 100644
--- a/contrib/pageinspect/brinfuncs.c
+++ b/contrib/pageinspect/brinfuncs.c
@@ -41,7 +41,7 @@ typedef struct brin_column_state
 
 
 static Page verify_brin_page(bytea *raw_page, uint16 type,
-				 const char *strtype);
+							 const char *strtype);
 
 Datum
 brin_page_type(PG_FUNCTION_ARGS)
diff --git a/contrib/pageinspect/rawpage.c b/contrib/pageinspect/rawpage.c
index 03d6670d1fa6..f08f62f72da4 100644
--- a/contrib/pageinspect/rawpage.c
+++ b/contrib/pageinspect/rawpage.c
@@ -33,7 +33,7 @@
 PG_MODULE_MAGIC;
 
 static bytea *get_raw_page_internal(text *relname, ForkNumber forknum,
-					  BlockNumber blkno);
+									BlockNumber blkno);
 
 
 /*
diff --git a/contrib/pg_stat_statements/pg_stat_statements.c b/contrib/pg_stat_statements/pg_stat_statements.c
index 64df24039692..26610b34b61a 100644
--- a/contrib/pg_stat_statements/pg_stat_statements.c
+++ b/contrib/pg_stat_statements/pg_stat_statements.c
@@ -300,45 +300,45 @@ static void pgss_shmem_shutdown(int code, Datum arg);
 static void pgss_post_parse_analyze(ParseState *pstate, Query *query);
 static void pgss_ExecutorStart(QueryDesc *queryDesc, int eflags);
 static void pgss_ExecutorRun(QueryDesc *queryDesc,
-				 ScanDirection direction,
-				 uint64 count, bool execute_once);
+							 ScanDirection direction,
+							 uint64 count, bool execute_once);
 static void pgss_ExecutorFinish(QueryDesc *queryDesc);
 static void pgss_ExecutorEnd(QueryDesc *queryDesc);
 static void pgss_ProcessUtility(PlannedStmt *pstmt, const char *queryString,
-					ProcessUtilityContext context, ParamListInfo params,
-					QueryEnvironment *queryEnv,
-					DestReceiver *dest, char *completionTag);
+								ProcessUtilityContext context, ParamListInfo params,
+								QueryEnvironment *queryEnv,
+								DestReceiver *dest, char *completionTag);
 static uint64 pgss_hash_string(const char *str, int len);
 static void pgss_store(const char *query, uint64 queryId,
-		   int query_location, int query_len,
-		   double total_time, uint64 rows,
-		   const BufferUsage *bufusage,
-		   pgssJumbleState *jstate);
+					   int query_location, int query_len,
+					   double total_time, uint64 rows,
+					   const BufferUsage *bufusage,
+					   pgssJumbleState *jstate);
 static void pg_stat_statements_internal(FunctionCallInfo fcinfo,
-							pgssVersion api_version,
-							bool showtext);
+										pgssVersion api_version,
+										bool showtext);
 static Size pgss_memsize(void);
 static pgssEntry *entry_alloc(pgssHashKey *key, Size query_offset, int query_len,
-			int encoding, bool sticky);
+							  int encoding, bool sticky);
 static void entry_dealloc(void);
 static bool qtext_store(const char *query, int query_len,
-			Size *query_offset, int *gc_count);
+						Size *query_offset, int *gc_count);
 static char *qtext_load_file(Size *buffer_size);
 static char *qtext_fetch(Size query_offset, int query_len,
-			char *buffer, Size buffer_size);
+						 char *buffer, Size buffer_size);
 static bool need_gc_qtexts(void);
 static void gc_qtexts(void);
 static void entry_reset(Oid userid, Oid dbid, uint64 queryid);
 static void AppendJumble(pgssJumbleState *jstate,
-			 const unsigned char *item, Size size);
+						 const unsigned char *item, Size size);
 static void JumbleQuery(pgssJumbleState *jstate, Query *query);
 static void JumbleRangeTable(pgssJumbleState *jstate, List *rtable);
 static void JumbleExpr(pgssJumbleState *jstate, Node *node);
 static void RecordConstLocation(pgssJumbleState *jstate, int location);
 static char *generate_normalized_query(pgssJumbleState *jstate, const char *query,
-						  int query_loc, int *query_len_p, int encoding);
+									   int query_loc, int *query_len_p, int encoding);
 static void fill_in_constant_lengths(pgssJumbleState *jstate, const char *query,
-						 int query_loc);
+									 int query_loc);
 static int	comp_location(const void *a, const void *b);
 
 
diff --git a/contrib/pg_trgm/trgm.h b/contrib/pg_trgm/trgm.h
index f0ab50dd05ca..0fd600d58104 100644
--- a/contrib/pg_trgm/trgm.h
+++ b/contrib/pg_trgm/trgm.h
@@ -134,7 +134,7 @@ extern float4 cnt_sml(TRGM *trg1, TRGM *trg2, bool inexact);
 extern bool trgm_contained_by(TRGM *trg1, TRGM *trg2);
 extern bool *trgm_presence_map(TRGM *query, TRGM *key);
 extern TRGM *createTrgmNFA(text *text_re, Oid collation,
-			  TrgmPackedGraph **graph, MemoryContext rcontext);
+						   TrgmPackedGraph **graph, MemoryContext rcontext);
 extern bool trigramsMatchGraph(TrgmPackedGraph *graph, bool *check);
 
 #endif							/* __TRGM_H__ */
diff --git a/contrib/pg_trgm/trgm_regexp.c b/contrib/pg_trgm/trgm_regexp.c
index 50e413506c08..d6420a5f87a7 100644
--- a/contrib/pg_trgm/trgm_regexp.c
+++ b/contrib/pg_trgm/trgm_regexp.c
@@ -478,9 +478,9 @@ typedef struct
 
 /* prototypes for private functions */
 static TRGM *createTrgmNFAInternal(regex_t *regex, TrgmPackedGraph **graph,
-					  MemoryContext rcontext);
+								   MemoryContext rcontext);
 static void RE_compile(regex_t *regex, text *text_re,
-		   int cflags, Oid collation);
+					   int cflags, Oid collation);
 static void getColorInfo(regex_t *regex, TrgmNFA *trgmNFA);
 static bool convertPgWchar(pg_wchar c, trgm_mb_char *result);
 static void transformGraph(TrgmNFA *trgmNFA);
@@ -489,7 +489,7 @@ static void addKey(TrgmNFA *trgmNFA, TrgmState *state, TrgmStateKey *key);
 static void addKeyToQueue(TrgmNFA *trgmNFA, TrgmStateKey *key);
 static void addArcs(TrgmNFA *trgmNFA, TrgmState *state);
 static void addArc(TrgmNFA *trgmNFA, TrgmState *state, TrgmStateKey *key,
-	   TrgmColor co, TrgmStateKey *destKey);
+				   TrgmColor co, TrgmStateKey *destKey);
 static bool validArcLabel(TrgmStateKey *key, TrgmColor co);
 static TrgmState *getState(TrgmNFA *trgmNFA, TrgmStateKey *key);
 static bool prefixContains(TrgmPrefix *prefix1, TrgmPrefix *prefix2);
diff --git a/contrib/pg_visibility/pg_visibility.c b/contrib/pg_visibility/pg_visibility.c
index 3282742b807b..1372bb638fd0 100644
--- a/contrib/pg_visibility/pg_visibility.c
+++ b/contrib/pg_visibility/pg_visibility.c
@@ -51,10 +51,10 @@ PG_FUNCTION_INFO_V1(pg_truncate_visibility_map);
 static TupleDesc pg_visibility_tupdesc(bool include_blkno, bool include_pd);
 static vbits *collect_visibility_data(Oid relid, bool include_pd);
 static corrupt_items *collect_corrupt_items(Oid relid, bool all_visible,
-					  bool all_frozen);
+											bool all_frozen);
 static void record_corrupt_item(corrupt_items *items, ItemPointer tid);
 static bool tuple_all_visible(HeapTuple tup, TransactionId OldestXmin,
-				  Buffer buffer);
+							  Buffer buffer);
 static void check_relation_relkind(Relation rel);
 
 /*
diff --git a/contrib/pgcrypto/imath.c b/contrib/pgcrypto/imath.c
index 62e68b00e7c3..6936d2cdcaf0 100644
--- a/contrib/pgcrypto/imath.c
+++ b/contrib/pgcrypto/imath.c
@@ -335,19 +335,19 @@ static int	s_uvcmp(mp_int a, mp_usmall uv);
 /* Unsigned magnitude addition; assumes dc is big enough.
    Carry out is returned (no memory allocated). */
 static mp_digit s_uadd(mp_digit *da, mp_digit *db, mp_digit *dc, mp_size size_a,
-	   mp_size size_b);
+					   mp_size size_b);
 
 /* Unsigned magnitude subtraction.  Assumes dc is big enough. */
 static void s_usub(mp_digit *da, mp_digit *db, mp_digit *dc, mp_size size_a,
-	   mp_size size_b);
+				   mp_size size_b);
 
 /* Unsigned recursive multiplication.  Assumes dc is big enough. */
-static int s_kmul(mp_digit *da, mp_digit *db, mp_digit *dc, mp_size size_a,
-	   mp_size size_b);
+static int	s_kmul(mp_digit *da, mp_digit *db, mp_digit *dc, mp_size size_a,
+				   mp_size size_b);
 
 /* Unsigned magnitude multiplication.  Assumes dc is big enough. */
 static void s_umul(mp_digit *da, mp_digit *db, mp_digit *dc, mp_size size_a,
-	   mp_size size_b);
+				   mp_size size_b);
 
 /* Unsigned recursive squaring.  Assumes dc is big enough. */
 static int	s_ksqr(mp_digit *da, mp_digit *dc, mp_size size_a);
diff --git a/contrib/pgcrypto/mbuf.h b/contrib/pgcrypto/mbuf.h
index 50a989f059d9..e6d754e8695c 100644
--- a/contrib/pgcrypto/mbuf.h
+++ b/contrib/pgcrypto/mbuf.h
@@ -90,8 +90,8 @@ int			mbuf_free(MBuf *mbuf);
 /*
  * Push filter
  */
-int pushf_create(PushFilter **res, const PushFilterOps *ops, void *init_arg,
-			 PushFilter *next);
+int			pushf_create(PushFilter **res, const PushFilterOps *ops, void *init_arg,
+						 PushFilter *next);
 int			pushf_write(PushFilter *mp, const uint8 *data, int len);
 void		pushf_free_all(PushFilter *mp);
 void		pushf_free(PushFilter *mp);
@@ -102,11 +102,11 @@ int			pushf_create_mbuf_writer(PushFilter **mp_p, MBuf *mbuf);
 /*
  * Pull filter
  */
-int pullf_create(PullFilter **res, const PullFilterOps *ops,
-			 void *init_arg, PullFilter *src);
+int			pullf_create(PullFilter **res, const PullFilterOps *ops,
+						 void *init_arg, PullFilter *src);
 int			pullf_read(PullFilter *mp, int len, uint8 **data_p);
-int pullf_read_max(PullFilter *mp, int len,
-			   uint8 **data_p, uint8 *tmpbuf);
+int			pullf_read_max(PullFilter *mp, int len,
+						   uint8 **data_p, uint8 *tmpbuf);
 void		pullf_free(PullFilter *mp);
 int			pullf_read_fixed(PullFilter *src, int len, uint8 *dst);
 
diff --git a/contrib/pgcrypto/pgp-decrypt.c b/contrib/pgcrypto/pgp-decrypt.c
index 96c344c30b78..7d8951cda416 100644
--- a/contrib/pgcrypto/pgp-decrypt.c
+++ b/contrib/pgcrypto/pgp-decrypt.c
@@ -811,8 +811,8 @@ parse_literal_data(PGP_Context *ctx, MBuf *dst, PullFilter *pkt)
 }
 
 /* process_data_packets and parse_compressed_data call each other */
-static int process_data_packets(PGP_Context *ctx, MBuf *dst,
-					 PullFilter *src, int allow_compr, int need_mdc);
+static int	process_data_packets(PGP_Context *ctx, MBuf *dst,
+								 PullFilter *src, int allow_compr, int need_mdc);
 
 static int
 parse_compressed_data(PGP_Context *ctx, MBuf *dst, PullFilter *pkt)
diff --git a/contrib/pgcrypto/pgp.h b/contrib/pgcrypto/pgp.h
index 1b6ea4c9eaf8..7c97fa398fa7 100644
--- a/contrib/pgcrypto/pgp.h
+++ b/contrib/pgcrypto/pgp.h
@@ -261,8 +261,8 @@ int			pgp_set_unicode_mode(PGP_Context *ctx, int mode);
 int			pgp_get_unicode_mode(PGP_Context *ctx);
 
 int			pgp_set_symkey(PGP_Context *ctx, const uint8 *key, int klen);
-int pgp_set_pubkey(PGP_Context *ctx, MBuf *keypkt,
-			   const uint8 *key, int klen, int pubtype);
+int			pgp_set_pubkey(PGP_Context *ctx, MBuf *keypkt,
+						   const uint8 *key, int klen, int pubtype);
 
 int			pgp_get_keyid(MBuf *pgp_data, char *dst);
 
@@ -278,17 +278,17 @@ int			pgp_s2k_read(PullFilter *src, PGP_S2K *s2k);
 int			pgp_s2k_process(PGP_S2K *s2k, int cipher, const uint8 *key, int klen);
 
 typedef struct PGP_CFB PGP_CFB;
-int pgp_cfb_create(PGP_CFB **ctx_p, int algo,
-			   const uint8 *key, int key_len, int recync, uint8 *iv);
+int			pgp_cfb_create(PGP_CFB **ctx_p, int algo,
+						   const uint8 *key, int key_len, int recync, uint8 *iv);
 void		pgp_cfb_free(PGP_CFB *ctx);
 int			pgp_cfb_encrypt(PGP_CFB *ctx, const uint8 *data, int len, uint8 *dst);
 int			pgp_cfb_decrypt(PGP_CFB *ctx, const uint8 *data, int len, uint8 *dst);
 
-void pgp_armor_encode(const uint8 *src, unsigned len, StringInfo dst,
-				 int num_headers, char **keys, char **values);
+void		pgp_armor_encode(const uint8 *src, unsigned len, StringInfo dst,
+							 int num_headers, char **keys, char **values);
 int			pgp_armor_decode(const uint8 *src, int len, StringInfo dst);
-int pgp_extract_armor_headers(const uint8 *src, unsigned len,
-						  int *nheaders, char ***keys, char ***values);
+int			pgp_extract_armor_headers(const uint8 *src, unsigned len,
+									  int *nheaders, char ***keys, char ***values);
 
 int			pgp_compress_filter(PushFilter **res, PGP_Context *ctx, PushFilter *dst);
 int			pgp_decompress_filter(PullFilter **res, PGP_Context *ctx, PullFilter *src);
@@ -298,10 +298,10 @@ void		pgp_key_free(PGP_PubKey *pk);
 int			_pgp_read_public_key(PullFilter *pkt, PGP_PubKey **pk_p);
 
 int			pgp_parse_pubenc_sesskey(PGP_Context *ctx, PullFilter *pkt);
-int pgp_create_pkt_reader(PullFilter **pf_p, PullFilter *src, int len,
-					  int pkttype, PGP_Context *ctx);
-int pgp_parse_pkt_hdr(PullFilter *src, uint8 *tag, int *len_p,
-				  int allow_ctx);
+int			pgp_create_pkt_reader(PullFilter **pf_p, PullFilter *src, int len,
+								  int pkttype, PGP_Context *ctx);
+int			pgp_parse_pkt_hdr(PullFilter *src, uint8 *tag, int *len_p,
+							  int allow_ctx);
 
 int			pgp_skip_packet(PullFilter *pkt);
 int			pgp_expect_packet_end(PullFilter *pkt);
@@ -317,10 +317,10 @@ int			pgp_mpi_write(PushFilter *dst, PGP_MPI *n);
 int			pgp_mpi_hash(PX_MD *md, PGP_MPI *n);
 unsigned	pgp_mpi_cksum(unsigned cksum, PGP_MPI *n);
 
-int pgp_elgamal_encrypt(PGP_PubKey *pk, PGP_MPI *m,
-					PGP_MPI **c1, PGP_MPI **c2);
-int pgp_elgamal_decrypt(PGP_PubKey *pk, PGP_MPI *c1, PGP_MPI *c2,
-					PGP_MPI **m);
+int			pgp_elgamal_encrypt(PGP_PubKey *pk, PGP_MPI *m,
+								PGP_MPI **c1, PGP_MPI **c2);
+int			pgp_elgamal_decrypt(PGP_PubKey *pk, PGP_MPI *c1, PGP_MPI *c2,
+								PGP_MPI **m);
 int			pgp_rsa_encrypt(PGP_PubKey *pk, PGP_MPI *m, PGP_MPI **c);
 int			pgp_rsa_decrypt(PGP_PubKey *pk, PGP_MPI *c, PGP_MPI **m);
 
diff --git a/contrib/pgcrypto/px-crypt.h b/contrib/pgcrypto/px-crypt.h
index 696902a17c3c..08001a81f5e5 100644
--- a/contrib/pgcrypto/px-crypt.h
+++ b/contrib/pgcrypto/px-crypt.h
@@ -56,27 +56,27 @@ int			px_gen_salt(const char *salt_type, char *dst, int rounds);
  */
 
 /* crypt-gensalt.c */
-char *_crypt_gensalt_traditional_rn(unsigned long count,
-							  const char *input, int size, char *output, int output_size);
-char *_crypt_gensalt_extended_rn(unsigned long count,
-						   const char *input, int size, char *output, int output_size);
-char *_crypt_gensalt_md5_rn(unsigned long count,
-					  const char *input, int size, char *output, int output_size);
-char *_crypt_gensalt_blowfish_rn(unsigned long count,
-						   const char *input, int size, char *output, int output_size);
+char	   *_crypt_gensalt_traditional_rn(unsigned long count,
+										  const char *input, int size, char *output, int output_size);
+char	   *_crypt_gensalt_extended_rn(unsigned long count,
+									   const char *input, int size, char *output, int output_size);
+char	   *_crypt_gensalt_md5_rn(unsigned long count,
+								  const char *input, int size, char *output, int output_size);
+char	   *_crypt_gensalt_blowfish_rn(unsigned long count,
+									   const char *input, int size, char *output, int output_size);
 
 /* disable 'extended DES crypt' */
 /* #define DISABLE_XDES */
 
 /* crypt-blowfish.c */
-char *_crypt_blowfish_rn(const char *key, const char *setting,
-				   char *output, int size);
+char	   *_crypt_blowfish_rn(const char *key, const char *setting,
+							   char *output, int size);
 
 /* crypt-des.c */
 char	   *px_crypt_des(const char *key, const char *setting);
 
 /* crypt-md5.c */
-char *px_crypt_md5(const char *pw, const char *salt,
-			 char *dst, unsigned dstlen);
+char	   *px_crypt_md5(const char *pw, const char *salt,
+						 char *dst, unsigned dstlen);
 
 #endif							/* _PX_CRYPT_H */
diff --git a/contrib/pgstattuple/pgstattuple.c b/contrib/pgstattuple/pgstattuple.c
index e1df60bb3535..70af43ebd5a6 100644
--- a/contrib/pgstattuple/pgstattuple.c
+++ b/contrib/pgstattuple/pgstattuple.c
@@ -66,22 +66,22 @@ typedef void (*pgstat_page) (pgstattuple_type *, Relation, BlockNumber,
 							 BufferAccessStrategy);
 
 static Datum build_pgstattuple_type(pgstattuple_type *stat,
-					   FunctionCallInfo fcinfo);
+									FunctionCallInfo fcinfo);
 static Datum pgstat_relation(Relation rel, FunctionCallInfo fcinfo);
 static Datum pgstat_heap(Relation rel, FunctionCallInfo fcinfo);
 static void pgstat_btree_page(pgstattuple_type *stat,
-				  Relation rel, BlockNumber blkno,
-				  BufferAccessStrategy bstrategy);
+							  Relation rel, BlockNumber blkno,
+							  BufferAccessStrategy bstrategy);
 static void pgstat_hash_page(pgstattuple_type *stat,
-				 Relation rel, BlockNumber blkno,
-				 BufferAccessStrategy bstrategy);
+							 Relation rel, BlockNumber blkno,
+							 BufferAccessStrategy bstrategy);
 static void pgstat_gist_page(pgstattuple_type *stat,
-				 Relation rel, BlockNumber blkno,
-				 BufferAccessStrategy bstrategy);
+							 Relation rel, BlockNumber blkno,
+							 BufferAccessStrategy bstrategy);
 static Datum pgstat_index(Relation rel, BlockNumber start,
-			 pgstat_page pagefn, FunctionCallInfo fcinfo);
+						  pgstat_page pagefn, FunctionCallInfo fcinfo);
 static void pgstat_index_page(pgstattuple_type *stat, Page page,
-				  OffsetNumber minoff, OffsetNumber maxoff);
+							  OffsetNumber minoff, OffsetNumber maxoff);
 
 /*
  * build_pgstattuple_type -- build a pgstattuple_type tuple
diff --git a/contrib/postgres_fdw/connection.c b/contrib/postgres_fdw/connection.c
index 239d220c249b..5dfdadcc2fc6 100644
--- a/contrib/postgres_fdw/connection.c
+++ b/contrib/postgres_fdw/connection.c
@@ -81,16 +81,16 @@ static void do_sql_command(PGconn *conn, const char *sql);
 static void begin_remote_xact(ConnCacheEntry *entry);
 static void pgfdw_xact_callback(XactEvent event, void *arg);
 static void pgfdw_subxact_callback(SubXactEvent event,
-					   SubTransactionId mySubid,
-					   SubTransactionId parentSubid,
-					   void *arg);
+								   SubTransactionId mySubid,
+								   SubTransactionId parentSubid,
+								   void *arg);
 static void pgfdw_inval_callback(Datum arg, int cacheid, uint32 hashvalue);
 static void pgfdw_reject_incomplete_xact_state_change(ConnCacheEntry *entry);
 static bool pgfdw_cancel_query(PGconn *conn);
 static bool pgfdw_exec_cleanup_query(PGconn *conn, const char *query,
-						 bool ignore_errors);
+									 bool ignore_errors);
 static bool pgfdw_get_cleanup_result(PGconn *conn, TimestampTz endtime,
-						 PGresult **result);
+									 PGresult **result);
 
 
 /*
diff --git a/contrib/postgres_fdw/deparse.c b/contrib/postgres_fdw/deparse.c
index c4e331166f9b..6da4c834bf8c 100644
--- a/contrib/postgres_fdw/deparse.c
+++ b/contrib/postgres_fdw/deparse.c
@@ -116,34 +116,34 @@ typedef struct deparse_expr_cxt
  * remote server.
  */
 static bool foreign_expr_walker(Node *node,
-					foreign_glob_cxt *glob_cxt,
-					foreign_loc_cxt *outer_cxt);
+								foreign_glob_cxt *glob_cxt,
+								foreign_loc_cxt *outer_cxt);
 static char *deparse_type_name(Oid type_oid, int32 typemod);
 
 /*
  * Functions to construct string representation of a node tree.
  */
 static void deparseTargetList(StringInfo buf,
-				  RangeTblEntry *rte,
-				  Index rtindex,
-				  Relation rel,
-				  bool is_returning,
-				  Bitmapset *attrs_used,
-				  bool qualify_col,
-				  List **retrieved_attrs);
+							  RangeTblEntry *rte,
+							  Index rtindex,
+							  Relation rel,
+							  bool is_returning,
+							  Bitmapset *attrs_used,
+							  bool qualify_col,
+							  List **retrieved_attrs);
 static void deparseExplicitTargetList(List *tlist,
-						  bool is_returning,
-						  List **retrieved_attrs,
-						  deparse_expr_cxt *context);
+									  bool is_returning,
+									  List **retrieved_attrs,
+									  deparse_expr_cxt *context);
 static void deparseSubqueryTargetList(deparse_expr_cxt *context);
 static void deparseReturningList(StringInfo buf, RangeTblEntry *rte,
-					 Index rtindex, Relation rel,
-					 bool trig_after_row,
-					 List *withCheckOptionList,
-					 List *returningList,
-					 List **retrieved_attrs);
+								 Index rtindex, Relation rel,
+								 bool trig_after_row,
+								 List *withCheckOptionList,
+								 List *returningList,
+								 List **retrieved_attrs);
 static void deparseColumnRef(StringInfo buf, int varno, int varattno,
-				 RangeTblEntry *rte, bool qualify_col);
+							 RangeTblEntry *rte, bool qualify_col);
 static void deparseRelation(StringInfo buf, Relation rel);
 static void deparseExpr(Expr *expr, deparse_expr_cxt *context);
 static void deparseVar(Var *node, deparse_expr_cxt *context);
@@ -155,45 +155,45 @@ static void deparseOpExpr(OpExpr *node, deparse_expr_cxt *context);
 static void deparseOperatorName(StringInfo buf, Form_pg_operator opform);
 static void deparseDistinctExpr(DistinctExpr *node, deparse_expr_cxt *context);
 static void deparseScalarArrayOpExpr(ScalarArrayOpExpr *node,
-						 deparse_expr_cxt *context);
+									 deparse_expr_cxt *context);
 static void deparseRelabelType(RelabelType *node, deparse_expr_cxt *context);
 static void deparseBoolExpr(BoolExpr *node, deparse_expr_cxt *context);
 static void deparseNullTest(NullTest *node, deparse_expr_cxt *context);
 static void deparseArrayExpr(ArrayExpr *node, deparse_expr_cxt *context);
 static void printRemoteParam(int paramindex, Oid paramtype, int32 paramtypmod,
-				 deparse_expr_cxt *context);
+							 deparse_expr_cxt *context);
 static void printRemotePlaceholder(Oid paramtype, int32 paramtypmod,
-					   deparse_expr_cxt *context);
+								   deparse_expr_cxt *context);
 static void deparseSelectSql(List *tlist, bool is_subquery, List **retrieved_attrs,
-				 deparse_expr_cxt *context);
+							 deparse_expr_cxt *context);
 static void deparseLockingClause(deparse_expr_cxt *context);
 static void appendOrderByClause(List *pathkeys, bool has_final_sort,
-					deparse_expr_cxt *context);
+								deparse_expr_cxt *context);
 static void appendLimitClause(deparse_expr_cxt *context);
 static void appendConditions(List *exprs, deparse_expr_cxt *context);
 static void deparseFromExprForRel(StringInfo buf, PlannerInfo *root,
-					  RelOptInfo *foreignrel, bool use_alias,
-					  Index ignore_rel, List **ignore_conds,
-					  List **params_list);
+								  RelOptInfo *foreignrel, bool use_alias,
+								  Index ignore_rel, List **ignore_conds,
+								  List **params_list);
 static void deparseFromExpr(List *quals, deparse_expr_cxt *context);
 static void deparseRangeTblRef(StringInfo buf, PlannerInfo *root,
-				   RelOptInfo *foreignrel, bool make_subquery,
-				   Index ignore_rel, List **ignore_conds, List **params_list);
+							   RelOptInfo *foreignrel, bool make_subquery,
+							   Index ignore_rel, List **ignore_conds, List **params_list);
 static void deparseAggref(Aggref *node, deparse_expr_cxt *context);
 static void appendGroupByClause(List *tlist, deparse_expr_cxt *context);
 static void appendAggOrderBy(List *orderList, List *targetList,
-				 deparse_expr_cxt *context);
+							 deparse_expr_cxt *context);
 static void appendFunctionName(Oid funcid, deparse_expr_cxt *context);
 static Node *deparseSortGroupClause(Index ref, List *tlist, bool force_colno,
-					   deparse_expr_cxt *context);
+									deparse_expr_cxt *context);
 
 /*
  * Helper functions
  */
 static bool is_subquery_var(Var *node, RelOptInfo *foreignrel,
-				int *relno, int *colno);
+							int *relno, int *colno);
 static void get_relation_column_alias_ids(Var *node, RelOptInfo *foreignrel,
-							  int *relno, int *colno);
+										  int *relno, int *colno);
 
 
 /*
diff --git a/contrib/postgres_fdw/postgres_fdw.c b/contrib/postgres_fdw/postgres_fdw.c
index 04dcd40f2e7d..02c81ce7a958 100644
--- a/contrib/postgres_fdw/postgres_fdw.c
+++ b/contrib/postgres_fdw/postgres_fdw.c
@@ -309,199 +309,199 @@ PG_FUNCTION_INFO_V1(postgres_fdw_handler);
  * FDW callback routines
  */
 static void postgresGetForeignRelSize(PlannerInfo *root,
-						  RelOptInfo *baserel,
-						  Oid foreigntableid);
+									  RelOptInfo *baserel,
+									  Oid foreigntableid);
 static void postgresGetForeignPaths(PlannerInfo *root,
-						RelOptInfo *baserel,
-						Oid foreigntableid);
+									RelOptInfo *baserel,
+									Oid foreigntableid);
 static ForeignScan *postgresGetForeignPlan(PlannerInfo *root,
-					   RelOptInfo *foreignrel,
-					   Oid foreigntableid,
-					   ForeignPath *best_path,
-					   List *tlist,
-					   List *scan_clauses,
-					   Plan *outer_plan);
+										   RelOptInfo *foreignrel,
+										   Oid foreigntableid,
+										   ForeignPath *best_path,
+										   List *tlist,
+										   List *scan_clauses,
+										   Plan *outer_plan);
 static void postgresBeginForeignScan(ForeignScanState *node, int eflags);
 static TupleTableSlot *postgresIterateForeignScan(ForeignScanState *node);
 static void postgresReScanForeignScan(ForeignScanState *node);
 static void postgresEndForeignScan(ForeignScanState *node);
 static void postgresAddForeignUpdateTargets(Query *parsetree,
-								RangeTblEntry *target_rte,
-								Relation target_relation);
+											RangeTblEntry *target_rte,
+											Relation target_relation);
 static List *postgresPlanForeignModify(PlannerInfo *root,
-						  ModifyTable *plan,
-						  Index resultRelation,
-						  int subplan_index);
+									   ModifyTable *plan,
+									   Index resultRelation,
+									   int subplan_index);
 static void postgresBeginForeignModify(ModifyTableState *mtstate,
-						   ResultRelInfo *resultRelInfo,
-						   List *fdw_private,
-						   int subplan_index,
-						   int eflags);
+									   ResultRelInfo *resultRelInfo,
+									   List *fdw_private,
+									   int subplan_index,
+									   int eflags);
 static TupleTableSlot *postgresExecForeignInsert(EState *estate,
-						  ResultRelInfo *resultRelInfo,
-						  TupleTableSlot *slot,
-						  TupleTableSlot *planSlot);
+												 ResultRelInfo *resultRelInfo,
+												 TupleTableSlot *slot,
+												 TupleTableSlot *planSlot);
 static TupleTableSlot *postgresExecForeignUpdate(EState *estate,
-						  ResultRelInfo *resultRelInfo,
-						  TupleTableSlot *slot,
-						  TupleTableSlot *planSlot);
+												 ResultRelInfo *resultRelInfo,
+												 TupleTableSlot *slot,
+												 TupleTableSlot *planSlot);
 static TupleTableSlot *postgresExecForeignDelete(EState *estate,
-						  ResultRelInfo *resultRelInfo,
-						  TupleTableSlot *slot,
-						  TupleTableSlot *planSlot);
+												 ResultRelInfo *resultRelInfo,
+												 TupleTableSlot *slot,
+												 TupleTableSlot *planSlot);
 static void postgresEndForeignModify(EState *estate,
-						 ResultRelInfo *resultRelInfo);
+									 ResultRelInfo *resultRelInfo);
 static void postgresBeginForeignInsert(ModifyTableState *mtstate,
-						   ResultRelInfo *resultRelInfo);
+									   ResultRelInfo *resultRelInfo);
 static void postgresEndForeignInsert(EState *estate,
-						 ResultRelInfo *resultRelInfo);
+									 ResultRelInfo *resultRelInfo);
 static int	postgresIsForeignRelUpdatable(Relation rel);
 static bool postgresPlanDirectModify(PlannerInfo *root,
-						 ModifyTable *plan,
-						 Index resultRelation,
-						 int subplan_index);
+									 ModifyTable *plan,
+									 Index resultRelation,
+									 int subplan_index);
 static void postgresBeginDirectModify(ForeignScanState *node, int eflags);
 static TupleTableSlot *postgresIterateDirectModify(ForeignScanState *node);
 static void postgresEndDirectModify(ForeignScanState *node);
 static void postgresExplainForeignScan(ForeignScanState *node,
-						   ExplainState *es);
+									   ExplainState *es);
 static void postgresExplainForeignModify(ModifyTableState *mtstate,
-							 ResultRelInfo *rinfo,
-							 List *fdw_private,
-							 int subplan_index,
-							 ExplainState *es);
+										 ResultRelInfo *rinfo,
+										 List *fdw_private,
+										 int subplan_index,
+										 ExplainState *es);
 static void postgresExplainDirectModify(ForeignScanState *node,
-							ExplainState *es);
+										ExplainState *es);
 static bool postgresAnalyzeForeignTable(Relation relation,
-							AcquireSampleRowsFunc *func,
-							BlockNumber *totalpages);
+										AcquireSampleRowsFunc *func,
+										BlockNumber *totalpages);
 static List *postgresImportForeignSchema(ImportForeignSchemaStmt *stmt,
-							Oid serverOid);
+										 Oid serverOid);
 static void postgresGetForeignJoinPaths(PlannerInfo *root,
-							RelOptInfo *joinrel,
-							RelOptInfo *outerrel,
-							RelOptInfo *innerrel,
-							JoinType jointype,
-							JoinPathExtraData *extra);
+										RelOptInfo *joinrel,
+										RelOptInfo *outerrel,
+										RelOptInfo *innerrel,
+										JoinType jointype,
+										JoinPathExtraData *extra);
 static bool postgresRecheckForeignScan(ForeignScanState *node,
-						   TupleTableSlot *slot);
+									   TupleTableSlot *slot);
 static void postgresGetForeignUpperPaths(PlannerInfo *root,
-							 UpperRelationKind stage,
-							 RelOptInfo *input_rel,
-							 RelOptInfo *output_rel,
-							 void *extra);
+										 UpperRelationKind stage,
+										 RelOptInfo *input_rel,
+										 RelOptInfo *output_rel,
+										 void *extra);
 
 /*
  * Helper functions
  */
 static void estimate_path_cost_size(PlannerInfo *root,
-						RelOptInfo *foreignrel,
-						List *param_join_conds,
-						List *pathkeys,
-						PgFdwPathExtraData *fpextra,
-						double *p_rows, int *p_width,
-						Cost *p_startup_cost, Cost *p_total_cost);
+									RelOptInfo *foreignrel,
+									List *param_join_conds,
+									List *pathkeys,
+									PgFdwPathExtraData *fpextra,
+									double *p_rows, int *p_width,
+									Cost *p_startup_cost, Cost *p_total_cost);
 static void get_remote_estimate(const char *sql,
-					PGconn *conn,
-					double *rows,
-					int *width,
-					Cost *startup_cost,
-					Cost *total_cost);
+								PGconn *conn,
+								double *rows,
+								int *width,
+								Cost *startup_cost,
+								Cost *total_cost);
 static void adjust_foreign_grouping_path_cost(PlannerInfo *root,
-								  List *pathkeys,
-								  double retrieved_rows,
-								  double width,
-								  double limit_tuples,
-								  Cost *p_startup_cost,
-								  Cost *p_run_cost);
+											  List *pathkeys,
+											  double retrieved_rows,
+											  double width,
+											  double limit_tuples,
+											  Cost *p_startup_cost,
+											  Cost *p_run_cost);
 static bool ec_member_matches_foreign(PlannerInfo *root, RelOptInfo *rel,
-						  EquivalenceClass *ec, EquivalenceMember *em,
-						  void *arg);
+									  EquivalenceClass *ec, EquivalenceMember *em,
+									  void *arg);
 static void create_cursor(ForeignScanState *node);
 static void fetch_more_data(ForeignScanState *node);
 static void close_cursor(PGconn *conn, unsigned int cursor_number);
 static PgFdwModifyState *create_foreign_modify(EState *estate,
-					  RangeTblEntry *rte,
-					  ResultRelInfo *resultRelInfo,
-					  CmdType operation,
-					  Plan *subplan,
-					  char *query,
-					  List *target_attrs,
-					  bool has_returning,
-					  List *retrieved_attrs);
+											   RangeTblEntry *rte,
+											   ResultRelInfo *resultRelInfo,
+											   CmdType operation,
+											   Plan *subplan,
+											   char *query,
+											   List *target_attrs,
+											   bool has_returning,
+											   List *retrieved_attrs);
 static TupleTableSlot *execute_foreign_modify(EState *estate,
-					   ResultRelInfo *resultRelInfo,
-					   CmdType operation,
-					   TupleTableSlot *slot,
-					   TupleTableSlot *planSlot);
+											  ResultRelInfo *resultRelInfo,
+											  CmdType operation,
+											  TupleTableSlot *slot,
+											  TupleTableSlot *planSlot);
 static void prepare_foreign_modify(PgFdwModifyState *fmstate);
 static const char **convert_prep_stmt_params(PgFdwModifyState *fmstate,
-						 ItemPointer tupleid,
-						 TupleTableSlot *slot);
+											 ItemPointer tupleid,
+											 TupleTableSlot *slot);
 static void store_returning_result(PgFdwModifyState *fmstate,
-					   TupleTableSlot *slot, PGresult *res);
+								   TupleTableSlot *slot, PGresult *res);
 static void finish_foreign_modify(PgFdwModifyState *fmstate);
 static List *build_remote_returning(Index rtindex, Relation rel,
-					   List *returningList);
+									List *returningList);
 static void rebuild_fdw_scan_tlist(ForeignScan *fscan, List *tlist);
 static void execute_dml_stmt(ForeignScanState *node);
 static TupleTableSlot *get_returning_data(ForeignScanState *node);
 static void init_returning_filter(PgFdwDirectModifyState *dmstate,
-					  List *fdw_scan_tlist,
-					  Index rtindex);
+								  List *fdw_scan_tlist,
+								  Index rtindex);
 static TupleTableSlot *apply_returning_filter(PgFdwDirectModifyState *dmstate,
-					   TupleTableSlot *slot,
-					   EState *estate);
+											  TupleTableSlot *slot,
+											  EState *estate);
 static void prepare_query_params(PlanState *node,
-					 List *fdw_exprs,
-					 int numParams,
-					 FmgrInfo **param_flinfo,
-					 List **param_exprs,
-					 const char ***param_values);
+								 List *fdw_exprs,
+								 int numParams,
+								 FmgrInfo **param_flinfo,
+								 List **param_exprs,
+								 const char ***param_values);
 static void process_query_params(ExprContext *econtext,
-					 FmgrInfo *param_flinfo,
-					 List *param_exprs,
-					 const char **param_values);
-static int postgresAcquireSampleRowsFunc(Relation relation, int elevel,
-							  HeapTuple *rows, int targrows,
-							  double *totalrows,
-							  double *totaldeadrows);
+								 FmgrInfo *param_flinfo,
+								 List *param_exprs,
+								 const char **param_values);
+static int	postgresAcquireSampleRowsFunc(Relation relation, int elevel,
+										  HeapTuple *rows, int targrows,
+										  double *totalrows,
+										  double *totaldeadrows);
 static void analyze_row_processor(PGresult *res, int row,
-					  PgFdwAnalyzeState *astate);
+								  PgFdwAnalyzeState *astate);
 static HeapTuple make_tuple_from_result_row(PGresult *res,
-						   int row,
-						   Relation rel,
-						   AttInMetadata *attinmeta,
-						   List *retrieved_attrs,
-						   ForeignScanState *fsstate,
-						   MemoryContext temp_context);
+											int row,
+											Relation rel,
+											AttInMetadata *attinmeta,
+											List *retrieved_attrs,
+											ForeignScanState *fsstate,
+											MemoryContext temp_context);
 static void conversion_error_callback(void *arg);
 static bool foreign_join_ok(PlannerInfo *root, RelOptInfo *joinrel,
-				JoinType jointype, RelOptInfo *outerrel, RelOptInfo *innerrel,
-				JoinPathExtraData *extra);
+							JoinType jointype, RelOptInfo *outerrel, RelOptInfo *innerrel,
+							JoinPathExtraData *extra);
 static bool foreign_grouping_ok(PlannerInfo *root, RelOptInfo *grouped_rel,
-					Node *havingQual);
+								Node *havingQual);
 static List *get_useful_pathkeys_for_relation(PlannerInfo *root,
-								 RelOptInfo *rel);
+											  RelOptInfo *rel);
 static List *get_useful_ecs_for_relation(PlannerInfo *root, RelOptInfo *rel);
 static void add_paths_with_pathkeys_for_rel(PlannerInfo *root, RelOptInfo *rel,
-								Path *epq_path);
+											Path *epq_path);
 static void add_foreign_grouping_paths(PlannerInfo *root,
-						   RelOptInfo *input_rel,
-						   RelOptInfo *grouped_rel,
-						   GroupPathExtraData *extra);
+									   RelOptInfo *input_rel,
+									   RelOptInfo *grouped_rel,
+									   GroupPathExtraData *extra);
 static void add_foreign_ordered_paths(PlannerInfo *root,
-						  RelOptInfo *input_rel,
-						  RelOptInfo *ordered_rel);
+									  RelOptInfo *input_rel,
+									  RelOptInfo *ordered_rel);
 static void add_foreign_final_paths(PlannerInfo *root,
-						RelOptInfo *input_rel,
-						RelOptInfo *final_rel,
-						FinalPathExtraData *extra);
+									RelOptInfo *input_rel,
+									RelOptInfo *final_rel,
+									FinalPathExtraData *extra);
 static void apply_server_options(PgFdwRelationInfo *fpinfo);
 static void apply_table_options(PgFdwRelationInfo *fpinfo);
 static void merge_fdw_options(PgFdwRelationInfo *fpinfo,
-				  const PgFdwRelationInfo *fpinfo_o,
-				  const PgFdwRelationInfo *fpinfo_i);
+							  const PgFdwRelationInfo *fpinfo_o,
+							  const PgFdwRelationInfo *fpinfo_i);
 
 
 /*
diff --git a/contrib/postgres_fdw/postgres_fdw.h b/contrib/postgres_fdw/postgres_fdw.h
index 3e4603d718e7..30b6502bc05b 100644
--- a/contrib/postgres_fdw/postgres_fdw.h
+++ b/contrib/postgres_fdw/postgres_fdw.h
@@ -128,72 +128,72 @@ extern unsigned int GetPrepStmtNumber(PGconn *conn);
 extern PGresult *pgfdw_get_result(PGconn *conn, const char *query);
 extern PGresult *pgfdw_exec_query(PGconn *conn, const char *query);
 extern void pgfdw_report_error(int elevel, PGresult *res, PGconn *conn,
-				   bool clear, const char *sql);
+							   bool clear, const char *sql);
 
 /* in option.c */
-extern int ExtractConnectionOptions(List *defelems,
-						 const char **keywords,
-						 const char **values);
+extern int	ExtractConnectionOptions(List *defelems,
+									 const char **keywords,
+									 const char **values);
 extern List *ExtractExtensionList(const char *extensionsString,
-					 bool warnOnMissing);
+								  bool warnOnMissing);
 
 /* in deparse.c */
 extern void classifyConditions(PlannerInfo *root,
-				   RelOptInfo *baserel,
-				   List *input_conds,
-				   List **remote_conds,
-				   List **local_conds);
+							   RelOptInfo *baserel,
+							   List *input_conds,
+							   List **remote_conds,
+							   List **local_conds);
 extern bool is_foreign_expr(PlannerInfo *root,
-				RelOptInfo *baserel,
-				Expr *expr);
+							RelOptInfo *baserel,
+							Expr *expr);
 extern bool is_foreign_param(PlannerInfo *root,
-				 RelOptInfo *baserel,
-				 Expr *expr);
+							 RelOptInfo *baserel,
+							 Expr *expr);
 extern void deparseInsertSql(StringInfo buf, RangeTblEntry *rte,
-				 Index rtindex, Relation rel,
-				 List *targetAttrs, bool doNothing,
-				 List *withCheckOptionList, List *returningList,
-				 List **retrieved_attrs);
+							 Index rtindex, Relation rel,
+							 List *targetAttrs, bool doNothing,
+							 List *withCheckOptionList, List *returningList,
+							 List **retrieved_attrs);
 extern void deparseUpdateSql(StringInfo buf, RangeTblEntry *rte,
-				 Index rtindex, Relation rel,
-				 List *targetAttrs,
-				 List *withCheckOptionList, List *returningList,
-				 List **retrieved_attrs);
+							 Index rtindex, Relation rel,
+							 List *targetAttrs,
+							 List *withCheckOptionList, List *returningList,
+							 List **retrieved_attrs);
 extern void deparseDirectUpdateSql(StringInfo buf, PlannerInfo *root,
-					   Index rtindex, Relation rel,
-					   RelOptInfo *foreignrel,
-					   List *targetlist,
-					   List *targetAttrs,
-					   List *remote_conds,
-					   List **params_list,
-					   List *returningList,
-					   List **retrieved_attrs);
+								   Index rtindex, Relation rel,
+								   RelOptInfo *foreignrel,
+								   List *targetlist,
+								   List *targetAttrs,
+								   List *remote_conds,
+								   List **params_list,
+								   List *returningList,
+								   List **retrieved_attrs);
 extern void deparseDeleteSql(StringInfo buf, RangeTblEntry *rte,
-				 Index rtindex, Relation rel,
-				 List *returningList,
-				 List **retrieved_attrs);
+							 Index rtindex, Relation rel,
+							 List *returningList,
+							 List **retrieved_attrs);
 extern void deparseDirectDeleteSql(StringInfo buf, PlannerInfo *root,
-					   Index rtindex, Relation rel,
-					   RelOptInfo *foreignrel,
-					   List *remote_conds,
-					   List **params_list,
-					   List *returningList,
-					   List **retrieved_attrs);
+								   Index rtindex, Relation rel,
+								   RelOptInfo *foreignrel,
+								   List *remote_conds,
+								   List **params_list,
+								   List *returningList,
+								   List **retrieved_attrs);
 extern void deparseAnalyzeSizeSql(StringInfo buf, Relation rel);
 extern void deparseAnalyzeSql(StringInfo buf, Relation rel,
-				  List **retrieved_attrs);
+							  List **retrieved_attrs);
 extern void deparseStringLiteral(StringInfo buf, const char *val);
 extern Expr *find_em_expr_for_rel(EquivalenceClass *ec, RelOptInfo *rel);
 extern Expr *find_em_expr_for_input_target(PlannerInfo *root,
-							  EquivalenceClass *ec,
-							  PathTarget *target);
+										   EquivalenceClass *ec,
+										   PathTarget *target);
 extern List *build_tlist_to_deparse(RelOptInfo *foreignrel);
 extern void deparseSelectStmtForRel(StringInfo buf, PlannerInfo *root,
-						RelOptInfo *foreignrel, List *tlist,
-						List *remote_conds, List *pathkeys,
-						bool has_final_sort, bool has_limit,
-						bool is_subquery,
-						List **retrieved_attrs, List **params_list);
+									RelOptInfo *foreignrel, List *tlist,
+									List *remote_conds, List *pathkeys,
+									bool has_final_sort, bool has_limit,
+									bool is_subquery,
+									List **retrieved_attrs, List **params_list);
 extern const char *get_jointype_name(JoinType jointype);
 
 /* in shippable.c */
diff --git a/contrib/sepgsql/sepgsql.h b/contrib/sepgsql/sepgsql.h
index a2d48d37c529..7197e3cdf030 100644
--- a/contrib/sepgsql/sepgsql.h
+++ b/contrib/sepgsql/sepgsql.h
@@ -226,43 +226,43 @@ extern int	sepgsql_set_mode(int new_mode);
 extern bool sepgsql_getenforce(void);
 
 extern void sepgsql_audit_log(bool denied,
-				  const char *scontext,
-				  const char *tcontext,
-				  uint16 tclass,
-				  uint32 audited,
-				  const char *audit_name);
+							  const char *scontext,
+							  const char *tcontext,
+							  uint16 tclass,
+							  uint32 audited,
+							  const char *audit_name);
 
 extern void sepgsql_compute_avd(const char *scontext,
-					const char *tcontext,
-					uint16 tclass,
-					struct av_decision *avd);
+								const char *tcontext,
+								uint16 tclass,
+								struct av_decision *avd);
 
 extern char *sepgsql_compute_create(const char *scontext,
-					   const char *tcontext,
-					   uint16 tclass,
-					   const char *objname);
+									const char *tcontext,
+									uint16 tclass,
+									const char *objname);
 
 extern bool sepgsql_check_perms(const char *scontext,
-					const char *tcontext,
-					uint16 tclass,
-					uint32 required,
-					const char *audit_name,
-					bool abort_on_violation);
+								const char *tcontext,
+								uint16 tclass,
+								uint32 required,
+								const char *audit_name,
+								bool abort_on_violation);
 
 /*
  * uavc.c
  */
 #define SEPGSQL_AVC_NOAUDIT			((void *)(-1))
 extern bool sepgsql_avc_check_perms_label(const char *tcontext,
-							  uint16 tclass,
-							  uint32 required,
-							  const char *audit_name,
-							  bool abort_on_violation);
+										  uint16 tclass,
+										  uint32 required,
+										  const char *audit_name,
+										  bool abort_on_violation);
 extern bool sepgsql_avc_check_perms(const ObjectAddress *tobject,
-						uint16 tclass,
-						uint32 required,
-						const char *audit_name,
-						bool abort_on_violation);
+									uint16 tclass,
+									uint32 required,
+									const char *audit_name,
+									bool abort_on_violation);
 extern char *sepgsql_avc_trusted_proc(Oid functionId);
 extern void sepgsql_avc_init(void);
 
@@ -274,7 +274,7 @@ extern void sepgsql_init_client_label(void);
 extern char *sepgsql_get_label(Oid relOid, Oid objOid, int32 subId);
 
 extern void sepgsql_object_relabel(const ObjectAddress *object,
-					   const char *seclabel);
+								   const char *seclabel);
 
 /*
  * dml.c
@@ -285,7 +285,7 @@ extern bool sepgsql_dml_privileges(List *rangeTabls, bool abort_on_violation);
  * database.c
  */
 extern void sepgsql_database_post_create(Oid databaseId,
-							 const char *dtemplate);
+										 const char *dtemplate);
 extern void sepgsql_database_drop(Oid databaseId);
 extern void sepgsql_database_relabel(Oid databaseId, const char *seclabel);
 extern void sepgsql_database_setattr(Oid databaseId);
@@ -308,7 +308,7 @@ extern void sepgsql_schema_rename(Oid namespaceId);
 extern void sepgsql_attribute_post_create(Oid relOid, AttrNumber attnum);
 extern void sepgsql_attribute_drop(Oid relOid, AttrNumber attnum);
 extern void sepgsql_attribute_relabel(Oid relOid, AttrNumber attnum,
-						  const char *seclabel);
+									  const char *seclabel);
 extern void sepgsql_attribute_setattr(Oid relOid, AttrNumber attnum);
 extern void sepgsql_relation_post_create(Oid relOid);
 extern void sepgsql_relation_drop(Oid relOid);
diff --git a/contrib/tablefunc/tablefunc.c b/contrib/tablefunc/tablefunc.c
index cd02495c451e..e31be80828e3 100644
--- a/contrib/tablefunc/tablefunc.c
+++ b/contrib/tablefunc/tablefunc.c
@@ -48,41 +48,41 @@ PG_MODULE_MAGIC;
 
 static HTAB *load_categories_hash(char *cats_sql, MemoryContext per_query_ctx);
 static Tuplestorestate *get_crosstab_tuplestore(char *sql,
-						HTAB *crosstab_hash,
-						TupleDesc tupdesc,
-						MemoryContext per_query_ctx,
-						bool randomAccess);
+												HTAB *crosstab_hash,
+												TupleDesc tupdesc,
+												MemoryContext per_query_ctx,
+												bool randomAccess);
 static void validateConnectbyTupleDesc(TupleDesc tupdesc, bool show_branch, bool show_serial);
 static bool compatCrosstabTupleDescs(TupleDesc tupdesc1, TupleDesc tupdesc2);
 static void compatConnectbyTupleDescs(TupleDesc tupdesc1, TupleDesc tupdesc2);
 static void get_normal_pair(float8 *x1, float8 *x2);
 static Tuplestorestate *connectby(char *relname,
-		  char *key_fld,
-		  char *parent_key_fld,
-		  char *orderby_fld,
-		  char *branch_delim,
-		  char *start_with,
-		  int max_depth,
-		  bool show_branch,
-		  bool show_serial,
-		  MemoryContext per_query_ctx,
-		  bool randomAccess,
-		  AttInMetadata *attinmeta);
+								  char *key_fld,
+								  char *parent_key_fld,
+								  char *orderby_fld,
+								  char *branch_delim,
+								  char *start_with,
+								  int max_depth,
+								  bool show_branch,
+								  bool show_serial,
+								  MemoryContext per_query_ctx,
+								  bool randomAccess,
+								  AttInMetadata *attinmeta);
 static void build_tuplestore_recursively(char *key_fld,
-							 char *parent_key_fld,
-							 char *relname,
-							 char *orderby_fld,
-							 char *branch_delim,
-							 char *start_with,
-							 char *branch,
-							 int level,
-							 int *serial,
-							 int max_depth,
-							 bool show_branch,
-							 bool show_serial,
-							 MemoryContext per_query_ctx,
-							 AttInMetadata *attinmeta,
-							 Tuplestorestate *tupstore);
+										 char *parent_key_fld,
+										 char *relname,
+										 char *orderby_fld,
+										 char *branch_delim,
+										 char *start_with,
+										 char *branch,
+										 int level,
+										 int *serial,
+										 int max_depth,
+										 bool show_branch,
+										 bool show_serial,
+										 MemoryContext per_query_ctx,
+										 AttInMetadata *attinmeta,
+										 Tuplestorestate *tupstore);
 
 typedef struct
 {
diff --git a/contrib/test_decoding/test_decoding.c b/contrib/test_decoding/test_decoding.c
index e3f394f51205..33955a478edb 100644
--- a/contrib/test_decoding/test_decoding.c
+++ b/contrib/test_decoding/test_decoding.c
@@ -39,29 +39,29 @@ typedef struct
 } TestDecodingData;
 
 static void pg_decode_startup(LogicalDecodingContext *ctx, OutputPluginOptions *opt,
-				  bool is_init);
+							  bool is_init);
 static void pg_decode_shutdown(LogicalDecodingContext *ctx);
 static void pg_decode_begin_txn(LogicalDecodingContext *ctx,
-					ReorderBufferTXN *txn);
+								ReorderBufferTXN *txn);
 static void pg_output_begin(LogicalDecodingContext *ctx,
-				TestDecodingData *data,
-				ReorderBufferTXN *txn,
-				bool last_write);
+							TestDecodingData *data,
+							ReorderBufferTXN *txn,
+							bool last_write);
 static void pg_decode_commit_txn(LogicalDecodingContext *ctx,
-					 ReorderBufferTXN *txn, XLogRecPtr commit_lsn);
+								 ReorderBufferTXN *txn, XLogRecPtr commit_lsn);
 static void pg_decode_change(LogicalDecodingContext *ctx,
-				 ReorderBufferTXN *txn, Relation rel,
-				 ReorderBufferChange *change);
+							 ReorderBufferTXN *txn, Relation rel,
+							 ReorderBufferChange *change);
 static void pg_decode_truncate(LogicalDecodingContext *ctx,
-				   ReorderBufferTXN *txn,
-				   int nrelations, Relation relations[],
-				   ReorderBufferChange *change);
+							   ReorderBufferTXN *txn,
+							   int nrelations, Relation relations[],
+							   ReorderBufferChange *change);
 static bool pg_decode_filter(LogicalDecodingContext *ctx,
-				 RepOriginId origin_id);
+							 RepOriginId origin_id);
 static void pg_decode_message(LogicalDecodingContext *ctx,
-				  ReorderBufferTXN *txn, XLogRecPtr message_lsn,
-				  bool transactional, const char *prefix,
-				  Size sz, const char *message);
+							  ReorderBufferTXN *txn, XLogRecPtr message_lsn,
+							  bool transactional, const char *prefix,
+							  Size sz, const char *message);
 
 void
 _PG_init(void)
diff --git a/contrib/tsm_system_rows/tsm_system_rows.c b/contrib/tsm_system_rows/tsm_system_rows.c
index 3611d0583315..e6dbf6bc0dc8 100644
--- a/contrib/tsm_system_rows/tsm_system_rows.c
+++ b/contrib/tsm_system_rows/tsm_system_rows.c
@@ -55,20 +55,20 @@ typedef struct
 } SystemRowsSamplerData;
 
 static void system_rows_samplescangetsamplesize(PlannerInfo *root,
-									RelOptInfo *baserel,
-									List *paramexprs,
-									BlockNumber *pages,
-									double *tuples);
+												RelOptInfo *baserel,
+												List *paramexprs,
+												BlockNumber *pages,
+												double *tuples);
 static void system_rows_initsamplescan(SampleScanState *node,
-						   int eflags);
+									   int eflags);
 static void system_rows_beginsamplescan(SampleScanState *node,
-							Datum *params,
-							int nparams,
-							uint32 seed);
+										Datum *params,
+										int nparams,
+										uint32 seed);
 static BlockNumber system_rows_nextsampleblock(SampleScanState *node, BlockNumber nblocks);
 static OffsetNumber system_rows_nextsampletuple(SampleScanState *node,
-							BlockNumber blockno,
-							OffsetNumber maxoffset);
+												BlockNumber blockno,
+												OffsetNumber maxoffset);
 static uint32 random_relative_prime(uint32 n, SamplerRandomState randstate);
 
 
diff --git a/contrib/tsm_system_time/tsm_system_time.c b/contrib/tsm_system_time/tsm_system_time.c
index ab9f685f0afb..ed486c4696b2 100644
--- a/contrib/tsm_system_time/tsm_system_time.c
+++ b/contrib/tsm_system_time/tsm_system_time.c
@@ -55,20 +55,20 @@ typedef struct
 } SystemTimeSamplerData;
 
 static void system_time_samplescangetsamplesize(PlannerInfo *root,
-									RelOptInfo *baserel,
-									List *paramexprs,
-									BlockNumber *pages,
-									double *tuples);
+												RelOptInfo *baserel,
+												List *paramexprs,
+												BlockNumber *pages,
+												double *tuples);
 static void system_time_initsamplescan(SampleScanState *node,
-						   int eflags);
+									   int eflags);
 static void system_time_beginsamplescan(SampleScanState *node,
-							Datum *params,
-							int nparams,
-							uint32 seed);
+										Datum *params,
+										int nparams,
+										uint32 seed);
 static BlockNumber system_time_nextsampleblock(SampleScanState *node, BlockNumber nblocks);
 static OffsetNumber system_time_nextsampletuple(SampleScanState *node,
-							BlockNumber blockno,
-							OffsetNumber maxoffset);
+												BlockNumber blockno,
+												OffsetNumber maxoffset);
 static uint32 random_relative_prime(uint32 n, SamplerRandomState randstate);
 
 
diff --git a/contrib/xml2/xpath.c b/contrib/xml2/xpath.c
index 95e580df0886..1e5b71d9a020 100644
--- a/contrib/xml2/xpath.c
+++ b/contrib/xml2/xpath.c
@@ -41,16 +41,16 @@ typedef struct
 /* local declarations */
 
 static xmlChar *pgxmlNodeSetToText(xmlNodeSetPtr nodeset,
-				   xmlChar *toptagname, xmlChar *septagname,
-				   xmlChar *plainsep);
+								   xmlChar *toptagname, xmlChar *septagname,
+								   xmlChar *plainsep);
 
 static text *pgxml_result_to_text(xmlXPathObjectPtr res, xmlChar *toptag,
-					 xmlChar *septag, xmlChar *plainsep);
+								  xmlChar *septag, xmlChar *plainsep);
 
 static xmlChar *pgxml_texttoxmlchar(text *textstring);
 
 static xmlXPathObjectPtr pgxml_xpath(text *document, xmlChar *xpath,
-			xpath_workspace *workspace);
+									 xpath_workspace *workspace);
 
 static void cleanup_workspace(xpath_workspace *workspace);
 
diff --git a/src/backend/access/brin/brin.c b/src/backend/access/brin/brin.c
index aba234c0af89..ae7b729edd97 100644
--- a/src/backend/access/brin/brin.c
+++ b/src/backend/access/brin/brin.c
@@ -67,13 +67,13 @@ typedef struct BrinOpaque
 #define BRIN_ALL_BLOCKRANGES	InvalidBlockNumber
 
 static BrinBuildState *initialize_brin_buildstate(Relation idxRel,
-						   BrinRevmap *revmap, BlockNumber pagesPerRange);
+												  BrinRevmap *revmap, BlockNumber pagesPerRange);
 static void terminate_brin_buildstate(BrinBuildState *state);
 static void brinsummarize(Relation index, Relation heapRel, BlockNumber pageRange,
-			  bool include_partial, double *numSummarized, double *numExisting);
+						  bool include_partial, double *numSummarized, double *numExisting);
 static void form_and_insert_tuple(BrinBuildState *state);
 static void union_tuples(BrinDesc *bdesc, BrinMemTuple *a,
-			 BrinTuple *b);
+						 BrinTuple *b);
 static void brin_vacuum_scan(Relation idxrel, BufferAccessStrategy strategy);
 
 
diff --git a/src/backend/access/brin/brin_inclusion.c b/src/backend/access/brin/brin_inclusion.c
index 60f857f02dff..332a854af6ad 100644
--- a/src/backend/access/brin/brin_inclusion.c
+++ b/src/backend/access/brin/brin_inclusion.c
@@ -82,9 +82,9 @@ typedef struct InclusionOpaque
 } InclusionOpaque;
 
 static FmgrInfo *inclusion_get_procinfo(BrinDesc *bdesc, uint16 attno,
-					   uint16 procnum);
+										uint16 procnum);
 static FmgrInfo *inclusion_get_strategy_procinfo(BrinDesc *bdesc, uint16 attno,
-								Oid subtype, uint16 strategynum);
+												 Oid subtype, uint16 strategynum);
 
 
 /*
diff --git a/src/backend/access/brin/brin_minmax.c b/src/backend/access/brin/brin_minmax.c
index a10c2062314f..ad0d18ed39fc 100644
--- a/src/backend/access/brin/brin_minmax.c
+++ b/src/backend/access/brin/brin_minmax.c
@@ -30,7 +30,7 @@ typedef struct MinmaxOpaque
 } MinmaxOpaque;
 
 static FmgrInfo *minmax_get_strategy_procinfo(BrinDesc *bdesc, uint16 attno,
-							 Oid subtype, uint16 strategynum);
+											  Oid subtype, uint16 strategynum);
 
 
 Datum
diff --git a/src/backend/access/brin/brin_pageops.c b/src/backend/access/brin/brin_pageops.c
index fcc468ced994..f907b4bc297e 100644
--- a/src/backend/access/brin/brin_pageops.c
+++ b/src/backend/access/brin/brin_pageops.c
@@ -34,7 +34,7 @@
 				   MAXALIGN(sizeof(BrinSpecialSpace))))
 
 static Buffer brin_getinsertbuffer(Relation irel, Buffer oldbuf, Size itemsz,
-					 bool *extended);
+								   bool *extended);
 static Size br_page_get_freespace(Page page);
 static void brin_initialize_empty_new_buffer(Relation idxrel, Buffer buffer);
 
diff --git a/src/backend/access/brin/brin_revmap.c b/src/backend/access/brin/brin_revmap.c
index 1bf36d6f5cde..e2bfbf8a680e 100644
--- a/src/backend/access/brin/brin_revmap.c
+++ b/src/backend/access/brin/brin_revmap.c
@@ -57,10 +57,10 @@ struct BrinRevmap
 
 
 static BlockNumber revmap_get_blkno(BrinRevmap *revmap,
-				 BlockNumber heapBlk);
+									BlockNumber heapBlk);
 static Buffer revmap_get_buffer(BrinRevmap *revmap, BlockNumber heapBlk);
 static BlockNumber revmap_extend_and_get_blkno(BrinRevmap *revmap,
-							BlockNumber heapBlk);
+											   BlockNumber heapBlk);
 static void revmap_physical_extend(BrinRevmap *revmap);
 
 /*
diff --git a/src/backend/access/brin/brin_tuple.c b/src/backend/access/brin/brin_tuple.c
index a5bc6f5749f3..5abb472ee45e 100644
--- a/src/backend/access/brin/brin_tuple.c
+++ b/src/backend/access/brin/brin_tuple.c
@@ -40,8 +40,8 @@
 
 
 static inline void brin_deconstruct_tuple(BrinDesc *brdesc,
-					   char *tp, bits8 *nullbits, bool nulls,
-					   Datum *values, bool *allnulls, bool *hasnulls);
+										  char *tp, bits8 *nullbits, bool nulls,
+										  Datum *values, bool *allnulls, bool *hasnulls);
 
 
 /*
diff --git a/src/backend/access/common/printtup.c b/src/backend/access/common/printtup.c
index 44add482d3ec..24d6cd024923 100644
--- a/src/backend/access/common/printtup.c
+++ b/src/backend/access/common/printtup.c
@@ -25,7 +25,7 @@
 
 
 static void printtup_startup(DestReceiver *self, int operation,
-				 TupleDesc typeinfo);
+							 TupleDesc typeinfo);
 static bool printtup(TupleTableSlot *slot, DestReceiver *self);
 static bool printtup_20(TupleTableSlot *slot, DestReceiver *self);
 static bool printtup_internal_20(TupleTableSlot *slot, DestReceiver *self);
@@ -33,9 +33,9 @@ static void printtup_shutdown(DestReceiver *self);
 static void printtup_destroy(DestReceiver *self);
 
 static void SendRowDescriptionCols_2(StringInfo buf, TupleDesc typeinfo,
-						 List *targetlist, int16 *formats);
+									 List *targetlist, int16 *formats);
 static void SendRowDescriptionCols_3(StringInfo buf, TupleDesc typeinfo,
-						 List *targetlist, int16 *formats);
+									 List *targetlist, int16 *formats);
 
 /* ----------------------------------------------------------------
  *		printtup / debugtup support
diff --git a/src/backend/access/common/reloptions.c b/src/backend/access/common/reloptions.c
index cfbabb52650b..4d0d24be0ba6 100644
--- a/src/backend/access/common/reloptions.c
+++ b/src/backend/access/common/reloptions.c
@@ -475,7 +475,7 @@ static bool need_initialization = true;
 
 static void initialize_reloptions(void);
 static void parse_one_reloption(relopt_value *option, char *text_str,
-					int text_len, bool validate);
+								int text_len, bool validate);
 
 /*
  * initialize_reloptions
diff --git a/src/backend/access/gin/ginbtree.c b/src/backend/access/gin/ginbtree.c
index 9f82eef8c391..11a8ed7bbc29 100644
--- a/src/backend/access/gin/ginbtree.c
+++ b/src/backend/access/gin/ginbtree.c
@@ -24,10 +24,10 @@
 
 static void ginFindParents(GinBtree btree, GinBtreeStack *stack);
 static bool ginPlaceToPage(GinBtree btree, GinBtreeStack *stack,
-			   void *insertdata, BlockNumber updateblkno,
-			   Buffer childbuf, GinStatsData *buildStats);
+						   void *insertdata, BlockNumber updateblkno,
+						   Buffer childbuf, GinStatsData *buildStats);
 static void ginFinishSplit(GinBtree btree, GinBtreeStack *stack,
-			   bool freestack, GinStatsData *buildStats);
+						   bool freestack, GinStatsData *buildStats);
 
 /*
  * Lock buffer by needed method for search.
diff --git a/src/backend/access/gin/gindatapage.c b/src/backend/access/gin/gindatapage.c
index fb085c7dd84a..57c3b830d85b 100644
--- a/src/backend/access/gin/gindatapage.c
+++ b/src/backend/access/gin/gindatapage.c
@@ -104,20 +104,20 @@ typedef struct
 
 static ItemPointer dataLeafPageGetUncompressed(Page page, int *nitems);
 static void dataSplitPageInternal(GinBtree btree, Buffer origbuf,
-					  GinBtreeStack *stack,
-					  void *insertdata, BlockNumber updateblkno,
-					  Page *newlpage, Page *newrpage);
+								  GinBtreeStack *stack,
+								  void *insertdata, BlockNumber updateblkno,
+								  Page *newlpage, Page *newrpage);
 
 static disassembledLeaf *disassembleLeaf(Page page);
 static bool leafRepackItems(disassembledLeaf *leaf, ItemPointer remaining);
 static bool addItemsToLeaf(disassembledLeaf *leaf, ItemPointer newItems,
-			   int nNewItems);
+						   int nNewItems);
 
 static void computeLeafRecompressWALData(disassembledLeaf *leaf);
 static void dataPlaceToPageLeafRecompress(Buffer buf, disassembledLeaf *leaf);
 static void dataPlaceToPageLeafSplit(disassembledLeaf *leaf,
-						 ItemPointerData lbound, ItemPointerData rbound,
-						 Page lpage, Page rpage);
+									 ItemPointerData lbound, ItemPointerData rbound,
+									 Page lpage, Page rpage);
 
 /*
  * Read TIDs from leaf data page to single uncompressed array. The TIDs are
diff --git a/src/backend/access/gin/ginentrypage.c b/src/backend/access/gin/ginentrypage.c
index 1f5ba33d5124..b87ff26f9c4e 100644
--- a/src/backend/access/gin/ginentrypage.c
+++ b/src/backend/access/gin/ginentrypage.c
@@ -21,10 +21,10 @@
 #include "utils/rel.h"
 
 static void entrySplitPage(GinBtree btree, Buffer origbuf,
-			   GinBtreeStack *stack,
-			   GinBtreeEntryInsertData *insertData,
-			   BlockNumber updateblkno,
-			   Page *newlpage, Page *newrpage);
+						   GinBtreeStack *stack,
+						   GinBtreeEntryInsertData *insertData,
+						   BlockNumber updateblkno,
+						   Page *newlpage, Page *newrpage);
 
 /*
  * Form a tuple for entry tree.
diff --git a/src/backend/access/gist/gist.c b/src/backend/access/gist/gist.c
index d70a138f54db..45c00aaa87a6 100644
--- a/src/backend/access/gist/gist.c
+++ b/src/backend/access/gist/gist.c
@@ -30,16 +30,16 @@
 /* non-export function prototypes */
 static void gistfixsplit(GISTInsertState *state, GISTSTATE *giststate);
 static bool gistinserttuple(GISTInsertState *state, GISTInsertStack *stack,
-				GISTSTATE *giststate, IndexTuple tuple, OffsetNumber oldoffnum);
+							GISTSTATE *giststate, IndexTuple tuple, OffsetNumber oldoffnum);
 static bool gistinserttuples(GISTInsertState *state, GISTInsertStack *stack,
-				 GISTSTATE *giststate,
-				 IndexTuple *tuples, int ntup, OffsetNumber oldoffnum,
-				 Buffer leftchild, Buffer rightchild,
-				 bool unlockbuf, bool unlockleftchild);
+							 GISTSTATE *giststate,
+							 IndexTuple *tuples, int ntup, OffsetNumber oldoffnum,
+							 Buffer leftchild, Buffer rightchild,
+							 bool unlockbuf, bool unlockleftchild);
 static void gistfinishsplit(GISTInsertState *state, GISTInsertStack *stack,
-				GISTSTATE *giststate, List *splitinfo, bool releasebuf);
+							GISTSTATE *giststate, List *splitinfo, bool releasebuf);
 static void gistprunepage(Relation rel, Page page, Buffer buffer,
-			  Relation heapRel);
+						  Relation heapRel);
 
 
 #define ROTATEDIST(d) do { \
diff --git a/src/backend/access/gist/gistbuild.c b/src/backend/access/gist/gistbuild.c
index 8e81eda5176c..ecef0ff0724a 100644
--- a/src/backend/access/gist/gistbuild.c
+++ b/src/backend/access/gist/gistbuild.c
@@ -80,30 +80,30 @@ typedef struct
 static void gistInitBuffering(GISTBuildState *buildstate);
 static int	calculatePagesPerBuffer(GISTBuildState *buildstate, int levelStep);
 static void gistBuildCallback(Relation index,
-				  HeapTuple htup,
-				  Datum *values,
-				  bool *isnull,
-				  bool tupleIsAlive,
-				  void *state);
+							  HeapTuple htup,
+							  Datum *values,
+							  bool *isnull,
+							  bool tupleIsAlive,
+							  void *state);
 static void gistBufferingBuildInsert(GISTBuildState *buildstate,
-						 IndexTuple itup);
+									 IndexTuple itup);
 static bool gistProcessItup(GISTBuildState *buildstate, IndexTuple itup,
-				BlockNumber startblkno, int startlevel);
+							BlockNumber startblkno, int startlevel);
 static BlockNumber gistbufferinginserttuples(GISTBuildState *buildstate,
-						  Buffer buffer, int level,
-						  IndexTuple *itup, int ntup, OffsetNumber oldoffnum,
-						  BlockNumber parentblk, OffsetNumber downlinkoffnum);
+											 Buffer buffer, int level,
+											 IndexTuple *itup, int ntup, OffsetNumber oldoffnum,
+											 BlockNumber parentblk, OffsetNumber downlinkoffnum);
 static Buffer gistBufferingFindCorrectParent(GISTBuildState *buildstate,
-							   BlockNumber childblkno, int level,
-							   BlockNumber *parentblk,
-							   OffsetNumber *downlinkoffnum);
+											 BlockNumber childblkno, int level,
+											 BlockNumber *parentblk,
+											 OffsetNumber *downlinkoffnum);
 static void gistProcessEmptyingQueue(GISTBuildState *buildstate);
 static void gistEmptyAllBuffers(GISTBuildState *buildstate);
 static int	gistGetMaxLevel(Relation index);
 
 static void gistInitParentMap(GISTBuildState *buildstate);
 static void gistMemorizeParent(GISTBuildState *buildstate, BlockNumber child,
-				   BlockNumber parent);
+							   BlockNumber parent);
 static void gistMemorizeAllDownlinks(GISTBuildState *buildstate, Buffer parent);
 static BlockNumber gistGetParent(GISTBuildState *buildstate, BlockNumber child);
 
diff --git a/src/backend/access/gist/gistbuildbuffers.c b/src/backend/access/gist/gistbuildbuffers.c
index 4f2363e21e4b..d71354140ed3 100644
--- a/src/backend/access/gist/gistbuildbuffers.c
+++ b/src/backend/access/gist/gistbuildbuffers.c
@@ -25,15 +25,15 @@
 
 static GISTNodeBufferPage *gistAllocateNewPageBuffer(GISTBuildBuffers *gfbb);
 static void gistAddLoadedBuffer(GISTBuildBuffers *gfbb,
-					GISTNodeBuffer *nodeBuffer);
+								GISTNodeBuffer *nodeBuffer);
 static void gistLoadNodeBuffer(GISTBuildBuffers *gfbb,
-				   GISTNodeBuffer *nodeBuffer);
+							   GISTNodeBuffer *nodeBuffer);
 static void gistUnloadNodeBuffer(GISTBuildBuffers *gfbb,
-					 GISTNodeBuffer *nodeBuffer);
+								 GISTNodeBuffer *nodeBuffer);
 static void gistPlaceItupToPage(GISTNodeBufferPage *pageBuffer,
-					IndexTuple item);
+								IndexTuple item);
 static void gistGetItupFromPage(GISTNodeBufferPage *pageBuffer,
-					IndexTuple *item);
+								IndexTuple *item);
 static long gistBuffersGetFreeBlock(GISTBuildBuffers *gfbb);
 static void gistBuffersReleaseBlock(GISTBuildBuffers *gfbb, long blocknum);
 
diff --git a/src/backend/access/gist/gistproc.c b/src/backend/access/gist/gistproc.c
index c9da2307be88..1826b51bbb4b 100644
--- a/src/backend/access/gist/gistproc.c
+++ b/src/backend/access/gist/gistproc.c
@@ -27,9 +27,9 @@
 
 
 static bool gist_box_leaf_consistent(BOX *key, BOX *query,
-						 StrategyNumber strategy);
+									 StrategyNumber strategy);
 static bool rtree_internal_consistent(BOX *key, BOX *query,
-						  StrategyNumber strategy);
+									  StrategyNumber strategy);
 
 /* Minimum accepted ratio of split */
 #define LIMIT_RATIO 0.3
diff --git a/src/backend/access/gist/gistvacuum.c b/src/backend/access/gist/gistvacuum.c
index e2029d842c03..4270226eee29 100644
--- a/src/backend/access/gist/gistvacuum.c
+++ b/src/backend/access/gist/gistvacuum.c
@@ -52,14 +52,14 @@ typedef struct
 } GistVacState;
 
 static void gistvacuumscan(IndexVacuumInfo *info, GistBulkDeleteResult *stats,
-			   IndexBulkDeleteCallback callback, void *callback_state);
+						   IndexBulkDeleteCallback callback, void *callback_state);
 static void gistvacuumpage(GistVacState *vstate, BlockNumber blkno,
-			   BlockNumber orig_blkno);
+						   BlockNumber orig_blkno);
 static void gistvacuum_delete_empty_pages(IndexVacuumInfo *info,
-							  GistBulkDeleteResult *stats);
+										  GistBulkDeleteResult *stats);
 static bool gistdeletepage(IndexVacuumInfo *info, GistBulkDeleteResult *stats,
-			   Buffer buffer, OffsetNumber downlink,
-			   Buffer leafBuffer);
+						   Buffer buffer, OffsetNumber downlink,
+						   Buffer leafBuffer);
 
 /* allocate the 'stats' struct that's kept over vacuum stages */
 static GistBulkDeleteResult *
diff --git a/src/backend/access/hash/hash.c b/src/backend/access/hash/hash.c
index 048e40e46faf..e9f2c84af1af 100644
--- a/src/backend/access/hash/hash.c
+++ b/src/backend/access/hash/hash.c
@@ -43,11 +43,11 @@ typedef struct
 } HashBuildState;
 
 static void hashbuildCallback(Relation index,
-				  HeapTuple htup,
-				  Datum *values,
-				  bool *isnull,
-				  bool tupleIsAlive,
-				  void *state);
+							  HeapTuple htup,
+							  Datum *values,
+							  bool *isnull,
+							  bool tupleIsAlive,
+							  void *state);
 
 
 /*
diff --git a/src/backend/access/hash/hashinsert.c b/src/backend/access/hash/hashinsert.c
index e17f01718f26..5321762d5ea9 100644
--- a/src/backend/access/hash/hashinsert.c
+++ b/src/backend/access/hash/hashinsert.c
@@ -24,7 +24,7 @@
 #include "storage/predicate.h"
 
 static void _hash_vacuum_one_page(Relation rel, Relation hrel,
-					  Buffer metabuf, Buffer buf);
+								  Buffer metabuf, Buffer buf);
 
 /*
  *	_hash_doinsert() -- Handle insertion of a single index tuple.
diff --git a/src/backend/access/hash/hashpage.c b/src/backend/access/hash/hashpage.c
index b7adfdb826e4..376ee2a63b52 100644
--- a/src/backend/access/hash/hashpage.c
+++ b/src/backend/access/hash/hashpage.c
@@ -37,14 +37,14 @@
 
 
 static bool _hash_alloc_buckets(Relation rel, BlockNumber firstblock,
-					uint32 nblocks);
+								uint32 nblocks);
 static void _hash_splitbucket(Relation rel, Buffer metabuf,
-				  Bucket obucket, Bucket nbucket,
-				  Buffer obuf,
-				  Buffer nbuf,
-				  HTAB *htab,
-				  uint32 maxbucket,
-				  uint32 highmask, uint32 lowmask);
+							  Bucket obucket, Bucket nbucket,
+							  Buffer obuf,
+							  Buffer nbuf,
+							  HTAB *htab,
+							  uint32 maxbucket,
+							  uint32 highmask, uint32 lowmask);
 static void log_split_page(Relation rel, Buffer buf);
 
 
diff --git a/src/backend/access/hash/hashsearch.c b/src/backend/access/hash/hashsearch.c
index 61c90e6bb781..79ae499198d2 100644
--- a/src/backend/access/hash/hashsearch.c
+++ b/src/backend/access/hash/hashsearch.c
@@ -22,13 +22,13 @@
 #include "storage/predicate.h"
 
 static bool _hash_readpage(IndexScanDesc scan, Buffer *bufP,
-			   ScanDirection dir);
-static int _hash_load_qualified_items(IndexScanDesc scan, Page page,
-						   OffsetNumber offnum, ScanDirection dir);
+						   ScanDirection dir);
+static int	_hash_load_qualified_items(IndexScanDesc scan, Page page,
+									   OffsetNumber offnum, ScanDirection dir);
 static inline void _hash_saveitem(HashScanOpaque so, int itemIndex,
-			   OffsetNumber offnum, IndexTuple itup);
+								  OffsetNumber offnum, IndexTuple itup);
 static void _hash_readnext(IndexScanDesc scan, Buffer *bufp,
-			   Page *pagep, HashPageOpaque *opaquep);
+						   Page *pagep, HashPageOpaque *opaquep);
 
 /*
  *	_hash_next() -- Get the next item in a scan.
diff --git a/src/backend/access/heap/heapam.c b/src/backend/access/heap/heapam.c
index 723e153705df..6c342635e840 100644
--- a/src/backend/access/heap/heapam.c
+++ b/src/backend/access/heap/heapam.c
@@ -71,39 +71,39 @@
 
 
 static HeapTuple heap_prepare_insert(Relation relation, HeapTuple tup,
-					TransactionId xid, CommandId cid, int options);
+									 TransactionId xid, CommandId cid, int options);
 static XLogRecPtr log_heap_update(Relation reln, Buffer oldbuf,
-				Buffer newbuf, HeapTuple oldtup,
-				HeapTuple newtup, HeapTuple old_key_tup,
-				bool all_visible_cleared, bool new_all_visible_cleared);
+								  Buffer newbuf, HeapTuple oldtup,
+								  HeapTuple newtup, HeapTuple old_key_tup,
+								  bool all_visible_cleared, bool new_all_visible_cleared);
 static Bitmapset *HeapDetermineModifiedColumns(Relation relation,
-							 Bitmapset *interesting_cols,
-							 HeapTuple oldtup, HeapTuple newtup);
+											   Bitmapset *interesting_cols,
+											   HeapTuple oldtup, HeapTuple newtup);
 static bool heap_acquire_tuplock(Relation relation, ItemPointer tid,
-					 LockTupleMode mode, LockWaitPolicy wait_policy,
-					 bool *have_tuple_lock);
+								 LockTupleMode mode, LockWaitPolicy wait_policy,
+								 bool *have_tuple_lock);
 static void compute_new_xmax_infomask(TransactionId xmax, uint16 old_infomask,
-						  uint16 old_infomask2, TransactionId add_to_xmax,
-						  LockTupleMode mode, bool is_update,
-						  TransactionId *result_xmax, uint16 *result_infomask,
-						  uint16 *result_infomask2);
+									  uint16 old_infomask2, TransactionId add_to_xmax,
+									  LockTupleMode mode, bool is_update,
+									  TransactionId *result_xmax, uint16 *result_infomask,
+									  uint16 *result_infomask2);
 static TM_Result heap_lock_updated_tuple(Relation rel, HeapTuple tuple,
-						ItemPointer ctid, TransactionId xid,
-						LockTupleMode mode);
+										 ItemPointer ctid, TransactionId xid,
+										 LockTupleMode mode);
 static void GetMultiXactIdHintBits(MultiXactId multi, uint16 *new_infomask,
-					   uint16 *new_infomask2);
+								   uint16 *new_infomask2);
 static TransactionId MultiXactIdGetUpdateXid(TransactionId xmax,
-						uint16 t_infomask);
+											 uint16 t_infomask);
 static bool DoesMultiXactIdConflict(MultiXactId multi, uint16 infomask,
-						LockTupleMode lockmode);
+									LockTupleMode lockmode);
 static void MultiXactIdWait(MultiXactId multi, MultiXactStatus status, uint16 infomask,
-				Relation rel, ItemPointer ctid, XLTW_Oper oper,
-				int *remaining);
+							Relation rel, ItemPointer ctid, XLTW_Oper oper,
+							int *remaining);
 static bool ConditionalMultiXactIdWait(MultiXactId multi, MultiXactStatus status,
-						   uint16 infomask, Relation rel, int *remaining);
+									   uint16 infomask, Relation rel, int *remaining);
 static XLogRecPtr log_heap_new_cid(Relation relation, HeapTuple tup);
 static HeapTuple ExtractReplicaIdentity(Relation rel, HeapTuple tup, bool key_modified,
-					   bool *copy);
+										bool *copy);
 
 
 /*
diff --git a/src/backend/access/heap/heapam_handler.c b/src/backend/access/heap/heapam_handler.c
index 674c1d3a818e..a4a28e88ec99 100644
--- a/src/backend/access/heap/heapam_handler.c
+++ b/src/backend/access/heap/heapam_handler.c
@@ -51,12 +51,12 @@
 
 
 static void reform_and_rewrite_tuple(HeapTuple tuple,
-						 Relation OldHeap, Relation NewHeap,
-						 Datum *values, bool *isnull, RewriteState rwstate);
+									 Relation OldHeap, Relation NewHeap,
+									 Datum *values, bool *isnull, RewriteState rwstate);
 
 static bool SampleHeapTupleVisible(TableScanDesc scan, Buffer buffer,
-					   HeapTuple tuple,
-					   OffsetNumber tupoffset);
+								   HeapTuple tuple,
+								   OffsetNumber tupoffset);
 
 static BlockNumber heapam_scan_get_blocks_done(HeapScanDesc hscan);
 
diff --git a/src/backend/access/heap/pruneheap.c b/src/backend/access/heap/pruneheap.c
index 417a2bf8e6ea..0efe3ce99954 100644
--- a/src/backend/access/heap/pruneheap.c
+++ b/src/backend/access/heap/pruneheap.c
@@ -43,13 +43,13 @@ typedef struct
 } PruneState;
 
 /* Local functions */
-static int heap_prune_chain(Relation relation, Buffer buffer,
-				 OffsetNumber rootoffnum,
-				 TransactionId OldestXmin,
-				 PruneState *prstate);
+static int	heap_prune_chain(Relation relation, Buffer buffer,
+							 OffsetNumber rootoffnum,
+							 TransactionId OldestXmin,
+							 PruneState *prstate);
 static void heap_prune_record_prunable(PruneState *prstate, TransactionId xid);
 static void heap_prune_record_redirect(PruneState *prstate,
-						   OffsetNumber offnum, OffsetNumber rdoffnum);
+									   OffsetNumber offnum, OffsetNumber rdoffnum);
 static void heap_prune_record_dead(PruneState *prstate, OffsetNumber offnum);
 static void heap_prune_record_unused(PruneState *prstate, OffsetNumber offnum);
 
diff --git a/src/backend/access/heap/syncscan.c b/src/backend/access/heap/syncscan.c
index c0a45dc75a94..b615940ed3ea 100644
--- a/src/backend/access/heap/syncscan.c
+++ b/src/backend/access/heap/syncscan.c
@@ -116,7 +116,7 @@ static ss_scan_locations_t *scan_locations;
 
 /* prototypes for internal functions */
 static BlockNumber ss_search(RelFileNode relfilenode,
-		  BlockNumber location, bool set);
+							 BlockNumber location, bool set);
 
 
 /*
diff --git a/src/backend/access/heap/tuptoaster.c b/src/backend/access/heap/tuptoaster.c
index e10715a77552..55d6e91d1c38 100644
--- a/src/backend/access/heap/tuptoaster.c
+++ b/src/backend/access/heap/tuptoaster.c
@@ -68,20 +68,20 @@ typedef struct toast_compress_header
 
 static void toast_delete_datum(Relation rel, Datum value, bool is_speculative);
 static Datum toast_save_datum(Relation rel, Datum value,
-				 struct varlena *oldexternal, int options);
+							  struct varlena *oldexternal, int options);
 static bool toastrel_valueid_exists(Relation toastrel, Oid valueid);
 static bool toastid_valueid_exists(Oid toastrelid, Oid valueid);
 static struct varlena *toast_fetch_datum(struct varlena *attr);
 static struct varlena *toast_fetch_datum_slice(struct varlena *attr,
-						int32 sliceoffset, int32 length);
+											   int32 sliceoffset, int32 length);
 static struct varlena *toast_decompress_datum(struct varlena *attr);
 static struct varlena *toast_decompress_datum_slice(struct varlena *attr, int32 slicelength);
-static int toast_open_indexes(Relation toastrel,
-				   LOCKMODE lock,
-				   Relation **toastidxs,
-				   int *num_indexes);
+static int	toast_open_indexes(Relation toastrel,
+							   LOCKMODE lock,
+							   Relation **toastidxs,
+							   int *num_indexes);
 static void toast_close_indexes(Relation *toastidxs, int num_indexes,
-					LOCKMODE lock);
+								LOCKMODE lock);
 static void init_toast_snapshot(Snapshot toast_snapshot);
 
 
diff --git a/src/backend/access/heap/vacuumlazy.c b/src/backend/access/heap/vacuumlazy.c
index 637e47c08ce1..a3c4a1df3b4b 100644
--- a/src/backend/access/heap/vacuumlazy.c
+++ b/src/backend/access/heap/vacuumlazy.c
@@ -151,30 +151,30 @@ static BufferAccessStrategy vac_strategy;
 
 /* non-export function prototypes */
 static void lazy_scan_heap(Relation onerel, VacuumParams *params,
-			   LVRelStats *vacrelstats, Relation *Irel, int nindexes,
-			   bool aggressive);
+						   LVRelStats *vacrelstats, Relation *Irel, int nindexes,
+						   bool aggressive);
 static void lazy_vacuum_heap(Relation onerel, LVRelStats *vacrelstats);
 static bool lazy_check_needs_freeze(Buffer buf, bool *hastup);
 static void lazy_vacuum_index(Relation indrel,
-				  IndexBulkDeleteResult **stats,
-				  LVRelStats *vacrelstats);
+							  IndexBulkDeleteResult **stats,
+							  LVRelStats *vacrelstats);
 static void lazy_cleanup_index(Relation indrel,
-				   IndexBulkDeleteResult *stats,
-				   LVRelStats *vacrelstats);
-static int lazy_vacuum_page(Relation onerel, BlockNumber blkno, Buffer buffer,
-				 int tupindex, LVRelStats *vacrelstats, Buffer *vmbuffer);
+							   IndexBulkDeleteResult *stats,
+							   LVRelStats *vacrelstats);
+static int	lazy_vacuum_page(Relation onerel, BlockNumber blkno, Buffer buffer,
+							 int tupindex, LVRelStats *vacrelstats, Buffer *vmbuffer);
 static bool should_attempt_truncation(VacuumParams *params,
-						  LVRelStats *vacrelstats);
+									  LVRelStats *vacrelstats);
 static void lazy_truncate_heap(Relation onerel, LVRelStats *vacrelstats);
 static BlockNumber count_nondeletable_pages(Relation onerel,
-						 LVRelStats *vacrelstats);
+											LVRelStats *vacrelstats);
 static void lazy_space_alloc(LVRelStats *vacrelstats, BlockNumber relblocks);
 static void lazy_record_dead_tuple(LVRelStats *vacrelstats,
-					   ItemPointer itemptr);
+								   ItemPointer itemptr);
 static bool lazy_tid_reaped(ItemPointer itemptr, void *state);
 static int	vac_cmp_itemptr(const void *left, const void *right);
 static bool heap_page_is_all_visible(Relation rel, Buffer buf,
-						 TransactionId *visibility_cutoff_xid, bool *all_frozen);
+									 TransactionId *visibility_cutoff_xid, bool *all_frozen);
 
 
 /*
diff --git a/src/backend/access/index/indexam.c b/src/backend/access/index/indexam.c
index 0fc9139badb6..aefdd2916de0 100644
--- a/src/backend/access/index/indexam.c
+++ b/src/backend/access/index/indexam.c
@@ -99,8 +99,8 @@ do { \
 } while(0)
 
 static IndexScanDesc index_beginscan_internal(Relation indexRelation,
-						 int nkeys, int norderbys, Snapshot snapshot,
-						 ParallelIndexScanDesc pscan, bool temp_snap);
+											  int nkeys, int norderbys, Snapshot snapshot,
+											  ParallelIndexScanDesc pscan, bool temp_snap);
 
 
 /* ----------------------------------------------------------------
diff --git a/src/backend/access/nbtree/nbtinsert.c b/src/backend/access/nbtree/nbtinsert.c
index 36a570045ac1..2eccc9902364 100644
--- a/src/backend/access/nbtree/nbtinsert.c
+++ b/src/backend/access/nbtree/nbtinsert.c
@@ -32,29 +32,29 @@
 static Buffer _bt_newroot(Relation rel, Buffer lbuf, Buffer rbuf);
 
 static TransactionId _bt_check_unique(Relation rel, BTInsertState insertstate,
-				 Relation heapRel,
-				 IndexUniqueCheck checkUnique, bool *is_unique,
-				 uint32 *speculativeToken);
+									  Relation heapRel,
+									  IndexUniqueCheck checkUnique, bool *is_unique,
+									  uint32 *speculativeToken);
 static OffsetNumber _bt_findinsertloc(Relation rel,
-				  BTInsertState insertstate,
-				  bool checkingunique,
-				  BTStack stack,
-				  Relation heapRel);
+									  BTInsertState insertstate,
+									  bool checkingunique,
+									  BTStack stack,
+									  Relation heapRel);
 static void _bt_stepright(Relation rel, BTInsertState insertstate, BTStack stack);
 static void _bt_insertonpg(Relation rel, BTScanInsert itup_key,
-			   Buffer buf,
-			   Buffer cbuf,
-			   BTStack stack,
-			   IndexTuple itup,
-			   OffsetNumber newitemoff,
-			   bool split_only_page);
+						   Buffer buf,
+						   Buffer cbuf,
+						   BTStack stack,
+						   IndexTuple itup,
+						   OffsetNumber newitemoff,
+						   bool split_only_page);
 static Buffer _bt_split(Relation rel, BTScanInsert itup_key, Buffer buf,
-		  Buffer cbuf, OffsetNumber newitemoff, Size newitemsz,
-		  IndexTuple newitem);
+						Buffer cbuf, OffsetNumber newitemoff, Size newitemsz,
+						IndexTuple newitem);
 static void _bt_insert_parent(Relation rel, Buffer buf, Buffer rbuf,
-				  BTStack stack, bool is_root, bool is_only);
+							  BTStack stack, bool is_root, bool is_only);
 static bool _bt_pgaddtup(Page page, Size itemsize, IndexTuple itup,
-			 OffsetNumber itup_off);
+						 OffsetNumber itup_off);
 static void _bt_vacuum_one_page(Relation rel, Buffer buffer, Relation heapRel);
 
 /*
diff --git a/src/backend/access/nbtree/nbtpage.c b/src/backend/access/nbtree/nbtpage.c
index e7c40cba973d..de4d4efc46a6 100644
--- a/src/backend/access/nbtree/nbtpage.c
+++ b/src/backend/access/nbtree/nbtpage.c
@@ -37,12 +37,12 @@ static void _bt_cachemetadata(Relation rel, BTMetaPageData *input);
 static BTMetaPageData *_bt_getmeta(Relation rel, Buffer metabuf);
 static bool _bt_mark_page_halfdead(Relation rel, Buffer buf, BTStack stack);
 static bool _bt_unlink_halfdead_page(Relation rel, Buffer leafbuf,
-						 bool *rightsib_empty);
+									 bool *rightsib_empty);
 static bool _bt_lock_branch_parent(Relation rel, BlockNumber child,
-					   BTStack stack, Buffer *topparent, OffsetNumber *topoff,
-					   BlockNumber *target, BlockNumber *rightsib);
+								   BTStack stack, Buffer *topparent, OffsetNumber *topoff,
+								   BlockNumber *target, BlockNumber *rightsib);
 static void _bt_log_reuse_page(Relation rel, BlockNumber blkno,
-				   TransactionId latestRemovedXid);
+							   TransactionId latestRemovedXid);
 
 /*
  *	_bt_initmetapage() -- Fill a page buffer with a correct metapage image
diff --git a/src/backend/access/nbtree/nbtree.c b/src/backend/access/nbtree/nbtree.c
index 02fb352b94a8..85e54ac44b8e 100644
--- a/src/backend/access/nbtree/nbtree.c
+++ b/src/backend/access/nbtree/nbtree.c
@@ -93,10 +93,10 @@ typedef struct BTParallelScanDescData *BTParallelScanDesc;
 
 
 static void btvacuumscan(IndexVacuumInfo *info, IndexBulkDeleteResult *stats,
-			 IndexBulkDeleteCallback callback, void *callback_state,
-			 BTCycleId cycleid, TransactionId *oldestBtpoXact);
+						 IndexBulkDeleteCallback callback, void *callback_state,
+						 BTCycleId cycleid, TransactionId *oldestBtpoXact);
 static void btvacuumpage(BTVacState *vstate, BlockNumber blkno,
-			 BlockNumber orig_blkno);
+						 BlockNumber orig_blkno);
 
 
 /*
diff --git a/src/backend/access/nbtree/nbtsearch.c b/src/backend/access/nbtree/nbtsearch.c
index dc42213ac6c7..1f809c24a116 100644
--- a/src/backend/access/nbtree/nbtsearch.c
+++ b/src/backend/access/nbtree/nbtsearch.c
@@ -27,13 +27,13 @@
 static void _bt_drop_lock_and_maybe_pin(IndexScanDesc scan, BTScanPos sp);
 static OffsetNumber _bt_binsrch(Relation rel, BTScanInsert key, Buffer buf);
 static bool _bt_readpage(IndexScanDesc scan, ScanDirection dir,
-			 OffsetNumber offnum);
+						 OffsetNumber offnum);
 static void _bt_saveitem(BTScanOpaque so, int itemIndex,
-			 OffsetNumber offnum, IndexTuple itup);
+						 OffsetNumber offnum, IndexTuple itup);
 static bool _bt_steppage(IndexScanDesc scan, ScanDirection dir);
 static bool _bt_readnextpage(IndexScanDesc scan, BlockNumber blkno, ScanDirection dir);
 static bool _bt_parallel_readpage(IndexScanDesc scan, BlockNumber blkno,
-					  ScanDirection dir);
+								  ScanDirection dir);
 static Buffer _bt_walk_left(Relation rel, Buffer buf, Snapshot snapshot);
 static bool _bt_endpoint(IndexScanDesc scan, ScanDirection dir);
 static inline void _bt_initialize_more_data(BTScanOpaque so, ScanDirection dir);
diff --git a/src/backend/access/nbtree/nbtsort.c b/src/backend/access/nbtree/nbtsort.c
index d6fa5742384f..d0b9013caf40 100644
--- a/src/backend/access/nbtree/nbtsort.c
+++ b/src/backend/access/nbtree/nbtsort.c
@@ -273,34 +273,34 @@ typedef struct BTWriteState
 
 
 static double _bt_spools_heapscan(Relation heap, Relation index,
-					BTBuildState *buildstate, IndexInfo *indexInfo);
+								  BTBuildState *buildstate, IndexInfo *indexInfo);
 static void _bt_spooldestroy(BTSpool *btspool);
 static void _bt_spool(BTSpool *btspool, ItemPointer self,
-		  Datum *values, bool *isnull);
+					  Datum *values, bool *isnull);
 static void _bt_leafbuild(BTSpool *btspool, BTSpool *btspool2);
 static void _bt_build_callback(Relation index, HeapTuple htup, Datum *values,
-				   bool *isnull, bool tupleIsAlive, void *state);
+							   bool *isnull, bool tupleIsAlive, void *state);
 static Page _bt_blnewpage(uint32 level);
 static BTPageState *_bt_pagestate(BTWriteState *wstate, uint32 level);
 static void _bt_slideleft(Page page);
 static void _bt_sortaddtup(Page page, Size itemsize,
-			   IndexTuple itup, OffsetNumber itup_off);
+						   IndexTuple itup, OffsetNumber itup_off);
 static void _bt_buildadd(BTWriteState *wstate, BTPageState *state,
-			 IndexTuple itup);
+						 IndexTuple itup);
 static void _bt_uppershutdown(BTWriteState *wstate, BTPageState *state);
 static void _bt_load(BTWriteState *wstate,
-		 BTSpool *btspool, BTSpool *btspool2);
+					 BTSpool *btspool, BTSpool *btspool2);
 static void _bt_begin_parallel(BTBuildState *buildstate, bool isconcurrent,
-				   int request);
+							   int request);
 static void _bt_end_parallel(BTLeader *btleader);
 static Size _bt_parallel_estimate_shared(Relation heap, Snapshot snapshot);
 static double _bt_parallel_heapscan(BTBuildState *buildstate,
-					  bool *brokenhotchain);
+									bool *brokenhotchain);
 static void _bt_leader_participate_as_worker(BTBuildState *buildstate);
 static void _bt_parallel_scan_and_sort(BTSpool *btspool, BTSpool *btspool2,
-						   BTShared *btshared, Sharedsort *sharedsort,
-						   Sharedsort *sharedsort2, int sortmem,
-						   bool progress);
+									   BTShared *btshared, Sharedsort *sharedsort,
+									   Sharedsort *sharedsort2, int sortmem,
+									   bool progress);
 
 
 /*
diff --git a/src/backend/access/nbtree/nbtsplitloc.c b/src/backend/access/nbtree/nbtsplitloc.c
index d045fe0d10c3..f43ec6774b44 100644
--- a/src/backend/access/nbtree/nbtsplitloc.c
+++ b/src/backend/access/nbtree/nbtsplitloc.c
@@ -65,25 +65,25 @@ typedef struct
 } FindSplitData;
 
 static void _bt_recsplitloc(FindSplitData *state,
-				OffsetNumber firstoldonright, bool newitemonleft,
-				int olddataitemstoleft, Size firstoldonrightsz);
+							OffsetNumber firstoldonright, bool newitemonleft,
+							int olddataitemstoleft, Size firstoldonrightsz);
 static void _bt_deltasortsplits(FindSplitData *state, double fillfactormult,
-					bool usemult);
+								bool usemult);
 static int	_bt_splitcmp(const void *arg1, const void *arg2);
 static bool _bt_afternewitemoff(FindSplitData *state, OffsetNumber maxoff,
-					int leaffillfactor, bool *usemult);
+								int leaffillfactor, bool *usemult);
 static bool _bt_adjacenthtid(ItemPointer lowhtid, ItemPointer highhtid);
 static OffsetNumber _bt_bestsplitloc(FindSplitData *state, int perfectpenalty,
-				 bool *newitemonleft);
-static int _bt_strategy(FindSplitData *state, SplitPoint *leftpage,
-			 SplitPoint *rightpage, FindSplitStrat *strategy);
+									 bool *newitemonleft);
+static int	_bt_strategy(FindSplitData *state, SplitPoint *leftpage,
+						 SplitPoint *rightpage, FindSplitStrat *strategy);
 static void _bt_interval_edges(FindSplitData *state,
-				   SplitPoint **leftinterval, SplitPoint **rightinterval);
+							   SplitPoint **leftinterval, SplitPoint **rightinterval);
 static inline int _bt_split_penalty(FindSplitData *state, SplitPoint *split);
 static inline IndexTuple _bt_split_lastleft(FindSplitData *state,
-				   SplitPoint *split);
+											SplitPoint *split);
 static inline IndexTuple _bt_split_firstright(FindSplitData *state,
-					 SplitPoint *split);
+											  SplitPoint *split);
 
 
 /*
diff --git a/src/backend/access/nbtree/nbtutils.c b/src/backend/access/nbtree/nbtutils.c
index 1238d544cd3a..431b8477e955 100644
--- a/src/backend/access/nbtree/nbtutils.c
+++ b/src/backend/access/nbtree/nbtutils.c
@@ -37,22 +37,22 @@ typedef struct BTSortArrayContext
 } BTSortArrayContext;
 
 static Datum _bt_find_extreme_element(IndexScanDesc scan, ScanKey skey,
-						 StrategyNumber strat,
-						 Datum *elems, int nelems);
-static int _bt_sort_array_elements(IndexScanDesc scan, ScanKey skey,
-						bool reverse,
-						Datum *elems, int nelems);
+									  StrategyNumber strat,
+									  Datum *elems, int nelems);
+static int	_bt_sort_array_elements(IndexScanDesc scan, ScanKey skey,
+									bool reverse,
+									Datum *elems, int nelems);
 static int	_bt_compare_array_elements(const void *a, const void *b, void *arg);
 static bool _bt_compare_scankey_args(IndexScanDesc scan, ScanKey op,
-						 ScanKey leftarg, ScanKey rightarg,
-						 bool *result);
+									 ScanKey leftarg, ScanKey rightarg,
+									 bool *result);
 static bool _bt_fix_scankey_strategy(ScanKey skey, int16 *indoption);
 static void _bt_mark_scankey_required(ScanKey skey);
 static bool _bt_check_rowcompare(ScanKey skey,
-					 IndexTuple tuple, int tupnatts, TupleDesc tupdesc,
-					 ScanDirection dir, bool *continuescan);
-static int _bt_keep_natts(Relation rel, IndexTuple lastleft,
-			   IndexTuple firstright, BTScanInsert itup_key);
+								 IndexTuple tuple, int tupnatts, TupleDesc tupdesc,
+								 ScanDirection dir, bool *continuescan);
+static int	_bt_keep_natts(Relation rel, IndexTuple lastleft,
+						   IndexTuple firstright, BTScanInsert itup_key);
 
 
 /*
diff --git a/src/backend/access/tablesample/bernoulli.c b/src/backend/access/tablesample/bernoulli.c
index 42d373ab83ba..5ff5bdbd5336 100644
--- a/src/backend/access/tablesample/bernoulli.c
+++ b/src/backend/access/tablesample/bernoulli.c
@@ -43,19 +43,19 @@ typedef struct
 
 
 static void bernoulli_samplescangetsamplesize(PlannerInfo *root,
-								  RelOptInfo *baserel,
-								  List *paramexprs,
-								  BlockNumber *pages,
-								  double *tuples);
+											  RelOptInfo *baserel,
+											  List *paramexprs,
+											  BlockNumber *pages,
+											  double *tuples);
 static void bernoulli_initsamplescan(SampleScanState *node,
-						 int eflags);
+									 int eflags);
 static void bernoulli_beginsamplescan(SampleScanState *node,
-						  Datum *params,
-						  int nparams,
-						  uint32 seed);
+									  Datum *params,
+									  int nparams,
+									  uint32 seed);
 static OffsetNumber bernoulli_nextsampletuple(SampleScanState *node,
-						  BlockNumber blockno,
-						  OffsetNumber maxoffset);
+											  BlockNumber blockno,
+											  OffsetNumber maxoffset);
 
 
 /*
diff --git a/src/backend/access/tablesample/system.c b/src/backend/access/tablesample/system.c
index b1fb9b320154..4693c667b5d2 100644
--- a/src/backend/access/tablesample/system.c
+++ b/src/backend/access/tablesample/system.c
@@ -45,20 +45,20 @@ typedef struct
 
 
 static void system_samplescangetsamplesize(PlannerInfo *root,
-							   RelOptInfo *baserel,
-							   List *paramexprs,
-							   BlockNumber *pages,
-							   double *tuples);
+										   RelOptInfo *baserel,
+										   List *paramexprs,
+										   BlockNumber *pages,
+										   double *tuples);
 static void system_initsamplescan(SampleScanState *node,
-					  int eflags);
+								  int eflags);
 static void system_beginsamplescan(SampleScanState *node,
-					   Datum *params,
-					   int nparams,
-					   uint32 seed);
+								   Datum *params,
+								   int nparams,
+								   uint32 seed);
 static BlockNumber system_nextsampleblock(SampleScanState *node, BlockNumber nblocks);
 static OffsetNumber system_nextsampletuple(SampleScanState *node,
-					   BlockNumber blockno,
-					   OffsetNumber maxoffset);
+										   BlockNumber blockno,
+										   OffsetNumber maxoffset);
 
 
 /*
diff --git a/src/backend/access/transam/clog.c b/src/backend/access/transam/clog.c
index 3bd55fbdd337..47db7a8a88c3 100644
--- a/src/backend/access/transam/clog.c
+++ b/src/backend/access/transam/clog.c
@@ -92,20 +92,20 @@ static int	ZeroCLOGPage(int pageno, bool writeXlog);
 static bool CLOGPagePrecedes(int page1, int page2);
 static void WriteZeroPageXlogRec(int pageno);
 static void WriteTruncateXlogRec(int pageno, TransactionId oldestXact,
-					 Oid oldestXidDb);
+								 Oid oldestXidDb);
 static void TransactionIdSetPageStatus(TransactionId xid, int nsubxids,
-						   TransactionId *subxids, XidStatus status,
-						   XLogRecPtr lsn, int pageno,
-						   bool all_xact_same_page);
+									   TransactionId *subxids, XidStatus status,
+									   XLogRecPtr lsn, int pageno,
+									   bool all_xact_same_page);
 static void TransactionIdSetStatusBit(TransactionId xid, XidStatus status,
-						  XLogRecPtr lsn, int slotno);
+									  XLogRecPtr lsn, int slotno);
 static void set_status_by_pages(int nsubxids, TransactionId *subxids,
-					XidStatus status, XLogRecPtr lsn);
+								XidStatus status, XLogRecPtr lsn);
 static bool TransactionGroupUpdateXidStatus(TransactionId xid,
-								XidStatus status, XLogRecPtr lsn, int pageno);
+											XidStatus status, XLogRecPtr lsn, int pageno);
 static void TransactionIdSetPageStatusInternal(TransactionId xid, int nsubxids,
-								   TransactionId *subxids, XidStatus status,
-								   XLogRecPtr lsn, int pageno);
+											   TransactionId *subxids, XidStatus status,
+											   XLogRecPtr lsn, int pageno);
 
 
 /*
diff --git a/src/backend/access/transam/commit_ts.c b/src/backend/access/transam/commit_ts.c
index 8162f884bd1d..3316734e14fc 100644
--- a/src/backend/access/transam/commit_ts.c
+++ b/src/backend/access/transam/commit_ts.c
@@ -103,10 +103,10 @@ CommitTimestampShared *commitTsShared;
 bool		track_commit_timestamp;
 
 static void SetXidCommitTsInPage(TransactionId xid, int nsubxids,
-					 TransactionId *subxids, TimestampTz ts,
-					 RepOriginId nodeid, int pageno);
+								 TransactionId *subxids, TimestampTz ts,
+								 RepOriginId nodeid, int pageno);
 static void TransactionIdSetCommitTs(TransactionId xid, TimestampTz ts,
-						 RepOriginId nodeid, int slotno);
+									 RepOriginId nodeid, int slotno);
 static void error_commit_ts_disabled(void);
 static int	ZeroCommitTsPage(int pageno, bool writeXlog);
 static bool CommitTsPagePrecedes(int page1, int page2);
@@ -115,8 +115,8 @@ static void DeactivateCommitTs(void);
 static void WriteZeroPageXlogRec(int pageno);
 static void WriteTruncateXlogRec(int pageno, TransactionId oldestXid);
 static void WriteSetTimestampXlogRec(TransactionId mainxid, int nsubxids,
-						 TransactionId *subxids, TimestampTz timestamp,
-						 RepOriginId nodeid);
+									 TransactionId *subxids, TimestampTz timestamp,
+									 RepOriginId nodeid);
 
 /*
  * TransactionTreeSetCommitTsData
diff --git a/src/backend/access/transam/generic_xlog.c b/src/backend/access/transam/generic_xlog.c
index 5b00b7275bf1..d2591601030b 100644
--- a/src/backend/access/transam/generic_xlog.c
+++ b/src/backend/access/transam/generic_xlog.c
@@ -69,11 +69,11 @@ struct GenericXLogState
 };
 
 static void writeFragment(PageData *pageData, OffsetNumber offset,
-			  OffsetNumber len, const char *data);
+						  OffsetNumber len, const char *data);
 static void computeRegionDelta(PageData *pageData,
-				   const char *curpage, const char *targetpage,
-				   int targetStart, int targetEnd,
-				   int validStart, int validEnd);
+							   const char *curpage, const char *targetpage,
+							   int targetStart, int targetEnd,
+							   int validStart, int validEnd);
 static void computeDelta(PageData *pageData, Page curpage, Page targetpage);
 static void applyPageRedo(Page page, const char *delta, Size deltaSize);
 
diff --git a/src/backend/access/transam/multixact.c b/src/backend/access/transam/multixact.c
index 763b99970714..4004468fa018 100644
--- a/src/backend/access/transam/multixact.c
+++ b/src/backend/access/transam/multixact.c
@@ -340,7 +340,7 @@ static MemoryContext MXactContext = NULL;
 /* internal MultiXactId management */
 static void MultiXactIdSetOldestVisible(void);
 static void RecordNewMultiXact(MultiXactId multi, MultiXactOffset offset,
-				   int nmembers, MultiXactMember *members);
+							   int nmembers, MultiXactMember *members);
 static MultiXactId GetNewMultiXactId(int nmembers, MultiXactOffset *offset);
 
 /* MultiXact cache management */
@@ -348,7 +348,7 @@ static int	mxactMemberComparator(const void *arg1, const void *arg2);
 static MultiXactId mXactCacheGetBySet(int nmembers, MultiXactMember *members);
 static int	mXactCacheGetById(MultiXactId multi, MultiXactMember **members);
 static void mXactCachePut(MultiXactId multi, int nmembers,
-			  MultiXactMember *members);
+						  MultiXactMember *members);
 
 static char *mxstatus_to_string(MultiXactStatus status);
 
@@ -358,17 +358,17 @@ static int	ZeroMultiXactMemberPage(int pageno, bool writeXlog);
 static bool MultiXactOffsetPagePrecedes(int page1, int page2);
 static bool MultiXactMemberPagePrecedes(int page1, int page2);
 static bool MultiXactOffsetPrecedes(MultiXactOffset offset1,
-						MultiXactOffset offset2);
+									MultiXactOffset offset2);
 static void ExtendMultiXactOffset(MultiXactId multi);
 static void ExtendMultiXactMember(MultiXactOffset offset, int nmembers);
 static bool MultiXactOffsetWouldWrap(MultiXactOffset boundary,
-						 MultiXactOffset start, uint32 distance);
+									 MultiXactOffset start, uint32 distance);
 static bool SetOffsetVacuumLimit(bool is_startup);
 static bool find_multixact_start(MultiXactId multi, MultiXactOffset *result);
 static void WriteMZeroPageXlogRec(int pageno, uint8 info);
 static void WriteMTruncateXlogRec(Oid oldestMultiDB,
-					  MultiXactId startOff, MultiXactId endOff,
-					  MultiXactOffset startMemb, MultiXactOffset endMemb);
+								  MultiXactId startOff, MultiXactId endOff,
+								  MultiXactOffset startMemb, MultiXactOffset endMemb);
 
 
 /*
diff --git a/src/backend/access/transam/slru.c b/src/backend/access/transam/slru.c
index 974d42fc866f..2dbc65b125ba 100644
--- a/src/backend/access/transam/slru.c
+++ b/src/backend/access/transam/slru.c
@@ -129,12 +129,12 @@ static void SimpleLruWaitIO(SlruCtl ctl, int slotno);
 static void SlruInternalWritePage(SlruCtl ctl, int slotno, SlruFlush fdata);
 static bool SlruPhysicalReadPage(SlruCtl ctl, int pageno, int slotno);
 static bool SlruPhysicalWritePage(SlruCtl ctl, int pageno, int slotno,
-					  SlruFlush fdata);
+								  SlruFlush fdata);
 static void SlruReportIOError(SlruCtl ctl, int pageno, TransactionId xid);
 static int	SlruSelectLRUPage(SlruCtl ctl, int pageno);
 
 static bool SlruScanDirCbDeleteCutoff(SlruCtl ctl, char *filename,
-						  int segpage, void *data);
+									  int segpage, void *data);
 static void SlruInternalDeleteSegment(SlruCtl ctl, char *filename);
 
 /*
diff --git a/src/backend/access/transam/twophase.c b/src/backend/access/transam/twophase.c
index 21e028283c13..5196d6181dd8 100644
--- a/src/backend/access/transam/twophase.c
+++ b/src/backend/access/transam/twophase.c
@@ -202,31 +202,31 @@ static GlobalTransaction MyLockedGxact = NULL;
 static bool twophaseExitRegistered = false;
 
 static void RecordTransactionCommitPrepared(TransactionId xid,
-								int nchildren,
-								TransactionId *children,
-								int nrels,
-								RelFileNode *rels,
-								int ninvalmsgs,
-								SharedInvalidationMessage *invalmsgs,
-								bool initfileinval,
-								const char *gid);
+											int nchildren,
+											TransactionId *children,
+											int nrels,
+											RelFileNode *rels,
+											int ninvalmsgs,
+											SharedInvalidationMessage *invalmsgs,
+											bool initfileinval,
+											const char *gid);
 static void RecordTransactionAbortPrepared(TransactionId xid,
-							   int nchildren,
-							   TransactionId *children,
-							   int nrels,
-							   RelFileNode *rels,
-							   const char *gid);
+										   int nchildren,
+										   TransactionId *children,
+										   int nrels,
+										   RelFileNode *rels,
+										   const char *gid);
 static void ProcessRecords(char *bufptr, TransactionId xid,
-			   const TwoPhaseCallback callbacks[]);
+						   const TwoPhaseCallback callbacks[]);
 static void RemoveGXact(GlobalTransaction gxact);
 
 static void XlogReadTwoPhaseData(XLogRecPtr lsn, char **buf, int *len);
 static char *ProcessTwoPhaseBuffer(TransactionId xid,
-					  XLogRecPtr prepare_start_lsn,
-					  bool fromdisk, bool setParent, bool setNextXid);
+								   XLogRecPtr prepare_start_lsn,
+								   bool fromdisk, bool setParent, bool setNextXid);
 static void MarkAsPreparingGuts(GlobalTransaction gxact, TransactionId xid,
-					const char *gid, TimestampTz prepared_at, Oid owner,
-					Oid databaseid);
+								const char *gid, TimestampTz prepared_at, Oid owner,
+								Oid databaseid);
 static void RemoveTwoPhaseFile(TransactionId xid, bool giveWarning);
 static void RecreateTwoPhaseFile(TransactionId xid, void *content, int len);
 
diff --git a/src/backend/access/transam/xact.c b/src/backend/access/transam/xact.c
index b40da74e0920..f1108ccc8b7d 100644
--- a/src/backend/access/transam/xact.c
+++ b/src/backend/access/transam/xact.c
@@ -312,11 +312,11 @@ static void AtStart_Memory(void);
 static void AtStart_ResourceOwner(void);
 static void CallXactCallbacks(XactEvent event);
 static void CallSubXactCallbacks(SubXactEvent event,
-					 SubTransactionId mySubid,
-					 SubTransactionId parentSubid);
+								 SubTransactionId mySubid,
+								 SubTransactionId parentSubid);
 static void CleanupTransaction(void);
 static void CheckTransactionBlock(bool isTopLevel, bool throwError,
-					  const char *stmtType);
+								  const char *stmtType);
 static void CommitTransaction(void);
 static TransactionId RecordTransactionAbort(bool isSubXact);
 static void StartTransaction(void);
diff --git a/src/backend/access/transam/xlog.c b/src/backend/access/transam/xlog.c
index c7c9e91b6a45..1c7dd51b9f1c 100644
--- a/src/backend/access/transam/xlog.c
+++ b/src/backend/access/transam/xlog.c
@@ -869,7 +869,7 @@ static void SetCurrentChunkStartTime(TimestampTz xtime);
 static void CheckRequiredParameterValues(void);
 static void XLogReportParameters(void);
 static void checkTimeLineSwitch(XLogRecPtr lsn, TimeLineID newTLI,
-					TimeLineID prevTLI);
+								TimeLineID prevTLI);
 static void LocalSetXLogInsertAllowed(void);
 static void CreateEndOfRecoveryRecord(void);
 static void CheckPointGuts(XLogRecPtr checkPointRedo, int flags);
@@ -880,16 +880,16 @@ static void AdvanceXLInsertBuffer(XLogRecPtr upto, bool opportunistic);
 static bool XLogCheckpointNeeded(XLogSegNo new_segno);
 static void XLogWrite(XLogwrtRqst WriteRqst, bool flexible);
 static bool InstallXLogFileSegment(XLogSegNo *segno, char *tmppath,
-					   bool find_free, XLogSegNo max_segno,
-					   bool use_lock);
-static int XLogFileRead(XLogSegNo segno, int emode, TimeLineID tli,
-			 int source, bool notfoundOk);
+								   bool find_free, XLogSegNo max_segno,
+								   bool use_lock);
+static int	XLogFileRead(XLogSegNo segno, int emode, TimeLineID tli,
+						 int source, bool notfoundOk);
 static int	XLogFileReadAnyTLI(XLogSegNo segno, int emode, int source);
-static int XLogPageRead(XLogReaderState *xlogreader, XLogRecPtr targetPagePtr,
-			 int reqLen, XLogRecPtr targetRecPtr, char *readBuf,
-			 TimeLineID *readTLI);
+static int	XLogPageRead(XLogReaderState *xlogreader, XLogRecPtr targetPagePtr,
+						 int reqLen, XLogRecPtr targetRecPtr, char *readBuf,
+						 TimeLineID *readTLI);
 static bool WaitForWALToBecomeAvailable(XLogRecPtr RecPtr, bool randAccess,
-							bool fetching_ckpt, XLogRecPtr tliRecPtr);
+										bool fetching_ckpt, XLogRecPtr tliRecPtr);
 static int	emode_for_corrupt_record(int emode, XLogRecPtr RecPtr);
 static void XLogFileClose(void);
 static void PreallocXlogFiles(XLogRecPtr endptr);
@@ -901,10 +901,10 @@ static void ValidateXLOGDirectoryStructure(void);
 static void CleanupBackupHistory(void);
 static void UpdateMinRecoveryPoint(XLogRecPtr lsn, bool force);
 static XLogRecord *ReadRecord(XLogReaderState *xlogreader, XLogRecPtr RecPtr,
-		   int emode, bool fetching_ckpt);
+							  int emode, bool fetching_ckpt);
 static void CheckRecoveryConsistency(void);
 static XLogRecord *ReadCheckpointRecord(XLogReaderState *xlogreader,
-					 XLogRecPtr RecPtr, int whichChkpti, bool report);
+										XLogRecPtr RecPtr, int whichChkpti, bool report);
 static bool rescanLatestTimeLine(void);
 static void WriteControlFile(void);
 static void ReadControlFile(void);
@@ -918,19 +918,19 @@ static void xlog_outdesc(StringInfo buf, XLogReaderState *record);
 static void pg_start_backup_callback(int code, Datum arg);
 static void pg_stop_backup_callback(int code, Datum arg);
 static bool read_backup_label(XLogRecPtr *checkPointLoc,
-				  bool *backupEndRequired, bool *backupFromStandby);
+							  bool *backupEndRequired, bool *backupFromStandby);
 static bool read_tablespace_map(List **tablespaces);
 
 static void rm_redo_error_callback(void *arg);
 static int	get_sync_bit(int method);
 
 static void CopyXLogRecordToWAL(int write_len, bool isLogSwitch,
-					XLogRecData *rdata,
-					XLogRecPtr StartPos, XLogRecPtr EndPos);
+								XLogRecData *rdata,
+								XLogRecPtr StartPos, XLogRecPtr EndPos);
 static void ReserveXLogInsertLocation(int size, XLogRecPtr *StartPos,
-						  XLogRecPtr *EndPos, XLogRecPtr *PrevPtr);
+									  XLogRecPtr *EndPos, XLogRecPtr *PrevPtr);
 static bool ReserveXLogSwitch(XLogRecPtr *StartPos, XLogRecPtr *EndPos,
-				  XLogRecPtr *PrevPtr);
+							  XLogRecPtr *PrevPtr);
 static XLogRecPtr WaitXLogInsertionsToFinish(XLogRecPtr upto);
 static char *GetXLogBuffer(XLogRecPtr ptr);
 static XLogRecPtr XLogBytePosToRecPtr(uint64 bytepos);
diff --git a/src/backend/access/transam/xloginsert.c b/src/backend/access/transam/xloginsert.c
index 1c76dcfa0dcf..d3c0a93a2e79 100644
--- a/src/backend/access/transam/xloginsert.c
+++ b/src/backend/access/transam/xloginsert.c
@@ -107,10 +107,10 @@ static bool begininsert_called = false;
 static MemoryContext xloginsert_cxt;
 
 static XLogRecData *XLogRecordAssemble(RmgrId rmid, uint8 info,
-				   XLogRecPtr RedoRecPtr, bool doPageWrites,
-				   XLogRecPtr *fpw_lsn);
+									   XLogRecPtr RedoRecPtr, bool doPageWrites,
+									   XLogRecPtr *fpw_lsn);
 static bool XLogCompressBackupBlock(char *page, uint16 hole_offset,
-						uint16 hole_length, char *dest, uint16 *dlen);
+									uint16 hole_length, char *dest, uint16 *dlen);
 
 /*
  * Begin constructing a WAL record. This must be called before the
diff --git a/src/backend/access/transam/xlogreader.c b/src/backend/access/transam/xlogreader.c
index 9196aa3aaefa..88be7fe02239 100644
--- a/src/backend/access/transam/xlogreader.c
+++ b/src/backend/access/transam/xlogreader.c
@@ -32,11 +32,11 @@
 static bool allocate_recordbuf(XLogReaderState *state, uint32 reclength);
 
 static bool ValidXLogRecordHeader(XLogReaderState *state, XLogRecPtr RecPtr,
-					  XLogRecPtr PrevRecPtr, XLogRecord *record, bool randAccess);
+								  XLogRecPtr PrevRecPtr, XLogRecord *record, bool randAccess);
 static bool ValidXLogRecord(XLogReaderState *state, XLogRecord *record,
-				XLogRecPtr recptr);
-static int ReadPageInternal(XLogReaderState *state, XLogRecPtr pageptr,
-				 int reqLen);
+							XLogRecPtr recptr);
+static int	ReadPageInternal(XLogReaderState *state, XLogRecPtr pageptr,
+							 int reqLen);
 static void report_invalid_record(XLogReaderState *state, const char *fmt,...) pg_attribute_printf(2, 3);
 
 static void ResetDecoder(XLogReaderState *state);
diff --git a/src/backend/catalog/aclchk.c b/src/backend/catalog/aclchk.c
index f0fdda1eb913..2797af35c3d4 100644
--- a/src/backend/catalog/aclchk.c
+++ b/src/backend/catalog/aclchk.c
@@ -120,26 +120,26 @@ static List *objectNamesToOids(ObjectType objtype, List *objnames);
 static List *objectsInSchemaToOids(ObjectType objtype, List *nspnames);
 static List *getRelationsInNamespace(Oid namespaceId, char relkind);
 static void expand_col_privileges(List *colnames, Oid table_oid,
-					  AclMode this_privileges,
-					  AclMode *col_privileges,
-					  int num_col_privileges);
+								  AclMode this_privileges,
+								  AclMode *col_privileges,
+								  int num_col_privileges);
 static void expand_all_col_privileges(Oid table_oid, Form_pg_class classForm,
-						  AclMode this_privileges,
-						  AclMode *col_privileges,
-						  int num_col_privileges);
+									  AclMode this_privileges,
+									  AclMode *col_privileges,
+									  int num_col_privileges);
 static AclMode string_to_privilege(const char *privname);
 static const char *privilege_to_string(AclMode privilege);
 static AclMode restrict_and_check_grant(bool is_grant, AclMode avail_goptions,
-						 bool all_privs, AclMode privileges,
-						 Oid objectId, Oid grantorId,
-						 ObjectType objtype, const char *objname,
-						 AttrNumber att_number, const char *colname);
+										bool all_privs, AclMode privileges,
+										Oid objectId, Oid grantorId,
+										ObjectType objtype, const char *objname,
+										AttrNumber att_number, const char *colname);
 static AclMode pg_aclmask(ObjectType objtype, Oid table_oid, AttrNumber attnum,
-		   Oid roleid, AclMode mask, AclMaskHow how);
+						  Oid roleid, AclMode mask, AclMaskHow how);
 static void recordExtensionInitPriv(Oid objoid, Oid classoid, int objsubid,
-						Acl *new_acl);
+									Acl *new_acl);
 static void recordExtensionInitPrivWorker(Oid objoid, Oid classoid, int objsubid,
-							  Acl *new_acl);
+										  Acl *new_acl);
 
 
 #ifdef ACLDEBUG
diff --git a/src/backend/catalog/dependency.c b/src/backend/catalog/dependency.c
index 7af1670c0d2d..6315fc4b2fd3 100644
--- a/src/backend/catalog/dependency.c
+++ b/src/backend/catalog/dependency.c
@@ -186,36 +186,36 @@ static const Oid object_classes[] = {
 
 
 static void findDependentObjects(const ObjectAddress *object,
-					 int objflags,
-					 int flags,
-					 ObjectAddressStack *stack,
-					 ObjectAddresses *targetObjects,
-					 const ObjectAddresses *pendingObjects,
-					 Relation *depRel);
+								 int objflags,
+								 int flags,
+								 ObjectAddressStack *stack,
+								 ObjectAddresses *targetObjects,
+								 const ObjectAddresses *pendingObjects,
+								 Relation *depRel);
 static void reportDependentObjects(const ObjectAddresses *targetObjects,
-					   DropBehavior behavior,
-					   int flags,
-					   const ObjectAddress *origObject);
+								   DropBehavior behavior,
+								   int flags,
+								   const ObjectAddress *origObject);
 static void deleteOneObject(const ObjectAddress *object,
-				Relation *depRel, int32 flags);
+							Relation *depRel, int32 flags);
 static void doDeletion(const ObjectAddress *object, int flags);
 static void AcquireDeletionLock(const ObjectAddress *object, int flags);
 static void ReleaseDeletionLock(const ObjectAddress *object);
 static bool find_expr_references_walker(Node *node,
-							find_expr_references_context *context);
+										find_expr_references_context *context);
 static void eliminate_duplicate_dependencies(ObjectAddresses *addrs);
 static int	object_address_comparator(const void *a, const void *b);
 static void add_object_address(ObjectClass oclass, Oid objectId, int32 subId,
-				   ObjectAddresses *addrs);
-static void add_exact_object_address_extra(const ObjectAddress *object,
-							   const ObjectAddressExtra *extra,
 							   ObjectAddresses *addrs);
+static void add_exact_object_address_extra(const ObjectAddress *object,
+										   const ObjectAddressExtra *extra,
+										   ObjectAddresses *addrs);
 static bool object_address_present_add_flags(const ObjectAddress *object,
-								 int flags,
-								 ObjectAddresses *addrs);
+											 int flags,
+											 ObjectAddresses *addrs);
 static bool stack_address_present_add_flags(const ObjectAddress *object,
-								int flags,
-								ObjectAddressStack *stack);
+											int flags,
+											ObjectAddressStack *stack);
 static void DeleteInitPrivs(const ObjectAddress *object);
 
 
diff --git a/src/backend/catalog/heap.c b/src/backend/catalog/heap.c
index 3c46c2510713..86820eecfc7d 100644
--- a/src/backend/catalog/heap.c
+++ b/src/backend/catalog/heap.c
@@ -94,37 +94,37 @@ Oid			binary_upgrade_next_heap_pg_class_oid = InvalidOid;
 Oid			binary_upgrade_next_toast_pg_class_oid = InvalidOid;
 
 static void AddNewRelationTuple(Relation pg_class_desc,
-					Relation new_rel_desc,
-					Oid new_rel_oid,
-					Oid new_type_oid,
-					Oid reloftype,
-					Oid relowner,
-					char relkind,
-					TransactionId relfrozenxid,
-					TransactionId relminmxid,
-					Datum relacl,
-					Datum reloptions);
+								Relation new_rel_desc,
+								Oid new_rel_oid,
+								Oid new_type_oid,
+								Oid reloftype,
+								Oid relowner,
+								char relkind,
+								TransactionId relfrozenxid,
+								TransactionId relminmxid,
+								Datum relacl,
+								Datum reloptions);
 static ObjectAddress AddNewRelationType(const char *typeName,
-				   Oid typeNamespace,
-				   Oid new_rel_oid,
-				   char new_rel_kind,
-				   Oid ownerid,
-				   Oid new_row_type,
-				   Oid new_array_type);
+										Oid typeNamespace,
+										Oid new_rel_oid,
+										char new_rel_kind,
+										Oid ownerid,
+										Oid new_row_type,
+										Oid new_array_type);
 static void RelationRemoveInheritance(Oid relid);
-static Oid StoreRelCheck(Relation rel, const char *ccname, Node *expr,
-			  bool is_validated, bool is_local, int inhcount,
-			  bool is_no_inherit, bool is_internal);
+static Oid	StoreRelCheck(Relation rel, const char *ccname, Node *expr,
+						  bool is_validated, bool is_local, int inhcount,
+						  bool is_no_inherit, bool is_internal);
 static void StoreConstraints(Relation rel, List *cooked_constraints,
-				 bool is_internal);
+							 bool is_internal);
 static bool MergeWithExistingConstraint(Relation rel, const char *ccname, Node *expr,
-							bool allow_merge, bool is_local,
-							bool is_initially_valid,
-							bool is_no_inherit);
+										bool allow_merge, bool is_local,
+										bool is_initially_valid,
+										bool is_no_inherit);
 static void SetRelationNumChecks(Relation rel, int numchecks);
 static Node *cookConstraint(ParseState *pstate,
-			   Node *raw_constraint,
-			   char *relname);
+							Node *raw_constraint,
+							char *relname);
 static List *insert_ordered_unique_oid(List *list, Oid datum);
 
 
diff --git a/src/backend/catalog/index.c b/src/backend/catalog/index.c
index b7d1ac0923f8..50c8bb9ce658 100644
--- a/src/backend/catalog/index.c
+++ b/src/backend/catalog/index.c
@@ -99,31 +99,31 @@ typedef struct
 /* non-export function prototypes */
 static bool relationHasPrimaryKey(Relation rel);
 static TupleDesc ConstructTupleDescriptor(Relation heapRelation,
-						 IndexInfo *indexInfo,
-						 List *indexColNames,
-						 Oid accessMethodObjectId,
-						 Oid *collationObjectId,
-						 Oid *classObjectId);
+										  IndexInfo *indexInfo,
+										  List *indexColNames,
+										  Oid accessMethodObjectId,
+										  Oid *collationObjectId,
+										  Oid *classObjectId);
 static void InitializeAttributeOids(Relation indexRelation,
-						int numatts, Oid indexoid);
+									int numatts, Oid indexoid);
 static void AppendAttributeTuples(Relation indexRelation, int numatts);
 static void UpdateIndexRelation(Oid indexoid, Oid heapoid,
-					Oid parentIndexId,
-					IndexInfo *indexInfo,
-					Oid *collationOids,
-					Oid *classOids,
-					int16 *coloptions,
-					bool primary,
-					bool isexclusion,
-					bool immediate,
-					bool isvalid,
-					bool isready);
+								Oid parentIndexId,
+								IndexInfo *indexInfo,
+								Oid *collationOids,
+								Oid *classOids,
+								int16 *coloptions,
+								bool primary,
+								bool isexclusion,
+								bool immediate,
+								bool isvalid,
+								bool isready);
 static void index_update_stats(Relation rel,
-				   bool hasindex,
-				   double reltuples);
+							   bool hasindex,
+							   double reltuples);
 static void IndexCheckExclusion(Relation heapRelation,
-					Relation indexRelation,
-					IndexInfo *indexInfo);
+								Relation indexRelation,
+								IndexInfo *indexInfo);
 static bool validate_index_callback(ItemPointer itemptr, void *opaque);
 static bool ReindexIsCurrentlyProcessingIndex(Oid indexOid);
 static void SetReindexProcessing(Oid heapOid, Oid indexOid);
diff --git a/src/backend/catalog/namespace.c b/src/backend/catalog/namespace.c
index cdd5006a72f7..97b911679cf8 100644
--- a/src/backend/catalog/namespace.c
+++ b/src/backend/catalog/namespace.c
@@ -198,7 +198,7 @@ static void RemoveTempRelations(Oid tempNamespaceId);
 static void RemoveTempRelationsCallback(int code, Datum arg);
 static void NamespaceCallback(Datum arg, int cacheid, uint32 hashvalue);
 static bool MatchNamedCall(HeapTuple proctup, int nargs, List *argnames,
-			   int **argnumbers);
+						   int **argnumbers);
 
 
 /*
diff --git a/src/backend/catalog/objectaddress.c b/src/backend/catalog/objectaddress.c
index 7a32ac1fb13f..2235e5626fbf 100644
--- a/src/backend/catalog/objectaddress.c
+++ b/src/backend/catalog/objectaddress.c
@@ -761,38 +761,38 @@ const ObjectAddress InvalidObjectAddress =
 };
 
 static ObjectAddress get_object_address_unqualified(ObjectType objtype,
-							   Value *strval, bool missing_ok);
+													Value *strval, bool missing_ok);
 static ObjectAddress get_relation_by_qualified_name(ObjectType objtype,
-							   List *object, Relation *relp,
-							   LOCKMODE lockmode, bool missing_ok);
+													List *object, Relation *relp,
+													LOCKMODE lockmode, bool missing_ok);
 static ObjectAddress get_object_address_relobject(ObjectType objtype,
-							 List *object, Relation *relp, bool missing_ok);
+												  List *object, Relation *relp, bool missing_ok);
 static ObjectAddress get_object_address_attribute(ObjectType objtype,
-							 List *object, Relation *relp,
-							 LOCKMODE lockmode, bool missing_ok);
+												  List *object, Relation *relp,
+												  LOCKMODE lockmode, bool missing_ok);
 static ObjectAddress get_object_address_attrdef(ObjectType objtype,
-						   List *object, Relation *relp, LOCKMODE lockmode,
-						   bool missing_ok);
+												List *object, Relation *relp, LOCKMODE lockmode,
+												bool missing_ok);
 static ObjectAddress get_object_address_type(ObjectType objtype,
-						TypeName *typename, bool missing_ok);
+											 TypeName *typename, bool missing_ok);
 static ObjectAddress get_object_address_opcf(ObjectType objtype, List *object,
-						bool missing_ok);
+											 bool missing_ok);
 static ObjectAddress get_object_address_opf_member(ObjectType objtype,
-							  List *object, bool missing_ok);
+												   List *object, bool missing_ok);
 
 static ObjectAddress get_object_address_usermapping(List *object,
-							   bool missing_ok);
+													bool missing_ok);
 static ObjectAddress get_object_address_publication_rel(List *object,
-								   Relation *relp,
-								   bool missing_ok);
+														Relation *relp,
+														bool missing_ok);
 static ObjectAddress get_object_address_defacl(List *object,
-						  bool missing_ok);
+											   bool missing_ok);
 static const ObjectPropertyType *get_object_property_data(Oid class_id);
 
 static void getRelationDescription(StringInfo buffer, Oid relid);
 static void getOpFamilyDescription(StringInfo buffer, Oid opfid);
 static void getRelationTypeDescription(StringInfo buffer, Oid relid,
-						   int32 objectSubId);
+									   int32 objectSubId);
 static void getProcedureTypeDescription(StringInfo buffer, Oid procid);
 static void getConstraintTypeDescription(StringInfo buffer, Oid constroid);
 static void getOpFamilyIdentity(StringInfo buffer, Oid opfid, List **object);
diff --git a/src/backend/catalog/partition.c b/src/backend/catalog/partition.c
index da98c54391bc..8134098fc175 100644
--- a/src/backend/catalog/partition.c
+++ b/src/backend/catalog/partition.c
@@ -35,7 +35,7 @@
 
 static Oid	get_partition_parent_worker(Relation inhRel, Oid relid);
 static void get_partition_ancestors_worker(Relation inhRel, Oid relid,
-							   List **ancestors);
+										   List **ancestors);
 
 /*
  * get_partition_parent
diff --git a/src/backend/catalog/pg_aggregate.c b/src/backend/catalog/pg_aggregate.c
index 310d45266ffc..7cab039dedcd 100644
--- a/src/backend/catalog/pg_aggregate.c
+++ b/src/backend/catalog/pg_aggregate.c
@@ -34,9 +34,9 @@
 #include "utils/syscache.h"
 
 
-static Oid lookup_agg_function(List *fnName, int nargs, Oid *input_types,
-					Oid variadicArgType,
-					Oid *rettype);
+static Oid	lookup_agg_function(List *fnName, int nargs, Oid *input_types,
+								Oid variadicArgType,
+								Oid *rettype);
 
 
 /*
diff --git a/src/backend/catalog/pg_operator.c b/src/backend/catalog/pg_operator.c
index 0f9a12b35c27..bcaa26c99780 100644
--- a/src/backend/catalog/pg_operator.c
+++ b/src/backend/catalog/pg_operator.c
@@ -38,27 +38,27 @@
 #include "utils/syscache.h"
 
 
-static Oid OperatorGet(const char *operatorName,
-			Oid operatorNamespace,
-			Oid leftObjectId,
-			Oid rightObjectId,
-			bool *defined);
-
-static Oid OperatorLookup(List *operatorName,
-			   Oid leftObjectId,
-			   Oid rightObjectId,
-			   bool *defined);
-
-static Oid OperatorShellMake(const char *operatorName,
-				  Oid operatorNamespace,
-				  Oid leftTypeId,
-				  Oid rightTypeId);
-
-static Oid get_other_operator(List *otherOp,
-				   Oid otherLeftTypeId, Oid otherRightTypeId,
-				   const char *operatorName, Oid operatorNamespace,
-				   Oid leftTypeId, Oid rightTypeId,
-				   bool isCommutator);
+static Oid	OperatorGet(const char *operatorName,
+						Oid operatorNamespace,
+						Oid leftObjectId,
+						Oid rightObjectId,
+						bool *defined);
+
+static Oid	OperatorLookup(List *operatorName,
+						   Oid leftObjectId,
+						   Oid rightObjectId,
+						   bool *defined);
+
+static Oid	OperatorShellMake(const char *operatorName,
+							  Oid operatorNamespace,
+							  Oid leftTypeId,
+							  Oid rightTypeId);
+
+static Oid	get_other_operator(List *otherOp,
+							   Oid otherLeftTypeId, Oid otherRightTypeId,
+							   const char *operatorName, Oid operatorNamespace,
+							   Oid leftTypeId, Oid rightTypeId,
+							   bool isCommutator);
 
 
 /*
diff --git a/src/backend/catalog/pg_proc.c b/src/backend/catalog/pg_proc.c
index 3487caf82f6f..002584b9416f 100644
--- a/src/backend/catalog/pg_proc.c
+++ b/src/backend/catalog/pg_proc.c
@@ -50,10 +50,10 @@ typedef struct
 } parse_error_callback_arg;
 
 static void sql_function_parse_error_callback(void *arg);
-static int match_prosrc_to_query(const char *prosrc, const char *queryText,
-					  int cursorpos);
+static int	match_prosrc_to_query(const char *prosrc, const char *queryText,
+								  int cursorpos);
 static bool match_prosrc_to_literal(const char *prosrc, const char *literal,
-						int cursorpos, int *newcursorpos);
+									int cursorpos, int *newcursorpos);
 
 
 /* ----------------------------------------------------------------
diff --git a/src/backend/catalog/pg_shdepend.c b/src/backend/catalog/pg_shdepend.c
index 4a9b4efb0501..fb7f8ddefc98 100644
--- a/src/backend/catalog/pg_shdepend.c
+++ b/src/backend/catalog/pg_shdepend.c
@@ -84,23 +84,23 @@ typedef struct
 static void getOidListDiff(Oid *list1, int *nlist1, Oid *list2, int *nlist2);
 static Oid	classIdGetDbId(Oid classId);
 static void shdepChangeDep(Relation sdepRel,
-			   Oid classid, Oid objid, int32 objsubid,
-			   Oid refclassid, Oid refobjid,
-			   SharedDependencyType deptype);
+						   Oid classid, Oid objid, int32 objsubid,
+						   Oid refclassid, Oid refobjid,
+						   SharedDependencyType deptype);
 static void shdepAddDependency(Relation sdepRel,
-				   Oid classId, Oid objectId, int32 objsubId,
-				   Oid refclassId, Oid refobjId,
-				   SharedDependencyType deptype);
+							   Oid classId, Oid objectId, int32 objsubId,
+							   Oid refclassId, Oid refobjId,
+							   SharedDependencyType deptype);
 static void shdepDropDependency(Relation sdepRel,
-					Oid classId, Oid objectId, int32 objsubId,
-					bool drop_subobjects,
-					Oid refclassId, Oid refobjId,
-					SharedDependencyType deptype);
+								Oid classId, Oid objectId, int32 objsubId,
+								bool drop_subobjects,
+								Oid refclassId, Oid refobjId,
+								SharedDependencyType deptype);
 static void storeObjectDescription(StringInfo descs,
-					   SharedDependencyObjectType type,
-					   ObjectAddress *object,
-					   SharedDependencyType deptype,
-					   int count);
+								   SharedDependencyObjectType type,
+								   ObjectAddress *object,
+								   SharedDependencyType deptype,
+								   int count);
 static bool isSharedObjectPinned(Oid classId, Oid objectId, Relation sdepRel);
 
 
diff --git a/src/backend/catalog/toasting.c b/src/backend/catalog/toasting.c
index cf20ddb4e928..de6282a66750 100644
--- a/src/backend/catalog/toasting.c
+++ b/src/backend/catalog/toasting.c
@@ -38,9 +38,9 @@
 Oid			binary_upgrade_next_toast_pg_type_oid = InvalidOid;
 
 static void CheckAndCreateToastTable(Oid relOid, Datum reloptions,
-						 LOCKMODE lockmode, bool check);
+									 LOCKMODE lockmode, bool check);
 static bool create_toast_table(Relation rel, Oid toastOid, Oid toastIndexOid,
-				   Datum reloptions, LOCKMODE lockmode, bool check);
+							   Datum reloptions, LOCKMODE lockmode, bool check);
 static bool needs_toast_table(Relation rel);
 
 
diff --git a/src/backend/commands/analyze.c b/src/backend/commands/analyze.c
index e0ec62c88c79..6cb545c12654 100644
--- a/src/backend/commands/analyze.c
+++ b/src/backend/commands/analyze.c
@@ -85,24 +85,24 @@ static BufferAccessStrategy vac_strategy;
 
 
 static void do_analyze_rel(Relation onerel,
-			   VacuumParams *params, List *va_cols,
-			   AcquireSampleRowsFunc acquirefunc, BlockNumber relpages,
-			   bool inh, bool in_outer_xact, int elevel);
+						   VacuumParams *params, List *va_cols,
+						   AcquireSampleRowsFunc acquirefunc, BlockNumber relpages,
+						   bool inh, bool in_outer_xact, int elevel);
 static void compute_index_stats(Relation onerel, double totalrows,
-					AnlIndexData *indexdata, int nindexes,
-					HeapTuple *rows, int numrows,
-					MemoryContext col_context);
+								AnlIndexData *indexdata, int nindexes,
+								HeapTuple *rows, int numrows,
+								MemoryContext col_context);
 static VacAttrStats *examine_attribute(Relation onerel, int attnum,
-				  Node *index_expr);
-static int acquire_sample_rows(Relation onerel, int elevel,
-					HeapTuple *rows, int targrows,
-					double *totalrows, double *totaldeadrows);
+									   Node *index_expr);
+static int	acquire_sample_rows(Relation onerel, int elevel,
+								HeapTuple *rows, int targrows,
+								double *totalrows, double *totaldeadrows);
 static int	compare_rows(const void *a, const void *b);
-static int acquire_inherited_sample_rows(Relation onerel, int elevel,
-							  HeapTuple *rows, int targrows,
-							  double *totalrows, double *totaldeadrows);
+static int	acquire_inherited_sample_rows(Relation onerel, int elevel,
+										  HeapTuple *rows, int targrows,
+										  double *totalrows, double *totaldeadrows);
 static void update_attstats(Oid relid, bool inh,
-				int natts, VacAttrStats **vacattrstats);
+							int natts, VacAttrStats **vacattrstats);
 static Datum std_fetch_func(VacAttrStatsP stats, int rownum, bool *isNull);
 static Datum ind_fetch_func(VacAttrStatsP stats, int rownum, bool *isNull);
 
@@ -1615,25 +1615,25 @@ typedef struct
 
 
 static void compute_trivial_stats(VacAttrStatsP stats,
-					  AnalyzeAttrFetchFunc fetchfunc,
-					  int samplerows,
-					  double totalrows);
+								  AnalyzeAttrFetchFunc fetchfunc,
+								  int samplerows,
+								  double totalrows);
 static void compute_distinct_stats(VacAttrStatsP stats,
-					   AnalyzeAttrFetchFunc fetchfunc,
-					   int samplerows,
-					   double totalrows);
+								   AnalyzeAttrFetchFunc fetchfunc,
+								   int samplerows,
+								   double totalrows);
 static void compute_scalar_stats(VacAttrStatsP stats,
-					 AnalyzeAttrFetchFunc fetchfunc,
-					 int samplerows,
-					 double totalrows);
+								 AnalyzeAttrFetchFunc fetchfunc,
+								 int samplerows,
+								 double totalrows);
 static int	compare_scalars(const void *a, const void *b, void *arg);
 static int	compare_mcvs(const void *a, const void *b);
-static int analyze_mcv_list(int *mcv_counts,
-				 int num_mcv,
-				 double stadistinct,
-				 double stanullfrac,
-				 int samplerows,
-				 double totalrows);
+static int	analyze_mcv_list(int *mcv_counts,
+							 int num_mcv,
+							 double stadistinct,
+							 double stanullfrac,
+							 int samplerows,
+							 double totalrows);
 
 
 /*
diff --git a/src/backend/commands/async.c b/src/backend/commands/async.c
index 5a7ee0de4cfb..738e6ec7e296 100644
--- a/src/backend/commands/async.c
+++ b/src/backend/commands/async.c
@@ -387,9 +387,9 @@ static void asyncQueueFillWarning(void);
 static bool SignalBackends(void);
 static void asyncQueueReadAllNotifications(void);
 static bool asyncQueueProcessPageEntries(volatile QueuePosition *current,
-							 QueuePosition stop,
-							 char *page_buffer,
-							 Snapshot snapshot);
+										 QueuePosition stop,
+										 char *page_buffer,
+										 Snapshot snapshot);
 static void asyncQueueAdvanceTail(void);
 static void ProcessIncomingNotify(void);
 static bool AsyncExistsPendingNotify(const char *channel, const char *payload);
diff --git a/src/backend/commands/cluster.c b/src/backend/commands/cluster.c
index cacc023619c4..ebaec4f8dd9e 100644
--- a/src/backend/commands/cluster.c
+++ b/src/backend/commands/cluster.c
@@ -70,8 +70,8 @@ typedef struct
 
 static void rebuild_relation(Relation OldHeap, Oid indexOid, bool verbose);
 static void copy_table_data(Oid OIDNewHeap, Oid OIDOldHeap, Oid OIDOldIndex,
-				bool verbose, bool *pSwapToastByContent,
-				TransactionId *pFreezeXid, MultiXactId *pCutoffMulti);
+							bool verbose, bool *pSwapToastByContent,
+							TransactionId *pFreezeXid, MultiXactId *pCutoffMulti);
 static List *get_tables_to_cluster(MemoryContext cluster_context);
 
 
diff --git a/src/backend/commands/copy.c b/src/backend/commands/copy.c
index 5f81aa57d42d..b00891ffd2b8 100644
--- a/src/backend/commands/copy.c
+++ b/src/backend/commands/copy.c
@@ -354,13 +354,13 @@ static const char BinarySignature[11] = "PGCOPY\n\377\r\n\0";
 
 /* non-export function prototypes */
 static CopyState BeginCopy(ParseState *pstate, bool is_from, Relation rel,
-		  RawStmt *raw_query, Oid queryRelId, List *attnamelist,
-		  List *options);
+						   RawStmt *raw_query, Oid queryRelId, List *attnamelist,
+						   List *options);
 static void EndCopy(CopyState cstate);
 static void ClosePipeToProgram(CopyState cstate);
 static CopyState BeginCopyTo(ParseState *pstate, Relation rel, RawStmt *query,
-			Oid queryRelId, const char *filename, bool is_program,
-			List *attnamelist, List *options);
+							 Oid queryRelId, const char *filename, bool is_program,
+							 List *attnamelist, List *options);
 static void EndCopyTo(CopyState cstate);
 static uint64 DoCopyTo(CopyState cstate);
 static uint64 CopyTo(CopyState cstate);
@@ -370,14 +370,14 @@ static bool CopyReadLineText(CopyState cstate);
 static int	CopyReadAttributesText(CopyState cstate);
 static int	CopyReadAttributesCSV(CopyState cstate);
 static Datum CopyReadBinaryAttribute(CopyState cstate,
-						int column_no, FmgrInfo *flinfo,
-						Oid typioparam, int32 typmod,
-						bool *isnull);
+									 int column_no, FmgrInfo *flinfo,
+									 Oid typioparam, int32 typmod,
+									 bool *isnull);
 static void CopyAttributeOutText(CopyState cstate, char *string);
 static void CopyAttributeOutCSV(CopyState cstate, char *string,
-					bool use_quote, bool single_attr);
+								bool use_quote, bool single_attr);
 static List *CopyGetAttnums(TupleDesc tupDesc, Relation rel,
-			   List *attnamelist);
+							List *attnamelist);
 static char *limit_printout_length(const char *str);
 
 /* Low-level communications functions */
@@ -388,8 +388,8 @@ static void CopySendData(CopyState cstate, const void *databuf, int datasize);
 static void CopySendString(CopyState cstate, const char *str);
 static void CopySendChar(CopyState cstate, char c);
 static void CopySendEndOfRow(CopyState cstate);
-static int CopyGetData(CopyState cstate, void *databuf,
-			int minread, int maxread);
+static int	CopyGetData(CopyState cstate, void *databuf,
+						int minread, int maxread);
 static void CopySendInt32(CopyState cstate, int32 val);
 static bool CopyGetInt32(CopyState cstate, int32 *val);
 static void CopySendInt16(CopyState cstate, int16 val);
diff --git a/src/backend/commands/dbcommands.c b/src/backend/commands/dbcommands.c
index 5015e5b3b602..15207bf75a17 100644
--- a/src/backend/commands/dbcommands.c
+++ b/src/backend/commands/dbcommands.c
@@ -82,11 +82,11 @@ static void createdb_failure_callback(int code, Datum arg);
 static void movedb(const char *dbname, const char *tblspcname);
 static void movedb_failure_callback(int code, Datum arg);
 static bool get_db_info(const char *name, LOCKMODE lockmode,
-			Oid *dbIdP, Oid *ownerIdP,
-			int *encodingP, bool *dbIsTemplateP, bool *dbAllowConnP,
-			Oid *dbLastSysOidP, TransactionId *dbFrozenXidP,
-			MultiXactId *dbMinMultiP,
-			Oid *dbTablespace, char **dbCollate, char **dbCtype);
+						Oid *dbIdP, Oid *ownerIdP,
+						int *encodingP, bool *dbIsTemplateP, bool *dbAllowConnP,
+						Oid *dbLastSysOidP, TransactionId *dbFrozenXidP,
+						MultiXactId *dbMinMultiP,
+						Oid *dbTablespace, char **dbCollate, char **dbCtype);
 static bool have_createdb_privilege(void);
 static void remove_dbtablespaces(Oid db_id);
 static bool check_db_file_conflict(Oid db_id);
diff --git a/src/backend/commands/dropcmds.c b/src/backend/commands/dropcmds.c
index f26a2f4779a3..be7a40d5d2d8 100644
--- a/src/backend/commands/dropcmds.c
+++ b/src/backend/commands/dropcmds.c
@@ -32,13 +32,13 @@
 
 
 static void does_not_exist_skipping(ObjectType objtype,
-						Node *object);
+									Node *object);
 static bool owningrel_does_not_exist_skipping(List *object,
-								  const char **msg, char **name);
+											  const char **msg, char **name);
 static bool schema_does_not_exist_skipping(List *object,
-							   const char **msg, char **name);
+										   const char **msg, char **name);
 static bool type_in_list_does_not_exist_skipping(List *typenames,
-									 const char **msg, char **name);
+												 const char **msg, char **name);
 
 
 /*
diff --git a/src/backend/commands/event_trigger.c b/src/backend/commands/event_trigger.c
index adb77d8f6925..efef120c038f 100644
--- a/src/backend/commands/event_trigger.c
+++ b/src/backend/commands/event_trigger.c
@@ -148,15 +148,15 @@ typedef struct SQLDropObject
 } SQLDropObject;
 
 static void AlterEventTriggerOwner_internal(Relation rel,
-								HeapTuple tup,
-								Oid newOwnerId);
+											HeapTuple tup,
+											Oid newOwnerId);
 static event_trigger_command_tag_check_result check_ddl_tag(const char *tag);
 static event_trigger_command_tag_check_result check_table_rewrite_ddl_tag(
-							const char *tag);
+																		  const char *tag);
 static void error_duplicate_filter_variable(const char *defname);
 static Datum filter_list_to_array(List *filterlist);
-static Oid insert_event_trigger_tuple(const char *trigname, const char *eventname,
-						   Oid evtOwner, Oid funcoid, List *tags);
+static Oid	insert_event_trigger_tuple(const char *trigname, const char *eventname,
+									   Oid evtOwner, Oid funcoid, List *tags);
 static void validate_ddl_tags(const char *filtervar, List *taglist);
 static void validate_table_rewrite_tags(const char *filtervar, List *taglist);
 static void EventTriggerInvoke(List *fn_oid_list, EventTriggerData *trigdata);
diff --git a/src/backend/commands/explain.c b/src/backend/commands/explain.c
index 039a87c15519..92969636b756 100644
--- a/src/backend/commands/explain.c
+++ b/src/backend/commands/explain.c
@@ -54,79 +54,79 @@ explain_get_index_name_hook_type explain_get_index_name_hook = NULL;
 #define X_NOWHITESPACE 4
 
 static void ExplainOneQuery(Query *query, int cursorOptions,
-				IntoClause *into, ExplainState *es,
-				const char *queryString, ParamListInfo params,
-				QueryEnvironment *queryEnv);
+							IntoClause *into, ExplainState *es,
+							const char *queryString, ParamListInfo params,
+							QueryEnvironment *queryEnv);
 static void report_triggers(ResultRelInfo *rInfo, bool show_relname,
-				ExplainState *es);
+							ExplainState *es);
 static double elapsed_time(instr_time *starttime);
 static bool ExplainPreScanNode(PlanState *planstate, Bitmapset **rels_used);
 static void ExplainNode(PlanState *planstate, List *ancestors,
-			const char *relationship, const char *plan_name,
-			ExplainState *es);
+						const char *relationship, const char *plan_name,
+						ExplainState *es);
 static void show_plan_tlist(PlanState *planstate, List *ancestors,
-				ExplainState *es);
+							ExplainState *es);
 static void show_expression(Node *node, const char *qlabel,
-				PlanState *planstate, List *ancestors,
-				bool useprefix, ExplainState *es);
+							PlanState *planstate, List *ancestors,
+							bool useprefix, ExplainState *es);
 static void show_qual(List *qual, const char *qlabel,
-		  PlanState *planstate, List *ancestors,
-		  bool useprefix, ExplainState *es);
+					  PlanState *planstate, List *ancestors,
+					  bool useprefix, ExplainState *es);
 static void show_scan_qual(List *qual, const char *qlabel,
-			   PlanState *planstate, List *ancestors,
-			   ExplainState *es);
+						   PlanState *planstate, List *ancestors,
+						   ExplainState *es);
 static void show_upper_qual(List *qual, const char *qlabel,
-				PlanState *planstate, List *ancestors,
-				ExplainState *es);
+							PlanState *planstate, List *ancestors,
+							ExplainState *es);
 static void show_sort_keys(SortState *sortstate, List *ancestors,
-			   ExplainState *es);
+						   ExplainState *es);
 static void show_merge_append_keys(MergeAppendState *mstate, List *ancestors,
-					   ExplainState *es);
+								   ExplainState *es);
 static void show_agg_keys(AggState *astate, List *ancestors,
-			  ExplainState *es);
+						  ExplainState *es);
 static void show_grouping_sets(PlanState *planstate, Agg *agg,
-				   List *ancestors, ExplainState *es);
+							   List *ancestors, ExplainState *es);
 static void show_grouping_set_keys(PlanState *planstate,
-					   Agg *aggnode, Sort *sortnode,
-					   List *context, bool useprefix,
-					   List *ancestors, ExplainState *es);
+								   Agg *aggnode, Sort *sortnode,
+								   List *context, bool useprefix,
+								   List *ancestors, ExplainState *es);
 static void show_group_keys(GroupState *gstate, List *ancestors,
-				ExplainState *es);
+							ExplainState *es);
 static void show_sort_group_keys(PlanState *planstate, const char *qlabel,
-					 int nkeys, AttrNumber *keycols,
-					 Oid *sortOperators, Oid *collations, bool *nullsFirst,
-					 List *ancestors, ExplainState *es);
+								 int nkeys, AttrNumber *keycols,
+								 Oid *sortOperators, Oid *collations, bool *nullsFirst,
+								 List *ancestors, ExplainState *es);
 static void show_sortorder_options(StringInfo buf, Node *sortexpr,
-					   Oid sortOperator, Oid collation, bool nullsFirst);
+								   Oid sortOperator, Oid collation, bool nullsFirst);
 static void show_tablesample(TableSampleClause *tsc, PlanState *planstate,
-				 List *ancestors, ExplainState *es);
+							 List *ancestors, ExplainState *es);
 static void show_sort_info(SortState *sortstate, ExplainState *es);
 static void show_hash_info(HashState *hashstate, ExplainState *es);
 static void show_tidbitmap_info(BitmapHeapScanState *planstate,
-					ExplainState *es);
+								ExplainState *es);
 static void show_instrumentation_count(const char *qlabel, int which,
-						   PlanState *planstate, ExplainState *es);
+									   PlanState *planstate, ExplainState *es);
 static void show_foreignscan_info(ForeignScanState *fsstate, ExplainState *es);
 static void show_eval_params(Bitmapset *bms_params, ExplainState *es);
 static const char *explain_get_index_name(Oid indexId);
 static void show_buffer_usage(ExplainState *es, const BufferUsage *usage);
 static void ExplainIndexScanDetails(Oid indexid, ScanDirection indexorderdir,
-						ExplainState *es);
+									ExplainState *es);
 static void ExplainScanTarget(Scan *plan, ExplainState *es);
 static void ExplainModifyTarget(ModifyTable *plan, ExplainState *es);
 static void ExplainTargetRel(Plan *plan, Index rti, ExplainState *es);
 static void show_modifytable_info(ModifyTableState *mtstate, List *ancestors,
-					  ExplainState *es);
+								  ExplainState *es);
 static void ExplainMemberNodes(PlanState **planstates, int nsubnodes,
-				   int nplans, List *ancestors, ExplainState *es);
+							   int nplans, List *ancestors, ExplainState *es);
 static void ExplainSubPlans(List *plans, List *ancestors,
-				const char *relationship, ExplainState *es);
+							const char *relationship, ExplainState *es);
 static void ExplainCustomChildren(CustomScanState *css,
-					  List *ancestors, ExplainState *es);
+								  List *ancestors, ExplainState *es);
 static void ExplainProperty(const char *qlabel, const char *unit,
-				const char *value, bool numeric, ExplainState *es);
+							const char *value, bool numeric, ExplainState *es);
 static void ExplainDummyGroup(const char *objtype, const char *labelname,
-				  ExplainState *es);
+							  ExplainState *es);
 static void ExplainXMLTag(const char *tagname, int flags, ExplainState *es);
 static void ExplainJSONLineEnding(ExplainState *es);
 static void ExplainYAMLLineStarting(ExplainState *es);
diff --git a/src/backend/commands/extension.c b/src/backend/commands/extension.c
index 300bb1261f75..59ca5cd5a9ff 100644
--- a/src/backend/commands/extension.c
+++ b/src/backend/commands/extension.c
@@ -104,27 +104,27 @@ typedef struct ExtensionVersionInfo
 
 /* Local functions */
 static List *find_update_path(List *evi_list,
-				 ExtensionVersionInfo *evi_start,
-				 ExtensionVersionInfo *evi_target,
-				 bool reject_indirect,
-				 bool reinitialize);
-static Oid get_required_extension(char *reqExtensionName,
-					   char *extensionName,
-					   char *origSchemaName,
-					   bool cascade,
-					   List *parents,
-					   bool is_create);
+							  ExtensionVersionInfo *evi_start,
+							  ExtensionVersionInfo *evi_target,
+							  bool reject_indirect,
+							  bool reinitialize);
+static Oid	get_required_extension(char *reqExtensionName,
+								   char *extensionName,
+								   char *origSchemaName,
+								   bool cascade,
+								   List *parents,
+								   bool is_create);
 static void get_available_versions_for_extension(ExtensionControlFile *pcontrol,
-									 Tuplestorestate *tupstore,
-									 TupleDesc tupdesc);
+												 Tuplestorestate *tupstore,
+												 TupleDesc tupdesc);
 static Datum convert_requires_to_datum(List *requires);
 static void ApplyExtensionUpdates(Oid extensionOid,
-					  ExtensionControlFile *pcontrol,
-					  const char *initialVersion,
-					  List *updateVersions,
-					  char *origSchemaName,
-					  bool cascade,
-					  bool is_create);
+								  ExtensionControlFile *pcontrol,
+								  const char *initialVersion,
+								  List *updateVersions,
+								  char *origSchemaName,
+								  bool cascade,
+								  bool is_create);
 static char *read_whole_file(const char *filename, int *length);
 
 
diff --git a/src/backend/commands/indexcmds.c b/src/backend/commands/indexcmds.c
index 62a4c4fb9beb..40ea629ffe7f 100644
--- a/src/backend/commands/indexcmds.c
+++ b/src/backend/commands/indexcmds.c
@@ -70,23 +70,23 @@
 /* non-export function prototypes */
 static void CheckPredicate(Expr *predicate);
 static void ComputeIndexAttrs(IndexInfo *indexInfo,
-				  Oid *typeOidP,
-				  Oid *collationOidP,
-				  Oid *classOidP,
-				  int16 *colOptionP,
-				  List *attList,
-				  List *exclusionOpNames,
-				  Oid relId,
-				  const char *accessMethodName, Oid accessMethodId,
-				  bool amcanorder,
-				  bool isconstraint);
+							  Oid *typeOidP,
+							  Oid *collationOidP,
+							  Oid *classOidP,
+							  int16 *colOptionP,
+							  List *attList,
+							  List *exclusionOpNames,
+							  Oid relId,
+							  const char *accessMethodName, Oid accessMethodId,
+							  bool amcanorder,
+							  bool isconstraint);
 static char *ChooseIndexName(const char *tabname, Oid namespaceId,
-				List *colnames, List *exclusionOpNames,
-				bool primary, bool isconstraint);
+							 List *colnames, List *exclusionOpNames,
+							 bool primary, bool isconstraint);
 static char *ChooseIndexNameAddition(List *colnames);
 static List *ChooseIndexColumnNames(List *indexElems);
 static void RangeVarCallbackForReindexIndex(const RangeVar *relation,
-								Oid relId, Oid oldRelId, void *arg);
+											Oid relId, Oid oldRelId, void *arg);
 static bool ReindexRelationConcurrently(Oid relationOid, int options);
 static void ReindexPartitionedIndex(Relation parentIdx);
 static void update_relispartition(Oid relationId, bool newval);
diff --git a/src/backend/commands/lockcmds.c b/src/backend/commands/lockcmds.c
index 97cf0bc4add9..417d595a7fd3 100644
--- a/src/backend/commands/lockcmds.c
+++ b/src/backend/commands/lockcmds.c
@@ -31,7 +31,7 @@
 static void LockTableRecurse(Oid reloid, LOCKMODE lockmode, bool nowait, Oid userid);
 static AclResult LockTableAclCheck(Oid relid, LOCKMODE lockmode, Oid userid);
 static void RangeVarCallbackForLockTable(const RangeVar *rv, Oid relid,
-							 Oid oldrelid, void *arg);
+										 Oid oldrelid, void *arg);
 static void LockViewRecurse(Oid reloid, LOCKMODE lockmode, bool nowait, List *ancestor_views);
 
 /*
diff --git a/src/backend/commands/matview.c b/src/backend/commands/matview.c
index 99bf3c29f27b..dc2940cd4eb9 100644
--- a/src/backend/commands/matview.c
+++ b/src/backend/commands/matview.c
@@ -65,10 +65,10 @@ static bool transientrel_receive(TupleTableSlot *slot, DestReceiver *self);
 static void transientrel_shutdown(DestReceiver *self);
 static void transientrel_destroy(DestReceiver *self);
 static uint64 refresh_matview_datafill(DestReceiver *dest, Query *query,
-						 const char *queryString);
+									   const char *queryString);
 static char *make_temptable_name_n(char *tempname, int n);
 static void refresh_by_match_merge(Oid matviewOid, Oid tempOid, Oid relowner,
-					   int save_sec_context);
+								   int save_sec_context);
 static void refresh_by_heap_swap(Oid matviewOid, Oid OIDNewHeap, char relpersistence);
 static bool is_usable_unique_index(Relation indexRel);
 static void OpenMatViewIncrementalMaintenance(void);
diff --git a/src/backend/commands/opclasscmds.c b/src/backend/commands/opclasscmds.c
index b8c7b9657f7a..6a1ccdeb826b 100644
--- a/src/backend/commands/opclasscmds.c
+++ b/src/backend/commands/opclasscmds.c
@@ -52,27 +52,27 @@
 
 
 static void AlterOpFamilyAdd(AlterOpFamilyStmt *stmt,
-				 Oid amoid, Oid opfamilyoid,
-				 int maxOpNumber, int maxProcNumber,
-				 List *items);
+							 Oid amoid, Oid opfamilyoid,
+							 int maxOpNumber, int maxProcNumber,
+							 List *items);
 static void AlterOpFamilyDrop(AlterOpFamilyStmt *stmt,
-				  Oid amoid, Oid opfamilyoid,
-				  int maxOpNumber, int maxProcNumber,
-				  List *items);
+							  Oid amoid, Oid opfamilyoid,
+							  int maxOpNumber, int maxProcNumber,
+							  List *items);
 static void processTypesSpec(List *args, Oid *lefttype, Oid *righttype);
 static void assignOperTypes(OpFamilyMember *member, Oid amoid, Oid typeoid);
 static void assignProcTypes(OpFamilyMember *member, Oid amoid, Oid typeoid);
 static void addFamilyMember(List **list, OpFamilyMember *member, bool isProc);
 static void storeOperators(List *opfamilyname, Oid amoid,
-			   Oid opfamilyoid, Oid opclassoid,
-			   List *operators, bool isAdd);
+						   Oid opfamilyoid, Oid opclassoid,
+						   List *operators, bool isAdd);
 static void storeProcedures(List *opfamilyname, Oid amoid,
-				Oid opfamilyoid, Oid opclassoid,
-				List *procedures, bool isAdd);
+							Oid opfamilyoid, Oid opclassoid,
+							List *procedures, bool isAdd);
 static void dropOperators(List *opfamilyname, Oid amoid, Oid opfamilyoid,
-			  List *operators);
+						  List *operators);
 static void dropProcedures(List *opfamilyname, Oid amoid, Oid opfamilyoid,
-			   List *procedures);
+						   List *procedures);
 
 /*
  * OpFamilyCacheLookup
diff --git a/src/backend/commands/policy.c b/src/backend/commands/policy.c
index 6a85e1436915..1df76623adbd 100644
--- a/src/backend/commands/policy.c
+++ b/src/backend/commands/policy.c
@@ -48,7 +48,7 @@
 #include "utils/syscache.h"
 
 static void RangeVarCallbackForPolicy(const RangeVar *rv,
-						  Oid relid, Oid oldrelid, void *arg);
+									  Oid relid, Oid oldrelid, void *arg);
 static char parse_policy_command(const char *cmd_name);
 static Datum *policy_role_list_to_array(List *roles, int *num_roles);
 
diff --git a/src/backend/commands/prepare.c b/src/backend/commands/prepare.c
index fc231caf7077..c278ee7318bb 100644
--- a/src/backend/commands/prepare.c
+++ b/src/backend/commands/prepare.c
@@ -47,7 +47,7 @@ static HTAB *prepared_queries = NULL;
 
 static void InitQueryHashTable(void);
 static ParamListInfo EvaluateParams(PreparedStatement *pstmt, List *params,
-			   const char *queryString, EState *estate);
+									const char *queryString, EState *estate);
 static Datum build_regtype_array(Oid *param_types, int num_params);
 
 /*
diff --git a/src/backend/commands/proclang.c b/src/backend/commands/proclang.c
index b7917618bfff..343cd1dbb054 100644
--- a/src/backend/commands/proclang.c
+++ b/src/backend/commands/proclang.c
@@ -51,8 +51,8 @@ typedef struct
 } PLTemplate;
 
 static ObjectAddress create_proc_lang(const char *languageName, bool replace,
-				 Oid languageOwner, Oid handlerOid, Oid inlineOid,
-				 Oid valOid, bool trusted);
+									  Oid languageOwner, Oid handlerOid, Oid inlineOid,
+									  Oid valOid, bool trusted);
 static PLTemplate *find_language_template(const char *languageName);
 
 /*
diff --git a/src/backend/commands/publicationcmds.c b/src/backend/commands/publicationcmds.c
index 0d32f2d6e348..1ac1a71bd95e 100644
--- a/src/backend/commands/publicationcmds.c
+++ b/src/backend/commands/publicationcmds.c
@@ -53,7 +53,7 @@
 static List *OpenTableList(List *tables);
 static void CloseTableList(List *rels);
 static void PublicationAddTables(Oid pubid, List *rels, bool if_not_exists,
-					 AlterPublicationStmt *stmt);
+								 AlterPublicationStmt *stmt);
 static void PublicationDropTables(Oid pubid, List *rels, bool missing_ok);
 
 static void
diff --git a/src/backend/commands/sequence.c b/src/backend/commands/sequence.c
index e9add1b9873a..0960b339cab0 100644
--- a/src/backend/commands/sequence.c
+++ b/src/backend/commands/sequence.c
@@ -99,13 +99,13 @@ static Relation lock_and_open_sequence(SeqTable seq);
 static void create_seq_hashtable(void);
 static void init_sequence(Oid relid, SeqTable *p_elm, Relation *p_rel);
 static Form_pg_sequence_data read_seq_tuple(Relation rel,
-			   Buffer *buf, HeapTuple seqdatatuple);
+											Buffer *buf, HeapTuple seqdatatuple);
 static void init_params(ParseState *pstate, List *options, bool for_identity,
-			bool isInit,
-			Form_pg_sequence seqform,
-			Form_pg_sequence_data seqdataform,
-			bool *need_seq_rewrite,
-			List **owned_by);
+						bool isInit,
+						Form_pg_sequence seqform,
+						Form_pg_sequence_data seqdataform,
+						bool *need_seq_rewrite,
+						List **owned_by);
 static void do_setval(Oid relid, int64 next, bool iscalled);
 static void process_owned_by(Relation seqrel, List *owned_by, bool for_identity);
 
diff --git a/src/backend/commands/statscmds.c b/src/backend/commands/statscmds.c
index 95ec352abe68..217d3a4533a1 100644
--- a/src/backend/commands/statscmds.c
+++ b/src/backend/commands/statscmds.c
@@ -36,7 +36,7 @@
 
 
 static char *ChooseExtendedStatisticName(const char *name1, const char *name2,
-							const char *label, Oid namespaceid);
+										 const char *label, Oid namespaceid);
 static char *ChooseExtendedStatisticNameAddition(List *exprs);
 
 
diff --git a/src/backend/commands/tablecmds.c b/src/backend/commands/tablecmds.c
index 7fa8dcce6147..602a8dbd1c3a 100644
--- a/src/backend/commands/tablecmds.c
+++ b/src/backend/commands/tablecmds.c
@@ -302,196 +302,196 @@ struct DropRelationCallbackState
 static void truncate_check_rel(Oid relid, Form_pg_class reltuple);
 static void truncate_check_activity(Relation rel);
 static void RangeVarCallbackForTruncate(const RangeVar *relation,
-							Oid relId, Oid oldRelId, void *arg);
+										Oid relId, Oid oldRelId, void *arg);
 static List *MergeAttributes(List *schema, List *supers, char relpersistence,
-				bool is_partition, List **supconstr);
+							 bool is_partition, List **supconstr);
 static bool MergeCheckConstraint(List *constraints, char *name, Node *expr);
 static void MergeAttributesIntoExisting(Relation child_rel, Relation parent_rel);
 static void MergeConstraintsIntoExisting(Relation child_rel, Relation parent_rel);
 static void StoreCatalogInheritance(Oid relationId, List *supers,
-						bool child_is_partition);
+									bool child_is_partition);
 static void StoreCatalogInheritance1(Oid relationId, Oid parentOid,
-						 int32 seqNumber, Relation inhRelation,
-						 bool child_is_partition);
+									 int32 seqNumber, Relation inhRelation,
+									 bool child_is_partition);
 static int	findAttrByName(const char *attributeName, List *schema);
 static void AlterIndexNamespaces(Relation classRel, Relation rel,
-					 Oid oldNspOid, Oid newNspOid, ObjectAddresses *objsMoved);
+								 Oid oldNspOid, Oid newNspOid, ObjectAddresses *objsMoved);
 static void AlterSeqNamespaces(Relation classRel, Relation rel,
-				   Oid oldNspOid, Oid newNspOid, ObjectAddresses *objsMoved,
-				   LOCKMODE lockmode);
+							   Oid oldNspOid, Oid newNspOid, ObjectAddresses *objsMoved,
+							   LOCKMODE lockmode);
 static ObjectAddress ATExecAlterConstraint(Relation rel, AlterTableCmd *cmd,
-					  bool recurse, bool recursing, LOCKMODE lockmode);
+										   bool recurse, bool recursing, LOCKMODE lockmode);
 static ObjectAddress ATExecValidateConstraint(Relation rel, char *constrName,
-						 bool recurse, bool recursing, LOCKMODE lockmode);
-static int transformColumnNameList(Oid relId, List *colList,
-						int16 *attnums, Oid *atttypids);
-static int transformFkeyGetPrimaryKey(Relation pkrel, Oid *indexOid,
-						   List **attnamelist,
-						   int16 *attnums, Oid *atttypids,
-						   Oid *opclasses);
-static Oid transformFkeyCheckAttrs(Relation pkrel,
-						int numattrs, int16 *attnums,
-						Oid *opclasses);
+											  bool recurse, bool recursing, LOCKMODE lockmode);
+static int	transformColumnNameList(Oid relId, List *colList,
+									int16 *attnums, Oid *atttypids);
+static int	transformFkeyGetPrimaryKey(Relation pkrel, Oid *indexOid,
+									   List **attnamelist,
+									   int16 *attnums, Oid *atttypids,
+									   Oid *opclasses);
+static Oid	transformFkeyCheckAttrs(Relation pkrel,
+									int numattrs, int16 *attnums,
+									Oid *opclasses);
 static void checkFkeyPermissions(Relation rel, int16 *attnums, int natts);
 static CoercionPathType findFkeyCast(Oid targetTypeId, Oid sourceTypeId,
-			 Oid *funcid);
+									 Oid *funcid);
 static void validateCheckConstraint(Relation rel, HeapTuple constrtup);
 static void validateForeignKeyConstraint(char *conname,
-							 Relation rel, Relation pkrel,
-							 Oid pkindOid, Oid constraintOid);
+										 Relation rel, Relation pkrel,
+										 Oid pkindOid, Oid constraintOid);
 static void ATController(AlterTableStmt *parsetree,
-			 Relation rel, List *cmds, bool recurse, LOCKMODE lockmode);
+						 Relation rel, List *cmds, bool recurse, LOCKMODE lockmode);
 static void ATPrepCmd(List **wqueue, Relation rel, AlterTableCmd *cmd,
-		  bool recurse, bool recursing, LOCKMODE lockmode);
+					  bool recurse, bool recursing, LOCKMODE lockmode);
 static void ATRewriteCatalogs(List **wqueue, LOCKMODE lockmode);
 static void ATExecCmd(List **wqueue, AlteredTableInfo *tab, Relation rel,
-		  AlterTableCmd *cmd, LOCKMODE lockmode);
+					  AlterTableCmd *cmd, LOCKMODE lockmode);
 static void ATRewriteTables(AlterTableStmt *parsetree,
-				List **wqueue, LOCKMODE lockmode);
+							List **wqueue, LOCKMODE lockmode);
 static void ATRewriteTable(AlteredTableInfo *tab, Oid OIDNewHeap, LOCKMODE lockmode);
 static AlteredTableInfo *ATGetQueueEntry(List **wqueue, Relation rel);
 static void ATSimplePermissions(Relation rel, int allowed_targets);
 static void ATWrongRelkindError(Relation rel, int allowed_targets);
 static void ATSimpleRecursion(List **wqueue, Relation rel,
-				  AlterTableCmd *cmd, bool recurse, LOCKMODE lockmode);
+							  AlterTableCmd *cmd, bool recurse, LOCKMODE lockmode);
 static void ATTypedTableRecursion(List **wqueue, Relation rel, AlterTableCmd *cmd,
-					  LOCKMODE lockmode);
+								  LOCKMODE lockmode);
 static List *find_typed_table_dependencies(Oid typeOid, const char *typeName,
-							  DropBehavior behavior);
+										   DropBehavior behavior);
 static void ATPrepAddColumn(List **wqueue, Relation rel, bool recurse, bool recursing,
-				bool is_view, AlterTableCmd *cmd, LOCKMODE lockmode);
+							bool is_view, AlterTableCmd *cmd, LOCKMODE lockmode);
 static ObjectAddress ATExecAddColumn(List **wqueue, AlteredTableInfo *tab,
-				Relation rel, ColumnDef *colDef,
-				bool recurse, bool recursing,
-				bool if_not_exists, LOCKMODE lockmode);
+									 Relation rel, ColumnDef *colDef,
+									 bool recurse, bool recursing,
+									 bool if_not_exists, LOCKMODE lockmode);
 static bool check_for_column_name_collision(Relation rel, const char *colname,
-								bool if_not_exists);
+											bool if_not_exists);
 static void add_column_datatype_dependency(Oid relid, int32 attnum, Oid typid);
 static void add_column_collation_dependency(Oid relid, int32 attnum, Oid collid);
 static void ATPrepDropNotNull(Relation rel, bool recurse, bool recursing);
 static ObjectAddress ATExecDropNotNull(Relation rel, const char *colName, LOCKMODE lockmode);
 static void ATPrepSetNotNull(List **wqueue, Relation rel,
-				 AlterTableCmd *cmd, bool recurse, bool recursing,
-				 LOCKMODE lockmode);
+							 AlterTableCmd *cmd, bool recurse, bool recursing,
+							 LOCKMODE lockmode);
 static ObjectAddress ATExecSetNotNull(AlteredTableInfo *tab, Relation rel,
-				 const char *colName, LOCKMODE lockmode);
+									  const char *colName, LOCKMODE lockmode);
 static void ATExecCheckNotNull(AlteredTableInfo *tab, Relation rel,
-				   const char *colName, LOCKMODE lockmode);
+							   const char *colName, LOCKMODE lockmode);
 static bool NotNullImpliedByRelConstraints(Relation rel, Form_pg_attribute attr);
 static bool ConstraintImpliedByRelConstraint(Relation scanrel,
-								 List *partConstraint, List *existedConstraints);
+											 List *partConstraint, List *existedConstraints);
 static ObjectAddress ATExecColumnDefault(Relation rel, const char *colName,
-					Node *newDefault, LOCKMODE lockmode);
+										 Node *newDefault, LOCKMODE lockmode);
 static ObjectAddress ATExecAddIdentity(Relation rel, const char *colName,
-				  Node *def, LOCKMODE lockmode);
+									   Node *def, LOCKMODE lockmode);
 static ObjectAddress ATExecSetIdentity(Relation rel, const char *colName,
-				  Node *def, LOCKMODE lockmode);
+									   Node *def, LOCKMODE lockmode);
 static ObjectAddress ATExecDropIdentity(Relation rel, const char *colName, bool missing_ok, LOCKMODE lockmode);
 static void ATPrepSetStatistics(Relation rel, const char *colName, int16 colNum,
-					Node *newValue, LOCKMODE lockmode);
+								Node *newValue, LOCKMODE lockmode);
 static ObjectAddress ATExecSetStatistics(Relation rel, const char *colName, int16 colNum,
-					Node *newValue, LOCKMODE lockmode);
+										 Node *newValue, LOCKMODE lockmode);
 static ObjectAddress ATExecSetOptions(Relation rel, const char *colName,
-				 Node *options, bool isReset, LOCKMODE lockmode);
+									  Node *options, bool isReset, LOCKMODE lockmode);
 static ObjectAddress ATExecSetStorage(Relation rel, const char *colName,
-				 Node *newValue, LOCKMODE lockmode);
+									  Node *newValue, LOCKMODE lockmode);
 static void ATPrepDropColumn(List **wqueue, Relation rel, bool recurse, bool recursing,
-				 AlterTableCmd *cmd, LOCKMODE lockmode);
+							 AlterTableCmd *cmd, LOCKMODE lockmode);
 static ObjectAddress ATExecDropColumn(List **wqueue, Relation rel, const char *colName,
-				 DropBehavior behavior,
-				 bool recurse, bool recursing,
-				 bool missing_ok, LOCKMODE lockmode);
+									  DropBehavior behavior,
+									  bool recurse, bool recursing,
+									  bool missing_ok, LOCKMODE lockmode);
 static ObjectAddress ATExecAddIndex(AlteredTableInfo *tab, Relation rel,
-			   IndexStmt *stmt, bool is_rebuild, LOCKMODE lockmode);
+									IndexStmt *stmt, bool is_rebuild, LOCKMODE lockmode);
 static ObjectAddress ATExecAddConstraint(List **wqueue,
-					AlteredTableInfo *tab, Relation rel,
-					Constraint *newConstraint, bool recurse, bool is_readd,
-					LOCKMODE lockmode);
+										 AlteredTableInfo *tab, Relation rel,
+										 Constraint *newConstraint, bool recurse, bool is_readd,
+										 LOCKMODE lockmode);
 static char *ChooseForeignKeyConstraintNameAddition(List *colnames);
 static ObjectAddress ATExecAddIndexConstraint(AlteredTableInfo *tab, Relation rel,
-						 IndexStmt *stmt, LOCKMODE lockmode);
+											  IndexStmt *stmt, LOCKMODE lockmode);
 static ObjectAddress ATAddCheckConstraint(List **wqueue,
-					 AlteredTableInfo *tab, Relation rel,
-					 Constraint *constr,
-					 bool recurse, bool recursing, bool is_readd,
-					 LOCKMODE lockmode);
+										  AlteredTableInfo *tab, Relation rel,
+										  Constraint *constr,
+										  bool recurse, bool recursing, bool is_readd,
+										  LOCKMODE lockmode);
 static ObjectAddress ATAddForeignKeyConstraint(List **wqueue, AlteredTableInfo *tab,
-						  Relation rel, Constraint *fkconstraint, Oid parentConstr,
-						  bool recurse, bool recursing,
-						  LOCKMODE lockmode);
+											   Relation rel, Constraint *fkconstraint, Oid parentConstr,
+											   bool recurse, bool recursing,
+											   LOCKMODE lockmode);
 static ObjectAddress addFkRecurseReferenced(List **wqueue, Constraint *fkconstraint,
-					   Relation rel, Relation pkrel, Oid indexOid, Oid parentConstr,
-					   int numfks, int16 *pkattnum, int16 *fkattnum,
-					   Oid *pfeqoperators, Oid *ppeqoperators, Oid *ffeqoperators,
-					   bool old_check_ok);
+											Relation rel, Relation pkrel, Oid indexOid, Oid parentConstr,
+											int numfks, int16 *pkattnum, int16 *fkattnum,
+											Oid *pfeqoperators, Oid *ppeqoperators, Oid *ffeqoperators,
+											bool old_check_ok);
 static void addFkRecurseReferencing(List **wqueue, Constraint *fkconstraint,
-						Relation rel, Relation pkrel, Oid indexOid, Oid parentConstr,
-						int numfks, int16 *pkattnum, int16 *fkattnum,
-						Oid *pfeqoperators, Oid *ppeqoperators, Oid *ffeqoperators,
-						bool old_check_ok, LOCKMODE lockmode);
+									Relation rel, Relation pkrel, Oid indexOid, Oid parentConstr,
+									int numfks, int16 *pkattnum, int16 *fkattnum,
+									Oid *pfeqoperators, Oid *ppeqoperators, Oid *ffeqoperators,
+									bool old_check_ok, LOCKMODE lockmode);
 static void CloneForeignKeyConstraints(List **wqueue, Relation parentRel,
-						   Relation partitionRel);
+									   Relation partitionRel);
 static void CloneFkReferenced(Relation parentRel, Relation partitionRel);
 static void CloneFkReferencing(List **wqueue, Relation parentRel,
-				   Relation partRel);
+							   Relation partRel);
 static void createForeignKeyCheckTriggers(Oid myRelOid, Oid refRelOid,
-							  Constraint *fkconstraint, Oid constraintOid,
-							  Oid indexOid);
+										  Constraint *fkconstraint, Oid constraintOid,
+										  Oid indexOid);
 static void createForeignKeyActionTriggers(Relation rel, Oid refRelOid,
-							   Constraint *fkconstraint, Oid constraintOid,
-							   Oid indexOid);
+										   Constraint *fkconstraint, Oid constraintOid,
+										   Oid indexOid);
 static bool tryAttachPartitionForeignKey(ForeignKeyCacheInfo *fk,
-							 Oid partRelid,
-							 Oid parentConstrOid, int numfks,
-							 AttrNumber *mapped_conkey, AttrNumber *confkey,
-							 Oid *conpfeqop);
+										 Oid partRelid,
+										 Oid parentConstrOid, int numfks,
+										 AttrNumber *mapped_conkey, AttrNumber *confkey,
+										 Oid *conpfeqop);
 static void ATExecDropConstraint(Relation rel, const char *constrName,
-					 DropBehavior behavior,
-					 bool recurse, bool recursing,
-					 bool missing_ok, LOCKMODE lockmode);
+								 DropBehavior behavior,
+								 bool recurse, bool recursing,
+								 bool missing_ok, LOCKMODE lockmode);
 static void ATPrepAlterColumnType(List **wqueue,
-					  AlteredTableInfo *tab, Relation rel,
-					  bool recurse, bool recursing,
-					  AlterTableCmd *cmd, LOCKMODE lockmode);
+								  AlteredTableInfo *tab, Relation rel,
+								  bool recurse, bool recursing,
+								  AlterTableCmd *cmd, LOCKMODE lockmode);
 static bool ATColumnChangeRequiresRewrite(Node *expr, AttrNumber varattno);
 static ObjectAddress ATExecAlterColumnType(AlteredTableInfo *tab, Relation rel,
-					  AlterTableCmd *cmd, LOCKMODE lockmode);
+										   AlterTableCmd *cmd, LOCKMODE lockmode);
 static ObjectAddress ATExecAlterColumnGenericOptions(Relation rel, const char *colName,
-								List *options, LOCKMODE lockmode);
+													 List *options, LOCKMODE lockmode);
 static void ATPostAlterTypeCleanup(List **wqueue, AlteredTableInfo *tab,
-					   LOCKMODE lockmode);
+								   LOCKMODE lockmode);
 static void ATPostAlterTypeParse(Oid oldId, Oid oldRelId, Oid refRelId,
-					 char *cmd, List **wqueue, LOCKMODE lockmode,
-					 bool rewrite);
+								 char *cmd, List **wqueue, LOCKMODE lockmode,
+								 bool rewrite);
 static void RebuildConstraintComment(AlteredTableInfo *tab, int pass,
-						 Oid objid, Relation rel, List *domname,
-						 const char *conname);
+									 Oid objid, Relation rel, List *domname,
+									 const char *conname);
 static void TryReuseIndex(Oid oldId, IndexStmt *stmt);
 static void TryReuseForeignKey(Oid oldId, Constraint *con);
 static void change_owner_fix_column_acls(Oid relationOid,
-							 Oid oldOwnerId, Oid newOwnerId);
+										 Oid oldOwnerId, Oid newOwnerId);
 static void change_owner_recurse_to_sequences(Oid relationOid,
-								  Oid newOwnerId, LOCKMODE lockmode);
+											  Oid newOwnerId, LOCKMODE lockmode);
 static ObjectAddress ATExecClusterOn(Relation rel, const char *indexName,
-				LOCKMODE lockmode);
+									 LOCKMODE lockmode);
 static void ATExecDropCluster(Relation rel, LOCKMODE lockmode);
 static bool ATPrepChangePersistence(Relation rel, bool toLogged);
 static void ATPrepSetTableSpace(AlteredTableInfo *tab, Relation rel,
-					const char *tablespacename, LOCKMODE lockmode);
+								const char *tablespacename, LOCKMODE lockmode);
 static void ATExecSetTableSpace(Oid tableOid, Oid newTableSpace, LOCKMODE lockmode);
 static void ATExecSetTableSpaceNoStorage(Relation rel, Oid newTableSpace);
 static void ATExecSetRelOptions(Relation rel, List *defList,
-					AlterTableType operation,
-					LOCKMODE lockmode);
+								AlterTableType operation,
+								LOCKMODE lockmode);
 static void ATExecEnableDisableTrigger(Relation rel, const char *trigname,
-						   char fires_when, bool skip_system, LOCKMODE lockmode);
+									   char fires_when, bool skip_system, LOCKMODE lockmode);
 static void ATExecEnableDisableRule(Relation rel, const char *rulename,
-						char fires_when, LOCKMODE lockmode);
+									char fires_when, LOCKMODE lockmode);
 static void ATPrepAddInherit(Relation child_rel);
 static ObjectAddress ATExecAddInherit(Relation child_rel, RangeVar *parent, LOCKMODE lockmode);
 static ObjectAddress ATExecDropInherit(Relation rel, RangeVar *parent, LOCKMODE lockmode);
 static void drop_parent_dependency(Oid relid, Oid refclassid, Oid refobjid,
-					   DependencyType deptype);
+								   DependencyType deptype);
 static ObjectAddress ATExecAddOf(Relation rel, const TypeName *ofTypename, LOCKMODE lockmode);
 static void ATExecDropOf(Relation rel, LOCKMODE lockmode);
 static void ATExecReplicaIdentity(Relation rel, ReplicaIdentityStmt *stmt, LOCKMODE lockmode);
@@ -504,27 +504,27 @@ static void index_copy_data(Relation rel, RelFileNode newrnode);
 static const char *storage_name(char c);
 
 static void RangeVarCallbackForDropRelation(const RangeVar *rel, Oid relOid,
-								Oid oldRelOid, void *arg);
+											Oid oldRelOid, void *arg);
 static void RangeVarCallbackForAlterRelation(const RangeVar *rv, Oid relid,
-								 Oid oldrelid, void *arg);
+											 Oid oldrelid, void *arg);
 static PartitionSpec *transformPartitionSpec(Relation rel, PartitionSpec *partspec, char *strategy);
 static void ComputePartitionAttrs(ParseState *pstate, Relation rel, List *partParams, AttrNumber *partattrs,
-					  List **partexprs, Oid *partopclass, Oid *partcollation, char strategy);
+								  List **partexprs, Oid *partopclass, Oid *partcollation, char strategy);
 static void CreateInheritance(Relation child_rel, Relation parent_rel);
 static void RemoveInheritance(Relation child_rel, Relation parent_rel);
 static ObjectAddress ATExecAttachPartition(List **wqueue, Relation rel,
-					  PartitionCmd *cmd);
+										   PartitionCmd *cmd);
 static void AttachPartitionEnsureIndexes(Relation rel, Relation attachrel);
 static void QueuePartitionConstraintValidation(List **wqueue, Relation scanrel,
-								   List *partConstraint,
-								   bool validate_default);
+											   List *partConstraint,
+											   bool validate_default);
 static void CloneRowTriggersToPartition(Relation parent, Relation partition);
 static ObjectAddress ATExecDetachPartition(Relation rel, RangeVar *name);
 static ObjectAddress ATExecAttachPartitionIdx(List **wqueue, Relation rel,
-						 RangeVar *name);
+											  RangeVar *name);
 static void validatePartitionedIndex(Relation partedIdx, Relation partedTbl);
 static void refuseDupeIndexAttach(Relation parentIdx, Relation partIdx,
-					  Relation partitionTbl);
+								  Relation partitionTbl);
 static List *GetParentedForeignKeyRefs(Relation partition);
 static void ATDetachCheckNoForeignKeyRefs(Relation partition);
 
diff --git a/src/backend/commands/tablespace.c b/src/backend/commands/tablespace.c
index 33df2ec0af3b..87fab52d83f5 100644
--- a/src/backend/commands/tablespace.c
+++ b/src/backend/commands/tablespace.c
@@ -91,7 +91,7 @@ char	   *temp_tablespaces = NULL;
 
 
 static void create_tablespace_directories(const char *location,
-							  const Oid tablespaceoid);
+										  const Oid tablespaceoid);
 static bool destroy_tablespace_directories(Oid tablespaceoid, bool redo);
 
 
diff --git a/src/backend/commands/trigger.c b/src/backend/commands/trigger.c
index 209021a61a93..3132a13785be 100644
--- a/src/backend/commands/trigger.c
+++ b/src/backend/commands/trigger.c
@@ -83,26 +83,26 @@ static int	MyTriggerDepth = 0;
 static void ConvertTriggerToFK(CreateTrigStmt *stmt, Oid funcoid);
 static void SetTriggerFlags(TriggerDesc *trigdesc, Trigger *trigger);
 static bool GetTupleForTrigger(EState *estate,
-				   EPQState *epqstate,
-				   ResultRelInfo *relinfo,
-				   ItemPointer tid,
-				   LockTupleMode lockmode,
-				   TupleTableSlot *oldslot,
-				   TupleTableSlot **newSlot);
+							   EPQState *epqstate,
+							   ResultRelInfo *relinfo,
+							   ItemPointer tid,
+							   LockTupleMode lockmode,
+							   TupleTableSlot *oldslot,
+							   TupleTableSlot **newSlot);
 static bool TriggerEnabled(EState *estate, ResultRelInfo *relinfo,
-			   Trigger *trigger, TriggerEvent event,
-			   Bitmapset *modifiedCols,
-			   TupleTableSlot *oldslot, TupleTableSlot *newslot);
+						   Trigger *trigger, TriggerEvent event,
+						   Bitmapset *modifiedCols,
+						   TupleTableSlot *oldslot, TupleTableSlot *newslot);
 static HeapTuple ExecCallTriggerFunc(TriggerData *trigdata,
-					int tgindx,
-					FmgrInfo *finfo,
-					Instrumentation *instr,
-					MemoryContext per_tuple_context);
+									 int tgindx,
+									 FmgrInfo *finfo,
+									 Instrumentation *instr,
+									 MemoryContext per_tuple_context);
 static void AfterTriggerSaveEvent(EState *estate, ResultRelInfo *relinfo,
-					  int event, bool row_trigger,
-					  TupleTableSlot *oldtup, TupleTableSlot *newtup,
-					  List *recheckIndexes, Bitmapset *modifiedCols,
-					  TransitionCaptureState *transition_capture);
+								  int event, bool row_trigger,
+								  TupleTableSlot *oldtup, TupleTableSlot *newtup,
+								  List *recheckIndexes, Bitmapset *modifiedCols,
+								  TransitionCaptureState *transition_capture);
 static void AfterTriggerEnlargeQueryState(void);
 static bool before_stmt_triggers_fired(Oid relid, CmdType cmdType);
 
@@ -3843,21 +3843,21 @@ struct AfterTriggersTableData
 static AfterTriggersData afterTriggers;
 
 static void AfterTriggerExecute(EState *estate,
-					AfterTriggerEvent event,
-					ResultRelInfo *relInfo,
-					TriggerDesc *trigdesc,
-					FmgrInfo *finfo,
-					Instrumentation *instr,
-					MemoryContext per_tuple_context,
-					TupleTableSlot *trig_tuple_slot1,
-					TupleTableSlot *trig_tuple_slot2);
+								AfterTriggerEvent event,
+								ResultRelInfo *relInfo,
+								TriggerDesc *trigdesc,
+								FmgrInfo *finfo,
+								Instrumentation *instr,
+								MemoryContext per_tuple_context,
+								TupleTableSlot *trig_tuple_slot1,
+								TupleTableSlot *trig_tuple_slot2);
 static AfterTriggersTableData *GetAfterTriggersTableData(Oid relid,
-						  CmdType cmdType);
+														 CmdType cmdType);
 static void AfterTriggerFreeQuery(AfterTriggersQueryData *qs);
 static SetConstraintState SetConstraintStateCreate(int numalloc);
 static SetConstraintState SetConstraintStateCopy(SetConstraintState state);
 static SetConstraintState SetConstraintStateAddItem(SetConstraintState state,
-						  Oid tgoid, bool tgisdeferred);
+													Oid tgoid, bool tgisdeferred);
 static void cancel_prior_stmt_triggers(Oid relid, CmdType cmdType, int tgevent);
 
 
diff --git a/src/backend/commands/tsearchcmds.c b/src/backend/commands/tsearchcmds.c
index 8e5eec22b5e2..11a7f29eafa7 100644
--- a/src/backend/commands/tsearchcmds.c
+++ b/src/backend/commands/tsearchcmds.c
@@ -49,9 +49,9 @@
 
 
 static void MakeConfigurationMapping(AlterTSConfigurationStmt *stmt,
-						 HeapTuple tup, Relation relMap);
+									 HeapTuple tup, Relation relMap);
 static void DropConfigurationMapping(AlterTSConfigurationStmt *stmt,
-						 HeapTuple tup, Relation relMap);
+									 HeapTuple tup, Relation relMap);
 
 
 /* --------------------- TS Parser commands ------------------------ */
diff --git a/src/backend/commands/typecmds.c b/src/backend/commands/typecmds.c
index 7e6bcc5239c0..e9c8873ade9b 100644
--- a/src/backend/commands/typecmds.c
+++ b/src/backend/commands/typecmds.c
@@ -87,7 +87,7 @@ typedef struct
 Oid			binary_upgrade_next_array_pg_type_oid = InvalidOid;
 
 static void makeRangeConstructors(const char *name, Oid namespace,
-					  Oid rangeOid, Oid subtype);
+								  Oid rangeOid, Oid subtype);
 static Oid	findTypeInputFunction(List *procname, Oid typeOid);
 static Oid	findTypeOutputFunction(List *procname, Oid typeOid);
 static Oid	findTypeReceiveFunction(List *procname, Oid typeOid);
@@ -102,11 +102,11 @@ static void validateDomainConstraint(Oid domainoid, char *ccbin);
 static List *get_rels_with_domain(Oid domainOid, LOCKMODE lockmode);
 static void checkEnumOwner(HeapTuple tup);
 static char *domainAddConstraint(Oid domainOid, Oid domainNamespace,
-					Oid baseTypeOid,
-					int typMod, Constraint *constr,
-					const char *domainName, ObjectAddress *constrAddr);
+								 Oid baseTypeOid,
+								 int typMod, Constraint *constr,
+								 const char *domainName, ObjectAddress *constrAddr);
 static Node *replace_domain_constraint_value(ParseState *pstate,
-								ColumnRef *cref);
+											 ColumnRef *cref);
 
 
 /*
diff --git a/src/backend/commands/user.c b/src/backend/commands/user.c
index 834094898df3..ccc586d8e854 100644
--- a/src/backend/commands/user.c
+++ b/src/backend/commands/user.c
@@ -49,11 +49,11 @@ int			Password_encryption = PASSWORD_TYPE_MD5;
 check_password_hook_type check_password_hook = NULL;
 
 static void AddRoleMems(const char *rolename, Oid roleid,
-			List *memberSpecs, List *memberIds,
-			Oid grantorId, bool admin_opt);
+						List *memberSpecs, List *memberIds,
+						Oid grantorId, bool admin_opt);
 static void DelRoleMems(const char *rolename, Oid roleid,
-			List *memberSpecs, List *memberIds,
-			bool admin_opt);
+						List *memberSpecs, List *memberIds,
+						bool admin_opt);
 
 
 /* Check if current user has createrole privileges */
diff --git a/src/backend/commands/vacuum.c b/src/backend/commands/vacuum.c
index d69a73d13ed7..e7b379dfda10 100644
--- a/src/backend/commands/vacuum.c
+++ b/src/backend/commands/vacuum.c
@@ -72,9 +72,9 @@ static BufferAccessStrategy vac_strategy;
 static List *expand_vacuum_rel(VacuumRelation *vrel, int options);
 static List *get_all_vacuum_rels(int options);
 static void vac_truncate_clog(TransactionId frozenXID,
-				  MultiXactId minMulti,
-				  TransactionId lastSaneFrozenXid,
-				  MultiXactId lastSaneMinMulti);
+							  MultiXactId minMulti,
+							  TransactionId lastSaneFrozenXid,
+							  MultiXactId lastSaneMinMulti);
 static bool vacuum_rel(Oid relid, RangeVar *relation, VacuumParams *params);
 static VacOptTernaryValue get_vacopt_ternary_value(DefElem *def);
 
diff --git a/src/backend/executor/execCurrent.c b/src/backend/executor/execCurrent.c
index fdb2c36246d1..c7f909241b41 100644
--- a/src/backend/executor/execCurrent.c
+++ b/src/backend/executor/execCurrent.c
@@ -25,7 +25,7 @@
 
 static char *fetch_cursor_param_value(ExprContext *econtext, int paramId);
 static ScanState *search_plan_tree(PlanState *node, Oid table_oid,
-				 bool *pending_rescan);
+								   bool *pending_rescan);
 
 
 /*
diff --git a/src/backend/executor/execExpr.c b/src/backend/executor/execExpr.c
index 5d64471eeda1..e4a6c20ed02e 100644
--- a/src/backend/executor/execExpr.c
+++ b/src/backend/executor/execExpr.c
@@ -57,28 +57,28 @@ typedef struct LastAttnumInfo
 
 static void ExecReadyExpr(ExprState *state);
 static void ExecInitExprRec(Expr *node, ExprState *state,
-				Datum *resv, bool *resnull);
+							Datum *resv, bool *resnull);
 static void ExecInitFunc(ExprEvalStep *scratch, Expr *node, List *args,
-			 Oid funcid, Oid inputcollid,
-			 ExprState *state);
+						 Oid funcid, Oid inputcollid,
+						 ExprState *state);
 static void ExecInitExprSlots(ExprState *state, Node *node);
 static void ExecPushExprSlots(ExprState *state, LastAttnumInfo *info);
 static bool get_last_attnums_walker(Node *node, LastAttnumInfo *info);
 static void ExecComputeSlotInfo(ExprState *state, ExprEvalStep *op);
 static void ExecInitWholeRowVar(ExprEvalStep *scratch, Var *variable,
-					ExprState *state);
+								ExprState *state);
 static void ExecInitSubscriptingRef(ExprEvalStep *scratch,
-						SubscriptingRef *sbsref,
-						ExprState *state,
-						Datum *resv, bool *resnull);
+									SubscriptingRef *sbsref,
+									ExprState *state,
+									Datum *resv, bool *resnull);
 static bool isAssignmentIndirectionExpr(Expr *expr);
 static void ExecInitCoerceToDomain(ExprEvalStep *scratch, CoerceToDomain *ctest,
-					   ExprState *state,
-					   Datum *resv, bool *resnull);
+								   ExprState *state,
+								   Datum *resv, bool *resnull);
 static void ExecBuildAggTransCall(ExprState *state, AggState *aggstate,
-					  ExprEvalStep *scratch,
-					  FunctionCallInfo fcinfo, AggStatePerTrans pertrans,
-					  int transno, int setno, int setoff, bool ishash);
+								  ExprEvalStep *scratch,
+								  FunctionCallInfo fcinfo, AggStatePerTrans pertrans,
+								  int transno, int setno, int setoff, bool ishash);
 
 
 /*
diff --git a/src/backend/executor/execExprInterp.c b/src/backend/executor/execExprInterp.c
index 612a88456eb3..66a67c72b29a 100644
--- a/src/backend/executor/execExprInterp.c
+++ b/src/backend/executor/execExprInterp.c
@@ -145,10 +145,10 @@ static void ExecInitInterpreter(void);
 static void CheckVarSlotCompatibility(TupleTableSlot *slot, int attnum, Oid vartype);
 static void CheckOpSlotCompatibility(ExprEvalStep *op, TupleTableSlot *slot);
 static TupleDesc get_cached_rowtype(Oid type_id, int32 typmod,
-				   TupleDesc *cache_field, ExprContext *econtext);
+									TupleDesc *cache_field, ExprContext *econtext);
 static void ShutdownTupleDescRef(Datum arg);
 static void ExecEvalRowNullInt(ExprState *state, ExprEvalStep *op,
-				   ExprContext *econtext, bool checkisnull);
+							   ExprContext *econtext, bool checkisnull);
 
 /* fast-path evaluation functions */
 static Datum ExecJustInnerVar(ExprState *state, ExprContext *econtext, bool *isnull);
diff --git a/src/backend/executor/execIndexing.c b/src/backend/executor/execIndexing.c
index 3b602bb8baf6..c41c5f45e7e5 100644
--- a/src/backend/executor/execIndexing.c
+++ b/src/backend/executor/execIndexing.c
@@ -125,17 +125,17 @@ typedef enum
 } CEOUC_WAIT_MODE;
 
 static bool check_exclusion_or_unique_constraint(Relation heap, Relation index,
-									 IndexInfo *indexInfo,
-									 ItemPointer tupleid,
-									 Datum *values, bool *isnull,
-									 EState *estate, bool newIndex,
-									 CEOUC_WAIT_MODE waitMode,
-									 bool errorOK,
-									 ItemPointer conflictTid);
+												 IndexInfo *indexInfo,
+												 ItemPointer tupleid,
+												 Datum *values, bool *isnull,
+												 EState *estate, bool newIndex,
+												 CEOUC_WAIT_MODE waitMode,
+												 bool errorOK,
+												 ItemPointer conflictTid);
 
 static bool index_recheck_constraint(Relation index, Oid *constr_procs,
-						 Datum *existing_values, bool *existing_isnull,
-						 Datum *new_values);
+									 Datum *existing_values, bool *existing_isnull,
+									 Datum *new_values);
 
 /* ----------------------------------------------------------------
  *		ExecOpenIndices
diff --git a/src/backend/executor/execMain.c b/src/backend/executor/execMain.c
index 44e4a6d104c1..e80abe1b8b33 100644
--- a/src/backend/executor/execMain.c
+++ b/src/backend/executor/execMain.c
@@ -81,25 +81,25 @@ static void CheckValidRowMarkRel(Relation rel, RowMarkType markType);
 static void ExecPostprocessPlan(EState *estate);
 static void ExecEndPlan(PlanState *planstate, EState *estate);
 static void ExecutePlan(EState *estate, PlanState *planstate,
-			bool use_parallel_mode,
-			CmdType operation,
-			bool sendTuples,
-			uint64 numberTuples,
-			ScanDirection direction,
-			DestReceiver *dest,
-			bool execute_once);
+						bool use_parallel_mode,
+						CmdType operation,
+						bool sendTuples,
+						uint64 numberTuples,
+						ScanDirection direction,
+						DestReceiver *dest,
+						bool execute_once);
 static bool ExecCheckRTEPerms(RangeTblEntry *rte);
 static bool ExecCheckRTEPermsModified(Oid relOid, Oid userid,
-						  Bitmapset *modifiedCols,
-						  AclMode requiredPerms);
+									  Bitmapset *modifiedCols,
+									  AclMode requiredPerms);
 static void ExecCheckXactReadOnly(PlannedStmt *plannedstmt);
 static char *ExecBuildSlotValueDescription(Oid reloid,
-							  TupleTableSlot *slot,
-							  TupleDesc tupdesc,
-							  Bitmapset *modifiedCols,
-							  int maxfieldlen);
+										   TupleTableSlot *slot,
+										   TupleDesc tupdesc,
+										   Bitmapset *modifiedCols,
+										   int maxfieldlen);
 static void EvalPlanQualStart(EPQState *epqstate, EState *parentestate,
-				  Plan *planTree);
+							  Plan *planTree);
 
 /*
  * Note that GetAllUpdatedColumns() also exists in commands/trigger.c.  There does
diff --git a/src/backend/executor/execParallel.c b/src/backend/executor/execParallel.c
index da9074c54c98..0ab9a9939c28 100644
--- a/src/backend/executor/execParallel.c
+++ b/src/backend/executor/execParallel.c
@@ -123,15 +123,15 @@ typedef struct ExecParallelInitializeDSMContext
 /* Helper functions that run in the parallel leader. */
 static char *ExecSerializePlan(Plan *plan, EState *estate);
 static bool ExecParallelEstimate(PlanState *node,
-					 ExecParallelEstimateContext *e);
+								 ExecParallelEstimateContext *e);
 static bool ExecParallelInitializeDSM(PlanState *node,
-						  ExecParallelInitializeDSMContext *d);
+									  ExecParallelInitializeDSMContext *d);
 static shm_mq_handle **ExecParallelSetupTupleQueues(ParallelContext *pcxt,
-							 bool reinitialize);
+													bool reinitialize);
 static bool ExecParallelReInitializeDSM(PlanState *planstate,
-							ParallelContext *pcxt);
+										ParallelContext *pcxt);
 static bool ExecParallelRetrieveInstrumentation(PlanState *planstate,
-									SharedExecutorInstrumentation *instrumentation);
+												SharedExecutorInstrumentation *instrumentation);
 
 /* Helper function that runs in the parallel worker. */
 static DestReceiver *ExecParallelGetReceiver(dsm_segment *seg, shm_toc *toc);
diff --git a/src/backend/executor/execPartition.c b/src/backend/executor/execPartition.c
index 73ba298c5da6..6f2b4d62b415 100644
--- a/src/backend/executor/execPartition.c
+++ b/src/backend/executor/execPartition.c
@@ -156,42 +156,42 @@ typedef struct SubplanResultRelHashElem
 
 
 static void ExecHashSubPlanResultRelsByOid(ModifyTableState *mtstate,
-							   PartitionTupleRouting *proute);
+										   PartitionTupleRouting *proute);
 static ResultRelInfo *ExecInitPartitionInfo(ModifyTableState *mtstate,
-					  EState *estate, PartitionTupleRouting *proute,
-					  PartitionDispatch dispatch,
-					  ResultRelInfo *rootResultRelInfo,
-					  int partidx);
+											EState *estate, PartitionTupleRouting *proute,
+											PartitionDispatch dispatch,
+											ResultRelInfo *rootResultRelInfo,
+											int partidx);
 static void ExecInitRoutingInfo(ModifyTableState *mtstate,
-					EState *estate,
-					PartitionTupleRouting *proute,
-					PartitionDispatch dispatch,
-					ResultRelInfo *partRelInfo,
-					int partidx);
+								EState *estate,
+								PartitionTupleRouting *proute,
+								PartitionDispatch dispatch,
+								ResultRelInfo *partRelInfo,
+								int partidx);
 static PartitionDispatch ExecInitPartitionDispatchInfo(EState *estate,
-							  PartitionTupleRouting *proute,
-							  Oid partoid, PartitionDispatch parent_pd, int partidx);
+													   PartitionTupleRouting *proute,
+													   Oid partoid, PartitionDispatch parent_pd, int partidx);
 static void FormPartitionKeyDatum(PartitionDispatch pd,
-					  TupleTableSlot *slot,
-					  EState *estate,
-					  Datum *values,
-					  bool *isnull);
-static int get_partition_for_tuple(PartitionDispatch pd, Datum *values,
-						bool *isnull);
+								  TupleTableSlot *slot,
+								  EState *estate,
+								  Datum *values,
+								  bool *isnull);
+static int	get_partition_for_tuple(PartitionDispatch pd, Datum *values,
+									bool *isnull);
 static char *ExecBuildSlotPartitionKeyDescription(Relation rel,
-									 Datum *values,
-									 bool *isnull,
-									 int maxfieldlen);
+												  Datum *values,
+												  bool *isnull,
+												  int maxfieldlen);
 static List *adjust_partition_tlist(List *tlist, TupleConversionMap *map);
 static void ExecInitPruningContext(PartitionPruneContext *context,
-					   List *pruning_steps,
-					   PartitionDesc partdesc,
-					   PartitionKey partkey,
-					   PlanState *planstate);
+								   List *pruning_steps,
+								   PartitionDesc partdesc,
+								   PartitionKey partkey,
+								   PlanState *planstate);
 static void find_matching_subplans_recurse(PartitionPruningData *prunedata,
-							   PartitionedRelPruningData *pprune,
-							   bool initial_prune,
-							   Bitmapset **validsubplans);
+										   PartitionedRelPruningData *pprune,
+										   bool initial_prune,
+										   Bitmapset **validsubplans);
 
 
 /*
diff --git a/src/backend/executor/execSRF.c b/src/backend/executor/execSRF.c
index 265250186a14..c8a3efc36543 100644
--- a/src/backend/executor/execSRF.c
+++ b/src/backend/executor/execSRF.c
@@ -35,15 +35,15 @@
 
 /* static function decls */
 static void init_sexpr(Oid foid, Oid input_collation, Expr *node,
-		   SetExprState *sexpr, PlanState *parent,
-		   MemoryContext sexprCxt, bool allowSRF, bool needDescForSRF);
+					   SetExprState *sexpr, PlanState *parent,
+					   MemoryContext sexprCxt, bool allowSRF, bool needDescForSRF);
 static void ShutdownSetExpr(Datum arg);
 static void ExecEvalFuncArgs(FunctionCallInfo fcinfo,
-				 List *argList, ExprContext *econtext);
+							 List *argList, ExprContext *econtext);
 static void ExecPrepareTuplestoreResult(SetExprState *sexpr,
-							ExprContext *econtext,
-							Tuplestorestate *resultStore,
-							TupleDesc resultDesc);
+										ExprContext *econtext,
+										Tuplestorestate *resultStore,
+										TupleDesc resultDesc);
 static void tupledesc_match(TupleDesc dst_tupdesc, TupleDesc src_tupdesc);
 
 
diff --git a/src/backend/executor/execTuples.c b/src/backend/executor/execTuples.c
index ad13fd9a05bb..3db43e6f8ac9 100644
--- a/src/backend/executor/execTuples.c
+++ b/src/backend/executor/execTuples.c
@@ -70,13 +70,13 @@
 
 
 static TupleDesc ExecTypeFromTLInternal(List *targetList,
-					   bool skipjunk);
+										bool skipjunk);
 static pg_attribute_always_inline void slot_deform_heap_tuple(TupleTableSlot *slot, HeapTuple tuple, uint32 *offp,
-					   int natts);
+															  int natts);
 static inline void tts_buffer_heap_store_tuple(TupleTableSlot *slot,
-							HeapTuple tuple,
-							Buffer buffer,
-							bool transfer_pin);
+											   HeapTuple tuple,
+											   Buffer buffer,
+											   bool transfer_pin);
 static void tts_heap_store_tuple(TupleTableSlot *slot, HeapTuple tuple, bool shouldFree);
 
 
diff --git a/src/backend/executor/functions.c b/src/backend/executor/functions.c
index b34f565bfe73..29a8a16f5f9d 100644
--- a/src/backend/executor/functions.c
+++ b/src/backend/executor/functions.c
@@ -146,24 +146,24 @@ typedef struct SQLFunctionParseInfo
 /* non-export function prototypes */
 static Node *sql_fn_param_ref(ParseState *pstate, ParamRef *pref);
 static Node *sql_fn_post_column_ref(ParseState *pstate,
-					   ColumnRef *cref, Node *var);
+									ColumnRef *cref, Node *var);
 static Node *sql_fn_make_param(SQLFunctionParseInfoPtr pinfo,
-				  int paramno, int location);
+							   int paramno, int location);
 static Node *sql_fn_resolve_param_name(SQLFunctionParseInfoPtr pinfo,
-						  const char *paramname, int location);
+									   const char *paramname, int location);
 static List *init_execution_state(List *queryTree_list,
-					 SQLFunctionCachePtr fcache,
-					 bool lazyEvalOK);
+								  SQLFunctionCachePtr fcache,
+								  bool lazyEvalOK);
 static void init_sql_fcache(FmgrInfo *finfo, Oid collation, bool lazyEvalOK);
 static void postquel_start(execution_state *es, SQLFunctionCachePtr fcache);
 static bool postquel_getnext(execution_state *es, SQLFunctionCachePtr fcache);
 static void postquel_end(execution_state *es);
 static void postquel_sub_params(SQLFunctionCachePtr fcache,
-					FunctionCallInfo fcinfo);
+								FunctionCallInfo fcinfo);
 static Datum postquel_get_single_result(TupleTableSlot *slot,
-						   FunctionCallInfo fcinfo,
-						   SQLFunctionCachePtr fcache,
-						   MemoryContext resultcontext);
+										FunctionCallInfo fcinfo,
+										SQLFunctionCachePtr fcache,
+										MemoryContext resultcontext);
 static void sql_exec_error_callback(void *arg);
 static void ShutdownSQLFunction(Datum arg);
 static void sqlfunction_startup(DestReceiver *self, int operation, TupleDesc typeinfo);
diff --git a/src/backend/executor/instrument.c b/src/backend/executor/instrument.c
index 46da055e7669..bd36f8ee685c 100644
--- a/src/backend/executor/instrument.c
+++ b/src/backend/executor/instrument.c
@@ -22,7 +22,7 @@ static BufferUsage save_pgBufferUsage;
 
 static void BufferUsageAdd(BufferUsage *dst, const BufferUsage *add);
 static void BufferUsageAccumDiff(BufferUsage *dst,
-					 const BufferUsage *add, const BufferUsage *sub);
+								 const BufferUsage *add, const BufferUsage *sub);
 
 
 /* Allocate new instrumentation structure(s) */
diff --git a/src/backend/executor/nodeAgg.c b/src/backend/executor/nodeAgg.c
index 43ab9fb39249..5b4a60295295 100644
--- a/src/backend/executor/nodeAgg.c
+++ b/src/backend/executor/nodeAgg.c
@@ -242,32 +242,32 @@ static void select_current_set(AggState *aggstate, int setno, bool is_hash);
 static void initialize_phase(AggState *aggstate, int newphase);
 static TupleTableSlot *fetch_input_tuple(AggState *aggstate);
 static void initialize_aggregates(AggState *aggstate,
-					  AggStatePerGroup *pergroups,
-					  int numReset);
+								  AggStatePerGroup *pergroups,
+								  int numReset);
 static void advance_transition_function(AggState *aggstate,
-							AggStatePerTrans pertrans,
-							AggStatePerGroup pergroupstate);
+										AggStatePerTrans pertrans,
+										AggStatePerGroup pergroupstate);
 static void advance_aggregates(AggState *aggstate);
 static void process_ordered_aggregate_single(AggState *aggstate,
-								 AggStatePerTrans pertrans,
-								 AggStatePerGroup pergroupstate);
+											 AggStatePerTrans pertrans,
+											 AggStatePerGroup pergroupstate);
 static void process_ordered_aggregate_multi(AggState *aggstate,
-								AggStatePerTrans pertrans,
-								AggStatePerGroup pergroupstate);
+											AggStatePerTrans pertrans,
+											AggStatePerGroup pergroupstate);
 static void finalize_aggregate(AggState *aggstate,
-				   AggStatePerAgg peragg,
-				   AggStatePerGroup pergroupstate,
-				   Datum *resultVal, bool *resultIsNull);
+							   AggStatePerAgg peragg,
+							   AggStatePerGroup pergroupstate,
+							   Datum *resultVal, bool *resultIsNull);
 static void finalize_partialaggregate(AggState *aggstate,
-						  AggStatePerAgg peragg,
-						  AggStatePerGroup pergroupstate,
-						  Datum *resultVal, bool *resultIsNull);
+									  AggStatePerAgg peragg,
+									  AggStatePerGroup pergroupstate,
+									  Datum *resultVal, bool *resultIsNull);
 static void prepare_projection_slot(AggState *aggstate,
-						TupleTableSlot *slot,
-						int currentSet);
+									TupleTableSlot *slot,
+									int currentSet);
 static void finalize_aggregates(AggState *aggstate,
-					AggStatePerAgg peragg,
-					AggStatePerGroup pergroup);
+								AggStatePerAgg peragg,
+								AggStatePerGroup pergroup);
 static TupleTableSlot *project_aggregates(AggState *aggstate);
 static Bitmapset *find_unaggregated_cols(AggState *aggstate);
 static bool find_unaggregated_cols_walker(Node *node, Bitmapset **colnos);
@@ -279,19 +279,19 @@ static void agg_fill_hash_table(AggState *aggstate);
 static TupleTableSlot *agg_retrieve_hash_table(AggState *aggstate);
 static Datum GetAggInitVal(Datum textInitVal, Oid transtype);
 static void build_pertrans_for_aggref(AggStatePerTrans pertrans,
-						  AggState *aggstate, EState *estate,
-						  Aggref *aggref, Oid aggtransfn, Oid aggtranstype,
-						  Oid aggserialfn, Oid aggdeserialfn,
-						  Datum initValue, bool initValueIsNull,
-						  Oid *inputTypes, int numArguments);
-static int find_compatible_peragg(Aggref *newagg, AggState *aggstate,
-					   int lastaggno, List **same_input_transnos);
-static int find_compatible_pertrans(AggState *aggstate, Aggref *newagg,
-						 bool shareable,
-						 Oid aggtransfn, Oid aggtranstype,
-						 Oid aggserialfn, Oid aggdeserialfn,
-						 Datum initValue, bool initValueIsNull,
-						 List *transnos);
+									  AggState *aggstate, EState *estate,
+									  Aggref *aggref, Oid aggtransfn, Oid aggtranstype,
+									  Oid aggserialfn, Oid aggdeserialfn,
+									  Datum initValue, bool initValueIsNull,
+									  Oid *inputTypes, int numArguments);
+static int	find_compatible_peragg(Aggref *newagg, AggState *aggstate,
+								   int lastaggno, List **same_input_transnos);
+static int	find_compatible_pertrans(AggState *aggstate, Aggref *newagg,
+									 bool shareable,
+									 Oid aggtransfn, Oid aggtranstype,
+									 Oid aggserialfn, Oid aggdeserialfn,
+									 Datum initValue, bool initValueIsNull,
+									 List *transnos);
 
 
 /*
diff --git a/src/backend/executor/nodeBitmapHeapscan.c b/src/backend/executor/nodeBitmapHeapscan.c
index a74b46c04f42..758b16dd3579 100644
--- a/src/backend/executor/nodeBitmapHeapscan.c
+++ b/src/backend/executor/nodeBitmapHeapscan.c
@@ -55,14 +55,14 @@
 
 static TupleTableSlot *BitmapHeapNext(BitmapHeapScanState *node);
 static inline void BitmapDoneInitializingSharedState(
-								  ParallelBitmapHeapState *pstate);
+													 ParallelBitmapHeapState *pstate);
 static inline void BitmapAdjustPrefetchIterator(BitmapHeapScanState *node,
-							 TBMIterateResult *tbmres);
+												TBMIterateResult *tbmres);
 static inline void BitmapAdjustPrefetchTarget(BitmapHeapScanState *node);
 static inline void BitmapPrefetch(BitmapHeapScanState *node,
-			   TableScanDesc scan);
+								  TableScanDesc scan);
 static bool BitmapShouldInitializeSharedState(
-								  ParallelBitmapHeapState *pstate);
+											  ParallelBitmapHeapState *pstate);
 
 
 /* ----------------------------------------------------------------
diff --git a/src/backend/executor/nodeGatherMerge.c b/src/backend/executor/nodeGatherMerge.c
index d2da5d3a9518..6ef128e2abae 100644
--- a/src/backend/executor/nodeGatherMerge.c
+++ b/src/backend/executor/nodeGatherMerge.c
@@ -55,13 +55,13 @@ static TupleTableSlot *ExecGatherMerge(PlanState *pstate);
 static int32 heap_compare_slots(Datum a, Datum b, void *arg);
 static TupleTableSlot *gather_merge_getnext(GatherMergeState *gm_state);
 static HeapTuple gm_readnext_tuple(GatherMergeState *gm_state, int nreader,
-				  bool nowait, bool *done);
+								   bool nowait, bool *done);
 static void ExecShutdownGatherMergeWorkers(GatherMergeState *node);
 static void gather_merge_setup(GatherMergeState *gm_state);
 static void gather_merge_init(GatherMergeState *gm_state);
 static void gather_merge_clear_tuples(GatherMergeState *gm_state);
 static bool gather_merge_readnext(GatherMergeState *gm_state, int reader,
-					  bool nowait);
+								  bool nowait);
 static void load_tuple_array(GatherMergeState *gm_state, int reader);
 
 /* ----------------------------------------------------------------
diff --git a/src/backend/executor/nodeHash.c b/src/backend/executor/nodeHash.c
index 64eec91f8b8f..3c33ce74e04a 100644
--- a/src/backend/executor/nodeHash.c
+++ b/src/backend/executor/nodeHash.c
@@ -48,35 +48,35 @@ static void ExecHashIncreaseNumBuckets(HashJoinTable hashtable);
 static void ExecParallelHashIncreaseNumBatches(HashJoinTable hashtable);
 static void ExecParallelHashIncreaseNumBuckets(HashJoinTable hashtable);
 static void ExecHashBuildSkewHash(HashJoinTable hashtable, Hash *node,
-					  int mcvsToUse);
+								  int mcvsToUse);
 static void ExecHashSkewTableInsert(HashJoinTable hashtable,
-						TupleTableSlot *slot,
-						uint32 hashvalue,
-						int bucketNumber);
+									TupleTableSlot *slot,
+									uint32 hashvalue,
+									int bucketNumber);
 static void ExecHashRemoveNextSkewBucket(HashJoinTable hashtable);
 
 static void *dense_alloc(HashJoinTable hashtable, Size size);
 static HashJoinTuple ExecParallelHashTupleAlloc(HashJoinTable hashtable,
-						   size_t size,
-						   dsa_pointer *shared);
+												size_t size,
+												dsa_pointer *shared);
 static void MultiExecPrivateHash(HashState *node);
 static void MultiExecParallelHash(HashState *node);
 static inline HashJoinTuple ExecParallelHashFirstTuple(HashJoinTable table,
-						   int bucketno);
+													   int bucketno);
 static inline HashJoinTuple ExecParallelHashNextTuple(HashJoinTable table,
-						  HashJoinTuple tuple);
+													  HashJoinTuple tuple);
 static inline void ExecParallelHashPushTuple(dsa_pointer_atomic *head,
-						  HashJoinTuple tuple,
-						  dsa_pointer tuple_shared);
+											 HashJoinTuple tuple,
+											 dsa_pointer tuple_shared);
 static void ExecParallelHashJoinSetUpBatches(HashJoinTable hashtable, int nbatch);
 static void ExecParallelHashEnsureBatchAccessors(HashJoinTable hashtable);
 static void ExecParallelHashRepartitionFirst(HashJoinTable hashtable);
 static void ExecParallelHashRepartitionRest(HashJoinTable hashtable);
 static HashMemoryChunk ExecParallelHashPopChunkQueue(HashJoinTable table,
-							  dsa_pointer *shared);
+													 dsa_pointer *shared);
 static bool ExecParallelHashTuplePrealloc(HashJoinTable hashtable,
-							  int batchno,
-							  size_t size);
+										  int batchno,
+										  size_t size);
 static void ExecParallelHashMergeCounters(HashJoinTable hashtable);
 static void ExecParallelHashCloseBatchAccessors(HashJoinTable hashtable);
 
diff --git a/src/backend/executor/nodeHashjoin.c b/src/backend/executor/nodeHashjoin.c
index 5ccdc1af2e89..8484a287e733 100644
--- a/src/backend/executor/nodeHashjoin.c
+++ b/src/backend/executor/nodeHashjoin.c
@@ -134,15 +134,15 @@
 #define HJ_FILL_INNER(hjstate)	((hjstate)->hj_NullOuterTupleSlot != NULL)
 
 static TupleTableSlot *ExecHashJoinOuterGetTuple(PlanState *outerNode,
-						  HashJoinState *hjstate,
-						  uint32 *hashvalue);
+												 HashJoinState *hjstate,
+												 uint32 *hashvalue);
 static TupleTableSlot *ExecParallelHashJoinOuterGetTuple(PlanState *outerNode,
-								  HashJoinState *hjstate,
-								  uint32 *hashvalue);
+														 HashJoinState *hjstate,
+														 uint32 *hashvalue);
 static TupleTableSlot *ExecHashJoinGetSavedTuple(HashJoinState *hjstate,
-						  BufFile *file,
-						  uint32 *hashvalue,
-						  TupleTableSlot *tupleSlot);
+												 BufFile *file,
+												 uint32 *hashvalue,
+												 TupleTableSlot *tupleSlot);
 static bool ExecHashJoinNewBatch(HashJoinState *hjstate);
 static bool ExecParallelHashJoinNewBatch(HashJoinState *hjstate);
 static void ExecParallelHashJoinPartitionOuter(HashJoinState *node);
diff --git a/src/backend/executor/nodeIndexonlyscan.c b/src/backend/executor/nodeIndexonlyscan.c
index 5dce284fe734..ee5b1c493b7e 100644
--- a/src/backend/executor/nodeIndexonlyscan.c
+++ b/src/backend/executor/nodeIndexonlyscan.c
@@ -47,7 +47,7 @@
 
 static TupleTableSlot *IndexOnlyNext(IndexOnlyScanState *node);
 static void StoreIndexTuple(TupleTableSlot *slot, IndexTuple itup,
-				TupleDesc itupdesc);
+							TupleDesc itupdesc);
 
 
 /* ----------------------------------------------------------------
diff --git a/src/backend/executor/nodeIndexscan.c b/src/backend/executor/nodeIndexscan.c
index 73bfd424d985..ac7aa81f6749 100644
--- a/src/backend/executor/nodeIndexscan.c
+++ b/src/backend/executor/nodeIndexscan.c
@@ -60,13 +60,13 @@ static TupleTableSlot *IndexNext(IndexScanState *node);
 static TupleTableSlot *IndexNextWithReorder(IndexScanState *node);
 static void EvalOrderByExpressions(IndexScanState *node, ExprContext *econtext);
 static bool IndexRecheck(IndexScanState *node, TupleTableSlot *slot);
-static int cmp_orderbyvals(const Datum *adist, const bool *anulls,
-				const Datum *bdist, const bool *bnulls,
-				IndexScanState *node);
-static int reorderqueue_cmp(const pairingheap_node *a,
-				 const pairingheap_node *b, void *arg);
+static int	cmp_orderbyvals(const Datum *adist, const bool *anulls,
+							const Datum *bdist, const bool *bnulls,
+							IndexScanState *node);
+static int	reorderqueue_cmp(const pairingheap_node *a,
+							 const pairingheap_node *b, void *arg);
 static void reorderqueue_push(IndexScanState *node, TupleTableSlot *slot,
-				  Datum *orderbyvals, bool *orderbynulls);
+							  Datum *orderbyvals, bool *orderbynulls);
 static HeapTuple reorderqueue_pop(IndexScanState *node);
 
 
diff --git a/src/backend/executor/nodeModifyTable.c b/src/backend/executor/nodeModifyTable.c
index 8acdaf205739..3125e5c993d3 100644
--- a/src/backend/executor/nodeModifyTable.c
+++ b/src/backend/executor/nodeModifyTable.c
@@ -59,22 +59,22 @@
 
 
 static bool ExecOnConflictUpdate(ModifyTableState *mtstate,
-					 ResultRelInfo *resultRelInfo,
-					 ItemPointer conflictTid,
-					 TupleTableSlot *planSlot,
-					 TupleTableSlot *excludedSlot,
-					 EState *estate,
-					 bool canSetTag,
-					 TupleTableSlot **returning);
+								 ResultRelInfo *resultRelInfo,
+								 ItemPointer conflictTid,
+								 TupleTableSlot *planSlot,
+								 TupleTableSlot *excludedSlot,
+								 EState *estate,
+								 bool canSetTag,
+								 TupleTableSlot **returning);
 static TupleTableSlot *ExecPrepareTupleRouting(ModifyTableState *mtstate,
-						EState *estate,
-						PartitionTupleRouting *proute,
-						ResultRelInfo *targetRelInfo,
-						TupleTableSlot *slot);
+											   EState *estate,
+											   PartitionTupleRouting *proute,
+											   ResultRelInfo *targetRelInfo,
+											   TupleTableSlot *slot);
 static ResultRelInfo *getTargetResultRelInfo(ModifyTableState *node);
 static void ExecSetupChildParentMapForSubplan(ModifyTableState *mtstate);
 static TupleConversionMap *tupconv_map_for_subplan(ModifyTableState *node,
-						int whichplan);
+												   int whichplan);
 
 /*
  * Verify that the tuples to be produced by INSERT or UPDATE match the
diff --git a/src/backend/executor/nodeSubplan.c b/src/backend/executor/nodeSubplan.c
index 3662fcada8c6..f6445e286ac8 100644
--- a/src/backend/executor/nodeSubplan.c
+++ b/src/backend/executor/nodeSubplan.c
@@ -41,14 +41,14 @@
 
 
 static Datum ExecHashSubPlan(SubPlanState *node,
-				ExprContext *econtext,
-				bool *isNull);
+							 ExprContext *econtext,
+							 bool *isNull);
 static Datum ExecScanSubPlan(SubPlanState *node,
-				ExprContext *econtext,
-				bool *isNull);
+							 ExprContext *econtext,
+							 bool *isNull);
 static void buildSubPlanHash(SubPlanState *node, ExprContext *econtext);
 static bool findPartialMatch(TupleHashTable hashtable, TupleTableSlot *slot,
-				 FmgrInfo *eqfunctions);
+							 FmgrInfo *eqfunctions);
 static bool slotAllNulls(TupleTableSlot *slot);
 static bool slotNoNulls(TupleTableSlot *slot);
 
diff --git a/src/backend/executor/nodeWindowAgg.c b/src/backend/executor/nodeWindowAgg.c
index b090828c01ee..def00cd7c5fd 100644
--- a/src/backend/executor/nodeWindowAgg.c
+++ b/src/backend/executor/nodeWindowAgg.c
@@ -158,43 +158,43 @@ typedef struct WindowStatePerAggData
 } WindowStatePerAggData;
 
 static void initialize_windowaggregate(WindowAggState *winstate,
-						   WindowStatePerFunc perfuncstate,
-						   WindowStatePerAgg peraggstate);
+									   WindowStatePerFunc perfuncstate,
+									   WindowStatePerAgg peraggstate);
 static void advance_windowaggregate(WindowAggState *winstate,
-						WindowStatePerFunc perfuncstate,
-						WindowStatePerAgg peraggstate);
+									WindowStatePerFunc perfuncstate,
+									WindowStatePerAgg peraggstate);
 static bool advance_windowaggregate_base(WindowAggState *winstate,
-							 WindowStatePerFunc perfuncstate,
-							 WindowStatePerAgg peraggstate);
+										 WindowStatePerFunc perfuncstate,
+										 WindowStatePerAgg peraggstate);
 static void finalize_windowaggregate(WindowAggState *winstate,
-						 WindowStatePerFunc perfuncstate,
-						 WindowStatePerAgg peraggstate,
-						 Datum *result, bool *isnull);
+									 WindowStatePerFunc perfuncstate,
+									 WindowStatePerAgg peraggstate,
+									 Datum *result, bool *isnull);
 
 static void eval_windowaggregates(WindowAggState *winstate);
 static void eval_windowfunction(WindowAggState *winstate,
-					WindowStatePerFunc perfuncstate,
-					Datum *result, bool *isnull);
+								WindowStatePerFunc perfuncstate,
+								Datum *result, bool *isnull);
 
 static void begin_partition(WindowAggState *winstate);
 static void spool_tuples(WindowAggState *winstate, int64 pos);
 static void release_partition(WindowAggState *winstate);
 
-static int row_is_in_frame(WindowAggState *winstate, int64 pos,
-				TupleTableSlot *slot);
+static int	row_is_in_frame(WindowAggState *winstate, int64 pos,
+							TupleTableSlot *slot);
 static void update_frameheadpos(WindowAggState *winstate);
 static void update_frametailpos(WindowAggState *winstate);
 static void update_grouptailpos(WindowAggState *winstate);
 
 static WindowStatePerAggData *initialize_peragg(WindowAggState *winstate,
-				  WindowFunc *wfunc,
-				  WindowStatePerAgg peraggstate);
+												WindowFunc *wfunc,
+												WindowStatePerAgg peraggstate);
 static Datum GetAggInitVal(Datum textInitVal, Oid transtype);
 
 static bool are_peers(WindowAggState *winstate, TupleTableSlot *slot1,
-		  TupleTableSlot *slot2);
+					  TupleTableSlot *slot2);
 static bool window_gettupleslot(WindowObject winobj, int64 pos,
-					TupleTableSlot *slot);
+								TupleTableSlot *slot);
 
 
 /*
diff --git a/src/backend/executor/spi.c b/src/backend/executor/spi.c
index 22d0fe5ac4fa..8eedb613a183 100644
--- a/src/backend/executor/spi.c
+++ b/src/backend/executor/spi.c
@@ -52,26 +52,26 @@ static int	_SPI_stack_depth = 0;	/* allocated size of _SPI_stack */
 static int	_SPI_connected = -1;	/* current stack index */
 
 static Portal SPI_cursor_open_internal(const char *name, SPIPlanPtr plan,
-						 ParamListInfo paramLI, bool read_only);
+									   ParamListInfo paramLI, bool read_only);
 
 static void _SPI_prepare_plan(const char *src, SPIPlanPtr plan);
 
 static void _SPI_prepare_oneshot_plan(const char *src, SPIPlanPtr plan);
 
-static int _SPI_execute_plan(SPIPlanPtr plan, ParamListInfo paramLI,
-				  Snapshot snapshot, Snapshot crosscheck_snapshot,
-				  bool read_only, bool fire_triggers, uint64 tcount);
+static int	_SPI_execute_plan(SPIPlanPtr plan, ParamListInfo paramLI,
+							  Snapshot snapshot, Snapshot crosscheck_snapshot,
+							  bool read_only, bool fire_triggers, uint64 tcount);
 
 static ParamListInfo _SPI_convert_params(int nargs, Oid *argtypes,
-					Datum *Values, const char *Nulls);
+										 Datum *Values, const char *Nulls);
 
 static int	_SPI_pquery(QueryDesc *queryDesc, bool fire_triggers, uint64 tcount);
 
 static void _SPI_error_callback(void *arg);
 
 static void _SPI_cursor_operation(Portal portal,
-					  FetchDirection direction, long count,
-					  DestReceiver *dest);
+								  FetchDirection direction, long count,
+								  DestReceiver *dest);
 
 static SPIPlanPtr _SPI_make_plan_non_temp(SPIPlanPtr plan);
 static SPIPlanPtr _SPI_save_plan(SPIPlanPtr plan);
diff --git a/src/backend/jit/llvm/llvmjit_expr.c b/src/backend/jit/llvm/llvmjit_expr.c
index 1bb58e3e61af..30133634c70b 100644
--- a/src/backend/jit/llvm/llvmjit_expr.c
+++ b/src/backend/jit/llvm/llvmjit_expr.c
@@ -57,12 +57,12 @@ typedef struct CompiledExprState
 static Datum ExecRunCompiledExpr(ExprState *state, ExprContext *econtext, bool *isNull);
 
 static LLVMValueRef BuildV1Call(LLVMJitContext *context, LLVMBuilderRef b,
-			LLVMModuleRef mod, FunctionCallInfo fcinfo,
-			LLVMValueRef *v_fcinfo_isnull);
+								LLVMModuleRef mod, FunctionCallInfo fcinfo,
+								LLVMValueRef *v_fcinfo_isnull);
 static void build_EvalXFunc(LLVMBuilderRef b, LLVMModuleRef mod,
-				const char *funcname,
-				LLVMValueRef v_state, LLVMValueRef v_econtext,
-				ExprEvalStep *op);
+							const char *funcname,
+							LLVMValueRef v_state, LLVMValueRef v_econtext,
+							ExprEvalStep *op);
 static LLVMValueRef create_LifetimeEnd(LLVMModuleRef mod);
 
 
diff --git a/src/backend/lib/bloomfilter.c b/src/backend/lib/bloomfilter.c
index d82420bd68ce..859aac07b7db 100644
--- a/src/backend/lib/bloomfilter.c
+++ b/src/backend/lib/bloomfilter.c
@@ -54,7 +54,7 @@ struct bloom_filter
 static int	my_bloom_power(uint64 target_bitset_bits);
 static int	optimal_k(uint64 bitset_bits, int64 total_elems);
 static void k_hashes(bloom_filter *filter, uint32 *hashes, unsigned char *elem,
-		 size_t len);
+					 size_t len);
 static inline uint32 mod_m(uint32 a, uint64 m);
 
 /*
diff --git a/src/backend/lib/dshash.c b/src/backend/lib/dshash.c
index f095196fb678..24dd37225212 100644
--- a/src/backend/lib/dshash.c
+++ b/src/backend/lib/dshash.c
@@ -160,28 +160,28 @@ struct dshash_table
 									   hash_table->size_log2)])
 
 static void delete_item(dshash_table *hash_table,
-			dshash_table_item *item);
+						dshash_table_item *item);
 static void resize(dshash_table *hash_table, size_t new_size);
 static inline void ensure_valid_bucket_pointers(dshash_table *hash_table);
 static inline dshash_table_item *find_in_bucket(dshash_table *hash_table,
-			   const void *key,
-			   dsa_pointer item_pointer);
+												const void *key,
+												dsa_pointer item_pointer);
 static void insert_item_into_bucket(dshash_table *hash_table,
-						dsa_pointer item_pointer,
-						dshash_table_item *item,
-						dsa_pointer *bucket);
+									dsa_pointer item_pointer,
+									dshash_table_item *item,
+									dsa_pointer *bucket);
 static dshash_table_item *insert_into_bucket(dshash_table *hash_table,
-				   const void *key,
-				   dsa_pointer *bucket);
+											 const void *key,
+											 dsa_pointer *bucket);
 static bool delete_key_from_bucket(dshash_table *hash_table,
-					   const void *key,
-					   dsa_pointer *bucket_head);
+								   const void *key,
+								   dsa_pointer *bucket_head);
 static bool delete_item_from_bucket(dshash_table *hash_table,
-						dshash_table_item *item,
-						dsa_pointer *bucket_head);
+									dshash_table_item *item,
+									dsa_pointer *bucket_head);
 static inline dshash_hash hash_key(dshash_table *hash_table, const void *key);
 static inline bool equal_keys(dshash_table *hash_table,
-		   const void *a, const void *b);
+							  const void *a, const void *b);
 
 #define PARTITION_LOCK(hash_table, i)			\
 	(&(hash_table)->control->partitions[(i)].lock)
diff --git a/src/backend/lib/integerset.c b/src/backend/lib/integerset.c
index 9984fd55e806..6f8a03709ed9 100644
--- a/src/backend/lib/integerset.c
+++ b/src/backend/lib/integerset.c
@@ -261,13 +261,13 @@ struct IntegerSet
  * Prototypes for internal functions.
  */
 static void intset_update_upper(IntegerSet *intset, int level,
-					intset_node *new_node, uint64 new_node_item);
+								intset_node *new_node, uint64 new_node_item);
 static void intset_flush_buffered_values(IntegerSet *intset);
 
-static int intset_binsrch_uint64(uint64 value, uint64 *arr, int arr_elems,
-					  bool nextkey);
-static int intset_binsrch_leaf(uint64 value, leaf_item *arr, int arr_elems,
-					bool nextkey);
+static int	intset_binsrch_uint64(uint64 value, uint64 *arr, int arr_elems,
+								  bool nextkey);
+static int	intset_binsrch_leaf(uint64 value, leaf_item *arr, int arr_elems,
+								bool nextkey);
 
 static uint64 simple8b_encode(const uint64 *ints, int *num_encoded, uint64 base);
 static int	simple8b_decode(uint64 codeword, uint64 *decoded, uint64 base);
diff --git a/src/backend/lib/pairingheap.c b/src/backend/lib/pairingheap.c
index 6ab3b77246ec..bdaa3b1ad737 100644
--- a/src/backend/lib/pairingheap.c
+++ b/src/backend/lib/pairingheap.c
@@ -27,9 +27,9 @@
 #include "lib/pairingheap.h"
 
 static pairingheap_node *merge(pairingheap *heap, pairingheap_node *a,
-	  pairingheap_node *b);
+							   pairingheap_node *b);
 static pairingheap_node *merge_children(pairingheap *heap,
-			   pairingheap_node *children);
+										pairingheap_node *children);
 
 /*
  * pairingheap_allocate
diff --git a/src/backend/libpq/auth-scram.c b/src/backend/libpq/auth-scram.c
index 4c7b149570bf..45811e155ccc 100644
--- a/src/backend/libpq/auth-scram.c
+++ b/src/backend/libpq/auth-scram.c
@@ -162,7 +162,7 @@ static char *build_server_final_message(scram_state *state);
 static bool verify_client_proof(scram_state *state);
 static bool verify_final_nonce(scram_state *state);
 static void mock_scram_verifier(const char *username, int *iterations,
-					char **salt, uint8 *stored_key, uint8 *server_key);
+								char **salt, uint8 *stored_key, uint8 *server_key);
 static bool is_scram_printable(char *p);
 static char *sanitize_char(char c);
 static char *sanitize_str(const char *s);
diff --git a/src/backend/libpq/auth.c b/src/backend/libpq/auth.c
index caf3b71f9e1d..a7763f3f6058 100644
--- a/src/backend/libpq/auth.c
+++ b/src/backend/libpq/auth.c
@@ -45,7 +45,7 @@
  *----------------------------------------------------------------
  */
 static void sendAuthRequest(Port *port, AuthRequest areq, const char *extradata,
-				int extralen);
+							int extralen);
 static void auth_failed(Port *port, int status, char *logdetail);
 static char *recv_password_packet(Port *port);
 
@@ -93,8 +93,8 @@ static int	auth_peer(hbaPort *port);
 #define PGSQL_PAM_SERVICE "postgresql"	/* Service name passed to PAM */
 
 static int	CheckPAMAuth(Port *port, const char *user, const char *password);
-static int pam_passwd_conv_proc(int num_msg, const struct pam_message **msg,
-					 struct pam_response **resp, void *appdata_ptr);
+static int	pam_passwd_conv_proc(int num_msg, const struct pam_message **msg,
+								 struct pam_response **resp, void *appdata_ptr);
 
 static struct pam_conv pam_passw_conv = {
 	&pam_passwd_conv_proc,
@@ -189,11 +189,11 @@ typedef SECURITY_STATUS
 			(WINAPI * QUERY_SECURITY_CONTEXT_TOKEN_FN) (
 														PCtxtHandle, void **);
 static int	pg_SSPI_recvauth(Port *port);
-static int pg_SSPI_make_upn(char *accountname,
-				 size_t accountnamesize,
-				 char *domainname,
-				 size_t domainnamesize,
-				 bool update_accountname);
+static int	pg_SSPI_make_upn(char *accountname,
+							 size_t accountnamesize,
+							 char *domainname,
+							 size_t domainnamesize,
+							 bool update_accountname);
 #endif
 
 /*----------------------------------------------------------------
diff --git a/src/backend/libpq/be-gssapi-common.h b/src/backend/libpq/be-gssapi-common.h
index f6e90ea3a7c4..e0d0bfabd635 100644
--- a/src/backend/libpq/be-gssapi-common.h
+++ b/src/backend/libpq/be-gssapi-common.h
@@ -20,7 +20,7 @@
 #include <gssapi/gssapi.h>
 #endif
 
-void pg_GSS_error(int severity, const char *errmsg,
-			 OM_uint32 maj_stat, OM_uint32 min_stat);
+void		pg_GSS_error(int severity, const char *errmsg,
+						 OM_uint32 maj_stat, OM_uint32 min_stat);
 
 #endif							/* BE_GSSAPI_COMMON_H */
diff --git a/src/backend/libpq/be-secure-openssl.c b/src/backend/libpq/be-secure-openssl.c
index 673066a4561a..c97c811e63ac 100644
--- a/src/backend/libpq/be-secure-openssl.c
+++ b/src/backend/libpq/be-secure-openssl.c
@@ -67,8 +67,8 @@ static bool SSL_initialized = false;
 static bool dummy_ssl_passwd_cb_called = false;
 static bool ssl_is_server_start;
 
-static int ssl_protocol_version_to_openssl(int v, const char *guc_name,
-								int loglevel);
+static int	ssl_protocol_version_to_openssl(int v, const char *guc_name,
+											int loglevel);
 #ifndef SSL_CTX_set_min_proto_version
 static int	SSL_CTX_set_min_proto_version(SSL_CTX *ctx, int version);
 static int	SSL_CTX_set_max_proto_version(SSL_CTX *ctx, int version);
diff --git a/src/backend/libpq/hba.c b/src/backend/libpq/hba.c
index 37d5ad44a54e..52ac0d78f738 100644
--- a/src/backend/libpq/hba.c
+++ b/src/backend/libpq/hba.c
@@ -139,16 +139,16 @@ static const char *const UserAuthName[] =
 
 
 static MemoryContext tokenize_file(const char *filename, FILE *file,
-			  List **tok_lines, int elevel);
+								   List **tok_lines, int elevel);
 static List *tokenize_inc_file(List *tokens, const char *outer_filename,
-				  const char *inc_filename, int elevel, char **err_msg);
+							   const char *inc_filename, int elevel, char **err_msg);
 static bool parse_hba_auth_opt(char *name, char *val, HbaLine *hbaline,
-				   int elevel, char **err_msg);
+							   int elevel, char **err_msg);
 static bool verify_option_list_length(List *options, const char *optionname,
-						  List *masters, const char *mastername, int line_num);
+									  List *masters, const char *mastername, int line_num);
 static ArrayType *gethba_options(HbaLine *hba);
 static void fill_hba_line(Tuplestorestate *tuple_store, TupleDesc tupdesc,
-			  int lineno, HbaLine *hba, const char *err_msg);
+						  int lineno, HbaLine *hba, const char *err_msg);
 static void fill_hba_view(Tuplestorestate *tuple_store, TupleDesc tupdesc);
 
 
diff --git a/src/backend/libpq/ifaddr.c b/src/backend/libpq/ifaddr.c
index 62cf758ca1c8..3c8237798a39 100644
--- a/src/backend/libpq/ifaddr.c
+++ b/src/backend/libpq/ifaddr.c
@@ -32,14 +32,14 @@
 #include "libpq/ifaddr.h"
 #include "port/pg_bswap.h"
 
-static int range_sockaddr_AF_INET(const struct sockaddr_in *addr,
-					   const struct sockaddr_in *netaddr,
-					   const struct sockaddr_in *netmask);
+static int	range_sockaddr_AF_INET(const struct sockaddr_in *addr,
+								   const struct sockaddr_in *netaddr,
+								   const struct sockaddr_in *netmask);
 
 #ifdef HAVE_IPV6
-static int range_sockaddr_AF_INET6(const struct sockaddr_in6 *addr,
-						const struct sockaddr_in6 *netaddr,
-						const struct sockaddr_in6 *netmask);
+static int	range_sockaddr_AF_INET6(const struct sockaddr_in6 *addr,
+									const struct sockaddr_in6 *netaddr,
+									const struct sockaddr_in6 *netmask);
 #endif
 
 
diff --git a/src/backend/nodes/nodeFuncs.c b/src/backend/nodes/nodeFuncs.c
index 8ed30c011a61..05ae73f7db8f 100644
--- a/src/backend/nodes/nodeFuncs.c
+++ b/src/backend/nodes/nodeFuncs.c
@@ -31,7 +31,7 @@ static bool fix_opfuncids_walker(Node *node, void *context);
 static bool planstate_walk_subplans(List *plans, bool (*walker) (),
 									void *context);
 static bool planstate_walk_members(PlanState **planstates, int nplans,
-					   bool (*walker) (), void *context);
+								   bool (*walker) (), void *context);
 
 
 /*
diff --git a/src/backend/nodes/tidbitmap.c b/src/backend/nodes/tidbitmap.c
index 64ab0cfc0e22..9b913feb8960 100644
--- a/src/backend/nodes/tidbitmap.c
+++ b/src/backend/nodes/tidbitmap.c
@@ -227,16 +227,16 @@ struct TBMSharedIterator
 /* Local function prototypes */
 static void tbm_union_page(TIDBitmap *a, const PagetableEntry *bpage);
 static bool tbm_intersect_page(TIDBitmap *a, PagetableEntry *apage,
-				   const TIDBitmap *b);
+							   const TIDBitmap *b);
 static const PagetableEntry *tbm_find_pageentry(const TIDBitmap *tbm,
-				   BlockNumber pageno);
+												BlockNumber pageno);
 static PagetableEntry *tbm_get_pageentry(TIDBitmap *tbm, BlockNumber pageno);
 static bool tbm_page_is_lossy(const TIDBitmap *tbm, BlockNumber pageno);
 static void tbm_mark_page_lossy(TIDBitmap *tbm, BlockNumber pageno);
 static void tbm_lossify(TIDBitmap *tbm);
 static int	tbm_comparator(const void *left, const void *right);
-static int tbm_shared_comparator(const void *left, const void *right,
-					  void *arg);
+static int	tbm_shared_comparator(const void *left, const void *right,
+								  void *arg);
 
 /* define hashtable mapping block numbers to PagetableEntry's */
 #define SH_USE_NONDEFAULT_ALLOCATOR
diff --git a/src/backend/optimizer/geqo/geqo_eval.c b/src/backend/optimizer/geqo/geqo_eval.c
index e07bab831e13..6c69c1c14789 100644
--- a/src/backend/optimizer/geqo/geqo_eval.c
+++ b/src/backend/optimizer/geqo/geqo_eval.c
@@ -40,9 +40,9 @@ typedef struct
 } Clump;
 
 static List *merge_clump(PlannerInfo *root, List *clumps, Clump *new_clump,
-			int num_gene, bool force);
+						 int num_gene, bool force);
 static bool desirable_join(PlannerInfo *root,
-			   RelOptInfo *outer_rel, RelOptInfo *inner_rel);
+						   RelOptInfo *outer_rel, RelOptInfo *inner_rel);
 
 
 /*
diff --git a/src/backend/optimizer/path/allpaths.c b/src/backend/optimizer/path/allpaths.c
index af05bb7511e4..b7723481b0e7 100644
--- a/src/backend/optimizer/path/allpaths.c
+++ b/src/backend/optimizer/path/allpaths.c
@@ -75,71 +75,71 @@ static void set_base_rel_consider_startup(PlannerInfo *root);
 static void set_base_rel_sizes(PlannerInfo *root);
 static void set_base_rel_pathlists(PlannerInfo *root);
 static void set_rel_size(PlannerInfo *root, RelOptInfo *rel,
-			 Index rti, RangeTblEntry *rte);
+						 Index rti, RangeTblEntry *rte);
 static void set_rel_pathlist(PlannerInfo *root, RelOptInfo *rel,
-				 Index rti, RangeTblEntry *rte);
+							 Index rti, RangeTblEntry *rte);
 static void set_plain_rel_size(PlannerInfo *root, RelOptInfo *rel,
-				   RangeTblEntry *rte);
+							   RangeTblEntry *rte);
 static void create_plain_partial_paths(PlannerInfo *root, RelOptInfo *rel);
 static void set_rel_consider_parallel(PlannerInfo *root, RelOptInfo *rel,
-						  RangeTblEntry *rte);
+									  RangeTblEntry *rte);
 static void set_plain_rel_pathlist(PlannerInfo *root, RelOptInfo *rel,
-					   RangeTblEntry *rte);
+								   RangeTblEntry *rte);
 static void set_tablesample_rel_size(PlannerInfo *root, RelOptInfo *rel,
-						 RangeTblEntry *rte);
+									 RangeTblEntry *rte);
 static void set_tablesample_rel_pathlist(PlannerInfo *root, RelOptInfo *rel,
-							 RangeTblEntry *rte);
+										 RangeTblEntry *rte);
 static void set_foreign_size(PlannerInfo *root, RelOptInfo *rel,
-				 RangeTblEntry *rte);
+							 RangeTblEntry *rte);
 static void set_foreign_pathlist(PlannerInfo *root, RelOptInfo *rel,
-					 RangeTblEntry *rte);
+								 RangeTblEntry *rte);
 static void set_append_rel_size(PlannerInfo *root, RelOptInfo *rel,
-					Index rti, RangeTblEntry *rte);
+								Index rti, RangeTblEntry *rte);
 static void set_append_rel_pathlist(PlannerInfo *root, RelOptInfo *rel,
-						Index rti, RangeTblEntry *rte);
+									Index rti, RangeTblEntry *rte);
 static void generate_orderedappend_paths(PlannerInfo *root, RelOptInfo *rel,
-							 List *live_childrels,
-							 List *all_child_pathkeys,
-							 List *partitioned_rels);
+										 List *live_childrels,
+										 List *all_child_pathkeys,
+										 List *partitioned_rels);
 static Path *get_cheapest_parameterized_child_path(PlannerInfo *root,
-									  RelOptInfo *rel,
-									  Relids required_outer);
+												   RelOptInfo *rel,
+												   Relids required_outer);
 static void accumulate_append_subpath(Path *path,
-						  List **subpaths, List **special_subpaths);
+									  List **subpaths, List **special_subpaths);
 static Path *get_singleton_append_subpath(Path *path);
 static void set_dummy_rel_pathlist(RelOptInfo *rel);
 static void set_subquery_pathlist(PlannerInfo *root, RelOptInfo *rel,
-					  Index rti, RangeTblEntry *rte);
+								  Index rti, RangeTblEntry *rte);
 static void set_function_pathlist(PlannerInfo *root, RelOptInfo *rel,
-					  RangeTblEntry *rte);
+								  RangeTblEntry *rte);
 static void set_values_pathlist(PlannerInfo *root, RelOptInfo *rel,
-					RangeTblEntry *rte);
+								RangeTblEntry *rte);
 static void set_tablefunc_pathlist(PlannerInfo *root, RelOptInfo *rel,
-					   RangeTblEntry *rte);
+								   RangeTblEntry *rte);
 static void set_cte_pathlist(PlannerInfo *root, RelOptInfo *rel,
-				 RangeTblEntry *rte);
-static void set_namedtuplestore_pathlist(PlannerInfo *root, RelOptInfo *rel,
 							 RangeTblEntry *rte);
+static void set_namedtuplestore_pathlist(PlannerInfo *root, RelOptInfo *rel,
+										 RangeTblEntry *rte);
 static void set_result_pathlist(PlannerInfo *root, RelOptInfo *rel,
-					RangeTblEntry *rte);
+								RangeTblEntry *rte);
 static void set_worktable_pathlist(PlannerInfo *root, RelOptInfo *rel,
-					   RangeTblEntry *rte);
+								   RangeTblEntry *rte);
 static RelOptInfo *make_rel_from_joinlist(PlannerInfo *root, List *joinlist);
 static bool subquery_is_pushdown_safe(Query *subquery, Query *topquery,
-						  pushdown_safety_info *safetyInfo);
+									  pushdown_safety_info *safetyInfo);
 static bool recurse_pushdown_safe(Node *setOp, Query *topquery,
-					  pushdown_safety_info *safetyInfo);
+								  pushdown_safety_info *safetyInfo);
 static void check_output_expressions(Query *subquery,
-						 pushdown_safety_info *safetyInfo);
+									 pushdown_safety_info *safetyInfo);
 static void compare_tlist_datatypes(List *tlist, List *colTypes,
-						pushdown_safety_info *safetyInfo);
+									pushdown_safety_info *safetyInfo);
 static bool targetIsInAllPartitionLists(TargetEntry *tle, Query *query);
 static bool qual_is_pushdown_safe(Query *subquery, Index rti, Node *qual,
-					  pushdown_safety_info *safetyInfo);
+								  pushdown_safety_info *safetyInfo);
 static void subquery_push_qual(Query *subquery,
-				   RangeTblEntry *rte, Index rti, Node *qual);
+							   RangeTblEntry *rte, Index rti, Node *qual);
 static void recurse_push_qual(Node *setOp, Query *topquery,
-				  RangeTblEntry *rte, Index rti, Node *qual);
+							  RangeTblEntry *rte, Index rti, Node *qual);
 static void remove_unused_subquery_outputs(Query *subquery, RelOptInfo *rel);
 
 
diff --git a/src/backend/optimizer/path/clausesel.c b/src/backend/optimizer/path/clausesel.c
index bfad6b798782..4bf777d82d3d 100644
--- a/src/backend/optimizer/path/clausesel.c
+++ b/src/backend/optimizer/path/clausesel.c
@@ -42,9 +42,9 @@ typedef struct RangeQueryClause
 } RangeQueryClause;
 
 static void addRangeClause(RangeQueryClause **rqlist, Node *clause,
-			   bool varonleft, bool isLTsel, Selectivity s2);
+						   bool varonleft, bool isLTsel, Selectivity s2);
 static RelOptInfo *find_single_rel_for_clauses(PlannerInfo *root,
-							List *clauses);
+											   List *clauses);
 
 /****************************************************************************
  *		ROUTINES TO COMPUTE SELECTIVITIES
diff --git a/src/backend/optimizer/path/costsize.c b/src/backend/optimizer/path/costsize.c
index afd32884a25b..a2a9b1f7be61 100644
--- a/src/backend/optimizer/path/costsize.c
+++ b/src/backend/optimizer/path/costsize.c
@@ -147,32 +147,32 @@ typedef struct
 
 static List *extract_nonindex_conditions(List *qual_clauses, List *indexclauses);
 static MergeScanSelCache *cached_scansel(PlannerInfo *root,
-			   RestrictInfo *rinfo,
-			   PathKey *pathkey);
+										 RestrictInfo *rinfo,
+										 PathKey *pathkey);
 static void cost_rescan(PlannerInfo *root, Path *path,
-			Cost *rescan_startup_cost, Cost *rescan_total_cost);
+						Cost *rescan_startup_cost, Cost *rescan_total_cost);
 static bool cost_qual_eval_walker(Node *node, cost_qual_eval_context *context);
 static void get_restriction_qual_cost(PlannerInfo *root, RelOptInfo *baserel,
-						  ParamPathInfo *param_info,
-						  QualCost *qpqual_cost);
+									  ParamPathInfo *param_info,
+									  QualCost *qpqual_cost);
 static bool has_indexed_join_quals(NestPath *joinpath);
 static double approx_tuple_count(PlannerInfo *root, JoinPath *path,
-				   List *quals);
+								 List *quals);
 static double calc_joinrel_size_estimate(PlannerInfo *root,
-						   RelOptInfo *joinrel,
-						   RelOptInfo *outer_rel,
-						   RelOptInfo *inner_rel,
-						   double outer_rows,
-						   double inner_rows,
-						   SpecialJoinInfo *sjinfo,
-						   List *restrictlist);
+										 RelOptInfo *joinrel,
+										 RelOptInfo *outer_rel,
+										 RelOptInfo *inner_rel,
+										 double outer_rows,
+										 double inner_rows,
+										 SpecialJoinInfo *sjinfo,
+										 List *restrictlist);
 static Selectivity get_foreign_key_join_selectivity(PlannerInfo *root,
-								 Relids outer_relids,
-								 Relids inner_relids,
-								 SpecialJoinInfo *sjinfo,
-								 List **restrictlist);
+													Relids outer_relids,
+													Relids inner_relids,
+													SpecialJoinInfo *sjinfo,
+													List **restrictlist);
 static Cost append_nonpartial_cost(List *subpaths, int numpaths,
-					   int parallel_workers);
+								   int parallel_workers);
 static void set_rel_width(PlannerInfo *root, RelOptInfo *rel);
 static double relation_byte_size(double tuples, int width);
 static double page_size(double tuples, int width);
diff --git a/src/backend/optimizer/path/equivclass.c b/src/backend/optimizer/path/equivclass.c
index 61b5b119b003..e9bd5eaff5c0 100644
--- a/src/backend/optimizer/path/equivclass.c
+++ b/src/backend/optimizer/path/equivclass.c
@@ -33,37 +33,37 @@
 
 
 static EquivalenceMember *add_eq_member(EquivalenceClass *ec,
-			  Expr *expr, Relids relids, Relids nullable_relids,
-			  bool is_child, Oid datatype);
+										Expr *expr, Relids relids, Relids nullable_relids,
+										bool is_child, Oid datatype);
 static void generate_base_implied_equalities_const(PlannerInfo *root,
-									   EquivalenceClass *ec);
+												   EquivalenceClass *ec);
 static void generate_base_implied_equalities_no_const(PlannerInfo *root,
-										  EquivalenceClass *ec);
+													  EquivalenceClass *ec);
 static void generate_base_implied_equalities_broken(PlannerInfo *root,
-										EquivalenceClass *ec);
+													EquivalenceClass *ec);
 static List *generate_join_implied_equalities_normal(PlannerInfo *root,
-										EquivalenceClass *ec,
-										Relids join_relids,
-										Relids outer_relids,
-										Relids inner_relids);
+													 EquivalenceClass *ec,
+													 Relids join_relids,
+													 Relids outer_relids,
+													 Relids inner_relids);
 static List *generate_join_implied_equalities_broken(PlannerInfo *root,
-										EquivalenceClass *ec,
-										Relids nominal_join_relids,
-										Relids outer_relids,
-										Relids nominal_inner_relids,
-										RelOptInfo *inner_rel);
-static Oid select_equality_operator(EquivalenceClass *ec,
-						 Oid lefttype, Oid righttype);
+													 EquivalenceClass *ec,
+													 Relids nominal_join_relids,
+													 Relids outer_relids,
+													 Relids nominal_inner_relids,
+													 RelOptInfo *inner_rel);
+static Oid	select_equality_operator(EquivalenceClass *ec,
+									 Oid lefttype, Oid righttype);
 static RestrictInfo *create_join_clause(PlannerInfo *root,
-				   EquivalenceClass *ec, Oid opno,
-				   EquivalenceMember *leftem,
-				   EquivalenceMember *rightem,
-				   EquivalenceClass *parent_ec);
+										EquivalenceClass *ec, Oid opno,
+										EquivalenceMember *leftem,
+										EquivalenceMember *rightem,
+										EquivalenceClass *parent_ec);
 static bool reconsider_outer_join_clause(PlannerInfo *root,
-							 RestrictInfo *rinfo,
-							 bool outer_on_left);
+										 RestrictInfo *rinfo,
+										 bool outer_on_left);
 static bool reconsider_full_join_clause(PlannerInfo *root,
-							RestrictInfo *rinfo);
+										RestrictInfo *rinfo);
 
 
 /*
diff --git a/src/backend/optimizer/path/indxpath.c b/src/backend/optimizer/path/indxpath.c
index 3434219dbd1d..c208e9bfb0b6 100644
--- a/src/backend/optimizer/path/indxpath.c
+++ b/src/backend/optimizer/path/indxpath.c
@@ -75,120 +75,120 @@ typedef struct
 
 
 static void consider_index_join_clauses(PlannerInfo *root, RelOptInfo *rel,
-							IndexOptInfo *index,
-							IndexClauseSet *rclauseset,
-							IndexClauseSet *jclauseset,
-							IndexClauseSet *eclauseset,
-							List **bitindexpaths);
+										IndexOptInfo *index,
+										IndexClauseSet *rclauseset,
+										IndexClauseSet *jclauseset,
+										IndexClauseSet *eclauseset,
+										List **bitindexpaths);
 static void consider_index_join_outer_rels(PlannerInfo *root, RelOptInfo *rel,
-							   IndexOptInfo *index,
-							   IndexClauseSet *rclauseset,
-							   IndexClauseSet *jclauseset,
-							   IndexClauseSet *eclauseset,
-							   List **bitindexpaths,
-							   List *indexjoinclauses,
-							   int considered_clauses,
-							   List **considered_relids);
+										   IndexOptInfo *index,
+										   IndexClauseSet *rclauseset,
+										   IndexClauseSet *jclauseset,
+										   IndexClauseSet *eclauseset,
+										   List **bitindexpaths,
+										   List *indexjoinclauses,
+										   int considered_clauses,
+										   List **considered_relids);
 static void get_join_index_paths(PlannerInfo *root, RelOptInfo *rel,
-					 IndexOptInfo *index,
-					 IndexClauseSet *rclauseset,
-					 IndexClauseSet *jclauseset,
-					 IndexClauseSet *eclauseset,
-					 List **bitindexpaths,
-					 Relids relids,
-					 List **considered_relids);
+								 IndexOptInfo *index,
+								 IndexClauseSet *rclauseset,
+								 IndexClauseSet *jclauseset,
+								 IndexClauseSet *eclauseset,
+								 List **bitindexpaths,
+								 Relids relids,
+								 List **considered_relids);
 static bool eclass_already_used(EquivalenceClass *parent_ec, Relids oldrelids,
-					List *indexjoinclauses);
+								List *indexjoinclauses);
 static bool bms_equal_any(Relids relids, List *relids_list);
 static void get_index_paths(PlannerInfo *root, RelOptInfo *rel,
-				IndexOptInfo *index, IndexClauseSet *clauses,
-				List **bitindexpaths);
+							IndexOptInfo *index, IndexClauseSet *clauses,
+							List **bitindexpaths);
 static List *build_index_paths(PlannerInfo *root, RelOptInfo *rel,
-				  IndexOptInfo *index, IndexClauseSet *clauses,
-				  bool useful_predicate,
-				  ScanTypeControl scantype,
-				  bool *skip_nonnative_saop,
-				  bool *skip_lower_saop);
+							   IndexOptInfo *index, IndexClauseSet *clauses,
+							   bool useful_predicate,
+							   ScanTypeControl scantype,
+							   bool *skip_nonnative_saop,
+							   bool *skip_lower_saop);
 static List *build_paths_for_OR(PlannerInfo *root, RelOptInfo *rel,
-				   List *clauses, List *other_clauses);
+								List *clauses, List *other_clauses);
 static List *generate_bitmap_or_paths(PlannerInfo *root, RelOptInfo *rel,
-						 List *clauses, List *other_clauses);
+									  List *clauses, List *other_clauses);
 static Path *choose_bitmap_and(PlannerInfo *root, RelOptInfo *rel,
-				  List *paths);
+							   List *paths);
 static int	path_usage_comparator(const void *a, const void *b);
 static Cost bitmap_scan_cost_est(PlannerInfo *root, RelOptInfo *rel,
-					 Path *ipath);
+								 Path *ipath);
 static Cost bitmap_and_cost_est(PlannerInfo *root, RelOptInfo *rel,
-					List *paths);
+								List *paths);
 static PathClauseUsage *classify_index_clause_usage(Path *path,
-							List **clauselist);
+													List **clauselist);
 static Relids get_bitmap_tree_required_outer(Path *bitmapqual);
 static void find_indexpath_quals(Path *bitmapqual, List **quals, List **preds);
 static int	find_list_position(Node *node, List **nodelist);
 static bool check_index_only(RelOptInfo *rel, IndexOptInfo *index);
 static double get_loop_count(PlannerInfo *root, Index cur_relid, Relids outer_relids);
 static double adjust_rowcount_for_semijoins(PlannerInfo *root,
-							  Index cur_relid,
-							  Index outer_relid,
-							  double rowcount);
+											Index cur_relid,
+											Index outer_relid,
+											double rowcount);
 static double approximate_joinrel_size(PlannerInfo *root, Relids relids);
 static void match_restriction_clauses_to_index(PlannerInfo *root,
-								   IndexOptInfo *index,
-								   IndexClauseSet *clauseset);
+											   IndexOptInfo *index,
+											   IndexClauseSet *clauseset);
 static void match_join_clauses_to_index(PlannerInfo *root,
-							RelOptInfo *rel, IndexOptInfo *index,
-							IndexClauseSet *clauseset,
-							List **joinorclauses);
+										RelOptInfo *rel, IndexOptInfo *index,
+										IndexClauseSet *clauseset,
+										List **joinorclauses);
 static void match_eclass_clauses_to_index(PlannerInfo *root,
-							  IndexOptInfo *index,
-							  IndexClauseSet *clauseset);
+										  IndexOptInfo *index,
+										  IndexClauseSet *clauseset);
 static void match_clauses_to_index(PlannerInfo *root,
-					   List *clauses,
-					   IndexOptInfo *index,
-					   IndexClauseSet *clauseset);
+								   List *clauses,
+								   IndexOptInfo *index,
+								   IndexClauseSet *clauseset);
 static void match_clause_to_index(PlannerInfo *root,
-					  RestrictInfo *rinfo,
-					  IndexOptInfo *index,
-					  IndexClauseSet *clauseset);
+								  RestrictInfo *rinfo,
+								  IndexOptInfo *index,
+								  IndexClauseSet *clauseset);
 static IndexClause *match_clause_to_indexcol(PlannerInfo *root,
-						 RestrictInfo *rinfo,
-						 int indexcol,
-						 IndexOptInfo *index);
+											 RestrictInfo *rinfo,
+											 int indexcol,
+											 IndexOptInfo *index);
 static IndexClause *match_boolean_index_clause(RestrictInfo *rinfo,
-						   int indexcol, IndexOptInfo *index);
+											   int indexcol, IndexOptInfo *index);
 static IndexClause *match_opclause_to_indexcol(PlannerInfo *root,
-						   RestrictInfo *rinfo,
-						   int indexcol,
-						   IndexOptInfo *index);
+											   RestrictInfo *rinfo,
+											   int indexcol,
+											   IndexOptInfo *index);
 static IndexClause *match_funcclause_to_indexcol(PlannerInfo *root,
-							 RestrictInfo *rinfo,
-							 int indexcol,
-							 IndexOptInfo *index);
+												 RestrictInfo *rinfo,
+												 int indexcol,
+												 IndexOptInfo *index);
 static IndexClause *get_index_clause_from_support(PlannerInfo *root,
-							  RestrictInfo *rinfo,
-							  Oid funcid,
-							  int indexarg,
-							  int indexcol,
-							  IndexOptInfo *index);
+												  RestrictInfo *rinfo,
+												  Oid funcid,
+												  int indexarg,
+												  int indexcol,
+												  IndexOptInfo *index);
 static IndexClause *match_saopclause_to_indexcol(RestrictInfo *rinfo,
-							 int indexcol,
-							 IndexOptInfo *index);
+												 int indexcol,
+												 IndexOptInfo *index);
 static IndexClause *match_rowcompare_to_indexcol(RestrictInfo *rinfo,
-							 int indexcol,
-							 IndexOptInfo *index);
+												 int indexcol,
+												 IndexOptInfo *index);
 static IndexClause *expand_indexqual_rowcompare(RestrictInfo *rinfo,
-							int indexcol,
-							IndexOptInfo *index,
-							Oid expr_op,
-							bool var_on_left);
+												int indexcol,
+												IndexOptInfo *index,
+												Oid expr_op,
+												bool var_on_left);
 static void match_pathkeys_to_index(IndexOptInfo *index, List *pathkeys,
-						List **orderby_clauses_p,
-						List **clause_columns_p);
+									List **orderby_clauses_p,
+									List **clause_columns_p);
 static Expr *match_clause_to_ordering_op(IndexOptInfo *index,
-							int indexcol, Expr *clause, Oid pk_opfamily);
+										 int indexcol, Expr *clause, Oid pk_opfamily);
 static bool ec_member_matches_indexcol(PlannerInfo *root, RelOptInfo *rel,
-						   EquivalenceClass *ec, EquivalenceMember *em,
-						   void *arg);
+									   EquivalenceClass *ec, EquivalenceMember *em,
+									   void *arg);
 
 
 /*
diff --git a/src/backend/optimizer/path/joinpath.c b/src/backend/optimizer/path/joinpath.c
index d8ff4bf4320d..501ad775cbe9 100644
--- a/src/backend/optimizer/path/joinpath.c
+++ b/src/backend/optimizer/path/joinpath.c
@@ -40,54 +40,54 @@ set_join_pathlist_hook_type set_join_pathlist_hook = NULL;
 	(PATH_PARAM_BY_REL_SELF(path, rel) || PATH_PARAM_BY_PARENT(path, rel))
 
 static void try_partial_mergejoin_path(PlannerInfo *root,
-						   RelOptInfo *joinrel,
-						   Path *outer_path,
-						   Path *inner_path,
-						   List *pathkeys,
-						   List *mergeclauses,
-						   List *outersortkeys,
-						   List *innersortkeys,
-						   JoinType jointype,
-						   JoinPathExtraData *extra);
+									   RelOptInfo *joinrel,
+									   Path *outer_path,
+									   Path *inner_path,
+									   List *pathkeys,
+									   List *mergeclauses,
+									   List *outersortkeys,
+									   List *innersortkeys,
+									   JoinType jointype,
+									   JoinPathExtraData *extra);
 static void sort_inner_and_outer(PlannerInfo *root, RelOptInfo *joinrel,
-					 RelOptInfo *outerrel, RelOptInfo *innerrel,
-					 JoinType jointype, JoinPathExtraData *extra);
+								 RelOptInfo *outerrel, RelOptInfo *innerrel,
+								 JoinType jointype, JoinPathExtraData *extra);
 static void match_unsorted_outer(PlannerInfo *root, RelOptInfo *joinrel,
-					 RelOptInfo *outerrel, RelOptInfo *innerrel,
-					 JoinType jointype, JoinPathExtraData *extra);
+								 RelOptInfo *outerrel, RelOptInfo *innerrel,
+								 JoinType jointype, JoinPathExtraData *extra);
 static void consider_parallel_nestloop(PlannerInfo *root,
-						   RelOptInfo *joinrel,
-						   RelOptInfo *outerrel,
-						   RelOptInfo *innerrel,
-						   JoinType jointype,
-						   JoinPathExtraData *extra);
+									   RelOptInfo *joinrel,
+									   RelOptInfo *outerrel,
+									   RelOptInfo *innerrel,
+									   JoinType jointype,
+									   JoinPathExtraData *extra);
 static void consider_parallel_mergejoin(PlannerInfo *root,
-							RelOptInfo *joinrel,
-							RelOptInfo *outerrel,
-							RelOptInfo *innerrel,
-							JoinType jointype,
-							JoinPathExtraData *extra,
-							Path *inner_cheapest_total);
+										RelOptInfo *joinrel,
+										RelOptInfo *outerrel,
+										RelOptInfo *innerrel,
+										JoinType jointype,
+										JoinPathExtraData *extra,
+										Path *inner_cheapest_total);
 static void hash_inner_and_outer(PlannerInfo *root, RelOptInfo *joinrel,
-					 RelOptInfo *outerrel, RelOptInfo *innerrel,
-					 JoinType jointype, JoinPathExtraData *extra);
+								 RelOptInfo *outerrel, RelOptInfo *innerrel,
+								 JoinType jointype, JoinPathExtraData *extra);
 static List *select_mergejoin_clauses(PlannerInfo *root,
-						 RelOptInfo *joinrel,
-						 RelOptInfo *outerrel,
-						 RelOptInfo *innerrel,
-						 List *restrictlist,
-						 JoinType jointype,
-						 bool *mergejoin_allowed);
+									  RelOptInfo *joinrel,
+									  RelOptInfo *outerrel,
+									  RelOptInfo *innerrel,
+									  List *restrictlist,
+									  JoinType jointype,
+									  bool *mergejoin_allowed);
 static void generate_mergejoin_paths(PlannerInfo *root,
-						 RelOptInfo *joinrel,
-						 RelOptInfo *innerrel,
-						 Path *outerpath,
-						 JoinType jointype,
-						 JoinPathExtraData *extra,
-						 bool useallclauses,
-						 Path *inner_cheapest_total,
-						 List *merge_pathkeys,
-						 bool is_partial);
+									 RelOptInfo *joinrel,
+									 RelOptInfo *innerrel,
+									 Path *outerpath,
+									 JoinType jointype,
+									 JoinPathExtraData *extra,
+									 bool useallclauses,
+									 Path *inner_cheapest_total,
+									 List *merge_pathkeys,
+									 bool is_partial);
 
 
 /*
diff --git a/src/backend/optimizer/path/joinrels.c b/src/backend/optimizer/path/joinrels.c
index 46623c33c636..43c3b7ea489b 100644
--- a/src/backend/optimizer/path/joinrels.c
+++ b/src/backend/optimizer/path/joinrels.c
@@ -25,28 +25,28 @@
 
 
 static void make_rels_by_clause_joins(PlannerInfo *root,
-						  RelOptInfo *old_rel,
-						  ListCell *other_rels);
+									  RelOptInfo *old_rel,
+									  ListCell *other_rels);
 static void make_rels_by_clauseless_joins(PlannerInfo *root,
-							  RelOptInfo *old_rel,
-							  ListCell *other_rels);
+										  RelOptInfo *old_rel,
+										  ListCell *other_rels);
 static bool has_join_restriction(PlannerInfo *root, RelOptInfo *rel);
 static bool has_legal_joinclause(PlannerInfo *root, RelOptInfo *rel);
 static bool restriction_is_constant_false(List *restrictlist,
-							  RelOptInfo *joinrel,
-							  bool only_pushed_down);
+										  RelOptInfo *joinrel,
+										  bool only_pushed_down);
 static void populate_joinrel_with_paths(PlannerInfo *root, RelOptInfo *rel1,
-							RelOptInfo *rel2, RelOptInfo *joinrel,
-							SpecialJoinInfo *sjinfo, List *restrictlist);
+										RelOptInfo *rel2, RelOptInfo *joinrel,
+										SpecialJoinInfo *sjinfo, List *restrictlist);
 static void try_partitionwise_join(PlannerInfo *root, RelOptInfo *rel1,
-					   RelOptInfo *rel2, RelOptInfo *joinrel,
-					   SpecialJoinInfo *parent_sjinfo,
-					   List *parent_restrictlist);
+								   RelOptInfo *rel2, RelOptInfo *joinrel,
+								   SpecialJoinInfo *parent_sjinfo,
+								   List *parent_restrictlist);
 static SpecialJoinInfo *build_child_join_sjinfo(PlannerInfo *root,
-						SpecialJoinInfo *parent_sjinfo,
-						Relids left_relids, Relids right_relids);
-static int match_expr_to_partition_keys(Expr *expr, RelOptInfo *rel,
-							 bool strict_op);
+												SpecialJoinInfo *parent_sjinfo,
+												Relids left_relids, Relids right_relids);
+static int	match_expr_to_partition_keys(Expr *expr, RelOptInfo *rel,
+										 bool strict_op);
 
 
 /*
diff --git a/src/backend/optimizer/path/pathkeys.c b/src/backend/optimizer/path/pathkeys.c
index c301e41a4a70..08b506161282 100644
--- a/src/backend/optimizer/path/pathkeys.c
+++ b/src/backend/optimizer/path/pathkeys.c
@@ -31,8 +31,8 @@
 
 static bool pathkey_is_redundant(PathKey *new_pathkey, List *pathkeys);
 static bool matches_boolean_partition_clause(RestrictInfo *rinfo,
-								 RelOptInfo *partrel,
-								 int partkeycol);
+											 RelOptInfo *partrel,
+											 int partkeycol);
 static Var *find_var_for_subquery_tle(RelOptInfo *rel, TargetEntry *tle);
 static bool right_merge_direction(PlannerInfo *root, PathKey *pathkey);
 
diff --git a/src/backend/optimizer/plan/analyzejoins.c b/src/backend/optimizer/plan/analyzejoins.c
index a4efa693ea76..32695db367b9 100644
--- a/src/backend/optimizer/plan/analyzejoins.c
+++ b/src/backend/optimizer/plan/analyzejoins.c
@@ -35,18 +35,18 @@
 /* local functions */
 static bool join_is_removable(PlannerInfo *root, SpecialJoinInfo *sjinfo);
 static void remove_rel_from_query(PlannerInfo *root, int relid,
-					  Relids joinrelids);
+								  Relids joinrelids);
 static List *remove_rel_from_joinlist(List *joinlist, int relid, int *nremoved);
 static bool rel_supports_distinctness(PlannerInfo *root, RelOptInfo *rel);
 static bool rel_is_distinct_for(PlannerInfo *root, RelOptInfo *rel,
-					List *clause_list);
+								List *clause_list);
 static Oid	distinct_col_search(int colno, List *colnos, List *opids);
 static bool is_innerrel_unique_for(PlannerInfo *root,
-					   Relids joinrelids,
-					   Relids outerrelids,
-					   RelOptInfo *innerrel,
-					   JoinType jointype,
-					   List *restrictlist);
+								   Relids joinrelids,
+								   Relids outerrelids,
+								   RelOptInfo *innerrel,
+								   JoinType jointype,
+								   List *restrictlist);
 
 
 /*
diff --git a/src/backend/optimizer/plan/createplan.c b/src/backend/optimizer/plan/createplan.c
index 270c11901b78..608d5adfed23 100644
--- a/src/backend/optimizer/plan/createplan.c
+++ b/src/backend/optimizer/plan/createplan.c
@@ -72,223 +72,223 @@
 
 
 static Plan *create_plan_recurse(PlannerInfo *root, Path *best_path,
-					int flags);
+								 int flags);
 static Plan *create_scan_plan(PlannerInfo *root, Path *best_path,
-				 int flags);
+							  int flags);
 static List *build_path_tlist(PlannerInfo *root, Path *path);
 static bool use_physical_tlist(PlannerInfo *root, Path *path, int flags);
 static List *get_gating_quals(PlannerInfo *root, List *quals);
 static Plan *create_gating_plan(PlannerInfo *root, Path *path, Plan *plan,
-				   List *gating_quals);
+								List *gating_quals);
 static Plan *create_join_plan(PlannerInfo *root, JoinPath *best_path);
 static Plan *create_append_plan(PlannerInfo *root, AppendPath *best_path,
-				   int flags);
+								int flags);
 static Plan *create_merge_append_plan(PlannerInfo *root, MergeAppendPath *best_path,
-						 int flags);
+									  int flags);
 static Result *create_group_result_plan(PlannerInfo *root,
-						 GroupResultPath *best_path);
+										GroupResultPath *best_path);
 static ProjectSet *create_project_set_plan(PlannerInfo *root, ProjectSetPath *best_path);
 static Material *create_material_plan(PlannerInfo *root, MaterialPath *best_path,
-					 int flags);
+									  int flags);
 static Plan *create_unique_plan(PlannerInfo *root, UniquePath *best_path,
-				   int flags);
+								int flags);
 static Gather *create_gather_plan(PlannerInfo *root, GatherPath *best_path);
 static Plan *create_projection_plan(PlannerInfo *root,
-					   ProjectionPath *best_path,
-					   int flags);
+									ProjectionPath *best_path,
+									int flags);
 static Plan *inject_projection_plan(Plan *subplan, List *tlist, bool parallel_safe);
 static Sort *create_sort_plan(PlannerInfo *root, SortPath *best_path, int flags);
 static Group *create_group_plan(PlannerInfo *root, GroupPath *best_path);
 static Unique *create_upper_unique_plan(PlannerInfo *root, UpperUniquePath *best_path,
-						 int flags);
+										int flags);
 static Agg *create_agg_plan(PlannerInfo *root, AggPath *best_path);
 static Plan *create_groupingsets_plan(PlannerInfo *root, GroupingSetsPath *best_path);
 static Result *create_minmaxagg_plan(PlannerInfo *root, MinMaxAggPath *best_path);
 static WindowAgg *create_windowagg_plan(PlannerInfo *root, WindowAggPath *best_path);
 static SetOp *create_setop_plan(PlannerInfo *root, SetOpPath *best_path,
-				  int flags);
+								int flags);
 static RecursiveUnion *create_recursiveunion_plan(PlannerInfo *root, RecursiveUnionPath *best_path);
 static LockRows *create_lockrows_plan(PlannerInfo *root, LockRowsPath *best_path,
-					 int flags);
+									  int flags);
 static ModifyTable *create_modifytable_plan(PlannerInfo *root, ModifyTablePath *best_path);
 static Limit *create_limit_plan(PlannerInfo *root, LimitPath *best_path,
-				  int flags);
+								int flags);
 static SeqScan *create_seqscan_plan(PlannerInfo *root, Path *best_path,
-					List *tlist, List *scan_clauses);
+									List *tlist, List *scan_clauses);
 static SampleScan *create_samplescan_plan(PlannerInfo *root, Path *best_path,
-					   List *tlist, List *scan_clauses);
+										  List *tlist, List *scan_clauses);
 static Scan *create_indexscan_plan(PlannerInfo *root, IndexPath *best_path,
-					  List *tlist, List *scan_clauses, bool indexonly);
+								   List *tlist, List *scan_clauses, bool indexonly);
 static BitmapHeapScan *create_bitmap_scan_plan(PlannerInfo *root,
-						BitmapHeapPath *best_path,
-						List *tlist, List *scan_clauses);
+											   BitmapHeapPath *best_path,
+											   List *tlist, List *scan_clauses);
 static Plan *create_bitmap_subplan(PlannerInfo *root, Path *bitmapqual,
-					  List **qual, List **indexqual, List **indexECs);
+								   List **qual, List **indexqual, List **indexECs);
 static void bitmap_subplan_mark_shared(Plan *plan);
 static TidScan *create_tidscan_plan(PlannerInfo *root, TidPath *best_path,
-					List *tlist, List *scan_clauses);
+									List *tlist, List *scan_clauses);
 static SubqueryScan *create_subqueryscan_plan(PlannerInfo *root,
-						 SubqueryScanPath *best_path,
-						 List *tlist, List *scan_clauses);
+											  SubqueryScanPath *best_path,
+											  List *tlist, List *scan_clauses);
 static FunctionScan *create_functionscan_plan(PlannerInfo *root, Path *best_path,
-						 List *tlist, List *scan_clauses);
+											  List *tlist, List *scan_clauses);
 static ValuesScan *create_valuesscan_plan(PlannerInfo *root, Path *best_path,
-					   List *tlist, List *scan_clauses);
+										  List *tlist, List *scan_clauses);
 static TableFuncScan *create_tablefuncscan_plan(PlannerInfo *root, Path *best_path,
-						  List *tlist, List *scan_clauses);
+												List *tlist, List *scan_clauses);
 static CteScan *create_ctescan_plan(PlannerInfo *root, Path *best_path,
-					List *tlist, List *scan_clauses);
+									List *tlist, List *scan_clauses);
 static NamedTuplestoreScan *create_namedtuplestorescan_plan(PlannerInfo *root,
-								Path *best_path, List *tlist, List *scan_clauses);
+															Path *best_path, List *tlist, List *scan_clauses);
 static Result *create_resultscan_plan(PlannerInfo *root, Path *best_path,
-					   List *tlist, List *scan_clauses);
+									  List *tlist, List *scan_clauses);
 static WorkTableScan *create_worktablescan_plan(PlannerInfo *root, Path *best_path,
-						  List *tlist, List *scan_clauses);
+												List *tlist, List *scan_clauses);
 static ForeignScan *create_foreignscan_plan(PlannerInfo *root, ForeignPath *best_path,
-						List *tlist, List *scan_clauses);
+											List *tlist, List *scan_clauses);
 static CustomScan *create_customscan_plan(PlannerInfo *root,
-					   CustomPath *best_path,
-					   List *tlist, List *scan_clauses);
+										  CustomPath *best_path,
+										  List *tlist, List *scan_clauses);
 static NestLoop *create_nestloop_plan(PlannerInfo *root, NestPath *best_path);
 static MergeJoin *create_mergejoin_plan(PlannerInfo *root, MergePath *best_path);
 static HashJoin *create_hashjoin_plan(PlannerInfo *root, HashPath *best_path);
 static Node *replace_nestloop_params(PlannerInfo *root, Node *expr);
 static Node *replace_nestloop_params_mutator(Node *node, PlannerInfo *root);
 static void fix_indexqual_references(PlannerInfo *root, IndexPath *index_path,
-						 List **stripped_indexquals_p,
-						 List **fixed_indexquals_p);
+									 List **stripped_indexquals_p,
+									 List **fixed_indexquals_p);
 static List *fix_indexorderby_references(PlannerInfo *root, IndexPath *index_path);
 static Node *fix_indexqual_clause(PlannerInfo *root,
-					 IndexOptInfo *index, int indexcol,
-					 Node *clause, List *indexcolnos);
+								  IndexOptInfo *index, int indexcol,
+								  Node *clause, List *indexcolnos);
 static Node *fix_indexqual_operand(Node *node, IndexOptInfo *index, int indexcol);
 static List *get_switched_clauses(List *clauses, Relids outerrelids);
 static List *order_qual_clauses(PlannerInfo *root, List *clauses);
 static void copy_generic_path_info(Plan *dest, Path *src);
 static void copy_plan_costsize(Plan *dest, Plan *src);
 static void label_sort_with_costsize(PlannerInfo *root, Sort *plan,
-						 double limit_tuples);
+									 double limit_tuples);
 static SeqScan *make_seqscan(List *qptlist, List *qpqual, Index scanrelid);
 static SampleScan *make_samplescan(List *qptlist, List *qpqual, Index scanrelid,
-				TableSampleClause *tsc);
+								   TableSampleClause *tsc);
 static IndexScan *make_indexscan(List *qptlist, List *qpqual, Index scanrelid,
-			   Oid indexid, List *indexqual, List *indexqualorig,
-			   List *indexorderby, List *indexorderbyorig,
-			   List *indexorderbyops,
-			   ScanDirection indexscandir);
+								 Oid indexid, List *indexqual, List *indexqualorig,
+								 List *indexorderby, List *indexorderbyorig,
+								 List *indexorderbyops,
+								 ScanDirection indexscandir);
 static IndexOnlyScan *make_indexonlyscan(List *qptlist, List *qpqual,
-				   Index scanrelid, Oid indexid,
-				   List *indexqual, List *indexorderby,
-				   List *indextlist,
-				   ScanDirection indexscandir);
+										 Index scanrelid, Oid indexid,
+										 List *indexqual, List *indexorderby,
+										 List *indextlist,
+										 ScanDirection indexscandir);
 static BitmapIndexScan *make_bitmap_indexscan(Index scanrelid, Oid indexid,
-					  List *indexqual,
-					  List *indexqualorig);
+											  List *indexqual,
+											  List *indexqualorig);
 static BitmapHeapScan *make_bitmap_heapscan(List *qptlist,
-					 List *qpqual,
-					 Plan *lefttree,
-					 List *bitmapqualorig,
-					 Index scanrelid);
+											List *qpqual,
+											Plan *lefttree,
+											List *bitmapqualorig,
+											Index scanrelid);
 static TidScan *make_tidscan(List *qptlist, List *qpqual, Index scanrelid,
-			 List *tidquals);
+							 List *tidquals);
 static SubqueryScan *make_subqueryscan(List *qptlist,
-				  List *qpqual,
-				  Index scanrelid,
-				  Plan *subplan);
+									   List *qpqual,
+									   Index scanrelid,
+									   Plan *subplan);
 static FunctionScan *make_functionscan(List *qptlist, List *qpqual,
-				  Index scanrelid, List *functions, bool funcordinality);
+									   Index scanrelid, List *functions, bool funcordinality);
 static ValuesScan *make_valuesscan(List *qptlist, List *qpqual,
-				Index scanrelid, List *values_lists);
+								   Index scanrelid, List *values_lists);
 static TableFuncScan *make_tablefuncscan(List *qptlist, List *qpqual,
-				   Index scanrelid, TableFunc *tablefunc);
+										 Index scanrelid, TableFunc *tablefunc);
 static CteScan *make_ctescan(List *qptlist, List *qpqual,
-			 Index scanrelid, int ctePlanId, int cteParam);
+							 Index scanrelid, int ctePlanId, int cteParam);
 static NamedTuplestoreScan *make_namedtuplestorescan(List *qptlist, List *qpqual,
-						 Index scanrelid, char *enrname);
+													 Index scanrelid, char *enrname);
 static WorkTableScan *make_worktablescan(List *qptlist, List *qpqual,
-				   Index scanrelid, int wtParam);
+										 Index scanrelid, int wtParam);
 static RecursiveUnion *make_recursive_union(List *tlist,
-					 Plan *lefttree,
-					 Plan *righttree,
-					 int wtParam,
-					 List *distinctList,
-					 long numGroups);
+											Plan *lefttree,
+											Plan *righttree,
+											int wtParam,
+											List *distinctList,
+											long numGroups);
 static BitmapAnd *make_bitmap_and(List *bitmapplans);
 static BitmapOr *make_bitmap_or(List *bitmapplans);
 static NestLoop *make_nestloop(List *tlist,
-			  List *joinclauses, List *otherclauses, List *nestParams,
-			  Plan *lefttree, Plan *righttree,
-			  JoinType jointype, bool inner_unique);
+							   List *joinclauses, List *otherclauses, List *nestParams,
+							   Plan *lefttree, Plan *righttree,
+							   JoinType jointype, bool inner_unique);
 static HashJoin *make_hashjoin(List *tlist,
-			  List *joinclauses, List *otherclauses,
-			  List *hashclauses,
-			  Plan *lefttree, Plan *righttree,
-			  JoinType jointype, bool inner_unique);
+							   List *joinclauses, List *otherclauses,
+							   List *hashclauses,
+							   Plan *lefttree, Plan *righttree,
+							   JoinType jointype, bool inner_unique);
 static Hash *make_hash(Plan *lefttree,
-		  Oid skewTable,
-		  AttrNumber skewColumn,
-		  bool skewInherit);
+					   Oid skewTable,
+					   AttrNumber skewColumn,
+					   bool skewInherit);
 static MergeJoin *make_mergejoin(List *tlist,
-			   List *joinclauses, List *otherclauses,
-			   List *mergeclauses,
-			   Oid *mergefamilies,
-			   Oid *mergecollations,
-			   int *mergestrategies,
-			   bool *mergenullsfirst,
-			   Plan *lefttree, Plan *righttree,
-			   JoinType jointype, bool inner_unique,
-			   bool skip_mark_restore);
+								 List *joinclauses, List *otherclauses,
+								 List *mergeclauses,
+								 Oid *mergefamilies,
+								 Oid *mergecollations,
+								 int *mergestrategies,
+								 bool *mergenullsfirst,
+								 Plan *lefttree, Plan *righttree,
+								 JoinType jointype, bool inner_unique,
+								 bool skip_mark_restore);
 static Sort *make_sort(Plan *lefttree, int numCols,
-		  AttrNumber *sortColIdx, Oid *sortOperators,
-		  Oid *collations, bool *nullsFirst);
+					   AttrNumber *sortColIdx, Oid *sortOperators,
+					   Oid *collations, bool *nullsFirst);
 static Plan *prepare_sort_from_pathkeys(Plan *lefttree, List *pathkeys,
-						   Relids relids,
-						   const AttrNumber *reqColIdx,
-						   bool adjust_tlist_in_place,
-						   int *p_numsortkeys,
-						   AttrNumber **p_sortColIdx,
-						   Oid **p_sortOperators,
-						   Oid **p_collations,
-						   bool **p_nullsFirst);
+										Relids relids,
+										const AttrNumber *reqColIdx,
+										bool adjust_tlist_in_place,
+										int *p_numsortkeys,
+										AttrNumber **p_sortColIdx,
+										Oid **p_sortOperators,
+										Oid **p_collations,
+										bool **p_nullsFirst);
 static EquivalenceMember *find_ec_member_for_tle(EquivalenceClass *ec,
-					   TargetEntry *tle,
-					   Relids relids);
+												 TargetEntry *tle,
+												 Relids relids);
 static Sort *make_sort_from_pathkeys(Plan *lefttree, List *pathkeys,
-						Relids relids);
+									 Relids relids);
 static Sort *make_sort_from_groupcols(List *groupcls,
-						 AttrNumber *grpColIdx,
-						 Plan *lefttree);
+									  AttrNumber *grpColIdx,
+									  Plan *lefttree);
 static Material *make_material(Plan *lefttree);
 static WindowAgg *make_windowagg(List *tlist, Index winref,
-			   int partNumCols, AttrNumber *partColIdx, Oid *partOperators, Oid *partCollations,
-			   int ordNumCols, AttrNumber *ordColIdx, Oid *ordOperators, Oid *ordCollations,
-			   int frameOptions, Node *startOffset, Node *endOffset,
-			   Oid startInRangeFunc, Oid endInRangeFunc,
-			   Oid inRangeColl, bool inRangeAsc, bool inRangeNullsFirst,
-			   Plan *lefttree);
+								 int partNumCols, AttrNumber *partColIdx, Oid *partOperators, Oid *partCollations,
+								 int ordNumCols, AttrNumber *ordColIdx, Oid *ordOperators, Oid *ordCollations,
+								 int frameOptions, Node *startOffset, Node *endOffset,
+								 Oid startInRangeFunc, Oid endInRangeFunc,
+								 Oid inRangeColl, bool inRangeAsc, bool inRangeNullsFirst,
+								 Plan *lefttree);
 static Group *make_group(List *tlist, List *qual, int numGroupCols,
-		   AttrNumber *grpColIdx, Oid *grpOperators, Oid *grpCollations,
-		   Plan *lefttree);
+						 AttrNumber *grpColIdx, Oid *grpOperators, Oid *grpCollations,
+						 Plan *lefttree);
 static Unique *make_unique_from_sortclauses(Plan *lefttree, List *distinctList);
 static Unique *make_unique_from_pathkeys(Plan *lefttree,
-						  List *pathkeys, int numCols);
+										 List *pathkeys, int numCols);
 static Gather *make_gather(List *qptlist, List *qpqual,
-			int nworkers, int rescan_param, bool single_copy, Plan *subplan);
+						   int nworkers, int rescan_param, bool single_copy, Plan *subplan);
 static SetOp *make_setop(SetOpCmd cmd, SetOpStrategy strategy, Plan *lefttree,
-		   List *distinctList, AttrNumber flagColIdx, int firstFlag,
-		   long numGroups);
+						 List *distinctList, AttrNumber flagColIdx, int firstFlag,
+						 long numGroups);
 static LockRows *make_lockrows(Plan *lefttree, List *rowMarks, int epqParam);
 static Result *make_result(List *tlist, Node *resconstantqual, Plan *subplan);
 static ProjectSet *make_project_set(List *tlist, Plan *subplan);
 static ModifyTable *make_modifytable(PlannerInfo *root,
-				 CmdType operation, bool canSetTag,
-				 Index nominalRelation, Index rootRelation,
-				 bool partColsUpdated,
-				 List *resultRelations, List *subplans, List *subroots,
-				 List *withCheckOptionLists, List *returningLists,
-				 List *rowMarks, OnConflictExpr *onconflict, int epqParam);
+									 CmdType operation, bool canSetTag,
+									 Index nominalRelation, Index rootRelation,
+									 bool partColsUpdated,
+									 List *resultRelations, List *subplans, List *subroots,
+									 List *withCheckOptionLists, List *returningLists,
+									 List *rowMarks, OnConflictExpr *onconflict, int epqParam);
 static GatherMerge *create_gather_merge_plan(PlannerInfo *root,
-						 GatherMergePath *best_path);
+											 GatherMergePath *best_path);
 
 
 /*
diff --git a/src/backend/optimizer/plan/initsplan.c b/src/backend/optimizer/plan/initsplan.c
index 9798dca2722c..73da0c2d8e1d 100644
--- a/src/backend/optimizer/plan/initsplan.c
+++ b/src/backend/optimizer/plan/initsplan.c
@@ -49,33 +49,33 @@ typedef struct PostponedQual
 
 
 static void extract_lateral_references(PlannerInfo *root, RelOptInfo *brel,
-						   Index rtindex);
+									   Index rtindex);
 static List *deconstruct_recurse(PlannerInfo *root, Node *jtnode,
-					bool below_outer_join,
-					Relids *qualscope, Relids *inner_join_rels,
-					List **postponed_qual_list);
+								 bool below_outer_join,
+								 Relids *qualscope, Relids *inner_join_rels,
+								 List **postponed_qual_list);
 static void process_security_barrier_quals(PlannerInfo *root,
-							   int rti, Relids qualscope,
-							   bool below_outer_join);
+										   int rti, Relids qualscope,
+										   bool below_outer_join);
 static SpecialJoinInfo *make_outerjoininfo(PlannerInfo *root,
-				   Relids left_rels, Relids right_rels,
-				   Relids inner_join_rels,
-				   JoinType jointype, List *clause);
+										   Relids left_rels, Relids right_rels,
+										   Relids inner_join_rels,
+										   JoinType jointype, List *clause);
 static void compute_semijoin_info(SpecialJoinInfo *sjinfo, List *clause);
 static void distribute_qual_to_rels(PlannerInfo *root, Node *clause,
-						bool is_deduced,
-						bool below_outer_join,
-						JoinType jointype,
-						Index security_level,
-						Relids qualscope,
-						Relids ojscope,
-						Relids outerjoin_nonnullable,
-						Relids deduced_nullable_relids,
-						List **postponed_qual_list);
+									bool is_deduced,
+									bool below_outer_join,
+									JoinType jointype,
+									Index security_level,
+									Relids qualscope,
+									Relids ojscope,
+									Relids outerjoin_nonnullable,
+									Relids deduced_nullable_relids,
+									List **postponed_qual_list);
 static bool check_outerjoin_delay(PlannerInfo *root, Relids *relids_p,
-					  Relids *nullable_relids_p, bool is_pushed_down);
+								  Relids *nullable_relids_p, bool is_pushed_down);
 static bool check_equivalence_delay(PlannerInfo *root,
-						RestrictInfo *restrictinfo);
+									RestrictInfo *restrictinfo);
 static bool check_redundant_nullability_qual(PlannerInfo *root, Node *clause);
 static void check_mergejoinable(RestrictInfo *restrictinfo);
 static void check_hashjoinable(RestrictInfo *restrictinfo);
diff --git a/src/backend/optimizer/plan/planagg.c b/src/backend/optimizer/plan/planagg.c
index 67c35c5e869b..9381939c8227 100644
--- a/src/backend/optimizer/plan/planagg.c
+++ b/src/backend/optimizer/plan/planagg.c
@@ -50,7 +50,7 @@
 
 static bool find_minmax_aggs_walker(Node *node, List **context);
 static bool build_minmax_path(PlannerInfo *root, MinMaxAggInfo *mminfo,
-				  Oid eqop, Oid sortop, bool nulls_first);
+							  Oid eqop, Oid sortop, bool nulls_first);
 static void minmax_qp_callback(PlannerInfo *root, void *extra);
 static Oid	fetch_agg_sort_op(Oid aggfnoid);
 
diff --git a/src/backend/optimizer/plan/planner.c b/src/backend/optimizer/plan/planner.c
index 48005434d409..cb897cc7f4e4 100644
--- a/src/backend/optimizer/plan/planner.c
+++ b/src/backend/optimizer/plan/planner.c
@@ -132,122 +132,122 @@ static Node *preprocess_expression(PlannerInfo *root, Node *expr, int kind);
 static void preprocess_qual_conditions(PlannerInfo *root, Node *jtnode);
 static void inheritance_planner(PlannerInfo *root);
 static void grouping_planner(PlannerInfo *root, bool inheritance_update,
-				 double tuple_fraction);
+							 double tuple_fraction);
 static grouping_sets_data *preprocess_grouping_sets(PlannerInfo *root);
 static List *remap_to_groupclause_idx(List *groupClause, List *gsets,
-						 int *tleref_to_colnum_map);
+									  int *tleref_to_colnum_map);
 static void preprocess_rowmarks(PlannerInfo *root);
 static double preprocess_limit(PlannerInfo *root,
-				 double tuple_fraction,
-				 int64 *offset_est, int64 *count_est);
+							   double tuple_fraction,
+							   int64 *offset_est, int64 *count_est);
 static void remove_useless_groupby_columns(PlannerInfo *root);
 static List *preprocess_groupclause(PlannerInfo *root, List *force);
 static List *extract_rollup_sets(List *groupingSets);
 static List *reorder_grouping_sets(List *groupingSets, List *sortclause);
 static void standard_qp_callback(PlannerInfo *root, void *extra);
 static double get_number_of_groups(PlannerInfo *root,
-					 double path_rows,
-					 grouping_sets_data *gd,
-					 List *target_list);
+								   double path_rows,
+								   grouping_sets_data *gd,
+								   List *target_list);
 static RelOptInfo *create_grouping_paths(PlannerInfo *root,
-					  RelOptInfo *input_rel,
-					  PathTarget *target,
-					  bool target_parallel_safe,
-					  const AggClauseCosts *agg_costs,
-					  grouping_sets_data *gd);
+										 RelOptInfo *input_rel,
+										 PathTarget *target,
+										 bool target_parallel_safe,
+										 const AggClauseCosts *agg_costs,
+										 grouping_sets_data *gd);
 static bool is_degenerate_grouping(PlannerInfo *root);
 static void create_degenerate_grouping_paths(PlannerInfo *root,
-								 RelOptInfo *input_rel,
-								 RelOptInfo *grouped_rel);
+											 RelOptInfo *input_rel,
+											 RelOptInfo *grouped_rel);
 static RelOptInfo *make_grouping_rel(PlannerInfo *root, RelOptInfo *input_rel,
-				  PathTarget *target, bool target_parallel_safe,
-				  Node *havingQual);
+									 PathTarget *target, bool target_parallel_safe,
+									 Node *havingQual);
 static void create_ordinary_grouping_paths(PlannerInfo *root,
-							   RelOptInfo *input_rel,
-							   RelOptInfo *grouped_rel,
-							   const AggClauseCosts *agg_costs,
-							   grouping_sets_data *gd,
-							   GroupPathExtraData *extra,
-							   RelOptInfo **partially_grouped_rel_p);
+										   RelOptInfo *input_rel,
+										   RelOptInfo *grouped_rel,
+										   const AggClauseCosts *agg_costs,
+										   grouping_sets_data *gd,
+										   GroupPathExtraData *extra,
+										   RelOptInfo **partially_grouped_rel_p);
 static void consider_groupingsets_paths(PlannerInfo *root,
-							RelOptInfo *grouped_rel,
-							Path *path,
-							bool is_sorted,
-							bool can_hash,
-							grouping_sets_data *gd,
-							const AggClauseCosts *agg_costs,
-							double dNumGroups);
+										RelOptInfo *grouped_rel,
+										Path *path,
+										bool is_sorted,
+										bool can_hash,
+										grouping_sets_data *gd,
+										const AggClauseCosts *agg_costs,
+										double dNumGroups);
 static RelOptInfo *create_window_paths(PlannerInfo *root,
-					RelOptInfo *input_rel,
-					PathTarget *input_target,
-					PathTarget *output_target,
-					bool output_target_parallel_safe,
-					WindowFuncLists *wflists,
-					List *activeWindows);
+									   RelOptInfo *input_rel,
+									   PathTarget *input_target,
+									   PathTarget *output_target,
+									   bool output_target_parallel_safe,
+									   WindowFuncLists *wflists,
+									   List *activeWindows);
 static void create_one_window_path(PlannerInfo *root,
-					   RelOptInfo *window_rel,
-					   Path *path,
-					   PathTarget *input_target,
-					   PathTarget *output_target,
-					   WindowFuncLists *wflists,
-					   List *activeWindows);
+								   RelOptInfo *window_rel,
+								   Path *path,
+								   PathTarget *input_target,
+								   PathTarget *output_target,
+								   WindowFuncLists *wflists,
+								   List *activeWindows);
 static RelOptInfo *create_distinct_paths(PlannerInfo *root,
-					  RelOptInfo *input_rel);
+										 RelOptInfo *input_rel);
 static RelOptInfo *create_ordered_paths(PlannerInfo *root,
-					 RelOptInfo *input_rel,
-					 PathTarget *target,
-					 bool target_parallel_safe,
-					 double limit_tuples);
+										RelOptInfo *input_rel,
+										PathTarget *target,
+										bool target_parallel_safe,
+										double limit_tuples);
 static PathTarget *make_group_input_target(PlannerInfo *root,
-						PathTarget *final_target);
+										   PathTarget *final_target);
 static PathTarget *make_partial_grouping_target(PlannerInfo *root,
-							 PathTarget *grouping_target,
-							 Node *havingQual);
+												PathTarget *grouping_target,
+												Node *havingQual);
 static List *postprocess_setop_tlist(List *new_tlist, List *orig_tlist);
 static List *select_active_windows(PlannerInfo *root, WindowFuncLists *wflists);
 static PathTarget *make_window_input_target(PlannerInfo *root,
-						 PathTarget *final_target,
-						 List *activeWindows);
+											PathTarget *final_target,
+											List *activeWindows);
 static List *make_pathkeys_for_window(PlannerInfo *root, WindowClause *wc,
-						 List *tlist);
+									  List *tlist);
 static PathTarget *make_sort_input_target(PlannerInfo *root,
-					   PathTarget *final_target,
-					   bool *have_postponed_srfs);
+										  PathTarget *final_target,
+										  bool *have_postponed_srfs);
 static void adjust_paths_for_srfs(PlannerInfo *root, RelOptInfo *rel,
-					  List *targets, List *targets_contain_srfs);
+								  List *targets, List *targets_contain_srfs);
 static void add_paths_to_grouping_rel(PlannerInfo *root, RelOptInfo *input_rel,
-						  RelOptInfo *grouped_rel,
-						  RelOptInfo *partially_grouped_rel,
-						  const AggClauseCosts *agg_costs,
-						  grouping_sets_data *gd,
-						  double dNumGroups,
-						  GroupPathExtraData *extra);
+									  RelOptInfo *grouped_rel,
+									  RelOptInfo *partially_grouped_rel,
+									  const AggClauseCosts *agg_costs,
+									  grouping_sets_data *gd,
+									  double dNumGroups,
+									  GroupPathExtraData *extra);
 static RelOptInfo *create_partial_grouping_paths(PlannerInfo *root,
-							  RelOptInfo *grouped_rel,
-							  RelOptInfo *input_rel,
-							  grouping_sets_data *gd,
-							  GroupPathExtraData *extra,
-							  bool force_rel_creation);
+												 RelOptInfo *grouped_rel,
+												 RelOptInfo *input_rel,
+												 grouping_sets_data *gd,
+												 GroupPathExtraData *extra,
+												 bool force_rel_creation);
 static void gather_grouping_paths(PlannerInfo *root, RelOptInfo *rel);
 static bool can_partial_agg(PlannerInfo *root,
-				const AggClauseCosts *agg_costs);
+							const AggClauseCosts *agg_costs);
 static void apply_scanjoin_target_to_paths(PlannerInfo *root,
-							   RelOptInfo *rel,
-							   List *scanjoin_targets,
-							   List *scanjoin_targets_contain_srfs,
-							   bool scanjoin_target_parallel_safe,
-							   bool tlist_same_exprs);
+										   RelOptInfo *rel,
+										   List *scanjoin_targets,
+										   List *scanjoin_targets_contain_srfs,
+										   bool scanjoin_target_parallel_safe,
+										   bool tlist_same_exprs);
 static void create_partitionwise_grouping_paths(PlannerInfo *root,
-									RelOptInfo *input_rel,
-									RelOptInfo *grouped_rel,
-									RelOptInfo *partially_grouped_rel,
-									const AggClauseCosts *agg_costs,
-									grouping_sets_data *gd,
-									PartitionwiseAggregateType patype,
-									GroupPathExtraData *extra);
+												RelOptInfo *input_rel,
+												RelOptInfo *grouped_rel,
+												RelOptInfo *partially_grouped_rel,
+												const AggClauseCosts *agg_costs,
+												grouping_sets_data *gd,
+												PartitionwiseAggregateType patype,
+												GroupPathExtraData *extra);
 static bool group_by_has_partkey(RelOptInfo *input_rel,
-					 List *targetList,
-					 List *groupClause);
+								 List *targetList,
+								 List *groupClause);
 static int	common_prefix_cmp(const void *a, const void *b);
 
 
diff --git a/src/backend/optimizer/plan/setrefs.c b/src/backend/optimizer/plan/setrefs.c
index 4204ca4025dc..dc11f098e0f5 100644
--- a/src/backend/optimizer/plan/setrefs.c
+++ b/src/backend/optimizer/plan/setrefs.c
@@ -88,25 +88,25 @@ static bool flatten_rtes_walker(Node *node, PlannerGlobal *glob);
 static void add_rte_to_flat_rtable(PlannerGlobal *glob, RangeTblEntry *rte);
 static Plan *set_plan_refs(PlannerInfo *root, Plan *plan, int rtoffset);
 static Plan *set_indexonlyscan_references(PlannerInfo *root,
-							 IndexOnlyScan *plan,
-							 int rtoffset);
+										  IndexOnlyScan *plan,
+										  int rtoffset);
 static Plan *set_subqueryscan_references(PlannerInfo *root,
-							SubqueryScan *plan,
-							int rtoffset);
+										 SubqueryScan *plan,
+										 int rtoffset);
 static bool trivial_subqueryscan(SubqueryScan *plan);
 static Plan *clean_up_removed_plan_level(Plan *parent, Plan *child);
 static void set_foreignscan_references(PlannerInfo *root,
-						   ForeignScan *fscan,
-						   int rtoffset);
+									   ForeignScan *fscan,
+									   int rtoffset);
 static void set_customscan_references(PlannerInfo *root,
-						  CustomScan *cscan,
-						  int rtoffset);
+									  CustomScan *cscan,
+									  int rtoffset);
 static Plan *set_append_references(PlannerInfo *root,
-					  Append *aplan,
-					  int rtoffset);
+								   Append *aplan,
+								   int rtoffset);
 static Plan *set_mergeappend_references(PlannerInfo *root,
-						   MergeAppend *mplan,
-						   int rtoffset);
+										MergeAppend *mplan,
+										int rtoffset);
 static Node *fix_scan_expr(PlannerInfo *root, Node *node, int rtoffset);
 static Node *fix_scan_expr_mutator(Node *node, fix_scan_expr_context *context);
 static bool fix_scan_expr_walker(Node *node, fix_scan_expr_context *context);
@@ -117,35 +117,35 @@ static Node *convert_combining_aggrefs(Node *node, void *context);
 static void set_dummy_tlist_references(Plan *plan, int rtoffset);
 static indexed_tlist *build_tlist_index(List *tlist);
 static Var *search_indexed_tlist_for_var(Var *var,
-							 indexed_tlist *itlist,
-							 Index newvarno,
-							 int rtoffset);
+										 indexed_tlist *itlist,
+										 Index newvarno,
+										 int rtoffset);
 static Var *search_indexed_tlist_for_non_var(Expr *node,
-								 indexed_tlist *itlist,
-								 Index newvarno);
+											 indexed_tlist *itlist,
+											 Index newvarno);
 static Var *search_indexed_tlist_for_sortgroupref(Expr *node,
-									  Index sortgroupref,
-									  indexed_tlist *itlist,
-									  Index newvarno);
+												  Index sortgroupref,
+												  indexed_tlist *itlist,
+												  Index newvarno);
 static List *fix_join_expr(PlannerInfo *root,
-			  List *clauses,
-			  indexed_tlist *outer_itlist,
-			  indexed_tlist *inner_itlist,
-			  Index acceptable_rel, int rtoffset);
+						   List *clauses,
+						   indexed_tlist *outer_itlist,
+						   indexed_tlist *inner_itlist,
+						   Index acceptable_rel, int rtoffset);
 static Node *fix_join_expr_mutator(Node *node,
-					  fix_join_expr_context *context);
+								   fix_join_expr_context *context);
 static Node *fix_upper_expr(PlannerInfo *root,
-			   Node *node,
-			   indexed_tlist *subplan_itlist,
-			   Index newvarno,
-			   int rtoffset);
+							Node *node,
+							indexed_tlist *subplan_itlist,
+							Index newvarno,
+							int rtoffset);
 static Node *fix_upper_expr_mutator(Node *node,
-					   fix_upper_expr_context *context);
+									fix_upper_expr_context *context);
 static List *set_returning_clause_references(PlannerInfo *root,
-								List *rlist,
-								Plan *topplan,
-								Index resultRelation,
-								int rtoffset);
+											 List *rlist,
+											 Plan *topplan,
+											 Index resultRelation,
+											 int rtoffset);
 
 
 /*****************************************************************************
diff --git a/src/backend/optimizer/plan/subselect.c b/src/backend/optimizer/plan/subselect.c
index 921ebfb5eddf..efd0fbc21c58 100644
--- a/src/backend/optimizer/plan/subselect.c
+++ b/src/backend/optimizer/plan/subselect.c
@@ -67,19 +67,19 @@ typedef struct inline_cte_walker_context
 
 
 static Node *build_subplan(PlannerInfo *root, Plan *plan, PlannerInfo *subroot,
-			  List *plan_params,
-			  SubLinkType subLinkType, int subLinkId,
-			  Node *testexpr, bool adjust_testexpr,
-			  bool unknownEqFalse);
+						   List *plan_params,
+						   SubLinkType subLinkType, int subLinkId,
+						   Node *testexpr, bool adjust_testexpr,
+						   bool unknownEqFalse);
 static List *generate_subquery_params(PlannerInfo *root, List *tlist,
-						 List **paramIds);
+									  List **paramIds);
 static List *generate_subquery_vars(PlannerInfo *root, List *tlist,
-					   Index varno);
+									Index varno);
 static Node *convert_testexpr(PlannerInfo *root,
-				 Node *testexpr,
-				 List *subst_nodes);
+							  Node *testexpr,
+							  List *subst_nodes);
 static Node *convert_testexpr_mutator(Node *node,
-						 convert_testexpr_context *context);
+									  convert_testexpr_context *context);
 static bool subplan_is_hashable(Plan *plan);
 static bool testexpr_is_hashable(Node *testexpr);
 static bool hash_ok_operator(OpExpr *expr);
@@ -91,15 +91,15 @@ static void inline_cte(PlannerInfo *root, CommonTableExpr *cte);
 static bool inline_cte_walker(Node *node, inline_cte_walker_context *context);
 static bool simplify_EXISTS_query(PlannerInfo *root, Query *query);
 static Query *convert_EXISTS_to_ANY(PlannerInfo *root, Query *subselect,
-					  Node **testexpr, List **paramIds);
+									Node **testexpr, List **paramIds);
 static Node *replace_correlation_vars_mutator(Node *node, PlannerInfo *root);
 static Node *process_sublinks_mutator(Node *node,
-						 process_sublinks_context *context);
+									  process_sublinks_context *context);
 static Bitmapset *finalize_plan(PlannerInfo *root,
-			  Plan *plan,
-			  int gather_param,
-			  Bitmapset *valid_params,
-			  Bitmapset *scan_params);
+								Plan *plan,
+								int gather_param,
+								Bitmapset *valid_params,
+								Bitmapset *scan_params);
 static bool finalize_primnode(Node *node, finalize_primnode_context *context);
 static bool finalize_agg_primnode(Node *node, finalize_primnode_context *context);
 
diff --git a/src/backend/optimizer/prep/prepjointree.c b/src/backend/optimizer/prep/prepjointree.c
index aebe16271356..67eeba938dbe 100644
--- a/src/backend/optimizer/prep/prepjointree.c
+++ b/src/backend/optimizer/prep/prepjointree.c
@@ -61,61 +61,61 @@ typedef struct reduce_outer_joins_state
 } reduce_outer_joins_state;
 
 static Node *pull_up_sublinks_jointree_recurse(PlannerInfo *root, Node *jtnode,
-								  Relids *relids);
+											   Relids *relids);
 static Node *pull_up_sublinks_qual_recurse(PlannerInfo *root, Node *node,
-							  Node **jtlink1, Relids available_rels1,
-							  Node **jtlink2, Relids available_rels2);
+										   Node **jtlink1, Relids available_rels1,
+										   Node **jtlink2, Relids available_rels2);
 static Node *pull_up_subqueries_recurse(PlannerInfo *root, Node *jtnode,
-						   JoinExpr *lowest_outer_join,
-						   JoinExpr *lowest_nulling_outer_join,
-						   AppendRelInfo *containing_appendrel);
+										JoinExpr *lowest_outer_join,
+										JoinExpr *lowest_nulling_outer_join,
+										AppendRelInfo *containing_appendrel);
 static Node *pull_up_simple_subquery(PlannerInfo *root, Node *jtnode,
-						RangeTblEntry *rte,
-						JoinExpr *lowest_outer_join,
-						JoinExpr *lowest_nulling_outer_join,
-						AppendRelInfo *containing_appendrel);
+									 RangeTblEntry *rte,
+									 JoinExpr *lowest_outer_join,
+									 JoinExpr *lowest_nulling_outer_join,
+									 AppendRelInfo *containing_appendrel);
 static Node *pull_up_simple_union_all(PlannerInfo *root, Node *jtnode,
-						 RangeTblEntry *rte);
+									  RangeTblEntry *rte);
 static void pull_up_union_leaf_queries(Node *setOp, PlannerInfo *root,
-						   int parentRTindex, Query *setOpQuery,
-						   int childRToffset);
+									   int parentRTindex, Query *setOpQuery,
+									   int childRToffset);
 static void make_setop_translation_list(Query *query, Index newvarno,
-							List **translated_vars);
+										List **translated_vars);
 static bool is_simple_subquery(Query *subquery, RangeTblEntry *rte,
-				   JoinExpr *lowest_outer_join);
+							   JoinExpr *lowest_outer_join);
 static Node *pull_up_simple_values(PlannerInfo *root, Node *jtnode,
-					  RangeTblEntry *rte);
+								   RangeTblEntry *rte);
 static bool is_simple_values(PlannerInfo *root, RangeTblEntry *rte);
 static bool is_simple_union_all(Query *subquery);
 static bool is_simple_union_all_recurse(Node *setOp, Query *setOpQuery,
-							List *colTypes);
+										List *colTypes);
 static bool is_safe_append_member(Query *subquery);
 static bool jointree_contains_lateral_outer_refs(Node *jtnode, bool restricted,
-									 Relids safe_upper_varnos);
+												 Relids safe_upper_varnos);
 static void replace_vars_in_jointree(Node *jtnode,
-						 pullup_replace_vars_context *context,
-						 JoinExpr *lowest_nulling_outer_join);
+									 pullup_replace_vars_context *context,
+									 JoinExpr *lowest_nulling_outer_join);
 static Node *pullup_replace_vars(Node *expr,
-					pullup_replace_vars_context *context);
+								 pullup_replace_vars_context *context);
 static Node *pullup_replace_vars_callback(Var *var,
-							 replace_rte_variables_context *context);
+										  replace_rte_variables_context *context);
 static Query *pullup_replace_vars_subquery(Query *query,
-							 pullup_replace_vars_context *context);
+										   pullup_replace_vars_context *context);
 static reduce_outer_joins_state *reduce_outer_joins_pass1(Node *jtnode);
 static void reduce_outer_joins_pass2(Node *jtnode,
-						 reduce_outer_joins_state *state,
-						 PlannerInfo *root,
-						 Relids nonnullable_rels,
-						 List *nonnullable_vars,
-						 List *forced_null_vars);
+									 reduce_outer_joins_state *state,
+									 PlannerInfo *root,
+									 Relids nonnullable_rels,
+									 List *nonnullable_vars,
+									 List *forced_null_vars);
 static Node *remove_useless_results_recurse(PlannerInfo *root, Node *jtnode);
 static int	get_result_relid(PlannerInfo *root, Node *jtnode);
 static void remove_result_refs(PlannerInfo *root, int varno, Node *newjtloc);
 static bool find_dependent_phvs(Node *node, int varno);
 static void substitute_phv_relids(Node *node,
-					  int varno, Relids subrelids);
+								  int varno, Relids subrelids);
 static void fix_append_rel_relids(List *append_rel_list, int varno,
-					  Relids subrelids);
+								  Relids subrelids);
 static Node *find_jointree_node_for_rel(Node *jtnode, int relid);
 
 
diff --git a/src/backend/optimizer/prep/preptlist.c b/src/backend/optimizer/prep/preptlist.c
index 66e6ad9b930d..05172ff0234a 100644
--- a/src/backend/optimizer/prep/preptlist.c
+++ b/src/backend/optimizer/prep/preptlist.c
@@ -54,7 +54,7 @@
 
 
 static List *expand_targetlist(List *tlist, int command_type,
-				  Index result_relation, Relation rel);
+							   Index result_relation, Relation rel);
 
 
 /*
diff --git a/src/backend/optimizer/prep/prepunion.c b/src/backend/optimizer/prep/prepunion.c
index c1def3823fac..cd9d49c1f79b 100644
--- a/src/backend/optimizer/prep/prepunion.c
+++ b/src/backend/optimizer/prep/prepunion.c
@@ -47,42 +47,42 @@
 
 
 static RelOptInfo *recurse_set_operations(Node *setOp, PlannerInfo *root,
-					   List *colTypes, List *colCollations,
-					   bool junkOK,
-					   int flag, List *refnames_tlist,
-					   List **pTargetList,
-					   double *pNumGroups);
+										  List *colTypes, List *colCollations,
+										  bool junkOK,
+										  int flag, List *refnames_tlist,
+										  List **pTargetList,
+										  double *pNumGroups);
 static RelOptInfo *generate_recursion_path(SetOperationStmt *setOp,
-						PlannerInfo *root,
-						List *refnames_tlist,
-						List **pTargetList);
+										   PlannerInfo *root,
+										   List *refnames_tlist,
+										   List **pTargetList);
 static RelOptInfo *generate_union_paths(SetOperationStmt *op, PlannerInfo *root,
-					 List *refnames_tlist,
-					 List **pTargetList);
+										List *refnames_tlist,
+										List **pTargetList);
 static RelOptInfo *generate_nonunion_paths(SetOperationStmt *op, PlannerInfo *root,
-						List *refnames_tlist,
-						List **pTargetList);
+										   List *refnames_tlist,
+										   List **pTargetList);
 static List *plan_union_children(PlannerInfo *root,
-					SetOperationStmt *top_union,
-					List *refnames_tlist,
-					List **tlist_list);
+								 SetOperationStmt *top_union,
+								 List *refnames_tlist,
+								 List **tlist_list);
 static Path *make_union_unique(SetOperationStmt *op, Path *path, List *tlist,
-				  PlannerInfo *root);
+							   PlannerInfo *root);
 static void postprocess_setop_rel(PlannerInfo *root, RelOptInfo *rel);
 static bool choose_hashed_setop(PlannerInfo *root, List *groupClauses,
-					Path *input_path,
-					double dNumGroups, double dNumOutputRows,
-					const char *construct);
+								Path *input_path,
+								double dNumGroups, double dNumOutputRows,
+								const char *construct);
 static List *generate_setop_tlist(List *colTypes, List *colCollations,
-					 int flag,
-					 Index varno,
-					 bool hack_constants,
-					 List *input_tlist,
-					 List *refnames_tlist);
+								  int flag,
+								  Index varno,
+								  bool hack_constants,
+								  List *input_tlist,
+								  List *refnames_tlist);
 static List *generate_append_tlist(List *colTypes, List *colCollations,
-					  bool flag,
-					  List *input_tlists,
-					  List *refnames_tlist);
+								   bool flag,
+								   List *input_tlists,
+								   List *refnames_tlist);
 static List *generate_setop_grouplist(SetOperationStmt *op, List *targetlist);
 
 
diff --git a/src/backend/optimizer/util/appendinfo.c b/src/backend/optimizer/util/appendinfo.c
index ba955290b10e..16d315176ebb 100644
--- a/src/backend/optimizer/util/appendinfo.c
+++ b/src/backend/optimizer/util/appendinfo.c
@@ -32,13 +32,13 @@ typedef struct
 } adjust_appendrel_attrs_context;
 
 static void make_inh_translation_list(Relation oldrelation,
-						  Relation newrelation,
-						  Index newvarno,
-						  List **translated_vars);
+									  Relation newrelation,
+									  Index newvarno,
+									  List **translated_vars);
 static Node *adjust_appendrel_attrs_mutator(Node *node,
-							   adjust_appendrel_attrs_context *context);
+											adjust_appendrel_attrs_context *context);
 static List *adjust_inherited_tlist(List *tlist,
-					   AppendRelInfo *context);
+									AppendRelInfo *context);
 
 
 /*
diff --git a/src/backend/optimizer/util/clauses.c b/src/backend/optimizer/util/clauses.c
index 501b0e9e2dc7..2e84d6b3b4f9 100644
--- a/src/backend/optimizer/util/clauses.c
+++ b/src/backend/optimizer/util/clauses.c
@@ -99,14 +99,14 @@ typedef struct
 
 static bool contain_agg_clause_walker(Node *node, void *context);
 static bool get_agg_clause_costs_walker(Node *node,
-							get_agg_clause_costs_context *context);
+										get_agg_clause_costs_context *context);
 static bool find_window_functions_walker(Node *node, WindowFuncLists *lists);
 static bool contain_subplans_walker(Node *node, void *context);
 static bool contain_mutable_functions_walker(Node *node, void *context);
 static bool contain_volatile_functions_walker(Node *node, void *context);
 static bool contain_volatile_functions_not_nextval_walker(Node *node, void *context);
 static bool max_parallel_hazard_walker(Node *node,
-						   max_parallel_hazard_context *context);
+									   max_parallel_hazard_context *context);
 static bool contain_nonstrict_functions_walker(Node *node, void *context);
 static bool contain_context_dependent_node(Node *clause);
 static bool contain_context_dependent_node_walker(Node *node, int *flags);
@@ -115,46 +115,46 @@ static Relids find_nonnullable_rels_walker(Node *node, bool top_level);
 static List *find_nonnullable_vars_walker(Node *node, bool top_level);
 static bool is_strict_saop(ScalarArrayOpExpr *expr, bool falseOK);
 static Node *eval_const_expressions_mutator(Node *node,
-							   eval_const_expressions_context *context);
+											eval_const_expressions_context *context);
 static bool contain_non_const_walker(Node *node, void *context);
 static bool ece_function_is_safe(Oid funcid,
-					 eval_const_expressions_context *context);
+								 eval_const_expressions_context *context);
 static List *simplify_or_arguments(List *args,
-					  eval_const_expressions_context *context,
-					  bool *haveNull, bool *forceTrue);
+								   eval_const_expressions_context *context,
+								   bool *haveNull, bool *forceTrue);
 static List *simplify_and_arguments(List *args,
-					   eval_const_expressions_context *context,
-					   bool *haveNull, bool *forceFalse);
+									eval_const_expressions_context *context,
+									bool *haveNull, bool *forceFalse);
 static Node *simplify_boolean_equality(Oid opno, List *args);
 static Expr *simplify_function(Oid funcid,
-				  Oid result_type, int32 result_typmod,
-				  Oid result_collid, Oid input_collid, List **args_p,
-				  bool funcvariadic, bool process_args, bool allow_non_const,
-				  eval_const_expressions_context *context);
+							   Oid result_type, int32 result_typmod,
+							   Oid result_collid, Oid input_collid, List **args_p,
+							   bool funcvariadic, bool process_args, bool allow_non_const,
+							   eval_const_expressions_context *context);
 static List *reorder_function_arguments(List *args, HeapTuple func_tuple);
 static List *add_function_defaults(List *args, HeapTuple func_tuple);
 static List *fetch_function_defaults(HeapTuple func_tuple);
 static void recheck_cast_function_args(List *args, Oid result_type,
-						   HeapTuple func_tuple);
+									   HeapTuple func_tuple);
 static Expr *evaluate_function(Oid funcid, Oid result_type, int32 result_typmod,
-				  Oid result_collid, Oid input_collid, List *args,
-				  bool funcvariadic,
-				  HeapTuple func_tuple,
-				  eval_const_expressions_context *context);
+							   Oid result_collid, Oid input_collid, List *args,
+							   bool funcvariadic,
+							   HeapTuple func_tuple,
+							   eval_const_expressions_context *context);
 static Expr *inline_function(Oid funcid, Oid result_type, Oid result_collid,
-				Oid input_collid, List *args,
-				bool funcvariadic,
-				HeapTuple func_tuple,
-				eval_const_expressions_context *context);
+							 Oid input_collid, List *args,
+							 bool funcvariadic,
+							 HeapTuple func_tuple,
+							 eval_const_expressions_context *context);
 static Node *substitute_actual_parameters(Node *expr, int nargs, List *args,
-							 int *usecounts);
+										  int *usecounts);
 static Node *substitute_actual_parameters_mutator(Node *node,
-									 substitute_actual_parameters_context *context);
+												  substitute_actual_parameters_context *context);
 static void sql_inline_error_callback(void *arg);
 static Query *substitute_actual_srf_parameters(Query *expr,
-								 int nargs, List *args);
+											   int nargs, List *args);
 static Node *substitute_actual_srf_parameters_mutator(Node *node,
-										 substitute_actual_srf_parameters_context *context);
+													  substitute_actual_srf_parameters_context *context);
 static bool tlist_matches_coltypelist(List *tlist, List *coltypelist);
 
 
diff --git a/src/backend/optimizer/util/inherit.c b/src/backend/optimizer/util/inherit.c
index bbf204ddfb86..38bc61e68784 100644
--- a/src/backend/optimizer/util/inherit.c
+++ b/src/backend/optimizer/util/inherit.c
@@ -36,19 +36,19 @@
 
 
 static void expand_partitioned_rtentry(PlannerInfo *root, RelOptInfo *relinfo,
-						   RangeTblEntry *parentrte,
-						   Index parentRTindex, Relation parentrel,
-						   PlanRowMark *top_parentrc, LOCKMODE lockmode);
+									   RangeTblEntry *parentrte,
+									   Index parentRTindex, Relation parentrel,
+									   PlanRowMark *top_parentrc, LOCKMODE lockmode);
 static void expand_single_inheritance_child(PlannerInfo *root,
-								RangeTblEntry *parentrte,
-								Index parentRTindex, Relation parentrel,
-								PlanRowMark *top_parentrc, Relation childrel,
-								RangeTblEntry **childrte_p,
-								Index *childRTindex_p);
+											RangeTblEntry *parentrte,
+											Index parentRTindex, Relation parentrel,
+											PlanRowMark *top_parentrc, Relation childrel,
+											RangeTblEntry **childrte_p,
+											Index *childRTindex_p);
 static Bitmapset *translate_col_privs(const Bitmapset *parent_privs,
-					List *translated_vars);
+									  List *translated_vars);
 static void expand_appendrel_subquery(PlannerInfo *root, RelOptInfo *rel,
-						  RangeTblEntry *rte, Index rti);
+									  RangeTblEntry *rte, Index rti);
 
 
 /*
diff --git a/src/backend/optimizer/util/orclauses.c b/src/backend/optimizer/util/orclauses.c
index b67158154e93..18ebc51bcac3 100644
--- a/src/backend/optimizer/util/orclauses.c
+++ b/src/backend/optimizer/util/orclauses.c
@@ -27,7 +27,7 @@
 static bool is_safe_restriction_clause_for(RestrictInfo *rinfo, RelOptInfo *rel);
 static Expr *extract_or_clause(RestrictInfo *or_rinfo, RelOptInfo *rel);
 static void consider_new_or_clause(PlannerInfo *root, RelOptInfo *rel,
-					   Expr *orclause, RestrictInfo *join_or_rinfo);
+								   Expr *orclause, RestrictInfo *join_or_rinfo);
 
 
 /*
diff --git a/src/backend/optimizer/util/pathnode.c b/src/backend/optimizer/util/pathnode.c
index d66471c7a464..d884d2bb000e 100644
--- a/src/backend/optimizer/util/pathnode.c
+++ b/src/backend/optimizer/util/pathnode.c
@@ -55,8 +55,8 @@ static List *translate_sub_tlist(List *tlist, int relid);
 static int	append_total_cost_compare(const void *a, const void *b);
 static int	append_startup_cost_compare(const void *a, const void *b);
 static List *reparameterize_pathlist_by_child(PlannerInfo *root,
-								 List *pathlist,
-								 RelOptInfo *child_rel);
+											  List *pathlist,
+											  RelOptInfo *child_rel);
 
 
 /*****************************************************************************
diff --git a/src/backend/optimizer/util/plancat.c b/src/backend/optimizer/util/plancat.c
index 80441de65e6d..2405acbf6fad 100644
--- a/src/backend/optimizer/util/plancat.c
+++ b/src/backend/optimizer/util/plancat.c
@@ -62,22 +62,22 @@ get_relation_info_hook_type get_relation_info_hook = NULL;
 
 
 static void get_relation_foreign_keys(PlannerInfo *root, RelOptInfo *rel,
-						  Relation relation, bool inhparent);
+									  Relation relation, bool inhparent);
 static bool infer_collation_opclass_match(InferenceElem *elem, Relation idxRel,
-							  List *idxExprs);
+										  List *idxExprs);
 static List *get_relation_constraints(PlannerInfo *root,
-						 Oid relationObjectId, RelOptInfo *rel,
-						 bool include_noinherit,
-						 bool include_notnull,
-						 bool include_partition);
+									  Oid relationObjectId, RelOptInfo *rel,
+									  bool include_noinherit,
+									  bool include_notnull,
+									  bool include_partition);
 static List *build_index_tlist(PlannerInfo *root, IndexOptInfo *index,
-				  Relation heapRelation);
+							   Relation heapRelation);
 static List *get_relation_statistics(RelOptInfo *rel, Relation relation);
 static void set_relation_partition_info(PlannerInfo *root, RelOptInfo *rel,
-							Relation relation);
+										Relation relation);
 static PartitionScheme find_partition_scheme(PlannerInfo *root, Relation rel);
 static void set_baserel_partition_key_exprs(Relation relation,
-								RelOptInfo *rel);
+											RelOptInfo *rel);
 
 /*
  * get_relation_info -
diff --git a/src/backend/optimizer/util/predtest.c b/src/backend/optimizer/util/predtest.c
index fc4fc09a8357..b81eba721911 100644
--- a/src/backend/optimizer/util/predtest.c
+++ b/src/backend/optimizer/util/predtest.c
@@ -79,9 +79,9 @@ typedef struct PredIterInfoData
 
 
 static bool predicate_implied_by_recurse(Node *clause, Node *predicate,
-							 bool weak);
+										 bool weak);
 static bool predicate_refuted_by_recurse(Node *clause, Node *predicate,
-							 bool weak);
+										 bool weak);
 static PredClass predicate_classify(Node *clause, PredIterInfo info);
 static void list_startup_fn(Node *clause, PredIterInfo info);
 static Node *list_next_fn(PredIterInfo info);
@@ -94,18 +94,18 @@ static void arrayexpr_startup_fn(Node *clause, PredIterInfo info);
 static Node *arrayexpr_next_fn(PredIterInfo info);
 static void arrayexpr_cleanup_fn(PredIterInfo info);
 static bool predicate_implied_by_simple_clause(Expr *predicate, Node *clause,
-								   bool weak);
+											   bool weak);
 static bool predicate_refuted_by_simple_clause(Expr *predicate, Node *clause,
-								   bool weak);
+											   bool weak);
 static Node *extract_not_arg(Node *clause);
 static Node *extract_strong_not_arg(Node *clause);
 static bool clause_is_strict_for(Node *clause, Node *subexpr, bool allow_false);
 static bool operator_predicate_proof(Expr *predicate, Node *clause,
-						 bool refute_it, bool weak);
+									 bool refute_it, bool weak);
 static bool operator_same_subexprs_proof(Oid pred_op, Oid clause_op,
-							 bool refute_it);
+										 bool refute_it);
 static bool operator_same_subexprs_lookup(Oid pred_op, Oid clause_op,
-							  bool refute_it);
+										  bool refute_it);
 static Oid	get_btree_test_op(Oid pred_op, Oid clause_op, bool refute_it);
 static void InvalidateOprProofCacheCallBack(Datum arg, int cacheid, uint32 hashvalue);
 
diff --git a/src/backend/optimizer/util/relnode.c b/src/backend/optimizer/util/relnode.c
index 272e2eb10af5..6054bd2b5353 100644
--- a/src/backend/optimizer/util/relnode.c
+++ b/src/backend/optimizer/util/relnode.c
@@ -38,31 +38,31 @@ typedef struct JoinHashEntry
 } JoinHashEntry;
 
 static void build_joinrel_tlist(PlannerInfo *root, RelOptInfo *joinrel,
-					RelOptInfo *input_rel);
+								RelOptInfo *input_rel);
 static List *build_joinrel_restrictlist(PlannerInfo *root,
-						   RelOptInfo *joinrel,
-						   RelOptInfo *outer_rel,
-						   RelOptInfo *inner_rel);
+										RelOptInfo *joinrel,
+										RelOptInfo *outer_rel,
+										RelOptInfo *inner_rel);
 static void build_joinrel_joinlist(RelOptInfo *joinrel,
-					   RelOptInfo *outer_rel,
-					   RelOptInfo *inner_rel);
+								   RelOptInfo *outer_rel,
+								   RelOptInfo *inner_rel);
 static List *subbuild_joinrel_restrictlist(RelOptInfo *joinrel,
-							  List *joininfo_list,
-							  List *new_restrictlist);
+										   List *joininfo_list,
+										   List *new_restrictlist);
 static List *subbuild_joinrel_joinlist(RelOptInfo *joinrel,
-						  List *joininfo_list,
-						  List *new_joininfo);
+									   List *joininfo_list,
+									   List *new_joininfo);
 static void set_foreign_rel_properties(RelOptInfo *joinrel,
-						   RelOptInfo *outer_rel, RelOptInfo *inner_rel);
+									   RelOptInfo *outer_rel, RelOptInfo *inner_rel);
 static void add_join_rel(PlannerInfo *root, RelOptInfo *joinrel);
 static void build_joinrel_partition_info(RelOptInfo *joinrel,
-							 RelOptInfo *outer_rel, RelOptInfo *inner_rel,
-							 List *restrictlist, JoinType jointype);
+										 RelOptInfo *outer_rel, RelOptInfo *inner_rel,
+										 List *restrictlist, JoinType jointype);
 static void build_child_join_reltarget(PlannerInfo *root,
-						   RelOptInfo *parentrel,
-						   RelOptInfo *childrel,
-						   int nappinfos,
-						   AppendRelInfo **appinfos);
+									   RelOptInfo *parentrel,
+									   RelOptInfo *childrel,
+									   int nappinfos,
+									   AppendRelInfo **appinfos);
 
 
 /*
diff --git a/src/backend/optimizer/util/restrictinfo.c b/src/backend/optimizer/util/restrictinfo.c
index 03e5f12d0da2..3b50fd29ad69 100644
--- a/src/backend/optimizer/util/restrictinfo.c
+++ b/src/backend/optimizer/util/restrictinfo.c
@@ -22,22 +22,22 @@
 
 
 static RestrictInfo *make_restrictinfo_internal(Expr *clause,
-						   Expr *orclause,
-						   bool is_pushed_down,
-						   bool outerjoin_delayed,
-						   bool pseudoconstant,
-						   Index security_level,
-						   Relids required_relids,
-						   Relids outer_relids,
-						   Relids nullable_relids);
+												Expr *orclause,
+												bool is_pushed_down,
+												bool outerjoin_delayed,
+												bool pseudoconstant,
+												Index security_level,
+												Relids required_relids,
+												Relids outer_relids,
+												Relids nullable_relids);
 static Expr *make_sub_restrictinfos(Expr *clause,
-					   bool is_pushed_down,
-					   bool outerjoin_delayed,
-					   bool pseudoconstant,
-					   Index security_level,
-					   Relids required_relids,
-					   Relids outer_relids,
-					   Relids nullable_relids);
+									bool is_pushed_down,
+									bool outerjoin_delayed,
+									bool pseudoconstant,
+									Index security_level,
+									Relids required_relids,
+									Relids outer_relids,
+									Relids nullable_relids);
 
 
 /*
diff --git a/src/backend/optimizer/util/tlist.c b/src/backend/optimizer/util/tlist.c
index bb3b7969f26e..41402821a159 100644
--- a/src/backend/optimizer/util/tlist.c
+++ b/src/backend/optimizer/util/tlist.c
@@ -54,9 +54,9 @@ typedef struct
 } split_pathtarget_context;
 
 static bool split_pathtarget_walker(Node *node,
-						split_pathtarget_context *context);
+									split_pathtarget_context *context);
 static void add_sp_item_to_pathtarget(PathTarget *target,
-						  split_pathtarget_item *item);
+									  split_pathtarget_item *item);
 static void add_sp_items_to_pathtarget(PathTarget *target, List *items);
 
 
diff --git a/src/backend/optimizer/util/var.c b/src/backend/optimizer/util/var.c
index 315c81eb8e6a..15cc518a82e2 100644
--- a/src/backend/optimizer/util/var.c
+++ b/src/backend/optimizer/util/var.c
@@ -67,17 +67,17 @@ typedef struct
 } flatten_join_alias_vars_context;
 
 static bool pull_varnos_walker(Node *node,
-				   pull_varnos_context *context);
+							   pull_varnos_context *context);
 static bool pull_varattnos_walker(Node *node, pull_varattnos_context *context);
 static bool pull_vars_walker(Node *node, pull_vars_context *context);
 static bool contain_var_clause_walker(Node *node, void *context);
 static bool contain_vars_of_level_walker(Node *node, int *sublevels_up);
 static bool locate_var_of_level_walker(Node *node,
-						   locate_var_of_level_context *context);
+									   locate_var_of_level_context *context);
 static bool pull_var_clause_walker(Node *node,
-					   pull_var_clause_context *context);
+								   pull_var_clause_context *context);
 static Node *flatten_join_alias_vars_mutator(Node *node,
-								flatten_join_alias_vars_context *context);
+											 flatten_join_alias_vars_context *context);
 static Relids alias_relid_set(Query *query, Relids relids);
 
 
diff --git a/src/backend/parser/analyze.c b/src/backend/parser/analyze.c
index bd6f3c804458..b13c24618350 100644
--- a/src/backend/parser/analyze.c
+++ b/src/backend/parser/analyze.c
@@ -54,32 +54,32 @@ static Query *transformOptionalSelectInto(ParseState *pstate, Node *parseTree);
 static Query *transformDeleteStmt(ParseState *pstate, DeleteStmt *stmt);
 static Query *transformInsertStmt(ParseState *pstate, InsertStmt *stmt);
 static List *transformInsertRow(ParseState *pstate, List *exprlist,
-				   List *stmtcols, List *icolumns, List *attrnos,
-				   bool strip_indirection);
+								List *stmtcols, List *icolumns, List *attrnos,
+								bool strip_indirection);
 static OnConflictExpr *transformOnConflictClause(ParseState *pstate,
-						  OnConflictClause *onConflictClause);
+												 OnConflictClause *onConflictClause);
 static int	count_rowexpr_columns(ParseState *pstate, Node *expr);
 static Query *transformSelectStmt(ParseState *pstate, SelectStmt *stmt);
 static Query *transformValuesClause(ParseState *pstate, SelectStmt *stmt);
 static Query *transformSetOperationStmt(ParseState *pstate, SelectStmt *stmt);
 static Node *transformSetOperationTree(ParseState *pstate, SelectStmt *stmt,
-						  bool isTopLevel, List **targetlist);
+									   bool isTopLevel, List **targetlist);
 static void determineRecursiveColTypes(ParseState *pstate,
-						   Node *larg, List *nrtargetlist);
+									   Node *larg, List *nrtargetlist);
 static Query *transformUpdateStmt(ParseState *pstate, UpdateStmt *stmt);
 static List *transformReturningList(ParseState *pstate, List *returningList);
 static List *transformUpdateTargetList(ParseState *pstate,
-						  List *targetList);
+									   List *targetList);
 static Query *transformDeclareCursorStmt(ParseState *pstate,
-						   DeclareCursorStmt *stmt);
+										 DeclareCursorStmt *stmt);
 static Query *transformExplainStmt(ParseState *pstate,
-					 ExplainStmt *stmt);
+								   ExplainStmt *stmt);
 static Query *transformCreateTableAsStmt(ParseState *pstate,
-						   CreateTableAsStmt *stmt);
+										 CreateTableAsStmt *stmt);
 static Query *transformCallStmt(ParseState *pstate,
-				  CallStmt *stmt);
+								CallStmt *stmt);
 static void transformLockingClause(ParseState *pstate, Query *qry,
-					   LockingClause *lc, bool pushedDown);
+								   LockingClause *lc, bool pushedDown);
 #ifdef RAW_EXPRESSION_COVERAGE_TEST
 static bool test_raw_expression_coverage(Node *node, void *context);
 #endif
diff --git a/src/backend/parser/parse_agg.c b/src/backend/parser/parse_agg.c
index c745fcdd2b73..d50410d23a62 100644
--- a/src/backend/parser/parse_agg.c
+++ b/src/backend/parser/parse_agg.c
@@ -51,23 +51,23 @@ typedef struct
 	bool		in_agg_direct_args;
 } check_ungrouped_columns_context;
 
-static int check_agg_arguments(ParseState *pstate,
-					List *directargs,
-					List *args,
-					Expr *filter);
+static int	check_agg_arguments(ParseState *pstate,
+								List *directargs,
+								List *args,
+								Expr *filter);
 static bool check_agg_arguments_walker(Node *node,
-						   check_agg_arguments_context *context);
+									   check_agg_arguments_context *context);
 static void check_ungrouped_columns(Node *node, ParseState *pstate, Query *qry,
-						List *groupClauses, List *groupClauseVars,
-						bool have_non_var_grouping,
-						List **func_grouped_rels);
+									List *groupClauses, List *groupClauseVars,
+									bool have_non_var_grouping,
+									List **func_grouped_rels);
 static bool check_ungrouped_columns_walker(Node *node,
-							   check_ungrouped_columns_context *context);
+										   check_ungrouped_columns_context *context);
 static void finalize_grouping_exprs(Node *node, ParseState *pstate, Query *qry,
-						List *groupClauses, bool hasJoinRTEs,
-						bool have_non_var_grouping);
+									List *groupClauses, bool hasJoinRTEs,
+									bool have_non_var_grouping);
 static bool finalize_grouping_exprs_walker(Node *node,
-							   check_ungrouped_columns_context *context);
+										   check_ungrouped_columns_context *context);
 static void check_agglevels_and_constraints(ParseState *pstate, Node *expr);
 static List *expand_groupingset_node(GroupingSet *gs);
 static Node *make_agg_arg(Oid argtype, Oid argcollation);
diff --git a/src/backend/parser/parse_clause.c b/src/backend/parser/parse_clause.c
index c6ce1011e2d4..2a6b2ff153bb 100644
--- a/src/backend/parser/parse_clause.c
+++ b/src/backend/parser/parse_clause.c
@@ -57,51 +57,51 @@
 #define makeDefaultNSItem(rte)	makeNamespaceItem(rte, true, true, false, true)
 
 static void extractRemainingColumns(List *common_colnames,
-						List *src_colnames, List *src_colvars,
-						List **res_colnames, List **res_colvars);
+									List *src_colnames, List *src_colvars,
+									List **res_colnames, List **res_colvars);
 static Node *transformJoinUsingClause(ParseState *pstate,
-						 RangeTblEntry *leftRTE, RangeTblEntry *rightRTE,
-						 List *leftVars, List *rightVars);
+									  RangeTblEntry *leftRTE, RangeTblEntry *rightRTE,
+									  List *leftVars, List *rightVars);
 static Node *transformJoinOnClause(ParseState *pstate, JoinExpr *j,
-					  List *namespace);
+								   List *namespace);
 static RangeTblEntry *getRTEForSpecialRelationTypes(ParseState *pstate,
-							  RangeVar *rv);
+													RangeVar *rv);
 static RangeTblEntry *transformTableEntry(ParseState *pstate, RangeVar *r);
 static RangeTblEntry *transformRangeSubselect(ParseState *pstate,
-						RangeSubselect *r);
+											  RangeSubselect *r);
 static RangeTblEntry *transformRangeFunction(ParseState *pstate,
-					   RangeFunction *r);
+											 RangeFunction *r);
 static RangeTblEntry *transformRangeTableFunc(ParseState *pstate,
-						RangeTableFunc *t);
+											  RangeTableFunc *t);
 static TableSampleClause *transformRangeTableSample(ParseState *pstate,
-						  RangeTableSample *rts);
+													RangeTableSample *rts);
 static Node *transformFromClauseItem(ParseState *pstate, Node *n,
-						RangeTblEntry **top_rte, int *top_rti,
-						List **namespace);
+									 RangeTblEntry **top_rte, int *top_rti,
+									 List **namespace);
 static Node *buildMergedJoinVar(ParseState *pstate, JoinType jointype,
-				   Var *l_colvar, Var *r_colvar);
+								Var *l_colvar, Var *r_colvar);
 static ParseNamespaceItem *makeNamespaceItem(RangeTblEntry *rte,
-				  bool rel_visible, bool cols_visible,
-				  bool lateral_only, bool lateral_ok);
+											 bool rel_visible, bool cols_visible,
+											 bool lateral_only, bool lateral_ok);
 static void setNamespaceColumnVisibility(List *namespace, bool cols_visible);
 static void setNamespaceLateralState(List *namespace,
-						 bool lateral_only, bool lateral_ok);
+									 bool lateral_only, bool lateral_ok);
 static void checkExprIsVarFree(ParseState *pstate, Node *n,
-				   const char *constructName);
+							   const char *constructName);
 static TargetEntry *findTargetlistEntrySQL92(ParseState *pstate, Node *node,
-						 List **tlist, ParseExprKind exprKind);
+											 List **tlist, ParseExprKind exprKind);
 static TargetEntry *findTargetlistEntrySQL99(ParseState *pstate, Node *node,
-						 List **tlist, ParseExprKind exprKind);
-static int get_matching_location(int sortgroupref,
-					  List *sortgrouprefs, List *exprs);
+											 List **tlist, ParseExprKind exprKind);
+static int	get_matching_location(int sortgroupref,
+								  List *sortgrouprefs, List *exprs);
 static List *resolve_unique_index_expr(ParseState *pstate, InferClause *infer,
-						  Relation heapRel);
+									   Relation heapRel);
 static List *addTargetToGroupList(ParseState *pstate, TargetEntry *tle,
-					 List *grouplist, List *targetlist, int location);
+								  List *grouplist, List *targetlist, int location);
 static WindowClause *findWindowClause(List *wclist, const char *name);
 static Node *transformFrameOffset(ParseState *pstate, int frameOptions,
-					 Oid rangeopfamily, Oid rangeopcintype, Oid *inRangeFunc,
-					 Node *clause);
+								  Oid rangeopfamily, Oid rangeopcintype, Oid *inRangeFunc,
+								  Node *clause);
 
 
 /*
diff --git a/src/backend/parser/parse_coerce.c b/src/backend/parser/parse_coerce.c
index 3840252a5bd0..903478d8ca73 100644
--- a/src/backend/parser/parse_coerce.c
+++ b/src/backend/parser/parse_coerce.c
@@ -33,22 +33,22 @@
 
 
 static Node *coerce_type_typmod(Node *node,
-				   Oid targetTypeId, int32 targetTypMod,
-				   CoercionContext ccontext, CoercionForm cformat,
-				   int location,
-				   bool hideInputCoercion);
+								Oid targetTypeId, int32 targetTypMod,
+								CoercionContext ccontext, CoercionForm cformat,
+								int location,
+								bool hideInputCoercion);
 static void hide_coercion_node(Node *node);
 static Node *build_coercion_expression(Node *node,
-						  CoercionPathType pathtype,
-						  Oid funcId,
-						  Oid targetTypeId, int32 targetTypMod,
-						  CoercionContext ccontext, CoercionForm cformat,
-						  int location);
+									   CoercionPathType pathtype,
+									   Oid funcId,
+									   Oid targetTypeId, int32 targetTypMod,
+									   CoercionContext ccontext, CoercionForm cformat,
+									   int location);
 static Node *coerce_record_to_complex(ParseState *pstate, Node *node,
-						 Oid targetTypeId,
-						 CoercionContext ccontext,
-						 CoercionForm cformat,
-						 int location);
+									  Oid targetTypeId,
+									  CoercionContext ccontext,
+									  CoercionForm cformat,
+									  int location);
 static bool is_complex_array(Oid typid);
 static bool typeIsOfTypedTable(Oid reltypeId, Oid reloftypeId);
 
diff --git a/src/backend/parser/parse_collate.c b/src/backend/parser/parse_collate.c
index 0cfe9997a57f..4d2e586bd64f 100644
--- a/src/backend/parser/parse_collate.c
+++ b/src/backend/parser/parse_collate.c
@@ -74,19 +74,19 @@ typedef struct
 
 static bool assign_query_collations_walker(Node *node, ParseState *pstate);
 static bool assign_collations_walker(Node *node,
-						 assign_collations_context *context);
+									 assign_collations_context *context);
 static void merge_collation_state(Oid collation,
-					  CollateStrength strength,
-					  int location,
-					  Oid collation2,
-					  int location2,
-					  assign_collations_context *context);
+								  CollateStrength strength,
+								  int location,
+								  Oid collation2,
+								  int location2,
+								  assign_collations_context *context);
 static void assign_aggregate_collations(Aggref *aggref,
-							assign_collations_context *loccontext);
+										assign_collations_context *loccontext);
 static void assign_ordered_set_collations(Aggref *aggref,
-							  assign_collations_context *loccontext);
+										  assign_collations_context *loccontext);
 static void assign_hypothetical_collations(Aggref *aggref,
-							   assign_collations_context *loccontext);
+										   assign_collations_context *loccontext);
 
 
 /*
diff --git a/src/backend/parser/parse_expr.c b/src/backend/parser/parse_expr.c
index 8e136a798180..97f535a2f00f 100644
--- a/src/backend/parser/parse_expr.c
+++ b/src/backend/parser/parse_expr.c
@@ -104,35 +104,35 @@ static Node *transformMultiAssignRef(ParseState *pstate, MultiAssignRef *maref);
 static Node *transformCaseExpr(ParseState *pstate, CaseExpr *c);
 static Node *transformSubLink(ParseState *pstate, SubLink *sublink);
 static Node *transformArrayExpr(ParseState *pstate, A_ArrayExpr *a,
-				   Oid array_type, Oid element_type, int32 typmod);
+								Oid array_type, Oid element_type, int32 typmod);
 static Node *transformRowExpr(ParseState *pstate, RowExpr *r, bool allowDefault);
 static Node *transformCoalesceExpr(ParseState *pstate, CoalesceExpr *c);
 static Node *transformMinMaxExpr(ParseState *pstate, MinMaxExpr *m);
 static Node *transformSQLValueFunction(ParseState *pstate,
-						  SQLValueFunction *svf);
+									   SQLValueFunction *svf);
 static Node *transformXmlExpr(ParseState *pstate, XmlExpr *x);
 static Node *transformXmlSerialize(ParseState *pstate, XmlSerialize *xs);
 static Node *transformBooleanTest(ParseState *pstate, BooleanTest *b);
 static Node *transformCurrentOfExpr(ParseState *pstate, CurrentOfExpr *cexpr);
 static Node *transformColumnRef(ParseState *pstate, ColumnRef *cref);
 static Node *transformWholeRowRef(ParseState *pstate, RangeTblEntry *rte,
-					 int location);
+								  int location);
 static Node *transformIndirection(ParseState *pstate, A_Indirection *ind);
 static Node *transformTypeCast(ParseState *pstate, TypeCast *tc);
 static Node *transformCollateClause(ParseState *pstate, CollateClause *c);
 static Node *make_row_comparison_op(ParseState *pstate, List *opname,
-					   List *largs, List *rargs, int location);
+									List *largs, List *rargs, int location);
 static Node *make_row_distinct_op(ParseState *pstate, List *opname,
-					 RowExpr *lrow, RowExpr *rrow, int location);
+								  RowExpr *lrow, RowExpr *rrow, int location);
 static Expr *make_distinct_op(ParseState *pstate, List *opname,
-				 Node *ltree, Node *rtree, int location);
+							  Node *ltree, Node *rtree, int location);
 static Node *make_nulltest_from_distinct(ParseState *pstate,
-							A_Expr *distincta, Node *arg);
+										 A_Expr *distincta, Node *arg);
 static int	operator_precedence_group(Node *node, const char **nodename);
 static void emit_precedence_warnings(ParseState *pstate,
-						 int opgroup, const char *opname,
-						 Node *lchild, Node *rchild,
-						 int location);
+									 int opgroup, const char *opname,
+									 Node *lchild, Node *rchild,
+									 int location);
 
 
 /*
diff --git a/src/backend/parser/parse_func.c b/src/backend/parser/parse_func.c
index 752cf1b315f9..2a44b434a595 100644
--- a/src/backend/parser/parse_func.c
+++ b/src/backend/parser/parse_func.c
@@ -43,14 +43,14 @@ typedef enum
 } FuncLookupError;
 
 static void unify_hypothetical_args(ParseState *pstate,
-						List *fargs, int numAggregatedArgs,
-						Oid *actual_arg_types, Oid *declared_arg_types);
+									List *fargs, int numAggregatedArgs,
+									Oid *actual_arg_types, Oid *declared_arg_types);
 static Oid	FuncNameAsType(List *funcname);
 static Node *ParseComplexProjection(ParseState *pstate, const char *funcname,
-					   Node *first_arg, int location);
-static Oid LookupFuncNameInternal(List *funcname, int nargs,
-					   const Oid *argtypes,
-					   bool missing_ok, FuncLookupError *lookupError);
+									Node *first_arg, int location);
+static Oid	LookupFuncNameInternal(List *funcname, int nargs,
+								   const Oid *argtypes,
+								   bool missing_ok, FuncLookupError *lookupError);
 
 
 /*
diff --git a/src/backend/parser/parse_oper.c b/src/backend/parser/parse_oper.c
index 24f0d5c08c50..0e1015962d72 100644
--- a/src/backend/parser/parse_oper.c
+++ b/src/backend/parser/parse_oper.c
@@ -67,17 +67,17 @@ typedef struct OprCacheEntry
 
 static Oid	binary_oper_exact(List *opname, Oid arg1, Oid arg2);
 static FuncDetailCode oper_select_candidate(int nargs,
-					  Oid *input_typeids,
-					  FuncCandidateList candidates,
-					  Oid *operOid);
+											Oid *input_typeids,
+											FuncCandidateList candidates,
+											Oid *operOid);
 static const char *op_signature_string(List *op, char oprkind,
-					Oid arg1, Oid arg2);
+									   Oid arg1, Oid arg2);
 static void op_error(ParseState *pstate, List *op, char oprkind,
-		 Oid arg1, Oid arg2,
-		 FuncDetailCode fdresult, int location);
+					 Oid arg1, Oid arg2,
+					 FuncDetailCode fdresult, int location);
 static bool make_oper_cache_key(ParseState *pstate, OprCacheKey *key,
-					List *opname, Oid ltypeId, Oid rtypeId,
-					int location);
+								List *opname, Oid ltypeId, Oid rtypeId,
+								int location);
 static Oid	find_oper_cache_entry(OprCacheKey *key);
 static void make_oper_cache_entry(OprCacheKey *key, Oid opr_oid);
 static void InvalidateOprCacheCallBack(Datum arg, int cacheid, uint32 hashvalue);
diff --git a/src/backend/parser/parse_param.c b/src/backend/parser/parse_param.c
index 541b9d09575d..38915fbce198 100644
--- a/src/backend/parser/parse_param.c
+++ b/src/backend/parser/parse_param.c
@@ -54,8 +54,8 @@ typedef struct VarParamState
 static Node *fixed_paramref_hook(ParseState *pstate, ParamRef *pref);
 static Node *variable_paramref_hook(ParseState *pstate, ParamRef *pref);
 static Node *variable_coerce_param_hook(ParseState *pstate, Param *param,
-						   Oid targetTypeId, int32 targetTypeMod,
-						   int location);
+										Oid targetTypeId, int32 targetTypeMod,
+										int location);
 static bool check_parameter_resolution_walker(Node *node, ParseState *pstate);
 static bool query_contains_extern_params_walker(Node *node, void *context);
 
diff --git a/src/backend/parser/parse_relation.c b/src/backend/parser/parse_relation.c
index 0640d11fac7c..77a48b039d99 100644
--- a/src/backend/parser/parse_relation.c
+++ b/src/backend/parser/parse_relation.c
@@ -41,22 +41,22 @@
 #define MAX_FUZZY_DISTANCE				3
 
 static RangeTblEntry *scanNameSpaceForRefname(ParseState *pstate,
-						const char *refname, int location);
+											  const char *refname, int location);
 static RangeTblEntry *scanNameSpaceForRelid(ParseState *pstate, Oid relid,
-					  int location);
+											int location);
 static void check_lateral_ref_ok(ParseState *pstate, ParseNamespaceItem *nsitem,
-					 int location);
+								 int location);
 static void markRTEForSelectPriv(ParseState *pstate, RangeTblEntry *rte,
-					 int rtindex, AttrNumber col);
+								 int rtindex, AttrNumber col);
 static void expandRelation(Oid relid, Alias *eref,
-			   int rtindex, int sublevels_up,
-			   int location, bool include_dropped,
-			   List **colnames, List **colvars);
+						   int rtindex, int sublevels_up,
+						   int location, bool include_dropped,
+						   List **colnames, List **colvars);
 static void expandTupleDesc(TupleDesc tupdesc, Alias *eref,
-				int count, int offset,
-				int rtindex, int sublevels_up,
-				int location, bool include_dropped,
-				List **colnames, List **colvars);
+							int count, int offset,
+							int rtindex, int sublevels_up,
+							int location, bool include_dropped,
+							List **colnames, List **colvars);
 static int	specialAttNum(const char *attname);
 static bool isQueryUsingTempRelation_walker(Node *node, void *context);
 
diff --git a/src/backend/parser/parse_target.c b/src/backend/parser/parse_target.c
index 0e9598ebfe4b..ef2f5b45d87c 100644
--- a/src/backend/parser/parse_target.c
+++ b/src/backend/parser/parse_target.c
@@ -34,37 +34,37 @@
 
 
 static void markTargetListOrigin(ParseState *pstate, TargetEntry *tle,
-					 Var *var, int levelsup);
+								 Var *var, int levelsup);
 static Node *transformAssignmentIndirection(ParseState *pstate,
-							   Node *basenode,
-							   const char *targetName,
-							   bool targetIsArray,
-							   Oid targetTypeId,
-							   int32 targetTypMod,
-							   Oid targetCollation,
-							   ListCell *indirection,
-							   Node *rhs,
-							   int location);
+											Node *basenode,
+											const char *targetName,
+											bool targetIsArray,
+											Oid targetTypeId,
+											int32 targetTypMod,
+											Oid targetCollation,
+											ListCell *indirection,
+											Node *rhs,
+											int location);
 static Node *transformAssignmentSubscripts(ParseState *pstate,
-							  Node *basenode,
-							  const char *targetName,
-							  Oid targetTypeId,
-							  int32 targetTypMod,
-							  Oid targetCollation,
-							  List *subscripts,
-							  bool isSlice,
-							  ListCell *next_indirection,
-							  Node *rhs,
-							  int location);
+										   Node *basenode,
+										   const char *targetName,
+										   Oid targetTypeId,
+										   int32 targetTypMod,
+										   Oid targetCollation,
+										   List *subscripts,
+										   bool isSlice,
+										   ListCell *next_indirection,
+										   Node *rhs,
+										   int location);
 static List *ExpandColumnRefStar(ParseState *pstate, ColumnRef *cref,
-					bool make_target_entry);
+								 bool make_target_entry);
 static List *ExpandAllTables(ParseState *pstate, int location);
 static List *ExpandIndirectionStar(ParseState *pstate, A_Indirection *ind,
-					  bool make_target_entry, ParseExprKind exprKind);
+								   bool make_target_entry, ParseExprKind exprKind);
 static List *ExpandSingleTable(ParseState *pstate, RangeTblEntry *rte,
-				  int location, bool make_target_entry);
+							   int location, bool make_target_entry);
 static List *ExpandRowReference(ParseState *pstate, Node *expr,
-				   bool make_target_entry);
+								bool make_target_entry);
 static int	FigureColnameInternal(Node *node, char **name);
 
 
diff --git a/src/backend/parser/parse_type.c b/src/backend/parser/parse_type.c
index 5d554633d2c4..9de5e0680dc8 100644
--- a/src/backend/parser/parse_type.c
+++ b/src/backend/parser/parse_type.c
@@ -28,7 +28,7 @@
 
 
 static int32 typenameTypeMod(ParseState *pstate, const TypeName *typeName,
-				Type typ);
+							 Type typ);
 
 
 /*
diff --git a/src/backend/parser/parse_utilcmd.c b/src/backend/parser/parse_utilcmd.c
index bbeaada2ae1c..7450d74b7acb 100644
--- a/src/backend/parser/parse_utilcmd.c
+++ b/src/backend/parser/parse_utilcmd.c
@@ -114,37 +114,37 @@ typedef struct
 
 
 static void transformColumnDefinition(CreateStmtContext *cxt,
-						  ColumnDef *column);
+									  ColumnDef *column);
 static void transformTableConstraint(CreateStmtContext *cxt,
-						 Constraint *constraint);
+									 Constraint *constraint);
 static void transformTableLikeClause(CreateStmtContext *cxt,
-						 TableLikeClause *table_like_clause);
+									 TableLikeClause *table_like_clause);
 static void transformOfType(CreateStmtContext *cxt,
-				TypeName *ofTypename);
+							TypeName *ofTypename);
 static CreateStatsStmt *generateClonedExtStatsStmt(RangeVar *heapRel,
-						   Oid heapRelid, Oid source_statsid);
+												   Oid heapRelid, Oid source_statsid);
 static List *get_collation(Oid collation, Oid actual_datatype);
 static List *get_opclass(Oid opclass, Oid actual_datatype);
 static void transformIndexConstraints(CreateStmtContext *cxt);
 static IndexStmt *transformIndexConstraint(Constraint *constraint,
-						 CreateStmtContext *cxt);
+										   CreateStmtContext *cxt);
 static void transformExtendedStatistics(CreateStmtContext *cxt);
 static void transformFKConstraints(CreateStmtContext *cxt,
-					   bool skipValidation,
-					   bool isAddConstraint);
+								   bool skipValidation,
+								   bool isAddConstraint);
 static void transformCheckConstraints(CreateStmtContext *cxt,
-						  bool skipValidation);
+									  bool skipValidation);
 static void transformConstraintAttrs(CreateStmtContext *cxt,
-						 List *constraintList);
+									 List *constraintList);
 static void transformColumnType(CreateStmtContext *cxt, ColumnDef *column);
 static void setSchemaName(char *context_schema, char **stmt_schema_name);
 static void transformPartitionCmd(CreateStmtContext *cxt, PartitionCmd *cmd);
 static List *transformPartitionRangeBounds(ParseState *pstate, List *blist,
-							  Relation parent);
+										   Relation parent);
 static void validateInfiniteBounds(ParseState *pstate, List *blist);
 static Const *transformPartitionBoundValue(ParseState *pstate, Node *con,
-							 const char *colName, Oid colType, int32 colTypmod,
-							 Oid partCollation);
+										   const char *colName, Oid colType, int32 colTypmod,
+										   Oid partCollation);
 
 
 /*
diff --git a/src/backend/partitioning/partbounds.c b/src/backend/partitioning/partbounds.c
index 0e33a370c641..99d26de7e648 100644
--- a/src/backend/partitioning/partbounds.c
+++ b/src/backend/partitioning/partbounds.c
@@ -71,42 +71,42 @@ typedef struct PartitionRangeBound
 
 static int32 qsort_partition_hbound_cmp(const void *a, const void *b);
 static int32 qsort_partition_list_value_cmp(const void *a, const void *b,
-							   void *arg);
+											void *arg);
 static int32 qsort_partition_rbound_cmp(const void *a, const void *b,
-						   void *arg);
+										void *arg);
 static PartitionBoundInfo create_hash_bounds(PartitionBoundSpec **boundspecs,
-				   int nparts, PartitionKey key, int **mapping);
+											 int nparts, PartitionKey key, int **mapping);
 static PartitionBoundInfo create_list_bounds(PartitionBoundSpec **boundspecs,
-				   int nparts, PartitionKey key, int **mapping);
+											 int nparts, PartitionKey key, int **mapping);
 static PartitionBoundInfo create_range_bounds(PartitionBoundSpec **boundspecs,
-					int nparts, PartitionKey key, int **mapping);
+											  int nparts, PartitionKey key, int **mapping);
 static PartitionRangeBound *make_one_partition_rbound(PartitionKey key, int index,
-						  List *datums, bool lower);
+													  List *datums, bool lower);
 static int32 partition_hbound_cmp(int modulus1, int remainder1, int modulus2,
-					 int remainder2);
+								  int remainder2);
 static int32 partition_rbound_cmp(int partnatts, FmgrInfo *partsupfunc,
-					 Oid *partcollation, Datum *datums1,
-					 PartitionRangeDatumKind *kind1, bool lower1,
-					 PartitionRangeBound *b2);
-static int partition_range_bsearch(int partnatts, FmgrInfo *partsupfunc,
-						Oid *partcollation,
-						PartitionBoundInfo boundinfo,
-						PartitionRangeBound *probe, bool *is_equal);
+								  Oid *partcollation, Datum *datums1,
+								  PartitionRangeDatumKind *kind1, bool lower1,
+								  PartitionRangeBound *b2);
+static int	partition_range_bsearch(int partnatts, FmgrInfo *partsupfunc,
+									Oid *partcollation,
+									PartitionBoundInfo boundinfo,
+									PartitionRangeBound *probe, bool *is_equal);
 static int	get_partition_bound_num_indexes(PartitionBoundInfo b);
 static Expr *make_partition_op_expr(PartitionKey key, int keynum,
-					   uint16 strategy, Expr *arg1, Expr *arg2);
-static Oid get_partition_operator(PartitionKey key, int col,
-					   StrategyNumber strategy, bool *need_relabel);
+									uint16 strategy, Expr *arg1, Expr *arg2);
+static Oid	get_partition_operator(PartitionKey key, int col,
+								   StrategyNumber strategy, bool *need_relabel);
 static List *get_qual_for_hash(Relation parent, PartitionBoundSpec *spec);
 static List *get_qual_for_list(Relation parent, PartitionBoundSpec *spec);
 static List *get_qual_for_range(Relation parent, PartitionBoundSpec *spec,
-				   bool for_default);
+								bool for_default);
 static void get_range_key_properties(PartitionKey key, int keynum,
-						 PartitionRangeDatum *ldatum,
-						 PartitionRangeDatum *udatum,
-						 ListCell **partexprs_item,
-						 Expr **keyCol,
-						 Const **lower_val, Const **upper_val);
+									 PartitionRangeDatum *ldatum,
+									 PartitionRangeDatum *udatum,
+									 ListCell **partexprs_item,
+									 Expr **keyCol,
+									 Const **lower_val, Const **upper_val);
 static List *get_range_nulltest(PartitionKey key);
 
 /*
diff --git a/src/backend/partitioning/partprune.c b/src/backend/partitioning/partprune.c
index 53f814f7788f..5982af4de104 100644
--- a/src/backend/partitioning/partprune.c
+++ b/src/backend/partitioning/partprune.c
@@ -138,67 +138,67 @@ typedef struct PruneStepResult
 
 
 static List *make_partitionedrel_pruneinfo(PlannerInfo *root,
-							  RelOptInfo *parentrel,
-							  int *relid_subplan_map,
-							  List *partitioned_rels, List *prunequal,
-							  Bitmapset **matchedsubplans);
+										   RelOptInfo *parentrel,
+										   int *relid_subplan_map,
+										   List *partitioned_rels, List *prunequal,
+										   Bitmapset **matchedsubplans);
 static void gen_partprune_steps(RelOptInfo *rel, List *clauses,
-					PartClauseTarget target,
-					GeneratePruningStepsContext *context);
+								PartClauseTarget target,
+								GeneratePruningStepsContext *context);
 static List *gen_partprune_steps_internal(GeneratePruningStepsContext *context,
-							 List *clauses);
+										  List *clauses);
 static PartitionPruneStep *gen_prune_step_op(GeneratePruningStepsContext *context,
-				  StrategyNumber opstrategy, bool op_is_ne,
-				  List *exprs, List *cmpfns, Bitmapset *nullkeys);
+											 StrategyNumber opstrategy, bool op_is_ne,
+											 List *exprs, List *cmpfns, Bitmapset *nullkeys);
 static PartitionPruneStep *gen_prune_step_combine(GeneratePruningStepsContext *context,
-					   List *source_stepids,
-					   PartitionPruneCombineOp combineOp);
+												  List *source_stepids,
+												  PartitionPruneCombineOp combineOp);
 static PartitionPruneStep *gen_prune_steps_from_opexps(GeneratePruningStepsContext *context,
-							List **keyclauses, Bitmapset *nullkeys);
+													   List **keyclauses, Bitmapset *nullkeys);
 static PartClauseMatchStatus match_clause_to_partition_key(GeneratePruningStepsContext *context,
-							  Expr *clause, Expr *partkey, int partkeyidx,
-							  bool *clause_is_not_null,
-							  PartClauseInfo **pc, List **clause_steps);
+														   Expr *clause, Expr *partkey, int partkeyidx,
+														   bool *clause_is_not_null,
+														   PartClauseInfo **pc, List **clause_steps);
 static List *get_steps_using_prefix(GeneratePruningStepsContext *context,
-					   StrategyNumber step_opstrategy,
-					   bool step_op_is_ne,
-					   Expr *step_lastexpr,
-					   Oid step_lastcmpfn,
-					   int step_lastkeyno,
-					   Bitmapset *step_nullkeys,
-					   List *prefix);
+									StrategyNumber step_opstrategy,
+									bool step_op_is_ne,
+									Expr *step_lastexpr,
+									Oid step_lastcmpfn,
+									int step_lastkeyno,
+									Bitmapset *step_nullkeys,
+									List *prefix);
 static List *get_steps_using_prefix_recurse(GeneratePruningStepsContext *context,
-							   StrategyNumber step_opstrategy,
-							   bool step_op_is_ne,
-							   Expr *step_lastexpr,
-							   Oid step_lastcmpfn,
-							   int step_lastkeyno,
-							   Bitmapset *step_nullkeys,
-							   ListCell *start,
-							   List *step_exprs,
-							   List *step_cmpfns);
+											StrategyNumber step_opstrategy,
+											bool step_op_is_ne,
+											Expr *step_lastexpr,
+											Oid step_lastcmpfn,
+											int step_lastkeyno,
+											Bitmapset *step_nullkeys,
+											ListCell *start,
+											List *step_exprs,
+											List *step_cmpfns);
 static PruneStepResult *get_matching_hash_bounds(PartitionPruneContext *context,
-						 StrategyNumber opstrategy, Datum *values, int nvalues,
-						 FmgrInfo *partsupfunc, Bitmapset *nullkeys);
+												 StrategyNumber opstrategy, Datum *values, int nvalues,
+												 FmgrInfo *partsupfunc, Bitmapset *nullkeys);
 static PruneStepResult *get_matching_list_bounds(PartitionPruneContext *context,
-						 StrategyNumber opstrategy, Datum value, int nvalues,
-						 FmgrInfo *partsupfunc, Bitmapset *nullkeys);
+												 StrategyNumber opstrategy, Datum value, int nvalues,
+												 FmgrInfo *partsupfunc, Bitmapset *nullkeys);
 static PruneStepResult *get_matching_range_bounds(PartitionPruneContext *context,
-						  StrategyNumber opstrategy, Datum *values, int nvalues,
-						  FmgrInfo *partsupfunc, Bitmapset *nullkeys);
+												  StrategyNumber opstrategy, Datum *values, int nvalues,
+												  FmgrInfo *partsupfunc, Bitmapset *nullkeys);
 static Bitmapset *pull_exec_paramids(Expr *expr);
 static bool pull_exec_paramids_walker(Node *node, Bitmapset **context);
 static Bitmapset *get_partkey_exec_paramids(List *steps);
 static PruneStepResult *perform_pruning_base_step(PartitionPruneContext *context,
-						  PartitionPruneStepOp *opstep);
+												  PartitionPruneStepOp *opstep);
 static PruneStepResult *perform_pruning_combine_step(PartitionPruneContext *context,
-							 PartitionPruneStepCombine *cstep,
-							 PruneStepResult **step_results);
+													 PartitionPruneStepCombine *cstep,
+													 PruneStepResult **step_results);
 static bool match_boolean_partition_clause(Oid partopfamily, Expr *clause,
-							   Expr *partkey, Expr **outconst);
+										   Expr *partkey, Expr **outconst);
 static void partkey_datum_from_expr(PartitionPruneContext *context,
-						Expr *expr, int stateidx,
-						Datum *value, bool *isnull);
+									Expr *expr, int stateidx,
+									Datum *value, bool *isnull);
 
 
 /*
diff --git a/src/backend/port/sysv_sema.c b/src/backend/port/sysv_sema.c
index 467e56663e85..ac5106f39daf 100644
--- a/src/backend/port/sysv_sema.c
+++ b/src/backend/port/sysv_sema.c
@@ -72,9 +72,9 @@ static int	nextSemaNumber;		/* next free sem num in last sema set */
 
 
 static IpcSemaphoreId InternalIpcSemaphoreCreate(IpcSemaphoreKey semKey,
-						   int numSems);
+												 int numSems);
 static void IpcSemaphoreInitialize(IpcSemaphoreId semId, int semNum,
-					   int value);
+								   int value);
 static void IpcSemaphoreKill(IpcSemaphoreId semId);
 static int	IpcSemaphoreGetValue(IpcSemaphoreId semId, int semNum);
 static pid_t IpcSemaphoreGetLastPID(IpcSemaphoreId semId, int semNum);
diff --git a/src/backend/port/sysv_shmem.c b/src/backend/port/sysv_shmem.c
index fda3442c5b52..4a86fbc1c1e0 100644
--- a/src/backend/port/sysv_shmem.c
+++ b/src/backend/port/sysv_shmem.c
@@ -103,8 +103,8 @@ static void *InternalIpcMemoryCreate(IpcMemoryKey memKey, Size size);
 static void IpcMemoryDetach(int status, Datum shmaddr);
 static void IpcMemoryDelete(int status, Datum shmId);
 static IpcMemoryState PGSharedMemoryAttach(IpcMemoryId shmId,
-					 void *attachAt,
-					 PGShmemHeader **addr);
+										   void *attachAt,
+										   PGShmemHeader **addr);
 
 
 /*
diff --git a/src/backend/postmaster/autovacuum.c b/src/backend/postmaster/autovacuum.c
index acd8a9280b9a..fd85b9c8f449 100644
--- a/src/backend/postmaster/autovacuum.c
+++ b/src/backend/postmaster/autovacuum.c
@@ -312,7 +312,7 @@ NON_EXEC_STATIC void AutoVacLauncherMain(int argc, char *argv[]) pg_attribute_no
 
 static Oid	do_start_worker(void);
 static void launcher_determine_sleep(bool canlaunch, bool recursing,
-						 struct timeval *nap);
+									 struct timeval *nap);
 static void launch_worker(TimestampTz now);
 static List *get_database_list(void);
 static void rebuild_database_list(Oid newdb);
@@ -323,25 +323,25 @@ static void do_autovacuum(void);
 static void FreeWorkerInfo(int code, Datum arg);
 
 static autovac_table *table_recheck_autovac(Oid relid, HTAB *table_toast_map,
-					  TupleDesc pg_class_desc,
-					  int effective_multixact_freeze_max_age);
+											TupleDesc pg_class_desc,
+											int effective_multixact_freeze_max_age);
 static void relation_needs_vacanalyze(Oid relid, AutoVacOpts *relopts,
-						  Form_pg_class classForm,
-						  PgStat_StatTabEntry *tabentry,
-						  int effective_multixact_freeze_max_age,
-						  bool *dovacuum, bool *doanalyze, bool *wraparound);
+									  Form_pg_class classForm,
+									  PgStat_StatTabEntry *tabentry,
+									  int effective_multixact_freeze_max_age,
+									  bool *dovacuum, bool *doanalyze, bool *wraparound);
 
 static void autovacuum_do_vac_analyze(autovac_table *tab,
-						  BufferAccessStrategy bstrategy);
+									  BufferAccessStrategy bstrategy);
 static AutoVacOpts *extract_autovac_opts(HeapTuple tup,
-					 TupleDesc pg_class_desc);
+										 TupleDesc pg_class_desc);
 static PgStat_StatTabEntry *get_pgstat_tabentry_relid(Oid relid, bool isshared,
-						  PgStat_StatDBEntry *shared,
-						  PgStat_StatDBEntry *dbentry);
+													  PgStat_StatDBEntry *shared,
+													  PgStat_StatDBEntry *dbentry);
 static void perform_work_item(AutoVacuumWorkItem *workitem);
 static void autovac_report_activity(autovac_table *tab);
 static void autovac_report_workitem(AutoVacuumWorkItem *workitem,
-						const char *nspname, const char *relname);
+									const char *nspname, const char *relname);
 static void av_sighup_handler(SIGNAL_ARGS);
 static void avl_sigusr2_handler(SIGNAL_ARGS);
 static void avl_sigterm_handler(SIGNAL_ARGS);
diff --git a/src/backend/postmaster/pgstat.c b/src/backend/postmaster/pgstat.c
index 285def556b61..b4f2b28b517f 100644
--- a/src/backend/postmaster/pgstat.c
+++ b/src/backend/postmaster/pgstat.c
@@ -291,7 +291,7 @@ static void pgstat_sighup_handler(SIGNAL_ARGS);
 
 static PgStat_StatDBEntry *pgstat_get_db_entry(Oid databaseid, bool create);
 static PgStat_StatTabEntry *pgstat_get_tab_entry(PgStat_StatDBEntry *dbentry,
-					 Oid tableoid, bool create);
+												 Oid tableoid, bool create);
 static void pgstat_write_statsfiles(bool permanent, bool allDbs);
 static void pgstat_write_db_statsfile(PgStat_StatDBEntry *dbentry, bool permanent);
 static HTAB *pgstat_read_statsfiles(Oid onlydb, bool permanent, bool deep);
diff --git a/src/backend/postmaster/postmaster.c b/src/backend/postmaster/postmaster.c
index f2c99e648a18..8e098e401b9d 100644
--- a/src/backend/postmaster/postmaster.c
+++ b/src/backend/postmaster/postmaster.c
@@ -397,7 +397,7 @@ static void CleanupBackend(int pid, int exitstatus);
 static bool CleanupBackgroundWorker(int pid, int exitstatus);
 static void HandleChildCrash(int pid, int exitstatus, const char *procname);
 static void LogChildExit(int lev, const char *procname,
-			 int pid, int exitstatus);
+						 int pid, int exitstatus);
 static void PostmasterStateMachine(void);
 static void BackendInitialize(Port *port);
 static void BackendRun(Port *port) pg_attribute_noreturn();
@@ -531,7 +531,7 @@ static void restore_backend_variables(BackendParameters *param, Port *port);
 static bool save_backend_variables(BackendParameters *param, Port *port);
 #else
 static bool save_backend_variables(BackendParameters *param, Port *port,
-					   HANDLE childProcess, pid_t childPid);
+								   HANDLE childProcess, pid_t childPid);
 #endif
 
 static void ShmemBackendArrayAdd(Backend *bn);
@@ -6036,7 +6036,7 @@ extern pg_time_t first_syslogger_file_time;
 #else
 static bool write_duplicated_handle(HANDLE *dest, HANDLE src, HANDLE child);
 static bool write_inheritable_socket(InheritableSocket *dest, SOCKET src,
-						 pid_t childPid);
+									 pid_t childPid);
 static void read_inheritable_socket(SOCKET *dest, InheritableSocket *src);
 #endif
 
diff --git a/src/backend/postmaster/syslogger.c b/src/backend/postmaster/syslogger.c
index a47183208621..5e934e9bfda3 100644
--- a/src/backend/postmaster/syslogger.c
+++ b/src/backend/postmaster/syslogger.c
@@ -141,7 +141,7 @@ NON_EXEC_STATIC void SysLoggerMain(int argc, char *argv[]) pg_attribute_noreturn
 static void process_pipe_input(char *logbuffer, int *bytes_in_logbuffer);
 static void flush_pipe_input(char *logbuffer, int *bytes_in_logbuffer);
 static FILE *logfile_open(const char *filename, const char *mode,
-			 bool allow_errors);
+						  bool allow_errors);
 
 #ifdef WIN32
 static unsigned int __stdcall pipeThread(void *arg);
diff --git a/src/backend/regex/regcomp.c b/src/backend/regex/regcomp.c
index 8cd7d56b2268..8765af71d4da 100644
--- a/src/backend/regex/regcomp.c
+++ b/src/backend/regex/regcomp.c
@@ -55,7 +55,7 @@ static const chr *scanplain(struct vars *);
 static void onechr(struct vars *, chr, struct state *, struct state *);
 static void wordchrs(struct vars *);
 static void processlacon(struct vars *, struct state *, struct state *, int,
-			 struct state *, struct state *);
+						 struct state *, struct state *);
 static struct subre *subre(struct vars *, int, int, struct state *, struct state *);
 static void freesubre(struct vars *, struct subre *);
 static void freesrnode(struct vars *, struct subre *);
@@ -161,15 +161,15 @@ static int	push(struct nfa *, struct arc *, struct state **);
 static int	combine(struct arc *, struct arc *);
 static void fixempties(struct nfa *, FILE *);
 static struct state *emptyreachable(struct nfa *, struct state *,
-			   struct state *, struct arc **);
+									struct state *, struct arc **);
 static int	isconstraintarc(struct arc *);
 static int	hasconstraintout(struct state *);
 static void fixconstraintloops(struct nfa *, FILE *);
 static int	findconstraintloop(struct nfa *, struct state *);
 static void breakconstraintloop(struct nfa *, struct state *);
 static void clonesuccessorstates(struct nfa *, struct state *, struct state *,
-					 struct state *, struct arc *,
-					 char *, char *, int);
+								 struct state *, struct arc *,
+								 char *, char *, int);
 static void cleanup(struct nfa *);
 static void markreachable(struct nfa *, struct state *, struct state *, struct state *);
 static void markcanreach(struct nfa *, struct state *, struct state *, struct state *);
diff --git a/src/backend/regex/regprefix.c b/src/backend/regex/regprefix.c
index 3985e3370789..207d40904ba5 100644
--- a/src/backend/regex/regprefix.c
+++ b/src/backend/regex/regprefix.c
@@ -19,8 +19,8 @@
 /*
  * forward declarations
  */
-static int findprefix(struct cnfa *cnfa, struct colormap *cm,
-		   chr *string, size_t *slength);
+static int	findprefix(struct cnfa *cnfa, struct colormap *cm,
+					   chr *string, size_t *slength);
 
 
 /*
diff --git a/src/backend/replication/basebackup.c b/src/backend/replication/basebackup.c
index 36dcb2875408..c2978a949ad8 100644
--- a/src/backend/replication/basebackup.c
+++ b/src/backend/replication/basebackup.c
@@ -56,14 +56,14 @@ typedef struct
 
 
 static int64 sendDir(const char *path, int basepathlen, bool sizeonly,
-		List *tablespaces, bool sendtblspclinks);
+					 List *tablespaces, bool sendtblspclinks);
 static bool sendFile(const char *readfilename, const char *tarfilename,
-		 struct stat *statbuf, bool missing_ok, Oid dboid);
+					 struct stat *statbuf, bool missing_ok, Oid dboid);
 static void sendFileWithContent(const char *filename, const char *content);
 static int64 _tarWriteHeader(const char *filename, const char *linktarget,
-				struct stat *statbuf, bool sizeonly);
+							 struct stat *statbuf, bool sizeonly);
 static int64 _tarWriteDir(const char *pathbuf, int basepathlen, struct stat *statbuf,
-			 bool sizeonly);
+						  bool sizeonly);
 static void send_int8_string(StringInfoData *buf, int64 intval);
 static void SendBackupHeader(List *tablespaces);
 static void base_backup_cleanup(int code, Datum arg);
diff --git a/src/backend/replication/libpqwalreceiver/libpqwalreceiver.c b/src/backend/replication/libpqwalreceiver/libpqwalreceiver.c
index b455c59cd709..6eba08a92084 100644
--- a/src/backend/replication/libpqwalreceiver/libpqwalreceiver.c
+++ b/src/backend/replication/libpqwalreceiver/libpqwalreceiver.c
@@ -49,35 +49,35 @@ struct WalReceiverConn
 
 /* Prototypes for interface functions */
 static WalReceiverConn *libpqrcv_connect(const char *conninfo,
-				 bool logical, const char *appname,
-				 char **err);
+										 bool logical, const char *appname,
+										 char **err);
 static void libpqrcv_check_conninfo(const char *conninfo);
 static char *libpqrcv_get_conninfo(WalReceiverConn *conn);
 static void libpqrcv_get_senderinfo(WalReceiverConn *conn,
-						char **sender_host, int *sender_port);
+									char **sender_host, int *sender_port);
 static char *libpqrcv_identify_system(WalReceiverConn *conn,
-						 TimeLineID *primary_tli);
+									  TimeLineID *primary_tli);
 static int	libpqrcv_server_version(WalReceiverConn *conn);
 static void libpqrcv_readtimelinehistoryfile(WalReceiverConn *conn,
-								 TimeLineID tli, char **filename,
-								 char **content, int *len);
+											 TimeLineID tli, char **filename,
+											 char **content, int *len);
 static bool libpqrcv_startstreaming(WalReceiverConn *conn,
-						const WalRcvStreamOptions *options);
+									const WalRcvStreamOptions *options);
 static void libpqrcv_endstreaming(WalReceiverConn *conn,
-					  TimeLineID *next_tli);
-static int libpqrcv_receive(WalReceiverConn *conn, char **buffer,
-				 pgsocket *wait_fd);
+								  TimeLineID *next_tli);
+static int	libpqrcv_receive(WalReceiverConn *conn, char **buffer,
+							 pgsocket *wait_fd);
 static void libpqrcv_send(WalReceiverConn *conn, const char *buffer,
-			  int nbytes);
+						  int nbytes);
 static char *libpqrcv_create_slot(WalReceiverConn *conn,
-					 const char *slotname,
-					 bool temporary,
-					 CRSSnapshotAction snapshot_action,
-					 XLogRecPtr *lsn);
+								  const char *slotname,
+								  bool temporary,
+								  CRSSnapshotAction snapshot_action,
+								  XLogRecPtr *lsn);
 static WalRcvExecResult *libpqrcv_exec(WalReceiverConn *conn,
-			  const char *query,
-			  const int nRetTypes,
-			  const Oid *retTypes);
+									   const char *query,
+									   const int nRetTypes,
+									   const Oid *retTypes);
 static void libpqrcv_disconnect(WalReceiverConn *conn);
 
 static WalReceiverFunctionsType PQWalReceiverFunctions = {
diff --git a/src/backend/replication/logical/decode.c b/src/backend/replication/logical/decode.c
index eec3a2284294..151c3ef88258 100644
--- a/src/backend/replication/logical/decode.c
+++ b/src/backend/replication/logical/decode.c
@@ -70,9 +70,9 @@ static void DecodeMultiInsert(LogicalDecodingContext *ctx, XLogRecordBuffer *buf
 static void DecodeSpecConfirm(LogicalDecodingContext *ctx, XLogRecordBuffer *buf);
 
 static void DecodeCommit(LogicalDecodingContext *ctx, XLogRecordBuffer *buf,
-			 xl_xact_parsed_commit *parsed, TransactionId xid);
+						 xl_xact_parsed_commit *parsed, TransactionId xid);
 static void DecodeAbort(LogicalDecodingContext *ctx, XLogRecordBuffer *buf,
-			xl_xact_parsed_abort *parsed, TransactionId xid);
+						xl_xact_parsed_abort *parsed, TransactionId xid);
 
 /* common function to decode tuples */
 static void DecodeXLogTuple(char *data, Size len, ReorderBufferTupleBuf *tup);
diff --git a/src/backend/replication/logical/logical.c b/src/backend/replication/logical/logical.c
index acb4d9a10662..bbd38c06d19d 100644
--- a/src/backend/replication/logical/logical.c
+++ b/src/backend/replication/logical/logical.c
@@ -55,18 +55,18 @@ typedef struct LogicalErrorCallbackState
 /* wrappers around output plugin callbacks */
 static void output_plugin_error_callback(void *arg);
 static void startup_cb_wrapper(LogicalDecodingContext *ctx, OutputPluginOptions *opt,
-				   bool is_init);
+							   bool is_init);
 static void shutdown_cb_wrapper(LogicalDecodingContext *ctx);
 static void begin_cb_wrapper(ReorderBuffer *cache, ReorderBufferTXN *txn);
 static void commit_cb_wrapper(ReorderBuffer *cache, ReorderBufferTXN *txn,
-				  XLogRecPtr commit_lsn);
+							  XLogRecPtr commit_lsn);
 static void change_cb_wrapper(ReorderBuffer *cache, ReorderBufferTXN *txn,
-				  Relation relation, ReorderBufferChange *change);
+							  Relation relation, ReorderBufferChange *change);
 static void truncate_cb_wrapper(ReorderBuffer *cache, ReorderBufferTXN *txn,
-					int nrelations, Relation relations[], ReorderBufferChange *change);
+								int nrelations, Relation relations[], ReorderBufferChange *change);
 static void message_cb_wrapper(ReorderBuffer *cache, ReorderBufferTXN *txn,
-				   XLogRecPtr message_lsn, bool transactional,
-				   const char *prefix, Size message_size, const char *message);
+							   XLogRecPtr message_lsn, bool transactional,
+							   const char *prefix, Size message_size, const char *message);
 
 static void LoadOutputPlugin(OutputPluginCallbacks *callbacks, char *plugin);
 
diff --git a/src/backend/replication/logical/proto.c b/src/backend/replication/logical/proto.c
index 0411963f939c..e7df47de3ed8 100644
--- a/src/backend/replication/logical/proto.c
+++ b/src/backend/replication/logical/proto.c
@@ -31,7 +31,7 @@
 
 static void logicalrep_write_attrs(StringInfo out, Relation rel);
 static void logicalrep_write_tuple(StringInfo out, Relation rel,
-					   HeapTuple tuple);
+								   HeapTuple tuple);
 
 static void logicalrep_read_attrs(StringInfo in, LogicalRepRelation *rel);
 static void logicalrep_read_tuple(StringInfo in, LogicalRepTupleData *tuple);
diff --git a/src/backend/replication/logical/reorderbuffer.c b/src/backend/replication/logical/reorderbuffer.c
index acebf5893e90..7894b77fc2e5 100644
--- a/src/backend/replication/logical/reorderbuffer.c
+++ b/src/backend/replication/logical/reorderbuffer.c
@@ -163,10 +163,10 @@ static const Size max_changes_in_memory = 4096;
 static ReorderBufferTXN *ReorderBufferGetTXN(ReorderBuffer *rb);
 static void ReorderBufferReturnTXN(ReorderBuffer *rb, ReorderBufferTXN *txn);
 static ReorderBufferTXN *ReorderBufferTXNByXid(ReorderBuffer *rb,
-					  TransactionId xid, bool create, bool *is_new,
-					  XLogRecPtr lsn, bool create_as_top);
+											   TransactionId xid, bool create, bool *is_new,
+											   XLogRecPtr lsn, bool create_as_top);
 static void ReorderBufferTransferSnapToParent(ReorderBufferTXN *txn,
-								  ReorderBufferTXN *subtxn);
+											  ReorderBufferTXN *subtxn);
 
 static void AssertTXNLsnOrder(ReorderBuffer *rb);
 
@@ -181,7 +181,7 @@ static void AssertTXNLsnOrder(ReorderBuffer *rb);
 static ReorderBufferIterTXNState *ReorderBufferIterTXNInit(ReorderBuffer *rb, ReorderBufferTXN *txn);
 static ReorderBufferChange *ReorderBufferIterTXNNext(ReorderBuffer *rb, ReorderBufferIterTXNState *state);
 static void ReorderBufferIterTXNFinish(ReorderBuffer *rb,
-						   ReorderBufferIterTXNState *state);
+									   ReorderBufferIterTXNState *state);
 static void ReorderBufferExecuteInvalidations(ReorderBuffer *rb, ReorderBufferTXN *txn);
 
 /*
@@ -192,19 +192,19 @@ static void ReorderBufferExecuteInvalidations(ReorderBuffer *rb, ReorderBufferTX
 static void ReorderBufferCheckSerializeTXN(ReorderBuffer *rb, ReorderBufferTXN *txn);
 static void ReorderBufferSerializeTXN(ReorderBuffer *rb, ReorderBufferTXN *txn);
 static void ReorderBufferSerializeChange(ReorderBuffer *rb, ReorderBufferTXN *txn,
-							 int fd, ReorderBufferChange *change);
+										 int fd, ReorderBufferChange *change);
 static Size ReorderBufferRestoreChanges(ReorderBuffer *rb, ReorderBufferTXN *txn,
-							int *fd, XLogSegNo *segno);
+										int *fd, XLogSegNo *segno);
 static void ReorderBufferRestoreChange(ReorderBuffer *rb, ReorderBufferTXN *txn,
-						   char *change);
+									   char *change);
 static void ReorderBufferRestoreCleanup(ReorderBuffer *rb, ReorderBufferTXN *txn);
 static void ReorderBufferCleanupSerializedTXNs(const char *slotname);
 static void ReorderBufferSerializedPath(char *path, ReplicationSlot *slot,
-							TransactionId xid, XLogSegNo segno);
+										TransactionId xid, XLogSegNo segno);
 
 static void ReorderBufferFreeSnap(ReorderBuffer *rb, Snapshot snap);
 static Snapshot ReorderBufferCopySnap(ReorderBuffer *rb, Snapshot orig_snap,
-					  ReorderBufferTXN *txn, CommandId cid);
+									  ReorderBufferTXN *txn, CommandId cid);
 
 /* ---------------------------------------
  * toast reassembly support
@@ -213,9 +213,9 @@ static Snapshot ReorderBufferCopySnap(ReorderBuffer *rb, Snapshot orig_snap,
 static void ReorderBufferToastInitHash(ReorderBuffer *rb, ReorderBufferTXN *txn);
 static void ReorderBufferToastReset(ReorderBuffer *rb, ReorderBufferTXN *txn);
 static void ReorderBufferToastReplace(ReorderBuffer *rb, ReorderBufferTXN *txn,
-						  Relation relation, ReorderBufferChange *change);
+									  Relation relation, ReorderBufferChange *change);
 static void ReorderBufferToastAppendChunk(ReorderBuffer *rb, ReorderBufferTXN *txn,
-							  Relation relation, ReorderBufferChange *change);
+										  Relation relation, ReorderBufferChange *change);
 
 
 /*
diff --git a/src/backend/replication/pgoutput/pgoutput.c b/src/backend/replication/pgoutput/pgoutput.c
index 63687a97ece3..d317fd70063d 100644
--- a/src/backend/replication/pgoutput/pgoutput.c
+++ b/src/backend/replication/pgoutput/pgoutput.c
@@ -30,26 +30,26 @@ PG_MODULE_MAGIC;
 extern void _PG_output_plugin_init(OutputPluginCallbacks *cb);
 
 static void pgoutput_startup(LogicalDecodingContext *ctx,
-				 OutputPluginOptions *opt, bool is_init);
+							 OutputPluginOptions *opt, bool is_init);
 static void pgoutput_shutdown(LogicalDecodingContext *ctx);
 static void pgoutput_begin_txn(LogicalDecodingContext *ctx,
-				   ReorderBufferTXN *txn);
+							   ReorderBufferTXN *txn);
 static void pgoutput_commit_txn(LogicalDecodingContext *ctx,
-					ReorderBufferTXN *txn, XLogRecPtr commit_lsn);
+								ReorderBufferTXN *txn, XLogRecPtr commit_lsn);
 static void pgoutput_change(LogicalDecodingContext *ctx,
-				ReorderBufferTXN *txn, Relation rel,
-				ReorderBufferChange *change);
+							ReorderBufferTXN *txn, Relation rel,
+							ReorderBufferChange *change);
 static void pgoutput_truncate(LogicalDecodingContext *ctx,
-				  ReorderBufferTXN *txn, int nrelations, Relation relations[],
-				  ReorderBufferChange *change);
+							  ReorderBufferTXN *txn, int nrelations, Relation relations[],
+							  ReorderBufferChange *change);
 static bool pgoutput_origin_filter(LogicalDecodingContext *ctx,
-					   RepOriginId origin_id);
+								   RepOriginId origin_id);
 
 static bool publications_valid;
 
 static List *LoadPublications(List *pubnames);
 static void publication_invalidation_cb(Datum arg, int cacheid,
-							uint32 hashvalue);
+										uint32 hashvalue);
 
 /* Entry in the map used to remember which relation schemas we sent. */
 typedef struct RelationSyncEntry
@@ -67,7 +67,7 @@ static void init_rel_sync_cache(MemoryContext decoding_context);
 static RelationSyncEntry *get_rel_sync_entry(PGOutputData *data, Oid relid);
 static void rel_sync_cache_relation_cb(Datum arg, Oid relid);
 static void rel_sync_cache_publication_cb(Datum arg, int cacheid,
-							  uint32 hashvalue);
+										  uint32 hashvalue);
 
 /*
  * Specify output plugin callbacks
diff --git a/src/backend/replication/syncrep.c b/src/backend/replication/syncrep.c
index 83734575c28b..577791f3d5fd 100644
--- a/src/backend/replication/syncrep.c
+++ b/src/backend/replication/syncrep.c
@@ -102,17 +102,17 @@ static void SyncRepCancelWait(void);
 static int	SyncRepWakeQueue(bool all, int mode);
 
 static bool SyncRepGetSyncRecPtr(XLogRecPtr *writePtr,
-					 XLogRecPtr *flushPtr,
-					 XLogRecPtr *applyPtr,
-					 bool *am_sync);
+								 XLogRecPtr *flushPtr,
+								 XLogRecPtr *applyPtr,
+								 bool *am_sync);
 static void SyncRepGetOldestSyncRecPtr(XLogRecPtr *writePtr,
-						   XLogRecPtr *flushPtr,
-						   XLogRecPtr *applyPtr,
-						   List *sync_standbys);
+									   XLogRecPtr *flushPtr,
+									   XLogRecPtr *applyPtr,
+									   List *sync_standbys);
 static void SyncRepGetNthLatestSyncRecPtr(XLogRecPtr *writePtr,
-							  XLogRecPtr *flushPtr,
-							  XLogRecPtr *applyPtr,
-							  List *sync_standbys, uint8 nth);
+										  XLogRecPtr *flushPtr,
+										  XLogRecPtr *applyPtr,
+										  List *sync_standbys, uint8 nth);
 static int	SyncRepGetStandbyPriority(void);
 static List *SyncRepGetSyncStandbysPriority(bool *am_sync);
 static List *SyncRepGetSyncStandbysQuorum(bool *am_sync);
diff --git a/src/backend/rewrite/rewriteDefine.c b/src/backend/rewrite/rewriteDefine.c
index 6bd889461e37..7df2b6154cb1 100644
--- a/src/backend/rewrite/rewriteDefine.c
+++ b/src/backend/rewrite/rewriteDefine.c
@@ -45,7 +45,7 @@
 
 
 static void checkRuleResultList(List *targetList, TupleDesc resultDesc,
-					bool isSelect, bool requireColumnNameMatch);
+								bool isSelect, bool requireColumnNameMatch);
 static bool setRuleCheckAsUser_walker(Node *node, Oid *context);
 static void setRuleCheckAsUser_Query(Query *qry, Oid userid);
 
diff --git a/src/backend/rewrite/rewriteHandler.c b/src/backend/rewrite/rewriteHandler.c
index 39080776b046..ea40c287333c 100644
--- a/src/backend/rewrite/rewriteHandler.c
+++ b/src/backend/rewrite/rewriteHandler.c
@@ -55,30 +55,30 @@ typedef struct acquireLocksOnSubLinks_context
 } acquireLocksOnSubLinks_context;
 
 static bool acquireLocksOnSubLinks(Node *node,
-					   acquireLocksOnSubLinks_context *context);
+								   acquireLocksOnSubLinks_context *context);
 static Query *rewriteRuleAction(Query *parsetree,
-				  Query *rule_action,
-				  Node *rule_qual,
-				  int rt_index,
-				  CmdType event,
-				  bool *returning_flag);
+								Query *rule_action,
+								Node *rule_qual,
+								int rt_index,
+								CmdType event,
+								bool *returning_flag);
 static List *adjustJoinTreeList(Query *parsetree, bool removert, int rt_index);
 static List *rewriteTargetListIU(List *targetList,
-					CmdType commandType,
-					OverridingKind override,
-					Relation target_relation,
-					int result_rti);
+								 CmdType commandType,
+								 OverridingKind override,
+								 Relation target_relation,
+								 int result_rti);
 static TargetEntry *process_matched_tle(TargetEntry *src_tle,
-					TargetEntry *prior_tle,
-					const char *attrName);
+										TargetEntry *prior_tle,
+										const char *attrName);
 static Node *get_assignment_input(Node *node);
 static bool rewriteValuesRTE(Query *parsetree, RangeTblEntry *rte, int rti,
-				 Relation target_relation, bool force_nulls);
+							 Relation target_relation, bool force_nulls);
 static void markQueryForLocking(Query *qry, Node *jtnode,
-					LockClauseStrength strength, LockWaitPolicy waitPolicy,
-					bool pushedDown);
+								LockClauseStrength strength, LockWaitPolicy waitPolicy,
+								bool pushedDown);
 static List *matchLocks(CmdType event, RuleLock *rulelocks,
-		   int varno, Query *parsetree, bool *hasUpdate);
+						int varno, Query *parsetree, bool *hasUpdate);
 static Query *fireRIRrules(Query *parsetree, List *activeRIRs);
 static bool view_has_instead_trigger(Relation view, CmdType event);
 static Bitmapset *adjust_view_column_set(Bitmapset *cols, List *targetlist);
diff --git a/src/backend/rewrite/rewriteManip.c b/src/backend/rewrite/rewriteManip.c
index 8fa5c11cc716..e20158b96262 100644
--- a/src/backend/rewrite/rewriteManip.c
+++ b/src/backend/rewrite/rewriteManip.c
@@ -41,12 +41,12 @@ typedef struct
 } locate_windowfunc_context;
 
 static bool contain_aggs_of_level_walker(Node *node,
-							 contain_aggs_of_level_context *context);
+										 contain_aggs_of_level_context *context);
 static bool locate_agg_of_level_walker(Node *node,
-						   locate_agg_of_level_context *context);
+									   locate_agg_of_level_context *context);
 static bool contain_windowfuncs_walker(Node *node, void *context);
 static bool locate_windowfunc_walker(Node *node,
-						 locate_windowfunc_context *context);
+									 locate_windowfunc_context *context);
 static bool checkExprHasSubLink_walker(Node *node, void *context);
 static Relids offset_relid_set(Relids relids, int offset);
 static Relids adjust_relid_set(Relids relids, int oldrelid, int newrelid);
diff --git a/src/backend/rewrite/rowsecurity.c b/src/backend/rewrite/rowsecurity.c
index e9f532ce69a8..300af6f06f2c 100644
--- a/src/backend/rewrite/rowsecurity.c
+++ b/src/backend/rewrite/rowsecurity.c
@@ -59,28 +59,28 @@
 #include "tcop/utility.h"
 
 static void get_policies_for_relation(Relation relation,
-						  CmdType cmd, Oid user_id,
-						  List **permissive_policies,
-						  List **restrictive_policies);
+									  CmdType cmd, Oid user_id,
+									  List **permissive_policies,
+									  List **restrictive_policies);
 
 static List *sort_policies_by_name(List *policies);
 
 static int	row_security_policy_cmp(const void *a, const void *b);
 
 static void add_security_quals(int rt_index,
-				   List *permissive_policies,
-				   List *restrictive_policies,
-				   List **securityQuals,
-				   bool *hasSubLinks);
+							   List *permissive_policies,
+							   List *restrictive_policies,
+							   List **securityQuals,
+							   bool *hasSubLinks);
 
 static void add_with_check_options(Relation rel,
-					   int rt_index,
-					   WCOKind kind,
-					   List *permissive_policies,
-					   List *restrictive_policies,
-					   List **withCheckOptions,
-					   bool *hasSubLinks,
-					   bool force_using);
+								   int rt_index,
+								   WCOKind kind,
+								   List *permissive_policies,
+								   List *restrictive_policies,
+								   List **withCheckOptions,
+								   bool *hasSubLinks,
+								   bool force_using);
 
 static bool check_role_for_policy(ArrayType *policy_roles, Oid user_id);
 
diff --git a/src/backend/statistics/dependencies.c b/src/backend/statistics/dependencies.c
index 8a71c2b534ae..591bc16e572f 100644
--- a/src/backend/statistics/dependencies.c
+++ b/src/backend/statistics/dependencies.c
@@ -63,22 +63,22 @@ typedef struct DependencyGeneratorData
 typedef DependencyGeneratorData *DependencyGenerator;
 
 static void generate_dependencies_recurse(DependencyGenerator state,
-							  int index, AttrNumber start, AttrNumber *current);
+										  int index, AttrNumber start, AttrNumber *current);
 static void generate_dependencies(DependencyGenerator state);
 static DependencyGenerator DependencyGenerator_init(int n, int k);
 static void DependencyGenerator_free(DependencyGenerator state);
 static AttrNumber *DependencyGenerator_next(DependencyGenerator state);
 static double dependency_degree(int numrows, HeapTuple *rows, int k,
-				  AttrNumber *dependency, VacAttrStats **stats, Bitmapset *attrs);
+								AttrNumber *dependency, VacAttrStats **stats, Bitmapset *attrs);
 static bool dependency_is_fully_matched(MVDependency *dependency,
-							Bitmapset *attnums);
+										Bitmapset *attnums);
 static bool dependency_implies_attribute(MVDependency *dependency,
-							 AttrNumber attnum);
+										 AttrNumber attnum);
 static bool dependency_is_compatible_clause(Node *clause, Index relid,
-								AttrNumber *attnum);
+											AttrNumber *attnum);
 static MVDependency *find_strongest_dependency(StatisticExtInfo *stats,
-						  MVDependencies *dependencies,
-						  Bitmapset *attnums);
+											   MVDependencies *dependencies,
+											   Bitmapset *attnums);
 
 static void
 generate_dependencies_recurse(DependencyGenerator state, int index,
diff --git a/src/backend/statistics/extended_stats.c b/src/backend/statistics/extended_stats.c
index cc6112df3b3f..ab187915c1d6 100644
--- a/src/backend/statistics/extended_stats.c
+++ b/src/backend/statistics/extended_stats.c
@@ -64,10 +64,10 @@ typedef struct StatExtEntry
 
 static List *fetch_statentries_for_relation(Relation pg_statext, Oid relid);
 static VacAttrStats **lookup_var_attr_stats(Relation rel, Bitmapset *attrs,
-					  int nvacatts, VacAttrStats **vacatts);
+											int nvacatts, VacAttrStats **vacatts);
 static void statext_store(Relation pg_stext, Oid relid,
-			  MVNDistinct *ndistinct, MVDependencies *dependencies,
-			  MCVList *mcvlist, VacAttrStats **stats);
+						  MVNDistinct *ndistinct, MVDependencies *dependencies,
+						  MCVList *mcvlist, VacAttrStats **stats);
 
 
 /*
diff --git a/src/backend/statistics/mcv.c b/src/backend/statistics/mcv.c
index d22820dec743..c8c44a53bf01 100644
--- a/src/backend/statistics/mcv.c
+++ b/src/backend/statistics/mcv.c
@@ -75,10 +75,10 @@
 static MultiSortSupport build_mss(VacAttrStats **stats, int numattrs);
 
 static SortItem *build_distinct_groups(int numrows, SortItem *items,
-					  MultiSortSupport mss, int *ndistinct);
+									   MultiSortSupport mss, int *ndistinct);
 
-static int count_distinct_groups(int numrows, SortItem *items,
-					  MultiSortSupport mss);
+static int	count_distinct_groups(int numrows, SortItem *items,
+								  MultiSortSupport mss);
 
 /*
  * get_mincount_for_mcv_list
diff --git a/src/backend/statistics/mvdistinct.c b/src/backend/statistics/mvdistinct.c
index 133503cb9b3a..b1a426265bd4 100644
--- a/src/backend/statistics/mvdistinct.c
+++ b/src/backend/statistics/mvdistinct.c
@@ -37,8 +37,8 @@
 
 
 static double ndistinct_for_combination(double totalrows, int numrows,
-						  HeapTuple *rows, VacAttrStats **stats,
-						  int k, int *combination);
+										HeapTuple *rows, VacAttrStats **stats,
+										int k, int *combination);
 static double estimate_ndistinct(double totalrows, int numrows, int d, int f1);
 static int	n_choose_k(int n, int k);
 static int	num_combinations(int n);
diff --git a/src/backend/storage/buffer/bufmgr.c b/src/backend/storage/buffer/bufmgr.c
index bee79d84dc9f..7332e6b59034 100644
--- a/src/backend/storage/buffer/bufmgr.c
+++ b/src/backend/storage/buffer/bufmgr.c
@@ -430,9 +430,9 @@ ForgetPrivateRefCountEntry(PrivateRefCountEntry *ref)
 
 
 static Buffer ReadBuffer_common(SMgrRelation reln, char relpersistence,
-				  ForkNumber forkNum, BlockNumber blockNum,
-				  ReadBufferMode mode, BufferAccessStrategy strategy,
-				  bool *hit);
+								ForkNumber forkNum, BlockNumber blockNum,
+								ReadBufferMode mode, BufferAccessStrategy strategy,
+								bool *hit);
 static bool PinBuffer(BufferDesc *buf, BufferAccessStrategy strategy);
 static void PinBuffer_Locked(BufferDesc *buf);
 static void UnpinBuffer(BufferDesc *buf, bool fixOwner);
@@ -442,15 +442,15 @@ static int	SyncOneBuffer(int buf_id, bool skip_recently_used, WritebackContext *
 static void WaitIO(BufferDesc *buf);
 static bool StartBufferIO(BufferDesc *buf, bool forInput);
 static void TerminateBufferIO(BufferDesc *buf, bool clear_dirty,
-				  uint32 set_flag_bits);
+							  uint32 set_flag_bits);
 static void shared_buffer_write_error_callback(void *arg);
 static void local_buffer_write_error_callback(void *arg);
 static BufferDesc *BufferAlloc(SMgrRelation smgr,
-			char relpersistence,
-			ForkNumber forkNum,
-			BlockNumber blockNum,
-			BufferAccessStrategy strategy,
-			bool *foundPtr);
+							   char relpersistence,
+							   ForkNumber forkNum,
+							   BlockNumber blockNum,
+							   BufferAccessStrategy strategy,
+							   bool *foundPtr);
 static void FlushBuffer(BufferDesc *buf, SMgrRelation reln);
 static void AtProcExit_Buffers(int code, Datum arg);
 static void CheckForBufferLeaks(void);
diff --git a/src/backend/storage/buffer/freelist.c b/src/backend/storage/buffer/freelist.c
index 03caceaf7b08..06659ab26533 100644
--- a/src/backend/storage/buffer/freelist.c
+++ b/src/backend/storage/buffer/freelist.c
@@ -99,9 +99,9 @@ typedef struct BufferAccessStrategyData
 
 /* Prototypes for internal functions */
 static BufferDesc *GetBufferFromRing(BufferAccessStrategy strategy,
-				  uint32 *buf_state);
+									 uint32 *buf_state);
 static void AddBufferToRing(BufferAccessStrategy strategy,
-				BufferDesc *buf);
+							BufferDesc *buf);
 
 /*
  * ClockSweepTick - Helper routine for StrategyGetBuffer()
diff --git a/src/backend/storage/file/fd.c b/src/backend/storage/file/fd.c
index ffae52089f7b..73c455e66fac 100644
--- a/src/backend/storage/file/fd.c
+++ b/src/backend/storage/file/fd.c
@@ -308,14 +308,14 @@ static int	FreeDesc(AllocateDesc *desc);
 static void AtProcExit_Files(int code, Datum arg);
 static void CleanupTempFiles(bool isCommit, bool isProcExit);
 static void RemovePgTempFilesInDir(const char *tmpdirname, bool missing_ok,
-					   bool unlink_all);
+								   bool unlink_all);
 static void RemovePgTempRelationFiles(const char *tsdirname);
 static void RemovePgTempRelationFilesInDbspace(const char *dbspacedirname);
 
 static void walkdir(const char *path,
-		void (*action) (const char *fname, bool isdir, int elevel),
-		bool process_symlinks,
-		int elevel);
+					void (*action) (const char *fname, bool isdir, int elevel),
+					bool process_symlinks,
+					int elevel);
 #ifdef PG_FLUSH_DATA_WORKS
 static void pre_sync_fname(const char *fname, bool isdir, int elevel);
 #endif
diff --git a/src/backend/storage/file/reinit.c b/src/backend/storage/file/reinit.c
index 1ead778cc9d8..ccdf80d614c9 100644
--- a/src/backend/storage/file/reinit.c
+++ b/src/backend/storage/file/reinit.c
@@ -24,9 +24,9 @@
 #include "utils/memutils.h"
 
 static void ResetUnloggedRelationsInTablespaceDir(const char *tsdirname,
-									  int op);
+												  int op);
 static void ResetUnloggedRelationsInDbspaceDir(const char *dbspacedirname,
-								   int op);
+											   int op);
 
 typedef struct
 {
diff --git a/src/backend/storage/freespace/freespace.c b/src/backend/storage/freespace/freespace.c
index eee82860575c..c17b3f49dd0e 100644
--- a/src/backend/storage/freespace/freespace.c
+++ b/src/backend/storage/freespace/freespace.c
@@ -105,12 +105,12 @@ static uint8 fsm_space_needed_to_cat(Size needed);
 static Size fsm_space_cat_to_avail(uint8 cat);
 
 /* workhorse functions for various operations */
-static int fsm_set_and_search(Relation rel, FSMAddress addr, uint16 slot,
-				   uint8 newValue, uint8 minValue);
+static int	fsm_set_and_search(Relation rel, FSMAddress addr, uint16 slot,
+							   uint8 newValue, uint8 minValue);
 static BlockNumber fsm_search(Relation rel, uint8 min_cat);
 static uint8 fsm_vacuum_page(Relation rel, FSMAddress addr,
-				BlockNumber start, BlockNumber end,
-				bool *eof);
+							 BlockNumber start, BlockNumber end,
+							 bool *eof);
 
 
 /******** Public API ********/
diff --git a/src/backend/storage/ipc/dsm.c b/src/backend/storage/ipc/dsm.c
index 23ccc59f134e..142293fd2c3b 100644
--- a/src/backend/storage/ipc/dsm.c
+++ b/src/backend/storage/ipc/dsm.c
@@ -98,7 +98,7 @@ static void dsm_cleanup_for_mmap(void);
 static void dsm_postmaster_shutdown(int code, Datum arg);
 static dsm_segment *dsm_create_descriptor(void);
 static bool dsm_control_segment_sane(dsm_control_header *control,
-						 Size mapped_size);
+									 Size mapped_size);
 static uint64 dsm_control_bytes_needed(uint32 nitems);
 
 /* Has this backend initialized the dynamic shared memory system yet? */
diff --git a/src/backend/storage/ipc/dsm_impl.c b/src/backend/storage/ipc/dsm_impl.c
index a22c7928e74b..d32996b6fc42 100644
--- a/src/backend/storage/ipc/dsm_impl.c
+++ b/src/backend/storage/ipc/dsm_impl.c
@@ -73,24 +73,24 @@
 
 #ifdef USE_DSM_POSIX
 static bool dsm_impl_posix(dsm_op op, dsm_handle handle, Size request_size,
-			   void **impl_private, void **mapped_address,
-			   Size *mapped_size, int elevel);
+						   void **impl_private, void **mapped_address,
+						   Size *mapped_size, int elevel);
 static int	dsm_impl_posix_resize(int fd, off_t size);
 #endif
 #ifdef USE_DSM_SYSV
 static bool dsm_impl_sysv(dsm_op op, dsm_handle handle, Size request_size,
-			  void **impl_private, void **mapped_address,
-			  Size *mapped_size, int elevel);
+						  void **impl_private, void **mapped_address,
+						  Size *mapped_size, int elevel);
 #endif
 #ifdef USE_DSM_WINDOWS
 static bool dsm_impl_windows(dsm_op op, dsm_handle handle, Size request_size,
-				 void **impl_private, void **mapped_address,
-				 Size *mapped_size, int elevel);
+							 void **impl_private, void **mapped_address,
+							 Size *mapped_size, int elevel);
 #endif
 #ifdef USE_DSM_MMAP
 static bool dsm_impl_mmap(dsm_op op, dsm_handle handle, Size request_size,
-			  void **impl_private, void **mapped_address,
-			  Size *mapped_size, int elevel);
+						  void **impl_private, void **mapped_address,
+						  Size *mapped_size, int elevel);
 #endif
 static int	errcode_for_dynamic_shared_memory(void);
 
diff --git a/src/backend/storage/ipc/latch.c b/src/backend/storage/ipc/latch.c
index bff254c2b28c..2426cbcf8e92 100644
--- a/src/backend/storage/ipc/latch.c
+++ b/src/backend/storage/ipc/latch.c
@@ -143,7 +143,7 @@ static void WaitEventAdjustWin32(WaitEventSet *set, WaitEvent *event);
 #endif
 
 static inline int WaitEventSetWaitBlock(WaitEventSet *set, int cur_timeout,
-					  WaitEvent *occurred_events, int nevents);
+										WaitEvent *occurred_events, int nevents);
 
 /*
  * Initialize the process-local latch infrastructure.
diff --git a/src/backend/storage/ipc/procarray.c b/src/backend/storage/ipc/procarray.c
index 010cc061c890..18a0f62ba67c 100644
--- a/src/backend/storage/ipc/procarray.c
+++ b/src/backend/storage/ipc/procarray.c
@@ -155,22 +155,22 @@ static void DisplayXidCache(void);
 /* Primitives for KnownAssignedXids array handling for standby */
 static void KnownAssignedXidsCompress(bool force);
 static void KnownAssignedXidsAdd(TransactionId from_xid, TransactionId to_xid,
-					 bool exclusive_lock);
+								 bool exclusive_lock);
 static bool KnownAssignedXidsSearch(TransactionId xid, bool remove);
 static bool KnownAssignedXidExists(TransactionId xid);
 static void KnownAssignedXidsRemove(TransactionId xid);
 static void KnownAssignedXidsRemoveTree(TransactionId xid, int nsubxids,
-							TransactionId *subxids);
+										TransactionId *subxids);
 static void KnownAssignedXidsRemovePreceding(TransactionId xid);
 static int	KnownAssignedXidsGet(TransactionId *xarray, TransactionId xmax);
-static int KnownAssignedXidsGetAndSetXmin(TransactionId *xarray,
-							   TransactionId *xmin,
-							   TransactionId xmax);
+static int	KnownAssignedXidsGetAndSetXmin(TransactionId *xarray,
+										   TransactionId *xmin,
+										   TransactionId xmax);
 static TransactionId KnownAssignedXidsGetOldestXmin(void);
 static void KnownAssignedXidsDisplay(int trace_level);
 static void KnownAssignedXidsReset(void);
 static inline void ProcArrayEndTransactionInternal(PGPROC *proc,
-								PGXACT *pgxact, TransactionId latestXid);
+												   PGXACT *pgxact, TransactionId latestXid);
 static void ProcArrayGroupClearXid(PGPROC *proc, TransactionId latestXid);
 
 /*
diff --git a/src/backend/storage/ipc/shm_mq.c b/src/backend/storage/ipc/shm_mq.c
index 6e471c3e4311..91f7714650bc 100644
--- a/src/backend/storage/ipc/shm_mq.c
+++ b/src/backend/storage/ipc/shm_mq.c
@@ -144,14 +144,14 @@ struct shm_mq_handle
 
 static void shm_mq_detach_internal(shm_mq *mq);
 static shm_mq_result shm_mq_send_bytes(shm_mq_handle *mqh, Size nbytes,
-				  const void *data, bool nowait, Size *bytes_written);
+									   const void *data, bool nowait, Size *bytes_written);
 static shm_mq_result shm_mq_receive_bytes(shm_mq_handle *mqh,
-					 Size bytes_needed, bool nowait, Size *nbytesp,
-					 void **datap);
+										  Size bytes_needed, bool nowait, Size *nbytesp,
+										  void **datap);
 static bool shm_mq_counterparty_gone(shm_mq *mq,
-						 BackgroundWorkerHandle *handle);
+									 BackgroundWorkerHandle *handle);
 static bool shm_mq_wait_internal(shm_mq *mq, PGPROC **ptr,
-					 BackgroundWorkerHandle *handle);
+								 BackgroundWorkerHandle *handle);
 static void shm_mq_inc_bytes_read(shm_mq *mq, Size n);
 static void shm_mq_inc_bytes_written(shm_mq *mq, Size n);
 static void shm_mq_detach_callback(dsm_segment *seg, Datum arg);
diff --git a/src/backend/storage/ipc/standby.c b/src/backend/storage/ipc/standby.c
index 215f1463bb12..842fcabd9794 100644
--- a/src/backend/storage/ipc/standby.c
+++ b/src/backend/storage/ipc/standby.c
@@ -43,7 +43,7 @@ int			max_standby_streaming_delay = 30 * 1000;
 static HTAB *RecoveryLockLists;
 
 static void ResolveRecoveryConflictWithVirtualXIDs(VirtualTransactionId *waitlist,
-									   ProcSignalReason reason);
+												   ProcSignalReason reason);
 static void SendRecoveryConflictWithBufferPin(ProcSignalReason reason);
 static XLogRecPtr LogCurrentRunningXacts(RunningTransactions CurrRunningXacts);
 static void LogAccessExclusiveLocks(int nlocks, xl_standby_lock *locks);
diff --git a/src/backend/storage/lmgr/deadlock.c b/src/backend/storage/lmgr/deadlock.c
index 74eb449060f8..9abc9d778f6a 100644
--- a/src/backend/storage/lmgr/deadlock.c
+++ b/src/backend/storage/lmgr/deadlock.c
@@ -79,15 +79,15 @@ typedef struct
 static bool DeadLockCheckRecurse(PGPROC *proc);
 static int	TestConfiguration(PGPROC *startProc);
 static bool FindLockCycle(PGPROC *checkProc,
-			  EDGE *softEdges, int *nSoftEdges);
+						  EDGE *softEdges, int *nSoftEdges);
 static bool FindLockCycleRecurse(PGPROC *checkProc, int depth,
-					 EDGE *softEdges, int *nSoftEdges);
+								 EDGE *softEdges, int *nSoftEdges);
 static bool FindLockCycleRecurseMember(PGPROC *checkProc,
-						   PGPROC *checkProcLeader,
-						   int depth, EDGE *softEdges, int *nSoftEdges);
+									   PGPROC *checkProcLeader,
+									   int depth, EDGE *softEdges, int *nSoftEdges);
 static bool ExpandConstraints(EDGE *constraints, int nConstraints);
 static bool TopoSort(LOCK *lock, EDGE *constraints, int nConstraints,
-		 PGPROC **ordering);
+					 PGPROC **ordering);
 
 #ifdef DEBUG_DEADLOCK
 static void PrintLockQueue(LOCK *lock, const char *info);
diff --git a/src/backend/storage/lmgr/lock.c b/src/backend/storage/lmgr/lock.c
index c8958766f1e8..6745a2432ef7 100644
--- a/src/backend/storage/lmgr/lock.c
+++ b/src/backend/storage/lmgr/lock.c
@@ -211,7 +211,7 @@ static int	FastPathLocalUseCount = 0;
 static bool FastPathGrantRelationLock(Oid relid, LOCKMODE lockmode);
 static bool FastPathUnGrantRelationLock(Oid relid, LOCKMODE lockmode);
 static bool FastPathTransferRelationLocks(LockMethod lockMethodTable,
-							  const LOCKTAG *locktag, uint32 hashcode);
+										  const LOCKTAG *locktag, uint32 hashcode);
 static PROCLOCK *FastPathGetRelationLockEntry(LOCALLOCK *locallock);
 
 /*
@@ -342,7 +342,7 @@ PROCLOCK_PRINT(const char *where, const PROCLOCK *proclockP)
 static uint32 proclock_hash(const void *key, Size keysize);
 static void RemoveLocalLock(LOCALLOCK *locallock);
 static PROCLOCK *SetupLockInTable(LockMethod lockMethodTable, PGPROC *proc,
-				 const LOCKTAG *locktag, uint32 hashcode, LOCKMODE lockmode);
+								  const LOCKTAG *locktag, uint32 hashcode, LOCKMODE lockmode);
 static void GrantLockLocal(LOCALLOCK *locallock, ResourceOwner owner);
 static void BeginStrongLockAcquire(LOCALLOCK *locallock, uint32 fasthashcode);
 static void FinishStrongLockAcquire(void);
@@ -350,15 +350,15 @@ static void WaitOnLock(LOCALLOCK *locallock, ResourceOwner owner);
 static void ReleaseLockIfHeld(LOCALLOCK *locallock, bool sessionLock);
 static void LockReassignOwner(LOCALLOCK *locallock, ResourceOwner parent);
 static bool UnGrantLock(LOCK *lock, LOCKMODE lockmode,
-			PROCLOCK *proclock, LockMethod lockMethodTable);
+						PROCLOCK *proclock, LockMethod lockMethodTable);
 static void CleanUpLock(LOCK *lock, PROCLOCK *proclock,
-			LockMethod lockMethodTable, uint32 hashcode,
-			bool wakeupNeeded);
+						LockMethod lockMethodTable, uint32 hashcode,
+						bool wakeupNeeded);
 static void LockRefindAndRelease(LockMethod lockMethodTable, PGPROC *proc,
-					 LOCKTAG *locktag, LOCKMODE lockmode,
-					 bool decrement_strong_lock_count);
+								 LOCKTAG *locktag, LOCKMODE lockmode,
+								 bool decrement_strong_lock_count);
 static void GetSingleProcBlockerStatusData(PGPROC *blocked_proc,
-							   BlockedProcsData *data);
+										   BlockedProcsData *data);
 
 
 /*
diff --git a/src/backend/storage/lmgr/predicate.c b/src/backend/storage/lmgr/predicate.c
index 7f607b2bf8c2..2fedbc4c15ff 100644
--- a/src/backend/storage/lmgr/predicate.c
+++ b/src/backend/storage/lmgr/predicate.c
@@ -451,39 +451,39 @@ static uint32 predicatelock_hash(const void *key, Size keysize);
 static void SummarizeOldestCommittedSxact(void);
 static Snapshot GetSafeSnapshot(Snapshot snapshot);
 static Snapshot GetSerializableTransactionSnapshotInt(Snapshot snapshot,
-									  VirtualTransactionId *sourcevxid,
-									  int sourcepid);
+													  VirtualTransactionId *sourcevxid,
+													  int sourcepid);
 static bool PredicateLockExists(const PREDICATELOCKTARGETTAG *targettag);
 static bool GetParentPredicateLockTag(const PREDICATELOCKTARGETTAG *tag,
-						  PREDICATELOCKTARGETTAG *parent);
+									  PREDICATELOCKTARGETTAG *parent);
 static bool CoarserLockCovers(const PREDICATELOCKTARGETTAG *newtargettag);
 static void RemoveScratchTarget(bool lockheld);
 static void RestoreScratchTarget(bool lockheld);
 static void RemoveTargetIfNoLongerUsed(PREDICATELOCKTARGET *target,
-						   uint32 targettaghash);
+									   uint32 targettaghash);
 static void DeleteChildTargetLocks(const PREDICATELOCKTARGETTAG *newtargettag);
 static int	MaxPredicateChildLocks(const PREDICATELOCKTARGETTAG *tag);
 static bool CheckAndPromotePredicateLockRequest(const PREDICATELOCKTARGETTAG *reqtag);
 static void DecrementParentLocks(const PREDICATELOCKTARGETTAG *targettag);
 static void CreatePredicateLock(const PREDICATELOCKTARGETTAG *targettag,
-					uint32 targettaghash,
-					SERIALIZABLEXACT *sxact);
+								uint32 targettaghash,
+								SERIALIZABLEXACT *sxact);
 static void DeleteLockTarget(PREDICATELOCKTARGET *target, uint32 targettaghash);
 static bool TransferPredicateLocksToNewTarget(PREDICATELOCKTARGETTAG oldtargettag,
-								  PREDICATELOCKTARGETTAG newtargettag,
-								  bool removeOld);
+											  PREDICATELOCKTARGETTAG newtargettag,
+											  bool removeOld);
 static void PredicateLockAcquire(const PREDICATELOCKTARGETTAG *targettag);
 static void DropAllPredicateLocksFromTable(Relation relation,
-							   bool transfer);
+										   bool transfer);
 static void SetNewSxactGlobalXmin(void);
 static void ClearOldPredicateLocks(void);
 static void ReleaseOneSerializableXact(SERIALIZABLEXACT *sxact, bool partial,
-						   bool summarize);
+									   bool summarize);
 static bool XidIsConcurrent(TransactionId xid);
 static void CheckTargetForConflictsIn(PREDICATELOCKTARGETTAG *targettag);
 static void FlagRWConflict(SERIALIZABLEXACT *reader, SERIALIZABLEXACT *writer);
 static void OnConflict_CheckForSerializationFailure(const SERIALIZABLEXACT *reader,
-										SERIALIZABLEXACT *writer);
+													SERIALIZABLEXACT *writer);
 static void CreateLocalPredicateLockHash(void);
 static void ReleasePredicateLocksLocal(void);
 
diff --git a/src/backend/storage/smgr/md.c b/src/backend/storage/smgr/md.c
index 52ca6eeb28f2..bbcd18d52b3e 100644
--- a/src/backend/storage/smgr/md.c
+++ b/src/backend/storage/smgr/md.c
@@ -119,25 +119,25 @@ static MemoryContext MdCxt;		/* context for all MdfdVec objects */
 
 /* local routines */
 static void mdunlinkfork(RelFileNodeBackend rnode, ForkNumber forkNum,
-			 bool isRedo);
+						 bool isRedo);
 static MdfdVec *mdopen(SMgrRelation reln, ForkNumber forknum, int behavior);
 static void register_dirty_segment(SMgrRelation reln, ForkNumber forknum,
-					   MdfdVec *seg);
+								   MdfdVec *seg);
 static void register_unlink_segment(RelFileNodeBackend rnode, ForkNumber forknum,
-						BlockNumber segno);
+									BlockNumber segno);
 static void register_forget_request(RelFileNodeBackend rnode, ForkNumber forknum,
-						BlockNumber segno);
+									BlockNumber segno);
 static void _fdvec_resize(SMgrRelation reln,
-			  ForkNumber forknum,
-			  int nseg);
+						  ForkNumber forknum,
+						  int nseg);
 static char *_mdfd_segpath(SMgrRelation reln, ForkNumber forknum,
-			  BlockNumber segno);
+						   BlockNumber segno);
 static MdfdVec *_mdfd_openseg(SMgrRelation reln, ForkNumber forkno,
-			  BlockNumber segno, int oflags);
+							  BlockNumber segno, int oflags);
 static MdfdVec *_mdfd_getseg(SMgrRelation reln, ForkNumber forkno,
-			 BlockNumber blkno, bool skipFsync, int behavior);
+							 BlockNumber blkno, bool skipFsync, int behavior);
 static BlockNumber _mdnblocks(SMgrRelation reln, ForkNumber forknum,
-		   MdfdVec *seg);
+							  MdfdVec *seg);
 
 
 /*
diff --git a/src/backend/tcop/fastpath.c b/src/backend/tcop/fastpath.c
index b6d2e2ac1128..61aa1697c3e7 100644
--- a/src/backend/tcop/fastpath.c
+++ b/src/backend/tcop/fastpath.c
@@ -57,9 +57,9 @@ struct fp_info
 
 
 static int16 parse_fcall_arguments(StringInfo msgBuf, struct fp_info *fip,
-					  FunctionCallInfo fcinfo);
+								   FunctionCallInfo fcinfo);
 static int16 parse_fcall_arguments_20(StringInfo msgBuf, struct fp_info *fip,
-						 FunctionCallInfo fcinfo);
+									  FunctionCallInfo fcinfo);
 
 
 /* ----------------
diff --git a/src/backend/tcop/pquery.c b/src/backend/tcop/pquery.c
index 7f15933de2c0..d5e71e8bd74b 100644
--- a/src/backend/tcop/pquery.c
+++ b/src/backend/tcop/pquery.c
@@ -36,27 +36,27 @@ Portal		ActivePortal = NULL;
 
 
 static void ProcessQuery(PlannedStmt *plan,
-			 const char *sourceText,
-			 ParamListInfo params,
-			 QueryEnvironment *queryEnv,
-			 DestReceiver *dest,
-			 char *completionTag);
+						 const char *sourceText,
+						 ParamListInfo params,
+						 QueryEnvironment *queryEnv,
+						 DestReceiver *dest,
+						 char *completionTag);
 static void FillPortalStore(Portal portal, bool isTopLevel);
 static uint64 RunFromStore(Portal portal, ScanDirection direction, uint64 count,
-			 DestReceiver *dest);
+						   DestReceiver *dest);
 static uint64 PortalRunSelect(Portal portal, bool forward, long count,
-				DestReceiver *dest);
+							  DestReceiver *dest);
 static void PortalRunUtility(Portal portal, PlannedStmt *pstmt,
-				 bool isTopLevel, bool setHoldSnapshot,
-				 DestReceiver *dest, char *completionTag);
+							 bool isTopLevel, bool setHoldSnapshot,
+							 DestReceiver *dest, char *completionTag);
 static void PortalRunMulti(Portal portal,
-			   bool isTopLevel, bool setHoldSnapshot,
-			   DestReceiver *dest, DestReceiver *altdest,
-			   char *completionTag);
+						   bool isTopLevel, bool setHoldSnapshot,
+						   DestReceiver *dest, DestReceiver *altdest,
+						   char *completionTag);
 static uint64 DoPortalRunFetch(Portal portal,
-				 FetchDirection fdirection,
-				 long count,
-				 DestReceiver *dest);
+							   FetchDirection fdirection,
+							   long count,
+							   DestReceiver *dest);
 static void DoPortalRewind(Portal portal);
 
 
diff --git a/src/backend/tcop/utility.c b/src/backend/tcop/utility.c
index 92d0507949dd..9578b5c7619b 100644
--- a/src/backend/tcop/utility.c
+++ b/src/backend/tcop/utility.c
@@ -77,13 +77,13 @@ ProcessUtility_hook_type ProcessUtility_hook = NULL;
 
 /* local function declarations */
 static void ProcessUtilitySlow(ParseState *pstate,
-				   PlannedStmt *pstmt,
-				   const char *queryString,
-				   ProcessUtilityContext context,
-				   ParamListInfo params,
-				   QueryEnvironment *queryEnv,
-				   DestReceiver *dest,
-				   char *completionTag);
+							   PlannedStmt *pstmt,
+							   const char *queryString,
+							   ProcessUtilityContext context,
+							   ParamListInfo params,
+							   QueryEnvironment *queryEnv,
+							   DestReceiver *dest,
+							   char *completionTag);
 static void ExecDropStmt(DropStmt *stmt, bool isTopLevel);
 
 
diff --git a/src/backend/tsearch/ts_selfuncs.c b/src/backend/tsearch/ts_selfuncs.c
index 154d7eb9a1b1..ed935faead74 100644
--- a/src/backend/tsearch/ts_selfuncs.c
+++ b/src/backend/tsearch/ts_selfuncs.c
@@ -48,10 +48,10 @@ typedef struct
 
 static Selectivity tsquerysel(VariableStatData *vardata, Datum constval);
 static Selectivity mcelem_tsquery_selec(TSQuery query,
-					 Datum *mcelem, int nmcelem,
-					 float4 *numbers, int nnumbers);
+										Datum *mcelem, int nmcelem,
+										float4 *numbers, int nnumbers);
 static Selectivity tsquery_opr_selec(QueryItem *item, char *operand,
-				  TextFreq *lookup, int length, float4 minfreq);
+									 TextFreq *lookup, int length, float4 minfreq);
 static int	compare_lexeme_textfreq(const void *e1, const void *e2);
 
 #define tsquery_opr_selec_no_stats(query) \
diff --git a/src/backend/tsearch/ts_typanalyze.c b/src/backend/tsearch/ts_typanalyze.c
index 530f1ccddb04..bd33e67e3379 100644
--- a/src/backend/tsearch/ts_typanalyze.c
+++ b/src/backend/tsearch/ts_typanalyze.c
@@ -37,9 +37,9 @@ typedef struct
 } TrackItem;
 
 static void compute_tsvector_stats(VacAttrStats *stats,
-					   AnalyzeAttrFetchFunc fetchfunc,
-					   int samplerows,
-					   double totalrows);
+								   AnalyzeAttrFetchFunc fetchfunc,
+								   int samplerows,
+								   double totalrows);
 static void prune_lexemes_hashtable(HTAB *lexemes_tab, int b_current);
 static uint32 lexeme_hash(const void *key, Size keysize);
 static int	lexeme_match(const void *key1, const void *key2, Size keysize);
diff --git a/src/backend/utils/adt/acl.c b/src/backend/utils/adt/acl.c
index 83c35a4d8b32..cfd139e6e928 100644
--- a/src/backend/utils/adt/acl.c
+++ b/src/backend/utils/adt/acl.c
@@ -86,13 +86,13 @@ static const char *aclparse(const char *s, AclItem *aip);
 static bool aclitem_match(const AclItem *a1, const AclItem *a2);
 static int	aclitemComparator(const void *arg1, const void *arg2);
 static void check_circularity(const Acl *old_acl, const AclItem *mod_aip,
-				  Oid ownerId);
+							  Oid ownerId);
 static Acl *recursive_revoke(Acl *acl, Oid grantee, AclMode revoke_privs,
-				 Oid ownerId, DropBehavior behavior);
+							 Oid ownerId, DropBehavior behavior);
 
 static AclMode convert_priv_string(text *priv_type_text);
 static AclMode convert_any_priv_string(text *priv_type_text,
-						const priv_map *privileges);
+									   const priv_map *privileges);
 
 static Oid	convert_table_name(text *tablename);
 static AclMode convert_table_priv_string(text *priv_type_text);
diff --git a/src/backend/utils/adt/array_expanded.c b/src/backend/utils/adt/array_expanded.c
index 5979f15b8d2c..3df14f93900f 100644
--- a/src/backend/utils/adt/array_expanded.c
+++ b/src/backend/utils/adt/array_expanded.c
@@ -23,7 +23,7 @@
 /* "Methods" required for an expanded object */
 static Size EA_get_flat_size(ExpandedObjectHeader *eohptr);
 static void EA_flatten_into(ExpandedObjectHeader *eohptr,
-				void *result, Size allocated_size);
+							void *result, Size allocated_size);
 
 static const ExpandedObjectMethods EA_methods =
 {
@@ -33,7 +33,7 @@ static const ExpandedObjectMethods EA_methods =
 
 /* Other local functions */
 static void copy_byval_expanded_array(ExpandedArrayHeader *eah,
-						  ExpandedArrayHeader *oldeah);
+									  ExpandedArrayHeader *oldeah);
 
 
 /*
diff --git a/src/backend/utils/adt/array_selfuncs.c b/src/backend/utils/adt/array_selfuncs.c
index 870131b07388..a0ac94928509 100644
--- a/src/backend/utils/adt/array_selfuncs.c
+++ b/src/backend/utils/adt/array_selfuncs.c
@@ -39,27 +39,27 @@
 		DEFAULT_OVERLAP_SEL : DEFAULT_CONTAIN_SEL)
 
 static Selectivity calc_arraycontsel(VariableStatData *vardata, Datum constval,
-				  Oid elemtype, Oid operator);
+									 Oid elemtype, Oid operator);
 static Selectivity mcelem_array_selec(ArrayType *array,
-				   TypeCacheEntry *typentry,
-				   Datum *mcelem, int nmcelem,
-				   float4 *numbers, int nnumbers,
-				   float4 *hist, int nhist,
-				   Oid operator);
+									  TypeCacheEntry *typentry,
+									  Datum *mcelem, int nmcelem,
+									  float4 *numbers, int nnumbers,
+									  float4 *hist, int nhist,
+									  Oid operator);
 static Selectivity mcelem_array_contain_overlap_selec(Datum *mcelem, int nmcelem,
-								   float4 *numbers, int nnumbers,
-								   Datum *array_data, int nitems,
-								   Oid operator, TypeCacheEntry *typentry);
+													  float4 *numbers, int nnumbers,
+													  Datum *array_data, int nitems,
+													  Oid operator, TypeCacheEntry *typentry);
 static Selectivity mcelem_array_contained_selec(Datum *mcelem, int nmcelem,
-							 float4 *numbers, int nnumbers,
-							 Datum *array_data, int nitems,
-							 float4 *hist, int nhist,
-							 Oid operator, TypeCacheEntry *typentry);
+												float4 *numbers, int nnumbers,
+												Datum *array_data, int nitems,
+												float4 *hist, int nhist,
+												Oid operator, TypeCacheEntry *typentry);
 static float *calc_hist(const float4 *hist, int nhist, int n);
 static float *calc_distr(const float *p, int n, int m, float rest);
 static int	floor_log2(uint32 n);
 static bool find_next_mcelem(Datum *mcelem, int nmcelem, Datum value,
-				 int *index, TypeCacheEntry *typentry);
+							 int *index, TypeCacheEntry *typentry);
 static int	element_compare(const void *key1, const void *key2, void *arg);
 static int	float_compare_desc(const void *key1, const void *key2);
 
diff --git a/src/backend/utils/adt/array_typanalyze.c b/src/backend/utils/adt/array_typanalyze.c
index a03b7f7860b0..eafb94b697e3 100644
--- a/src/backend/utils/adt/array_typanalyze.c
+++ b/src/backend/utils/adt/array_typanalyze.c
@@ -81,7 +81,7 @@ typedef struct
 } DECountItem;
 
 static void compute_array_stats(VacAttrStats *stats,
-					AnalyzeAttrFetchFunc fetchfunc, int samplerows, double totalrows);
+								AnalyzeAttrFetchFunc fetchfunc, int samplerows, double totalrows);
 static void prune_element_hashtable(HTAB *elements_tab, int b_current);
 static uint32 element_hash(const void *key, Size keysize);
 static int	element_match(const void *key1, const void *key2, Size keysize);
diff --git a/src/backend/utils/adt/arrayfuncs.c b/src/backend/utils/adt/arrayfuncs.c
index 9cef018c0b4e..3ae15562465b 100644
--- a/src/backend/utils/adt/arrayfuncs.c
+++ b/src/backend/utils/adt/arrayfuncs.c
@@ -90,74 +90,74 @@ typedef struct ArrayIteratorData
 static bool array_isspace(char ch);
 static int	ArrayCount(const char *str, int *dim, char typdelim);
 static void ReadArrayStr(char *arrayStr, const char *origStr,
-			 int nitems, int ndim, int *dim,
-			 FmgrInfo *inputproc, Oid typioparam, int32 typmod,
-			 char typdelim,
-			 int typlen, bool typbyval, char typalign,
-			 Datum *values, bool *nulls,
-			 bool *hasnulls, int32 *nbytes);
+						 int nitems, int ndim, int *dim,
+						 FmgrInfo *inputproc, Oid typioparam, int32 typmod,
+						 char typdelim,
+						 int typlen, bool typbyval, char typalign,
+						 Datum *values, bool *nulls,
+						 bool *hasnulls, int32 *nbytes);
 static void ReadArrayBinary(StringInfo buf, int nitems,
-				FmgrInfo *receiveproc, Oid typioparam, int32 typmod,
-				int typlen, bool typbyval, char typalign,
-				Datum *values, bool *nulls,
-				bool *hasnulls, int32 *nbytes);
+							FmgrInfo *receiveproc, Oid typioparam, int32 typmod,
+							int typlen, bool typbyval, char typalign,
+							Datum *values, bool *nulls,
+							bool *hasnulls, int32 *nbytes);
 static Datum array_get_element_expanded(Datum arraydatum,
-						   int nSubscripts, int *indx,
-						   int arraytyplen,
-						   int elmlen, bool elmbyval, char elmalign,
-						   bool *isNull);
+										int nSubscripts, int *indx,
+										int arraytyplen,
+										int elmlen, bool elmbyval, char elmalign,
+										bool *isNull);
 static Datum array_set_element_expanded(Datum arraydatum,
-						   int nSubscripts, int *indx,
-						   Datum dataValue, bool isNull,
-						   int arraytyplen,
-						   int elmlen, bool elmbyval, char elmalign);
+										int nSubscripts, int *indx,
+										Datum dataValue, bool isNull,
+										int arraytyplen,
+										int elmlen, bool elmbyval, char elmalign);
 static bool array_get_isnull(const bits8 *nullbitmap, int offset);
 static void array_set_isnull(bits8 *nullbitmap, int offset, bool isNull);
 static Datum ArrayCast(char *value, bool byval, int len);
-static int ArrayCastAndSet(Datum src,
-				int typlen, bool typbyval, char typalign,
-				char *dest);
+static int	ArrayCastAndSet(Datum src,
+							int typlen, bool typbyval, char typalign,
+							char *dest);
 static char *array_seek(char *ptr, int offset, bits8 *nullbitmap, int nitems,
-		   int typlen, bool typbyval, char typalign);
-static int array_nelems_size(char *ptr, int offset, bits8 *nullbitmap,
-				  int nitems, int typlen, bool typbyval, char typalign);
-static int array_copy(char *destptr, int nitems,
-		   char *srcptr, int offset, bits8 *nullbitmap,
-		   int typlen, bool typbyval, char typalign);
-static int array_slice_size(char *arraydataptr, bits8 *arraynullsptr,
-				 int ndim, int *dim, int *lb,
-				 int *st, int *endp,
-				 int typlen, bool typbyval, char typalign);
+						int typlen, bool typbyval, char typalign);
+static int	array_nelems_size(char *ptr, int offset, bits8 *nullbitmap,
+							  int nitems, int typlen, bool typbyval, char typalign);
+static int	array_copy(char *destptr, int nitems,
+					   char *srcptr, int offset, bits8 *nullbitmap,
+					   int typlen, bool typbyval, char typalign);
+static int	array_slice_size(char *arraydataptr, bits8 *arraynullsptr,
+							 int ndim, int *dim, int *lb,
+							 int *st, int *endp,
+							 int typlen, bool typbyval, char typalign);
 static void array_extract_slice(ArrayType *newarray,
-					int ndim, int *dim, int *lb,
-					char *arraydataptr, bits8 *arraynullsptr,
-					int *st, int *endp,
-					int typlen, bool typbyval, char typalign);
+								int ndim, int *dim, int *lb,
+								char *arraydataptr, bits8 *arraynullsptr,
+								int *st, int *endp,
+								int typlen, bool typbyval, char typalign);
 static void array_insert_slice(ArrayType *destArray, ArrayType *origArray,
-				   ArrayType *srcArray,
-				   int ndim, int *dim, int *lb,
-				   int *st, int *endp,
-				   int typlen, bool typbyval, char typalign);
+							   ArrayType *srcArray,
+							   int ndim, int *dim, int *lb,
+							   int *st, int *endp,
+							   int typlen, bool typbyval, char typalign);
 static int	array_cmp(FunctionCallInfo fcinfo);
 static ArrayType *create_array_envelope(int ndims, int *dimv, int *lbv, int nbytes,
-					  Oid elmtype, int dataoffset);
+										Oid elmtype, int dataoffset);
 static ArrayType *array_fill_internal(ArrayType *dims, ArrayType *lbs,
-					Datum value, bool isnull, Oid elmtype,
-					FunctionCallInfo fcinfo);
+									  Datum value, bool isnull, Oid elmtype,
+									  FunctionCallInfo fcinfo);
 static ArrayType *array_replace_internal(ArrayType *array,
-					   Datum search, bool search_isnull,
-					   Datum replace, bool replace_isnull,
-					   bool remove, Oid collation,
-					   FunctionCallInfo fcinfo);
+										 Datum search, bool search_isnull,
+										 Datum replace, bool replace_isnull,
+										 bool remove, Oid collation,
+										 FunctionCallInfo fcinfo);
 static int	width_bucket_array_float8(Datum operand, ArrayType *thresholds);
-static int width_bucket_array_fixed(Datum operand,
-						 ArrayType *thresholds,
-						 Oid collation,
-						 TypeCacheEntry *typentry);
-static int width_bucket_array_variable(Datum operand,
-							ArrayType *thresholds,
-							Oid collation,
-							TypeCacheEntry *typentry);
+static int	width_bucket_array_fixed(Datum operand,
+									 ArrayType *thresholds,
+									 Oid collation,
+									 TypeCacheEntry *typentry);
+static int	width_bucket_array_variable(Datum operand,
+										ArrayType *thresholds,
+										Oid collation,
+										TypeCacheEntry *typentry);
 
 
 /*
diff --git a/src/backend/utils/adt/ascii.c b/src/backend/utils/adt/ascii.c
index 7d78aac9f899..8316d9aa0622 100644
--- a/src/backend/utils/adt/ascii.c
+++ b/src/backend/utils/adt/ascii.c
@@ -16,7 +16,7 @@
 #include "utils/builtins.h"
 
 static void pg_to_ascii(unsigned char *src, unsigned char *src_end,
-			unsigned char *dest, int enc);
+						unsigned char *dest, int enc);
 static text *encode_to_ascii(text *data, int enc);
 
 
diff --git a/src/backend/utils/adt/datetime.c b/src/backend/utils/adt/datetime.c
index 0068e71d11a1..9def318c57d3 100644
--- a/src/backend/utils/adt/datetime.c
+++ b/src/backend/utils/adt/datetime.c
@@ -32,28 +32,28 @@
 #include "utils/tzparser.h"
 
 
-static int DecodeNumber(int flen, char *field, bool haveTextMonth,
-			 int fmask, int *tmask,
-			 struct pg_tm *tm, fsec_t *fsec, bool *is2digits);
-static int DecodeNumberField(int len, char *str,
-				  int fmask, int *tmask,
-				  struct pg_tm *tm, fsec_t *fsec, bool *is2digits);
-static int DecodeTime(char *str, int fmask, int range,
-		   int *tmask, struct pg_tm *tm, fsec_t *fsec);
+static int	DecodeNumber(int flen, char *field, bool haveTextMonth,
+						 int fmask, int *tmask,
+						 struct pg_tm *tm, fsec_t *fsec, bool *is2digits);
+static int	DecodeNumberField(int len, char *str,
+							  int fmask, int *tmask,
+							  struct pg_tm *tm, fsec_t *fsec, bool *is2digits);
+static int	DecodeTime(char *str, int fmask, int range,
+					   int *tmask, struct pg_tm *tm, fsec_t *fsec);
 static const datetkn *datebsearch(const char *key, const datetkn *base, int nel);
-static int DecodeDate(char *str, int fmask, int *tmask, bool *is2digits,
-		   struct pg_tm *tm);
+static int	DecodeDate(char *str, int fmask, int *tmask, bool *is2digits,
+					   struct pg_tm *tm);
 static char *AppendSeconds(char *cp, int sec, fsec_t fsec,
-			  int precision, bool fillzeros);
+						   int precision, bool fillzeros);
 static void AdjustFractSeconds(double frac, struct pg_tm *tm, fsec_t *fsec,
-				   int scale);
+							   int scale);
 static void AdjustFractDays(double frac, struct pg_tm *tm, fsec_t *fsec,
-				int scale);
-static int DetermineTimeZoneOffsetInternal(struct pg_tm *tm, pg_tz *tzp,
-								pg_time_t *tp);
+							int scale);
+static int	DetermineTimeZoneOffsetInternal(struct pg_tm *tm, pg_tz *tzp,
+											pg_time_t *tp);
 static bool DetermineTimeZoneAbbrevOffsetInternal(pg_time_t t,
-									  const char *abbr, pg_tz *tzp,
-									  int *offset, int *isdst);
+												  const char *abbr, pg_tz *tzp,
+												  int *offset, int *isdst);
 static pg_tz *FetchDynamicTimeZone(TimeZoneAbbrevTable *tbl, const datetkn *tp);
 
 
diff --git a/src/backend/utils/adt/expandedrecord.c b/src/backend/utils/adt/expandedrecord.c
index 9971abd71f6f..166c8630267b 100644
--- a/src/backend/utils/adt/expandedrecord.c
+++ b/src/backend/utils/adt/expandedrecord.c
@@ -32,7 +32,7 @@
 /* "Methods" required for an expanded object */
 static Size ER_get_flat_size(ExpandedObjectHeader *eohptr);
 static void ER_flatten_into(ExpandedObjectHeader *eohptr,
-				void *result, Size allocated_size);
+							void *result, Size allocated_size);
 
 static const ExpandedObjectMethods ER_methods =
 {
@@ -45,10 +45,10 @@ static void ER_mc_callback(void *arg);
 static MemoryContext get_short_term_cxt(ExpandedRecordHeader *erh);
 static void build_dummy_expanded_header(ExpandedRecordHeader *main_erh);
 static pg_noinline void check_domain_for_new_field(ExpandedRecordHeader *erh,
-						   int fnumber,
-						   Datum newValue, bool isnull);
+												   int fnumber,
+												   Datum newValue, bool isnull);
 static pg_noinline void check_domain_for_new_tuple(ExpandedRecordHeader *erh,
-						   HeapTuple tuple);
+												   HeapTuple tuple);
 
 
 /*
diff --git a/src/backend/utils/adt/formatting.c b/src/backend/utils/adt/formatting.c
index 3a6a878ffac7..206576d4bd38 100644
--- a/src/backend/utils/adt/formatting.c
+++ b/src/backend/utils/adt/formatting.c
@@ -968,15 +968,15 @@ typedef struct NUMProc
  * ----------
  */
 static const KeyWord *index_seq_search(const char *str, const KeyWord *kw,
-				 const int *index);
+									   const int *index);
 static const KeySuffix *suff_search(const char *str, const KeySuffix *suf, int type);
 static bool is_separator_char(const char *str);
 static void NUMDesc_prepare(NUMDesc *num, FormatNode *n);
 static void parse_format(FormatNode *node, const char *str, const KeyWord *kw,
-			 const KeySuffix *suf, const int *index, int ver, NUMDesc *Num);
+						 const KeySuffix *suf, const int *index, int ver, NUMDesc *Num);
 
 static void DCH_to_char(FormatNode *node, bool is_interval,
-			TmToChar *in, char *out, Oid collid);
+						TmToChar *in, char *out, Oid collid);
 static void DCH_from_char(FormatNode *node, char *in, TmFromChar *out);
 
 #ifdef DEBUG_TO_FROM_CHAR
@@ -995,7 +995,7 @@ static int	from_char_parse_int(int *dest, char **src, FormatNode *node);
 static int	seq_search(char *name, const char *const *array, int type, int max, int *len);
 static int	from_char_seq_search(int *dest, char **src, const char *const *array, int type, int max, FormatNode *node);
 static void do_to_timestamp(text *date_txt, text *fmt,
-				struct pg_tm *tm, fsec_t *fsec);
+							struct pg_tm *tm, fsec_t *fsec);
 static char *fill_str(char *str, int c, int max);
 static FormatNode *NUM_cache(int len, NUMDesc *Num, text *pars_str, bool *shouldFree);
 static char *int_to_roman(int number);
@@ -1004,8 +1004,8 @@ static char *get_last_relevant_decnum(char *num);
 static void NUM_numpart_from_char(NUMProc *Np, int id, int input_len);
 static void NUM_numpart_to_char(NUMProc *Np, int id);
 static char *NUM_processor(FormatNode *node, NUMDesc *Num, char *inout,
-			  char *number, int input_len, int to_char_out_pre_spaces,
-			  int sign, bool is_to_char, Oid collid);
+						   char *number, int input_len, int to_char_out_pre_spaces,
+						   int sign, bool is_to_char, Oid collid);
 static DCHCacheEntry *DCH_cache_getnew(const char *str);
 static DCHCacheEntry *DCH_cache_search(const char *str);
 static DCHCacheEntry *DCH_cache_fetch(const char *str);
diff --git a/src/backend/utils/adt/geo_ops.c b/src/backend/utils/adt/geo_ops.c
index f2be61431059..2ecc73b77248 100644
--- a/src/backend/utils/adt/geo_ops.c
+++ b/src/backend/utils/adt/geo_ops.c
@@ -131,15 +131,15 @@ static float8 dist_ppoly_internal(Point *pt, POLYGON *poly);
 
 /* Routines for encoding and decoding */
 static float8 single_decode(char *num, char **endptr_p,
-			  const char *type_name, const char *orig_string);
+							const char *type_name, const char *orig_string);
 static void single_encode(float8 x, StringInfo str);
 static void pair_decode(char *str, float8 *x, float8 *y, char **endptr_p,
-			const char *type_name, const char *orig_string);
+						const char *type_name, const char *orig_string);
 static void pair_encode(float8 x, float8 y, StringInfo str);
 static int	pair_count(char *s, char delim);
 static void path_decode(char *str, bool opentype, int npts, Point *p,
-			bool *isopen, char **endptr_p,
-			const char *type_name, const char *orig_string);
+						bool *isopen, char **endptr_p,
+						const char *type_name, const char *orig_string);
 static char *path_encode(enum path_delim path_delim, int npts, Point *pt);
 
 
diff --git a/src/backend/utils/adt/inet_cidr_ntop.c b/src/backend/utils/adt/inet_cidr_ntop.c
index a4193e2ccec3..5fdc3ca2513d 100644
--- a/src/backend/utils/adt/inet_cidr_ntop.c
+++ b/src/backend/utils/adt/inet_cidr_ntop.c
@@ -38,9 +38,9 @@ static const char rcsid[] = "Id: inet_net_ntop.c,v 1.1.2.2 2004/03/09 09:17:27 m
 #endif
 
 static char *inet_cidr_ntop_ipv4(const u_char *src, int bits,
-					char *dst, size_t size);
+								 char *dst, size_t size);
 static char *inet_cidr_ntop_ipv6(const u_char *src, int bits,
-					char *dst, size_t size);
+								 char *dst, size_t size);
 
 /*
  * char *
diff --git a/src/backend/utils/adt/json.c b/src/backend/utils/adt/json.c
index a9784d067c77..26d293709aa3 100644
--- a/src/backend/utils/adt/json.c
+++ b/src/backend/utils/adt/json.c
@@ -78,7 +78,7 @@ typedef struct JsonAggState
 static inline void json_lex(JsonLexContext *lex);
 static inline void json_lex_string(JsonLexContext *lex);
 static inline void json_lex_number(JsonLexContext *lex, char *s,
-				bool *num_err, int *total_len);
+								   bool *num_err, int *total_len);
 static inline void parse_scalar(JsonLexContext *lex, JsonSemAction *sem);
 static void parse_object_field(JsonLexContext *lex, JsonSemAction *sem);
 static void parse_object(JsonLexContext *lex, JsonSemAction *sem);
@@ -89,21 +89,21 @@ static void report_invalid_token(JsonLexContext *lex) pg_attribute_noreturn();
 static int	report_json_context(JsonLexContext *lex);
 static char *extract_mb_char(char *s);
 static void composite_to_json(Datum composite, StringInfo result,
-				  bool use_line_feeds);
+							  bool use_line_feeds);
 static void array_dim_to_json(StringInfo result, int dim, int ndims, int *dims,
-				  Datum *vals, bool *nulls, int *valcount,
-				  JsonTypeCategory tcategory, Oid outfuncoid,
-				  bool use_line_feeds);
+							  Datum *vals, bool *nulls, int *valcount,
+							  JsonTypeCategory tcategory, Oid outfuncoid,
+							  bool use_line_feeds);
 static void array_to_json_internal(Datum array, StringInfo result,
-					   bool use_line_feeds);
+								   bool use_line_feeds);
 static void json_categorize_type(Oid typoid,
-					 JsonTypeCategory *tcategory,
-					 Oid *outfuncoid);
+								 JsonTypeCategory *tcategory,
+								 Oid *outfuncoid);
 static void datum_to_json(Datum val, bool is_null, StringInfo result,
-			  JsonTypeCategory tcategory, Oid outfuncoid,
-			  bool key_scalar);
+						  JsonTypeCategory tcategory, Oid outfuncoid,
+						  bool key_scalar);
 static void add_json(Datum val, bool is_null, StringInfo result,
-		 Oid val_type, bool key_scalar);
+					 Oid val_type, bool key_scalar);
 static text *catenate_stringinfo_string(StringInfo buffer, const char *addon);
 
 /* the null action object used for pure validation */
diff --git a/src/backend/utils/adt/jsonb.c b/src/backend/utils/adt/jsonb.c
index c742172bd8cb..69f41ab4556e 100644
--- a/src/backend/utils/adt/jsonb.c
+++ b/src/backend/utils/adt/jsonb.c
@@ -71,21 +71,21 @@ static void jsonb_in_object_field_start(void *pstate, char *fname, bool isnull);
 static void jsonb_put_escaped_value(StringInfo out, JsonbValue *scalarVal);
 static void jsonb_in_scalar(void *pstate, char *token, JsonTokenType tokentype);
 static void jsonb_categorize_type(Oid typoid,
-					  JsonbTypeCategory *tcategory,
-					  Oid *outfuncoid);
+								  JsonbTypeCategory *tcategory,
+								  Oid *outfuncoid);
 static void composite_to_jsonb(Datum composite, JsonbInState *result);
 static void array_dim_to_jsonb(JsonbInState *result, int dim, int ndims, int *dims,
-				   Datum *vals, bool *nulls, int *valcount,
-				   JsonbTypeCategory tcategory, Oid outfuncoid);
+							   Datum *vals, bool *nulls, int *valcount,
+							   JsonbTypeCategory tcategory, Oid outfuncoid);
 static void array_to_jsonb_internal(Datum array, JsonbInState *result);
 static void jsonb_categorize_type(Oid typoid,
-					  JsonbTypeCategory *tcategory,
-					  Oid *outfuncoid);
+								  JsonbTypeCategory *tcategory,
+								  Oid *outfuncoid);
 static void datum_to_jsonb(Datum val, bool is_null, JsonbInState *result,
-			   JsonbTypeCategory tcategory, Oid outfuncoid,
-			   bool key_scalar);
+						   JsonbTypeCategory tcategory, Oid outfuncoid,
+						   bool key_scalar);
 static void add_jsonb(Datum val, bool is_null, JsonbInState *result,
-		  Oid val_type, bool key_scalar);
+					  Oid val_type, bool key_scalar);
 static JsonbParseState *clone_parse_state(JsonbParseState *state);
 static char *JsonbToCStringWorker(StringInfo out, JsonbContainer *in, int estimated_len, bool indent);
 static void add_indent(StringInfo out, bool indent, int level);
diff --git a/src/backend/utils/adt/jsonb_gin.c b/src/backend/utils/adt/jsonb_gin.c
index a20e44b1fea3..e8d54e70b842 100644
--- a/src/backend/utils/adt/jsonb_gin.c
+++ b/src/backend/utils/adt/jsonb_gin.c
@@ -155,7 +155,7 @@ static Datum make_text_key(char flag, const char *str, int len);
 static Datum make_scalar_key(const JsonbValue *scalarVal, bool is_key);
 
 static JsonPathGinNode *extract_jsp_bool_expr(JsonPathGinContext *cxt,
-					  JsonPathGinPath path, JsonPathItem *jsp, bool not);
+											  JsonPathGinPath path, JsonPathItem *jsp, bool not);
 
 
 /* Initialize GinEntries struct */
diff --git a/src/backend/utils/adt/jsonb_util.c b/src/backend/utils/adt/jsonb_util.c
index 1a28d75c59b7..7969f6f58435 100644
--- a/src/backend/utils/adt/jsonb_util.c
+++ b/src/backend/utils/adt/jsonb_util.c
@@ -34,8 +34,8 @@
 #define JSONB_MAX_PAIRS (Min(MaxAllocSize / sizeof(JsonbPair), JB_CMASK))
 
 static void fillJsonbValue(JsonbContainer *container, int index,
-			   char *base_addr, uint32 offset,
-			   JsonbValue *result);
+						   char *base_addr, uint32 offset,
+						   JsonbValue *result);
 static bool equalsJsonbScalarValue(JsonbValue *a, JsonbValue *b);
 static int	compareJsonbScalarValue(JsonbValue *a, JsonbValue *b);
 static Jsonb *convertToJsonb(JsonbValue *val);
@@ -59,8 +59,8 @@ static int	lengthCompareJsonbStringValue(const void *a, const void *b);
 static int	lengthCompareJsonbPair(const void *a, const void *b, void *arg);
 static void uniqueifyJsonbObject(JsonbValue *object);
 static JsonbValue *pushJsonbValueScalar(JsonbParseState **pstate,
-					 JsonbIteratorToken seq,
-					 JsonbValue *scalarVal);
+										JsonbIteratorToken seq,
+										JsonbValue *scalarVal);
 
 /*
  * Turn an in-memory JsonbValue into a Jsonb for on-disk storage.
diff --git a/src/backend/utils/adt/jsonfuncs.c b/src/backend/utils/adt/jsonfuncs.c
index dd88c09e6ddc..28bdc7243fd0 100644
--- a/src/backend/utils/adt/jsonfuncs.c
+++ b/src/backend/utils/adt/jsonfuncs.c
@@ -354,7 +354,7 @@ static void get_scalar(void *state, char *token, JsonTokenType tokentype);
 /* common worker function for json getter functions */
 static Datum get_path_all(FunctionCallInfo fcinfo, bool as_text);
 static text *get_worker(text *json, char **tpath, int *ipath, int npath,
-		   bool normalize_results);
+						bool normalize_results);
 static Datum get_jsonb_path_all(FunctionCallInfo fcinfo, bool as_text);
 
 /* semantic action functions for json_array_length */
@@ -365,7 +365,7 @@ static void alen_array_element_start(void *state, bool isnull);
 /* common workers for json{b}_each* functions */
 static Datum each_worker(FunctionCallInfo fcinfo, bool as_text);
 static Datum each_worker_jsonb(FunctionCallInfo fcinfo, const char *funcname,
-				  bool as_text);
+							   bool as_text);
 
 /* semantic action functions for json_each */
 static void each_object_field_start(void *state, char *fname, bool isnull);
@@ -375,9 +375,9 @@ static void each_scalar(void *state, char *token, JsonTokenType tokentype);
 
 /* common workers for json{b}_array_elements_* functions */
 static Datum elements_worker(FunctionCallInfo fcinfo, const char *funcname,
-				bool as_text);
+							 bool as_text);
 static Datum elements_worker_jsonb(FunctionCallInfo fcinfo, const char *funcname,
-					  bool as_text);
+								   bool as_text);
 
 /* semantic action functions for json_array_elements */
 static void elements_object_start(void *state);
@@ -421,59 +421,59 @@ static void sn_scalar(void *state, char *token, JsonTokenType tokentype);
 
 /* worker functions for populate_record, to_record, populate_recordset and to_recordset */
 static Datum populate_recordset_worker(FunctionCallInfo fcinfo, const char *funcname,
-						  bool is_json, bool have_record_arg);
+									   bool is_json, bool have_record_arg);
 static Datum populate_record_worker(FunctionCallInfo fcinfo, const char *funcname,
-					   bool is_json, bool have_record_arg);
+									bool is_json, bool have_record_arg);
 
 /* helper functions for populate_record[set] */
 static HeapTupleHeader populate_record(TupleDesc tupdesc, RecordIOData **record_p,
-				HeapTupleHeader defaultval, MemoryContext mcxt,
-				JsObject *obj);
+									   HeapTupleHeader defaultval, MemoryContext mcxt,
+									   JsObject *obj);
 static void JsValueToJsObject(JsValue *jsv, JsObject *jso);
 static Datum populate_composite(CompositeIOData *io, Oid typid,
-				   const char *colname, MemoryContext mcxt,
-				   HeapTupleHeader defaultval, JsValue *jsv, bool isnull);
+								const char *colname, MemoryContext mcxt,
+								HeapTupleHeader defaultval, JsValue *jsv, bool isnull);
 static Datum populate_scalar(ScalarIOData *io, Oid typid, int32 typmod, JsValue *jsv);
 static void prepare_column_cache(ColumnIOData *column, Oid typid, int32 typmod,
-					 MemoryContext mcxt, bool need_scalar);
+								 MemoryContext mcxt, bool need_scalar);
 static Datum populate_record_field(ColumnIOData *col, Oid typid, int32 typmod,
-					  const char *colname, MemoryContext mcxt, Datum defaultval,
-					  JsValue *jsv, bool *isnull);
+								   const char *colname, MemoryContext mcxt, Datum defaultval,
+								   JsValue *jsv, bool *isnull);
 static RecordIOData *allocate_record_info(MemoryContext mcxt, int ncolumns);
 static bool JsObjectGetField(JsObject *obj, char *field, JsValue *jsv);
 static void populate_recordset_record(PopulateRecordsetState *state, JsObject *obj);
 static void populate_array_json(PopulateArrayContext *ctx, char *json, int len);
 static void populate_array_dim_jsonb(PopulateArrayContext *ctx, JsonbValue *jbv,
-						 int ndim);
+									 int ndim);
 static void populate_array_report_expected_array(PopulateArrayContext *ctx, int ndim);
 static void populate_array_assign_ndims(PopulateArrayContext *ctx, int ndims);
 static void populate_array_check_dimension(PopulateArrayContext *ctx, int ndim);
 static void populate_array_element(PopulateArrayContext *ctx, int ndim, JsValue *jsv);
 static Datum populate_array(ArrayIOData *aio, const char *colname,
-			   MemoryContext mcxt, JsValue *jsv);
+							MemoryContext mcxt, JsValue *jsv);
 static Datum populate_domain(DomainIOData *io, Oid typid, const char *colname,
-				MemoryContext mcxt, JsValue *jsv, bool isnull);
+							 MemoryContext mcxt, JsValue *jsv, bool isnull);
 
 /* Worker that takes care of common setup for us */
 static JsonbValue *findJsonbValueFromContainerLen(JsonbContainer *container,
-							   uint32 flags,
-							   char *key,
-							   uint32 keylen);
+												  uint32 flags,
+												  char *key,
+												  uint32 keylen);
 
 /* functions supporting jsonb_delete, jsonb_set and jsonb_concat */
 static JsonbValue *IteratorConcat(JsonbIterator **it1, JsonbIterator **it2,
-			   JsonbParseState **state);
+								  JsonbParseState **state);
 static JsonbValue *setPath(JsonbIterator **it, Datum *path_elems,
-		bool *path_nulls, int path_len,
-		JsonbParseState **st, int level, Jsonb *newval,
-		int op_type);
+						   bool *path_nulls, int path_len,
+						   JsonbParseState **st, int level, Jsonb *newval,
+						   int op_type);
 static void setPathObject(JsonbIterator **it, Datum *path_elems,
-			  bool *path_nulls, int path_len, JsonbParseState **st,
-			  int level,
-			  Jsonb *newval, uint32 npairs, int op_type);
+						  bool *path_nulls, int path_len, JsonbParseState **st,
+						  int level,
+						  Jsonb *newval, uint32 npairs, int op_type);
 static void setPathArray(JsonbIterator **it, Datum *path_elems,
-			 bool *path_nulls, int path_len, JsonbParseState **st,
-			 int level, Jsonb *newval, uint32 nelems, int op_type);
+						 bool *path_nulls, int path_len, JsonbParseState **st,
+						 int level, Jsonb *newval, uint32 nelems, int op_type);
 static void addJsonbToParseState(JsonbParseState **jbps, Jsonb *jb);
 
 /* function supporting iterate_json_values */
diff --git a/src/backend/utils/adt/jsonpath.c b/src/backend/utils/adt/jsonpath.c
index b7f0b4a35e32..10cd38a5315f 100644
--- a/src/backend/utils/adt/jsonpath.c
+++ b/src/backend/utils/adt/jsonpath.c
@@ -74,13 +74,13 @@
 
 static Datum jsonPathFromCstring(char *in, int len);
 static char *jsonPathToCstring(StringInfo out, JsonPath *in,
-				  int estimated_len);
-static int flattenJsonPathParseItem(StringInfo buf, JsonPathParseItem *item,
-						 int nestingLevel, bool insideArraySubscript);
+							   int estimated_len);
+static int	flattenJsonPathParseItem(StringInfo buf, JsonPathParseItem *item,
+									 int nestingLevel, bool insideArraySubscript);
 static void alignStringInfoInt(StringInfo buf);
 static int32 reserveSpaceForItemPointer(StringInfo buf);
 static void printJsonPathItem(StringInfo buf, JsonPathItem *v, bool inKey,
-				  bool printBracketes);
+							  bool printBracketes);
 static int	operationPriority(JsonPathItemType op);
 
 
diff --git a/src/backend/utils/adt/jsonpath_exec.c b/src/backend/utils/adt/jsonpath_exec.c
index 5d70c7a6a66a..873d64b63046 100644
--- a/src/backend/utils/adt/jsonpath_exec.c
+++ b/src/backend/utils/adt/jsonpath_exec.c
@@ -172,76 +172,76 @@ typedef JsonPathBool (*JsonPathPredicateCallback) (JsonPathItem *jsp,
 typedef Numeric (*BinaryArithmFunc) (Numeric num1, Numeric num2, bool *error);
 
 static JsonPathExecResult executeJsonPath(JsonPath *path, Jsonb *vars,
-				Jsonb *json, bool throwErrors, JsonValueList *result);
+										  Jsonb *json, bool throwErrors, JsonValueList *result);
 static JsonPathExecResult executeItem(JsonPathExecContext *cxt,
-			JsonPathItem *jsp, JsonbValue *jb, JsonValueList *found);
+									  JsonPathItem *jsp, JsonbValue *jb, JsonValueList *found);
 static JsonPathExecResult executeItemOptUnwrapTarget(JsonPathExecContext *cxt,
-						   JsonPathItem *jsp, JsonbValue *jb,
-						   JsonValueList *found, bool unwrap);
+													 JsonPathItem *jsp, JsonbValue *jb,
+													 JsonValueList *found, bool unwrap);
 static JsonPathExecResult executeItemUnwrapTargetArray(JsonPathExecContext *cxt,
-							 JsonPathItem *jsp, JsonbValue *jb,
-							 JsonValueList *found, bool unwrapElements);
+													   JsonPathItem *jsp, JsonbValue *jb,
+													   JsonValueList *found, bool unwrapElements);
 static JsonPathExecResult executeNextItem(JsonPathExecContext *cxt,
-				JsonPathItem *cur, JsonPathItem *next,
-				JsonbValue *v, JsonValueList *found, bool copy);
+										  JsonPathItem *cur, JsonPathItem *next,
+										  JsonbValue *v, JsonValueList *found, bool copy);
 static JsonPathExecResult executeItemOptUnwrapResult(
-						   JsonPathExecContext *cxt, JsonPathItem *jsp, JsonbValue *jb,
-						   bool unwrap, JsonValueList *found);
+													 JsonPathExecContext *cxt, JsonPathItem *jsp, JsonbValue *jb,
+													 bool unwrap, JsonValueList *found);
 static JsonPathExecResult executeItemOptUnwrapResultNoThrow(
-								  JsonPathExecContext *cxt, JsonPathItem *jsp,
-								  JsonbValue *jb, bool unwrap, JsonValueList *found);
+															JsonPathExecContext *cxt, JsonPathItem *jsp,
+															JsonbValue *jb, bool unwrap, JsonValueList *found);
 static JsonPathBool executeBoolItem(JsonPathExecContext *cxt,
-				JsonPathItem *jsp, JsonbValue *jb, bool canHaveNext);
+									JsonPathItem *jsp, JsonbValue *jb, bool canHaveNext);
 static JsonPathBool executeNestedBoolItem(JsonPathExecContext *cxt,
-					  JsonPathItem *jsp, JsonbValue *jb);
+										  JsonPathItem *jsp, JsonbValue *jb);
 static JsonPathExecResult executeAnyItem(JsonPathExecContext *cxt,
-			   JsonPathItem *jsp, JsonbContainer *jbc, JsonValueList *found,
-			   uint32 level, uint32 first, uint32 last,
-			   bool ignoreStructuralErrors, bool unwrapNext);
+										 JsonPathItem *jsp, JsonbContainer *jbc, JsonValueList *found,
+										 uint32 level, uint32 first, uint32 last,
+										 bool ignoreStructuralErrors, bool unwrapNext);
 static JsonPathBool executePredicate(JsonPathExecContext *cxt,
-				 JsonPathItem *pred, JsonPathItem *larg, JsonPathItem *rarg,
-				 JsonbValue *jb, bool unwrapRightArg,
-				 JsonPathPredicateCallback exec, void *param);
+									 JsonPathItem *pred, JsonPathItem *larg, JsonPathItem *rarg,
+									 JsonbValue *jb, bool unwrapRightArg,
+									 JsonPathPredicateCallback exec, void *param);
 static JsonPathExecResult executeBinaryArithmExpr(JsonPathExecContext *cxt,
-						JsonPathItem *jsp, JsonbValue *jb,
-						BinaryArithmFunc func, JsonValueList *found);
+												  JsonPathItem *jsp, JsonbValue *jb,
+												  BinaryArithmFunc func, JsonValueList *found);
 static JsonPathExecResult executeUnaryArithmExpr(JsonPathExecContext *cxt,
-					   JsonPathItem *jsp, JsonbValue *jb, PGFunction func,
-					   JsonValueList *found);
+												 JsonPathItem *jsp, JsonbValue *jb, PGFunction func,
+												 JsonValueList *found);
 static JsonPathBool executeStartsWith(JsonPathItem *jsp,
-				  JsonbValue *whole, JsonbValue *initial, void *param);
+									  JsonbValue *whole, JsonbValue *initial, void *param);
 static JsonPathBool executeLikeRegex(JsonPathItem *jsp, JsonbValue *str,
-				 JsonbValue *rarg, void *param);
+									 JsonbValue *rarg, void *param);
 static JsonPathExecResult executeNumericItemMethod(JsonPathExecContext *cxt,
-						 JsonPathItem *jsp, JsonbValue *jb, bool unwrap, PGFunction func,
-						 JsonValueList *found);
+												   JsonPathItem *jsp, JsonbValue *jb, bool unwrap, PGFunction func,
+												   JsonValueList *found);
 static JsonPathExecResult executeKeyValueMethod(JsonPathExecContext *cxt,
-					  JsonPathItem *jsp, JsonbValue *jb, JsonValueList *found);
+												JsonPathItem *jsp, JsonbValue *jb, JsonValueList *found);
 static JsonPathExecResult appendBoolResult(JsonPathExecContext *cxt,
-				 JsonPathItem *jsp, JsonValueList *found, JsonPathBool res);
+										   JsonPathItem *jsp, JsonValueList *found, JsonPathBool res);
 static void getJsonPathItem(JsonPathExecContext *cxt, JsonPathItem *item,
-				JsonbValue *value);
+							JsonbValue *value);
 static void getJsonPathVariable(JsonPathExecContext *cxt,
-					JsonPathItem *variable, Jsonb *vars, JsonbValue *value);
+								JsonPathItem *variable, Jsonb *vars, JsonbValue *value);
 static int	JsonbArraySize(JsonbValue *jb);
 static JsonPathBool executeComparison(JsonPathItem *cmp, JsonbValue *lv,
-				  JsonbValue *rv, void *p);
+									  JsonbValue *rv, void *p);
 static JsonPathBool compareItems(int32 op, JsonbValue *jb1, JsonbValue *jb2);
 static int	compareNumeric(Numeric a, Numeric b);
 static JsonbValue *copyJsonbValue(JsonbValue *src);
 static JsonPathExecResult getArrayIndex(JsonPathExecContext *cxt,
-			  JsonPathItem *jsp, JsonbValue *jb, int32 *index);
+										JsonPathItem *jsp, JsonbValue *jb, int32 *index);
 static JsonBaseObjectInfo setBaseObject(JsonPathExecContext *cxt,
-			  JsonbValue *jbv, int32 id);
+										JsonbValue *jbv, int32 id);
 static void JsonValueListAppend(JsonValueList *jvl, JsonbValue *jbv);
 static int	JsonValueListLength(const JsonValueList *jvl);
 static bool JsonValueListIsEmpty(JsonValueList *jvl);
 static JsonbValue *JsonValueListHead(JsonValueList *jvl);
 static List *JsonValueListGetList(JsonValueList *jvl);
 static void JsonValueListInitIterator(const JsonValueList *jvl,
-						  JsonValueListIterator *it);
+									  JsonValueListIterator *it);
 static JsonbValue *JsonValueListNext(const JsonValueList *jvl,
-				  JsonValueListIterator *it);
+									 JsonValueListIterator *it);
 static int	JsonbType(JsonbValue *jb);
 static JsonbValue *JsonbInitBinary(JsonbValue *jbv, Jsonb *jb);
 static int	JsonbType(JsonbValue *jb);
diff --git a/src/backend/utils/adt/like.c b/src/backend/utils/adt/like.c
index f4dfc504d6e9..69beaf2ab50a 100644
--- a/src/backend/utils/adt/like.c
+++ b/src/backend/utils/adt/like.c
@@ -31,19 +31,19 @@
 #define LIKE_ABORT						(-1)
 
 
-static int SB_MatchText(const char *t, int tlen, const char *p, int plen,
-			 pg_locale_t locale, bool locale_is_c);
+static int	SB_MatchText(const char *t, int tlen, const char *p, int plen,
+						 pg_locale_t locale, bool locale_is_c);
 static text *SB_do_like_escape(text *, text *);
 
-static int MB_MatchText(const char *t, int tlen, const char *p, int plen,
-			 pg_locale_t locale, bool locale_is_c);
+static int	MB_MatchText(const char *t, int tlen, const char *p, int plen,
+						 pg_locale_t locale, bool locale_is_c);
 static text *MB_do_like_escape(text *, text *);
 
-static int UTF8_MatchText(const char *t, int tlen, const char *p, int plen,
-			   pg_locale_t locale, bool locale_is_c);
+static int	UTF8_MatchText(const char *t, int tlen, const char *p, int plen,
+						   pg_locale_t locale, bool locale_is_c);
 
-static int SB_IMatchText(const char *t, int tlen, const char *p, int plen,
-			  pg_locale_t locale, bool locale_is_c);
+static int	SB_IMatchText(const char *t, int tlen, const char *p, int plen,
+						  pg_locale_t locale, bool locale_is_c);
 
 static int	GenericMatchText(const char *s, int slen, const char *p, int plen, Oid collation);
 static int	Generic_Text_IC_like(text *str, text *pat, Oid collation);
diff --git a/src/backend/utils/adt/like_support.c b/src/backend/utils/adt/like_support.c
index e2583bc680a0..26e06348338d 100644
--- a/src/backend/utils/adt/like_support.c
+++ b/src/backend/utils/adt/like_support.c
@@ -70,36 +70,36 @@ typedef enum
 
 static Node *like_regex_support(Node *rawreq, Pattern_Type ptype);
 static List *match_pattern_prefix(Node *leftop,
-					 Node *rightop,
-					 Pattern_Type ptype,
-					 Oid expr_coll,
-					 Oid opfamily,
-					 Oid indexcollation);
+								  Node *rightop,
+								  Pattern_Type ptype,
+								  Oid expr_coll,
+								  Oid opfamily,
+								  Oid indexcollation);
 static double patternsel_common(PlannerInfo *root,
-				  Oid oprid,
-				  Oid opfuncid,
-				  List *args,
-				  int varRelid,
-				  Oid collation,
-				  Pattern_Type ptype,
-				  bool negate);
+								Oid oprid,
+								Oid opfuncid,
+								List *args,
+								int varRelid,
+								Oid collation,
+								Pattern_Type ptype,
+								bool negate);
 static Pattern_Prefix_Status pattern_fixed_prefix(Const *patt,
-					 Pattern_Type ptype,
-					 Oid collation,
-					 Const **prefix,
-					 Selectivity *rest_selec);
+												  Pattern_Type ptype,
+												  Oid collation,
+												  Const **prefix,
+												  Selectivity *rest_selec);
 static Selectivity prefix_selectivity(PlannerInfo *root,
-				   VariableStatData *vardata,
-				   Oid vartype, Oid opfamily, Const *prefixcon);
+									  VariableStatData *vardata,
+									  Oid vartype, Oid opfamily, Const *prefixcon);
 static Selectivity like_selectivity(const char *patt, int pattlen,
-				 bool case_insensitive);
+									bool case_insensitive);
 static Selectivity regex_selectivity(const char *patt, int pattlen,
-				  bool case_insensitive,
-				  int fixed_prefix_len);
-static int pattern_char_isalpha(char c, bool is_multibyte,
-					 pg_locale_t locale, bool locale_is_c);
+									 bool case_insensitive,
+									 int fixed_prefix_len);
+static int	pattern_char_isalpha(char c, bool is_multibyte,
+								 pg_locale_t locale, bool locale_is_c);
 static Const *make_greater_string(const Const *str_const, FmgrInfo *ltproc,
-					Oid collation);
+								  Oid collation);
 static Datum string_to_datum(const char *str, Oid datatype);
 static Const *string_to_const(const char *str, Oid datatype);
 static Const *string_to_bytea_const(const char *str, size_t str_len);
diff --git a/src/backend/utils/adt/network.c b/src/backend/utils/adt/network.c
index db9dfcbb7dc7..5e980cf23f0e 100644
--- a/src/backend/utils/adt/network.c
+++ b/src/backend/utils/adt/network.c
@@ -31,14 +31,14 @@
 
 static int32 network_cmp_internal(inet *a1, inet *a2);
 static List *match_network_function(Node *leftop,
-					   Node *rightop,
-					   int indexarg,
-					   Oid funcid,
-					   Oid opfamily);
+									Node *rightop,
+									int indexarg,
+									Oid funcid,
+									Oid opfamily);
 static List *match_network_subset(Node *leftop,
-					 Node *rightop,
-					 bool is_eq,
-					 Oid opfamily);
+								  Node *rightop,
+								  bool is_eq,
+								  Oid opfamily);
 static bool addressOK(unsigned char *a, int bits, int family);
 static inet *internal_inetpl(inet *ip, int64 addend);
 
diff --git a/src/backend/utils/adt/network_selfuncs.c b/src/backend/utils/adt/network_selfuncs.c
index 8268ab290055..5e0f0614ee81 100644
--- a/src/backend/utils/adt/network_selfuncs.c
+++ b/src/backend/utils/adt/network_selfuncs.c
@@ -44,33 +44,33 @@
 #define MAX_CONSIDERED_ELEMS 1024
 
 static Selectivity networkjoinsel_inner(Oid operator,
-					 VariableStatData *vardata1, VariableStatData *vardata2);
+										VariableStatData *vardata1, VariableStatData *vardata2);
 static Selectivity networkjoinsel_semi(Oid operator,
-					VariableStatData *vardata1, VariableStatData *vardata2);
+									   VariableStatData *vardata1, VariableStatData *vardata2);
 static Selectivity mcv_population(float4 *mcv_numbers, int mcv_nvalues);
 static Selectivity inet_hist_value_sel(Datum *values, int nvalues,
-					Datum constvalue, int opr_codenum);
+									   Datum constvalue, int opr_codenum);
 static Selectivity inet_mcv_join_sel(Datum *mcv1_values,
-				  float4 *mcv1_numbers, int mcv1_nvalues, Datum *mcv2_values,
-				  float4 *mcv2_numbers, int mcv2_nvalues, Oid operator);
+									 float4 *mcv1_numbers, int mcv1_nvalues, Datum *mcv2_values,
+									 float4 *mcv2_numbers, int mcv2_nvalues, Oid operator);
 static Selectivity inet_mcv_hist_sel(Datum *mcv_values, float4 *mcv_numbers,
-				  int mcv_nvalues, Datum *hist_values, int hist_nvalues,
-				  int opr_codenum);
+									 int mcv_nvalues, Datum *hist_values, int hist_nvalues,
+									 int opr_codenum);
 static Selectivity inet_hist_inclusion_join_sel(Datum *hist1_values,
-							 int hist1_nvalues,
-							 Datum *hist2_values, int hist2_nvalues,
-							 int opr_codenum);
+												int hist1_nvalues,
+												Datum *hist2_values, int hist2_nvalues,
+												int opr_codenum);
 static Selectivity inet_semi_join_sel(Datum lhs_value,
-				   bool mcv_exists, Datum *mcv_values, int mcv_nvalues,
-				   bool hist_exists, Datum *hist_values, int hist_nvalues,
-				   double hist_weight,
-				   FmgrInfo *proc, int opr_codenum);
+									  bool mcv_exists, Datum *mcv_values, int mcv_nvalues,
+									  bool hist_exists, Datum *hist_values, int hist_nvalues,
+									  double hist_weight,
+									  FmgrInfo *proc, int opr_codenum);
 static int	inet_opr_codenum(Oid operator);
 static int	inet_inclusion_cmp(inet *left, inet *right, int opr_codenum);
-static int inet_masklen_inclusion_cmp(inet *left, inet *right,
-						   int opr_codenum);
-static int inet_hist_match_divider(inet *boundary, inet *query,
-						int opr_codenum);
+static int	inet_masklen_inclusion_cmp(inet *left, inet *right,
+									   int opr_codenum);
+static int	inet_hist_match_divider(inet *boundary, inet *query,
+									int opr_codenum);
 
 /*
  * Selectivity estimation for the subnet inclusion/overlap operators
diff --git a/src/backend/utils/adt/network_spgist.c b/src/backend/utils/adt/network_spgist.c
index fe477441b629..b1e268a4143a 100644
--- a/src/backend/utils/adt/network_spgist.c
+++ b/src/backend/utils/adt/network_spgist.c
@@ -40,8 +40,8 @@
 
 
 static int	inet_spg_node_number(const inet *val, int commonbits);
-static int inet_spg_consistent_bitmap(const inet *prefix, int nkeys,
-						   ScanKey scankeys, bool leaf);
+static int	inet_spg_consistent_bitmap(const inet *prefix, int nkeys,
+									   ScanKey scankeys, bool leaf);
 
 /*
  * The SP-GiST configuration function
diff --git a/src/backend/utils/adt/numeric.c b/src/backend/utils/adt/numeric.c
index fbc2863622e3..201784bbf666 100644
--- a/src/backend/utils/adt/numeric.c
+++ b/src/backend/utils/adt/numeric.c
@@ -467,7 +467,7 @@ static void free_var(NumericVar *var);
 static void zero_var(NumericVar *var);
 
 static const char *set_var_from_str(const char *str, const char *cp,
-				 NumericVar *dest);
+									NumericVar *dest);
 static void set_var_from_num(Numeric value, NumericVar *dest);
 static void init_var_from_num(Numeric num, NumericVar *dest);
 static void set_var_from_var(const NumericVar *value, NumericVar *dest);
@@ -495,29 +495,29 @@ static int	numeric_fast_cmp(Datum x, Datum y, SortSupport ssup);
 static int	numeric_cmp_abbrev(Datum x, Datum y, SortSupport ssup);
 
 static Datum numeric_abbrev_convert_var(const NumericVar *var,
-						   NumericSortSupport *nss);
+										NumericSortSupport *nss);
 
 static int	cmp_numerics(Numeric num1, Numeric num2);
 static int	cmp_var(const NumericVar *var1, const NumericVar *var2);
-static int cmp_var_common(const NumericDigit *var1digits, int var1ndigits,
-			   int var1weight, int var1sign,
-			   const NumericDigit *var2digits, int var2ndigits,
-			   int var2weight, int var2sign);
+static int	cmp_var_common(const NumericDigit *var1digits, int var1ndigits,
+						   int var1weight, int var1sign,
+						   const NumericDigit *var2digits, int var2ndigits,
+						   int var2weight, int var2sign);
 static void add_var(const NumericVar *var1, const NumericVar *var2,
-		NumericVar *result);
+					NumericVar *result);
 static void sub_var(const NumericVar *var1, const NumericVar *var2,
-		NumericVar *result);
+					NumericVar *result);
 static void mul_var(const NumericVar *var1, const NumericVar *var2,
-		NumericVar *result,
-		int rscale);
+					NumericVar *result,
+					int rscale);
 static void div_var(const NumericVar *var1, const NumericVar *var2,
-		NumericVar *result,
-		int rscale, bool round);
+					NumericVar *result,
+					int rscale, bool round);
 static void div_var_fast(const NumericVar *var1, const NumericVar *var2,
-			 NumericVar *result, int rscale, bool round);
+						 NumericVar *result, int rscale, bool round);
 static int	select_div_scale(const NumericVar *var1, const NumericVar *var2);
 static void mod_var(const NumericVar *var1, const NumericVar *var2,
-		NumericVar *result);
+					NumericVar *result);
 static void ceil_var(const NumericVar *var, NumericVar *result);
 static void floor_var(const NumericVar *var, NumericVar *result);
 
@@ -526,26 +526,26 @@ static void exp_var(const NumericVar *arg, NumericVar *result, int rscale);
 static int	estimate_ln_dweight(const NumericVar *var);
 static void ln_var(const NumericVar *arg, NumericVar *result, int rscale);
 static void log_var(const NumericVar *base, const NumericVar *num,
-		NumericVar *result);
+					NumericVar *result);
 static void power_var(const NumericVar *base, const NumericVar *exp,
-		  NumericVar *result);
+					  NumericVar *result);
 static void power_var_int(const NumericVar *base, int exp, NumericVar *result,
-			  int rscale);
+						  int rscale);
 
 static int	cmp_abs(const NumericVar *var1, const NumericVar *var2);
-static int cmp_abs_common(const NumericDigit *var1digits, int var1ndigits,
-			   int var1weight,
-			   const NumericDigit *var2digits, int var2ndigits,
-			   int var2weight);
+static int	cmp_abs_common(const NumericDigit *var1digits, int var1ndigits,
+						   int var1weight,
+						   const NumericDigit *var2digits, int var2ndigits,
+						   int var2weight);
 static void add_abs(const NumericVar *var1, const NumericVar *var2,
-		NumericVar *result);
+					NumericVar *result);
 static void sub_abs(const NumericVar *var1, const NumericVar *var2,
-		NumericVar *result);
+					NumericVar *result);
 static void round_var(NumericVar *var, int rscale);
 static void trunc_var(NumericVar *var, int rscale);
 static void strip_var(NumericVar *var);
 static void compute_bucket(Numeric operand, Numeric bound1, Numeric bound2,
-			   const NumericVar *count_var, NumericVar *result_var);
+						   const NumericVar *count_var, NumericVar *result_var);
 
 static void accum_sum_add(NumericSumAccum *accum, const NumericVar *var1);
 static void accum_sum_rescale(NumericSumAccum *accum, const NumericVar *val);
diff --git a/src/backend/utils/adt/oracle_compat.c b/src/backend/utils/adt/oracle_compat.c
index 9d01e0be9c58..f78f5cda53e1 100644
--- a/src/backend/utils/adt/oracle_compat.c
+++ b/src/backend/utils/adt/oracle_compat.c
@@ -22,8 +22,8 @@
 
 
 static text *dotrim(const char *string, int stringlen,
-	   const char *set, int setlen,
-	   bool doltrim, bool dortrim);
+					const char *set, int setlen,
+					bool doltrim, bool dortrim);
 
 
 /********************************************************************
diff --git a/src/backend/utils/adt/rangetypes.c b/src/backend/utils/adt/rangetypes.c
index 72c450c70ee3..cb16d701d8e8 100644
--- a/src/backend/utils/adt/rangetypes.c
+++ b/src/backend/utils/adt/rangetypes.c
@@ -56,19 +56,19 @@ typedef struct RangeIOData
 
 
 static RangeIOData *get_range_io_data(FunctionCallInfo fcinfo, Oid rngtypid,
-				  IOFuncSelector func);
+									  IOFuncSelector func);
 static char range_parse_flags(const char *flags_str);
 static void range_parse(const char *input_str, char *flags, char **lbound_str,
-			char **ubound_str);
+						char **ubound_str);
 static const char *range_parse_bound(const char *string, const char *ptr,
-				  char **bound_str, bool *infinite);
+									 char **bound_str, bool *infinite);
 static char *range_deparse(char flags, const char *lbound_str,
-			  const char *ubound_str);
+						   const char *ubound_str);
 static char *range_bound_escape(const char *value);
 static Size datum_compute_size(Size sz, Datum datum, bool typbyval,
-				   char typalign, int16 typlen, char typstorage);
+							   char typalign, int16 typlen, char typstorage);
 static Pointer datum_write(Pointer ptr, Datum datum, bool typbyval,
-			char typalign, int16 typlen, char typstorage);
+						   char typalign, int16 typlen, char typstorage);
 
 
 /*
diff --git a/src/backend/utils/adt/rangetypes_gist.c b/src/backend/utils/adt/rangetypes_gist.c
index ea6c76d36472..6f93ce64dabe 100644
--- a/src/backend/utils/adt/rangetypes_gist.c
+++ b/src/backend/utils/adt/rangetypes_gist.c
@@ -135,37 +135,37 @@ typedef struct
 											 false, -1)))
 
 static RangeType *range_super_union(TypeCacheEntry *typcache, RangeType *r1,
-				  RangeType *r2);
+									RangeType *r2);
 static bool range_gist_consistent_int(TypeCacheEntry *typcache,
-						  StrategyNumber strategy, RangeType *key,
-						  Datum query);
+									  StrategyNumber strategy, RangeType *key,
+									  Datum query);
 static bool range_gist_consistent_leaf(TypeCacheEntry *typcache,
-						   StrategyNumber strategy, RangeType *key,
-						   Datum query);
+									   StrategyNumber strategy, RangeType *key,
+									   Datum query);
 static void range_gist_fallback_split(TypeCacheEntry *typcache,
-						  GistEntryVector *entryvec,
-						  GIST_SPLITVEC *v);
+									  GistEntryVector *entryvec,
+									  GIST_SPLITVEC *v);
 static void range_gist_class_split(TypeCacheEntry *typcache,
-					   GistEntryVector *entryvec,
-					   GIST_SPLITVEC *v,
-					   SplitLR *classes_groups);
+								   GistEntryVector *entryvec,
+								   GIST_SPLITVEC *v,
+								   SplitLR *classes_groups);
 static void range_gist_single_sorting_split(TypeCacheEntry *typcache,
-								GistEntryVector *entryvec,
-								GIST_SPLITVEC *v,
-								bool use_upper_bound);
+											GistEntryVector *entryvec,
+											GIST_SPLITVEC *v,
+											bool use_upper_bound);
 static void range_gist_double_sorting_split(TypeCacheEntry *typcache,
-								GistEntryVector *entryvec,
-								GIST_SPLITVEC *v);
+											GistEntryVector *entryvec,
+											GIST_SPLITVEC *v);
 static void range_gist_consider_split(ConsiderSplitContext *context,
-						  RangeBound *right_lower, int min_left_count,
-						  RangeBound *left_upper, int max_left_count);
+									  RangeBound *right_lower, int min_left_count,
+									  RangeBound *left_upper, int max_left_count);
 static int	get_gist_range_class(RangeType *range);
 static int	single_bound_cmp(const void *a, const void *b, void *arg);
 static int	interval_cmp_lower(const void *a, const void *b, void *arg);
 static int	interval_cmp_upper(const void *a, const void *b, void *arg);
 static int	common_entry_cmp(const void *i1, const void *i2);
 static float8 call_subtype_diff(TypeCacheEntry *typcache,
-				  Datum val1, Datum val2);
+								Datum val1, Datum val2);
 
 
 /* GiST query consistency check */
diff --git a/src/backend/utils/adt/rangetypes_selfuncs.c b/src/backend/utils/adt/rangetypes_selfuncs.c
index 0273f7900f61..640c7f0bc6a9 100644
--- a/src/backend/utils/adt/rangetypes_selfuncs.c
+++ b/src/backend/utils/adt/rangetypes_selfuncs.c
@@ -31,34 +31,34 @@
 #include "utils/typcache.h"
 
 static double calc_rangesel(TypeCacheEntry *typcache, VariableStatData *vardata,
-			  RangeType *constval, Oid operator);
+							RangeType *constval, Oid operator);
 static double default_range_selectivity(Oid operator);
 static double calc_hist_selectivity(TypeCacheEntry *typcache,
-					  VariableStatData *vardata, RangeType *constval,
-					  Oid operator);
+									VariableStatData *vardata, RangeType *constval,
+									Oid operator);
 static double calc_hist_selectivity_scalar(TypeCacheEntry *typcache,
-							 RangeBound *constbound,
-							 RangeBound *hist, int hist_nvalues,
-							 bool equal);
-static int rbound_bsearch(TypeCacheEntry *typcache, RangeBound *value,
-			   RangeBound *hist, int hist_length, bool equal);
+										   RangeBound *constbound,
+										   RangeBound *hist, int hist_nvalues,
+										   bool equal);
+static int	rbound_bsearch(TypeCacheEntry *typcache, RangeBound *value,
+						   RangeBound *hist, int hist_length, bool equal);
 static float8 get_position(TypeCacheEntry *typcache, RangeBound *value,
-			 RangeBound *hist1, RangeBound *hist2);
+						   RangeBound *hist1, RangeBound *hist2);
 static float8 get_len_position(double value, double hist1, double hist2);
 static float8 get_distance(TypeCacheEntry *typcache, RangeBound *bound1,
-			 RangeBound *bound2);
-static int length_hist_bsearch(Datum *length_hist_values,
-					int length_hist_nvalues, double value, bool equal);
+						   RangeBound *bound2);
+static int	length_hist_bsearch(Datum *length_hist_values,
+								int length_hist_nvalues, double value, bool equal);
 static double calc_length_hist_frac(Datum *length_hist_values,
-					  int length_hist_nvalues, double length1, double length2, bool equal);
+									int length_hist_nvalues, double length1, double length2, bool equal);
 static double calc_hist_selectivity_contained(TypeCacheEntry *typcache,
-								RangeBound *lower, RangeBound *upper,
-								RangeBound *hist_lower, int hist_nvalues,
-								Datum *length_hist_values, int length_hist_nvalues);
+											  RangeBound *lower, RangeBound *upper,
+											  RangeBound *hist_lower, int hist_nvalues,
+											  Datum *length_hist_values, int length_hist_nvalues);
 static double calc_hist_selectivity_contains(TypeCacheEntry *typcache,
-							   RangeBound *lower, RangeBound *upper,
-							   RangeBound *hist_lower, int hist_nvalues,
-							   Datum *length_hist_values, int length_hist_nvalues);
+											 RangeBound *lower, RangeBound *upper,
+											 RangeBound *hist_lower, int hist_nvalues,
+											 Datum *length_hist_values, int length_hist_nvalues);
 
 /*
  * Returns a default selectivity estimate for given operator, when we don't
diff --git a/src/backend/utils/adt/rangetypes_spgist.c b/src/backend/utils/adt/rangetypes_spgist.c
index f0ef39ea090f..8bb730ce8e5b 100644
--- a/src/backend/utils/adt/rangetypes_spgist.c
+++ b/src/backend/utils/adt/rangetypes_spgist.c
@@ -44,14 +44,14 @@
 #include "utils/rangetypes.h"
 
 static int16 getQuadrant(TypeCacheEntry *typcache, RangeType *centroid,
-			RangeType *tst);
+						 RangeType *tst);
 static int	bound_cmp(const void *a, const void *b, void *arg);
 
-static int adjacent_inner_consistent(TypeCacheEntry *typcache,
-						  RangeBound *arg, RangeBound *centroid,
-						  RangeBound *prev);
-static int adjacent_cmp_bounds(TypeCacheEntry *typcache, RangeBound *arg,
-					RangeBound *centroid);
+static int	adjacent_inner_consistent(TypeCacheEntry *typcache,
+									  RangeBound *arg, RangeBound *centroid,
+									  RangeBound *prev);
+static int	adjacent_cmp_bounds(TypeCacheEntry *typcache, RangeBound *arg,
+								RangeBound *centroid);
 
 /*
  * SP-GiST 'config' interface function.
diff --git a/src/backend/utils/adt/rangetypes_typanalyze.c b/src/backend/utils/adt/rangetypes_typanalyze.c
index 4d7474047ce4..631e42106262 100644
--- a/src/backend/utils/adt/rangetypes_typanalyze.c
+++ b/src/backend/utils/adt/rangetypes_typanalyze.c
@@ -34,7 +34,7 @@
 static int	float8_qsort_cmp(const void *a1, const void *a2);
 static int	range_bound_qsort_cmp(const void *a1, const void *a2, void *arg);
 static void compute_range_stats(VacAttrStats *stats,
-					AnalyzeAttrFetchFunc fetchfunc, int samplerows, double totalrows);
+								AnalyzeAttrFetchFunc fetchfunc, int samplerows, double totalrows);
 
 /*
  * range_typanalyze -- typanalyze function for range columns
diff --git a/src/backend/utils/adt/regexp.c b/src/backend/utils/adt/regexp.c
index 00a9a33eccc1..90a9197792e7 100644
--- a/src/backend/utils/adt/regexp.c
+++ b/src/backend/utils/adt/regexp.c
@@ -112,11 +112,11 @@ static cached_re_str re_array[MAX_CACHED_RES];	/* cached re's */
 
 /* Local functions */
 static regexp_matches_ctx *setup_regexp_matches(text *orig_str, text *pattern,
-					 pg_re_flags *flags,
-					 Oid collation,
-					 bool use_subpatterns,
-					 bool ignore_degenerate,
-					 bool fetching_unmatched);
+												pg_re_flags *flags,
+												Oid collation,
+												bool use_subpatterns,
+												bool ignore_degenerate,
+												bool fetching_unmatched);
 static ArrayType *build_regexp_match_result(regexp_matches_ctx *matchctx);
 static Datum build_regexp_split_result(regexp_matches_ctx *splitctx);
 
diff --git a/src/backend/utils/adt/regproc.c b/src/backend/utils/adt/regproc.c
index 09cf0e1abc59..17a7f6c9d830 100644
--- a/src/backend/utils/adt/regproc.c
+++ b/src/backend/utils/adt/regproc.c
@@ -43,7 +43,7 @@
 static char *format_operator_internal(Oid operator_oid, bool force_qualify);
 static char *format_procedure_internal(Oid procedure_oid, bool force_qualify);
 static void parseNameAndArgTypes(const char *string, bool allowNone,
-					 List **names, int *nargs, Oid *argtypes);
+								 List **names, int *nargs, Oid *argtypes);
 
 
 /*****************************************************************************
diff --git a/src/backend/utils/adt/ri_triggers.c b/src/backend/utils/adt/ri_triggers.c
index b9e0f5c048d3..44a6eef5bbfd 100644
--- a/src/backend/utils/adt/ri_triggers.c
+++ b/src/backend/utils/adt/ri_triggers.c
@@ -175,27 +175,27 @@ static int	ri_constraint_cache_valid_count = 0;
  * Local function prototypes
  */
 static bool ri_Check_Pk_Match(Relation pk_rel, Relation fk_rel,
-				  TupleTableSlot *oldslot,
-				  const RI_ConstraintInfo *riinfo);
+							  TupleTableSlot *oldslot,
+							  const RI_ConstraintInfo *riinfo);
 static Datum ri_restrict(TriggerData *trigdata, bool is_no_action);
 static Datum ri_set(TriggerData *trigdata, bool is_set_null);
 static void quoteOneName(char *buffer, const char *name);
 static void quoteRelationName(char *buffer, Relation rel);
 static void ri_GenerateQual(StringInfo buf,
-				const char *sep,
-				const char *leftop, Oid leftoptype,
-				Oid opoid,
-				const char *rightop, Oid rightoptype);
+							const char *sep,
+							const char *leftop, Oid leftoptype,
+							Oid opoid,
+							const char *rightop, Oid rightoptype);
 static void ri_GenerateQualCollation(StringInfo buf, Oid collation);
-static int ri_NullCheck(TupleDesc tupdesc, TupleTableSlot *slot,
-			 const RI_ConstraintInfo *riinfo, bool rel_is_pk);
+static int	ri_NullCheck(TupleDesc tupdesc, TupleTableSlot *slot,
+						 const RI_ConstraintInfo *riinfo, bool rel_is_pk);
 static void ri_BuildQueryKey(RI_QueryKey *key,
-				 const RI_ConstraintInfo *riinfo,
-				 int32 constr_queryno);
+							 const RI_ConstraintInfo *riinfo,
+							 int32 constr_queryno);
 static bool ri_KeysEqual(Relation rel, TupleTableSlot *oldslot, TupleTableSlot *newslot,
-			 const RI_ConstraintInfo *riinfo, bool rel_is_pk);
+						 const RI_ConstraintInfo *riinfo, bool rel_is_pk);
 static bool ri_AttributesEqual(Oid eq_opr, Oid typeid,
-				   Datum oldvalue, Datum newvalue);
+							   Datum oldvalue, Datum newvalue);
 
 static void ri_InitHashTables(void);
 static void InvalidateConstraintCacheCallBack(Datum arg, int cacheid, uint32 hashvalue);
@@ -204,25 +204,25 @@ static void ri_HashPreparedPlan(RI_QueryKey *key, SPIPlanPtr plan);
 static RI_CompareHashEntry *ri_HashCompareOp(Oid eq_opr, Oid typeid);
 
 static void ri_CheckTrigger(FunctionCallInfo fcinfo, const char *funcname,
-				int tgkind);
+							int tgkind);
 static const RI_ConstraintInfo *ri_FetchConstraintInfo(Trigger *trigger,
-					   Relation trig_rel, bool rel_is_pk);
+													   Relation trig_rel, bool rel_is_pk);
 static const RI_ConstraintInfo *ri_LoadConstraintInfo(Oid constraintOid);
 static SPIPlanPtr ri_PlanCheck(const char *querystr, int nargs, Oid *argtypes,
-			 RI_QueryKey *qkey, Relation fk_rel, Relation pk_rel,
-			 bool cache_plan);
+							   RI_QueryKey *qkey, Relation fk_rel, Relation pk_rel,
+							   bool cache_plan);
 static bool ri_PerformCheck(const RI_ConstraintInfo *riinfo,
-				RI_QueryKey *qkey, SPIPlanPtr qplan,
-				Relation fk_rel, Relation pk_rel,
-				TupleTableSlot *oldslot, TupleTableSlot *newslot,
-				bool detectNewRows, int expect_OK);
+							RI_QueryKey *qkey, SPIPlanPtr qplan,
+							Relation fk_rel, Relation pk_rel,
+							TupleTableSlot *oldslot, TupleTableSlot *newslot,
+							bool detectNewRows, int expect_OK);
 static void ri_ExtractValues(Relation rel, TupleTableSlot *slot,
-				 const RI_ConstraintInfo *riinfo, bool rel_is_pk,
-				 Datum *vals, char *nulls);
+							 const RI_ConstraintInfo *riinfo, bool rel_is_pk,
+							 Datum *vals, char *nulls);
 static void ri_ReportViolation(const RI_ConstraintInfo *riinfo,
-				   Relation pk_rel, Relation fk_rel,
-				   TupleTableSlot *violatorslot, TupleDesc tupdesc,
-				   int queryno, bool partgone) pg_attribute_noreturn();
+							   Relation pk_rel, Relation fk_rel,
+							   TupleTableSlot *violatorslot, TupleDesc tupdesc,
+							   int queryno, bool partgone) pg_attribute_noreturn();
 
 
 /*
diff --git a/src/backend/utils/adt/ruleutils.c b/src/backend/utils/adt/ruleutils.c
index f911511158dc..9dda4820afd3 100644
--- a/src/backend/utils/adt/ruleutils.c
+++ b/src/backend/utils/adt/ruleutils.c
@@ -311,159 +311,159 @@ bool		quote_all_identifiers = false;
  * ----------
  */
 static char *deparse_expression_pretty(Node *expr, List *dpcontext,
-						  bool forceprefix, bool showimplicit,
-						  int prettyFlags, int startIndent);
+									   bool forceprefix, bool showimplicit,
+									   int prettyFlags, int startIndent);
 static char *pg_get_viewdef_worker(Oid viewoid,
-					  int prettyFlags, int wrapColumn);
+								   int prettyFlags, int wrapColumn);
 static char *pg_get_triggerdef_worker(Oid trigid, bool pretty);
-static int decompile_column_index_array(Datum column_index_array, Oid relId,
-							 StringInfo buf);
+static int	decompile_column_index_array(Datum column_index_array, Oid relId,
+										 StringInfo buf);
 static char *pg_get_ruledef_worker(Oid ruleoid, int prettyFlags);
 static char *pg_get_indexdef_worker(Oid indexrelid, int colno,
-					   const Oid *excludeOps,
-					   bool attrsOnly, bool keysOnly,
-					   bool showTblSpc, bool inherits,
-					   int prettyFlags, bool missing_ok);
+									const Oid *excludeOps,
+									bool attrsOnly, bool keysOnly,
+									bool showTblSpc, bool inherits,
+									int prettyFlags, bool missing_ok);
 static char *pg_get_statisticsobj_worker(Oid statextid, bool missing_ok);
 static char *pg_get_partkeydef_worker(Oid relid, int prettyFlags,
-						 bool attrsOnly, bool missing_ok);
+									  bool attrsOnly, bool missing_ok);
 static char *pg_get_constraintdef_worker(Oid constraintId, bool fullCommand,
-							int prettyFlags, bool missing_ok);
+										 int prettyFlags, bool missing_ok);
 static text *pg_get_expr_worker(text *expr, Oid relid, const char *relname,
-				   int prettyFlags);
-static int print_function_arguments(StringInfo buf, HeapTuple proctup,
-						 bool print_table_args, bool print_defaults);
+								int prettyFlags);
+static int	print_function_arguments(StringInfo buf, HeapTuple proctup,
+									 bool print_table_args, bool print_defaults);
 static void print_function_rettype(StringInfo buf, HeapTuple proctup);
 static void print_function_trftypes(StringInfo buf, HeapTuple proctup);
 static void set_rtable_names(deparse_namespace *dpns, List *parent_namespaces,
-				 Bitmapset *rels_used);
+							 Bitmapset *rels_used);
 static void set_deparse_for_query(deparse_namespace *dpns, Query *query,
-					  List *parent_namespaces);
+								  List *parent_namespaces);
 static void set_simple_column_names(deparse_namespace *dpns);
 static bool has_dangerous_join_using(deparse_namespace *dpns, Node *jtnode);
 static void set_using_names(deparse_namespace *dpns, Node *jtnode,
-				List *parentUsing);
+							List *parentUsing);
 static void set_relation_column_names(deparse_namespace *dpns,
-						  RangeTblEntry *rte,
-						  deparse_columns *colinfo);
+									  RangeTblEntry *rte,
+									  deparse_columns *colinfo);
 static void set_join_column_names(deparse_namespace *dpns, RangeTblEntry *rte,
-					  deparse_columns *colinfo);
+								  deparse_columns *colinfo);
 static bool colname_is_unique(const char *colname, deparse_namespace *dpns,
-				  deparse_columns *colinfo);
+							  deparse_columns *colinfo);
 static char *make_colname_unique(char *colname, deparse_namespace *dpns,
-					deparse_columns *colinfo);
+								 deparse_columns *colinfo);
 static void expand_colnames_array_to(deparse_columns *colinfo, int n);
 static void identify_join_columns(JoinExpr *j, RangeTblEntry *jrte,
-					  deparse_columns *colinfo);
+								  deparse_columns *colinfo);
 static void flatten_join_using_qual(Node *qual,
-						List **leftvars, List **rightvars);
+									List **leftvars, List **rightvars);
 static char *get_rtable_name(int rtindex, deparse_context *context);
 static void set_deparse_planstate(deparse_namespace *dpns, PlanState *ps);
 static void push_child_plan(deparse_namespace *dpns, PlanState *ps,
-				deparse_namespace *save_dpns);
+							deparse_namespace *save_dpns);
 static void pop_child_plan(deparse_namespace *dpns,
-			   deparse_namespace *save_dpns);
+						   deparse_namespace *save_dpns);
 static void push_ancestor_plan(deparse_namespace *dpns, ListCell *ancestor_cell,
-				   deparse_namespace *save_dpns);
+							   deparse_namespace *save_dpns);
 static void pop_ancestor_plan(deparse_namespace *dpns,
-				  deparse_namespace *save_dpns);
+							  deparse_namespace *save_dpns);
 static void make_ruledef(StringInfo buf, HeapTuple ruletup, TupleDesc rulettc,
-			 int prettyFlags);
+						 int prettyFlags);
 static void make_viewdef(StringInfo buf, HeapTuple ruletup, TupleDesc rulettc,
-			 int prettyFlags, int wrapColumn);
+						 int prettyFlags, int wrapColumn);
 static void get_query_def(Query *query, StringInfo buf, List *parentnamespace,
-			  TupleDesc resultDesc,
-			  int prettyFlags, int wrapColumn, int startIndent);
+						  TupleDesc resultDesc,
+						  int prettyFlags, int wrapColumn, int startIndent);
 static void get_values_def(List *values_lists, deparse_context *context);
 static void get_with_clause(Query *query, deparse_context *context);
 static void get_select_query_def(Query *query, deparse_context *context,
-					 TupleDesc resultDesc);
+								 TupleDesc resultDesc);
 static void get_insert_query_def(Query *query, deparse_context *context);
 static void get_update_query_def(Query *query, deparse_context *context);
 static void get_update_query_targetlist_def(Query *query, List *targetList,
-								deparse_context *context,
-								RangeTblEntry *rte);
+											deparse_context *context,
+											RangeTblEntry *rte);
 static void get_delete_query_def(Query *query, deparse_context *context);
 static void get_utility_query_def(Query *query, deparse_context *context);
 static void get_basic_select_query(Query *query, deparse_context *context,
-					   TupleDesc resultDesc);
+								   TupleDesc resultDesc);
 static void get_target_list(List *targetList, deparse_context *context,
-				TupleDesc resultDesc);
+							TupleDesc resultDesc);
 static void get_setop_query(Node *setOp, Query *query,
-				deparse_context *context,
-				TupleDesc resultDesc);
+							deparse_context *context,
+							TupleDesc resultDesc);
 static Node *get_rule_sortgroupclause(Index ref, List *tlist,
-						 bool force_colno,
-						 deparse_context *context);
+									  bool force_colno,
+									  deparse_context *context);
 static void get_rule_groupingset(GroupingSet *gset, List *targetlist,
-					 bool omit_parens, deparse_context *context);
+								 bool omit_parens, deparse_context *context);
 static void get_rule_orderby(List *orderList, List *targetList,
-				 bool force_colno, deparse_context *context);
+							 bool force_colno, deparse_context *context);
 static void get_rule_windowclause(Query *query, deparse_context *context);
 static void get_rule_windowspec(WindowClause *wc, List *targetList,
-					deparse_context *context);
+								deparse_context *context);
 static char *get_variable(Var *var, int levelsup, bool istoplevel,
-			 deparse_context *context);
+						  deparse_context *context);
 static void get_special_variable(Node *node, deparse_context *context,
-					 void *private);
+								 void *private);
 static void resolve_special_varno(Node *node, deparse_context *context,
-					  void *private,
-					  void (*callback) (Node *, deparse_context *, void *));
+								  void *private,
+								  void (*callback) (Node *, deparse_context *, void *));
 static Node *find_param_referent(Param *param, deparse_context *context,
-					deparse_namespace **dpns_p, ListCell **ancestor_cell_p);
+								 deparse_namespace **dpns_p, ListCell **ancestor_cell_p);
 static void get_parameter(Param *param, deparse_context *context);
 static const char *get_simple_binary_op_name(OpExpr *expr);
 static bool isSimpleNode(Node *node, Node *parentNode, int prettyFlags);
 static void appendContextKeyword(deparse_context *context, const char *str,
-					 int indentBefore, int indentAfter, int indentPlus);
+								 int indentBefore, int indentAfter, int indentPlus);
 static void removeStringInfoSpaces(StringInfo str);
 static void get_rule_expr(Node *node, deparse_context *context,
-			  bool showimplicit);
+						  bool showimplicit);
 static void get_rule_expr_toplevel(Node *node, deparse_context *context,
-					   bool showimplicit);
+								   bool showimplicit);
 static void get_rule_expr_funccall(Node *node, deparse_context *context,
-					   bool showimplicit);
+								   bool showimplicit);
 static bool looks_like_function(Node *node);
 static void get_oper_expr(OpExpr *expr, deparse_context *context);
 static void get_func_expr(FuncExpr *expr, deparse_context *context,
-			  bool showimplicit);
+						  bool showimplicit);
 static void get_agg_expr(Aggref *aggref, deparse_context *context,
-			 Aggref *original_aggref);
+						 Aggref *original_aggref);
 static void get_agg_combine_expr(Node *node, deparse_context *context,
-					 void *private);
+								 void *private);
 static void get_windowfunc_expr(WindowFunc *wfunc, deparse_context *context);
 static void get_coercion_expr(Node *arg, deparse_context *context,
-				  Oid resulttype, int32 resulttypmod,
-				  Node *parentNode);
+							  Oid resulttype, int32 resulttypmod,
+							  Node *parentNode);
 static void get_const_expr(Const *constval, deparse_context *context,
-			   int showtype);
+						   int showtype);
 static void get_const_collation(Const *constval, deparse_context *context);
 static void simple_quote_literal(StringInfo buf, const char *val);
 static void get_sublink_expr(SubLink *sublink, deparse_context *context);
 static void get_tablefunc(TableFunc *tf, deparse_context *context,
-			  bool showimplicit);
+						  bool showimplicit);
 static void get_from_clause(Query *query, const char *prefix,
-				deparse_context *context);
+							deparse_context *context);
 static void get_from_clause_item(Node *jtnode, Query *query,
-					 deparse_context *context);
+								 deparse_context *context);
 static void get_column_alias_list(deparse_columns *colinfo,
-					  deparse_context *context);
+								  deparse_context *context);
 static void get_from_clause_coldeflist(RangeTblFunction *rtfunc,
-						   deparse_columns *colinfo,
-						   deparse_context *context);
+									   deparse_columns *colinfo,
+									   deparse_context *context);
 static void get_tablesample_def(TableSampleClause *tablesample,
-					deparse_context *context);
+								deparse_context *context);
 static void get_opclass_name(Oid opclass, Oid actual_datatype,
-				 StringInfo buf);
+							 StringInfo buf);
 static Node *processIndirection(Node *node, deparse_context *context);
 static void printSubscripts(SubscriptingRef *sbsref, deparse_context *context);
 static char *get_relation_name(Oid relid);
 static char *generate_relation_name(Oid relid, List *namespaces);
 static char *generate_qualified_relation_name(Oid relid);
 static char *generate_function_name(Oid funcid, int nargs,
-					   List *argnames, Oid *argtypes,
-					   bool has_variadic, bool *use_variadic_p,
-					   ParseExprKind special_exprkind);
+									List *argnames, Oid *argtypes,
+									bool has_variadic, bool *use_variadic_p,
+									ParseExprKind special_exprkind);
 static char *generate_operator_name(Oid operid, Oid arg1, Oid arg2);
 static void add_cast_to(StringInfo buf, Oid typid);
 static char *generate_qualified_type_name(Oid typid);
diff --git a/src/backend/utils/adt/selfuncs.c b/src/backend/utils/adt/selfuncs.c
index 65fabb7f3b42..d7e3f09f1aa9 100644
--- a/src/backend/utils/adt/selfuncs.c
+++ b/src/backend/utils/adt/selfuncs.c
@@ -149,55 +149,55 @@ get_index_stats_hook_type get_index_stats_hook = NULL;
 
 static double eqsel_internal(PG_FUNCTION_ARGS, bool negate);
 static double eqjoinsel_inner(Oid opfuncoid,
-				VariableStatData *vardata1, VariableStatData *vardata2,
-				double nd1, double nd2,
-				bool isdefault1, bool isdefault2,
-				AttStatsSlot *sslot1, AttStatsSlot *sslot2,
-				Form_pg_statistic stats1, Form_pg_statistic stats2,
-				bool have_mcvs1, bool have_mcvs2);
+							  VariableStatData *vardata1, VariableStatData *vardata2,
+							  double nd1, double nd2,
+							  bool isdefault1, bool isdefault2,
+							  AttStatsSlot *sslot1, AttStatsSlot *sslot2,
+							  Form_pg_statistic stats1, Form_pg_statistic stats2,
+							  bool have_mcvs1, bool have_mcvs2);
 static double eqjoinsel_semi(Oid opfuncoid,
-			   VariableStatData *vardata1, VariableStatData *vardata2,
-			   double nd1, double nd2,
-			   bool isdefault1, bool isdefault2,
-			   AttStatsSlot *sslot1, AttStatsSlot *sslot2,
-			   Form_pg_statistic stats1, Form_pg_statistic stats2,
-			   bool have_mcvs1, bool have_mcvs2,
-			   RelOptInfo *inner_rel);
+							 VariableStatData *vardata1, VariableStatData *vardata2,
+							 double nd1, double nd2,
+							 bool isdefault1, bool isdefault2,
+							 AttStatsSlot *sslot1, AttStatsSlot *sslot2,
+							 Form_pg_statistic stats1, Form_pg_statistic stats2,
+							 bool have_mcvs1, bool have_mcvs2,
+							 RelOptInfo *inner_rel);
 static bool estimate_multivariate_ndistinct(PlannerInfo *root,
-								RelOptInfo *rel, List **varinfos, double *ndistinct);
+											RelOptInfo *rel, List **varinfos, double *ndistinct);
 static bool convert_to_scalar(Datum value, Oid valuetypid, Oid collid,
-				  double *scaledvalue,
-				  Datum lobound, Datum hibound, Oid boundstypid,
-				  double *scaledlobound, double *scaledhibound);
+							  double *scaledvalue,
+							  Datum lobound, Datum hibound, Oid boundstypid,
+							  double *scaledlobound, double *scaledhibound);
 static double convert_numeric_to_scalar(Datum value, Oid typid, bool *failure);
 static void convert_string_to_scalar(char *value,
-						 double *scaledvalue,
-						 char *lobound,
-						 double *scaledlobound,
-						 char *hibound,
-						 double *scaledhibound);
+									 double *scaledvalue,
+									 char *lobound,
+									 double *scaledlobound,
+									 char *hibound,
+									 double *scaledhibound);
 static void convert_bytea_to_scalar(Datum value,
-						double *scaledvalue,
-						Datum lobound,
-						double *scaledlobound,
-						Datum hibound,
-						double *scaledhibound);
+									double *scaledvalue,
+									Datum lobound,
+									double *scaledlobound,
+									Datum hibound,
+									double *scaledhibound);
 static double convert_one_string_to_scalar(char *value,
-							 int rangelo, int rangehi);
+										   int rangelo, int rangehi);
 static double convert_one_bytea_to_scalar(unsigned char *value, int valuelen,
-							int rangelo, int rangehi);
+										  int rangelo, int rangehi);
 static char *convert_string_datum(Datum value, Oid typid, Oid collid,
-					 bool *failure);
+								  bool *failure);
 static double convert_timevalue_to_scalar(Datum value, Oid typid,
-							bool *failure);
+										  bool *failure);
 static void examine_simple_variable(PlannerInfo *root, Var *var,
-						VariableStatData *vardata);
+									VariableStatData *vardata);
 static bool get_variable_range(PlannerInfo *root, VariableStatData *vardata,
-				   Oid sortop, Datum *min, Datum *max);
+							   Oid sortop, Datum *min, Datum *max);
 static bool get_actual_variable_range(PlannerInfo *root,
-						  VariableStatData *vardata,
-						  Oid sortop,
-						  Datum *min, Datum *max);
+									  VariableStatData *vardata,
+									  Oid sortop,
+									  Datum *min, Datum *max);
 static RelOptInfo *find_join_input_rel(PlannerInfo *root, Relids relids);
 
 
diff --git a/src/backend/utils/adt/varbit.c b/src/backend/utils/adt/varbit.c
index fdcc62096cf7..d969a5b9c230 100644
--- a/src/backend/utils/adt/varbit.c
+++ b/src/backend/utils/adt/varbit.c
@@ -29,7 +29,7 @@
 
 static VarBit *bit_catenate(VarBit *arg1, VarBit *arg2);
 static VarBit *bitsubstring(VarBit *arg, int32 s, int32 l,
-			 bool length_not_specified);
+							bool length_not_specified);
 static VarBit *bit_overlay(VarBit *t1, VarBit *t2, int sp, int sl);
 
 
diff --git a/src/backend/utils/adt/varlena.c b/src/backend/utils/adt/varlena.c
index e166effa5e5e..0864838867f6 100644
--- a/src/backend/utils/adt/varlena.c
+++ b/src/backend/utils/adt/varlena.c
@@ -118,9 +118,9 @@ static bool varstr_abbrev_abort(int memtupcount, SortSupport ssup);
 static int32 text_length(Datum str);
 static text *text_catenate(text *t1, text *t2);
 static text *text_substring(Datum str,
-			   int32 start,
-			   int32 length,
-			   bool length_not_specified);
+							int32 start,
+							int32 length,
+							bool length_not_specified);
 static text *text_overlay(text *t1, text *t2, int sp, int sl);
 static int	text_position(text *t1, text *t2, Oid collid);
 static void text_position_setup(text *t1, text *t2, Oid collid, TextPositionState *state);
@@ -133,27 +133,27 @@ static void check_collation_set(Oid collid);
 static int	text_cmp(text *arg1, text *arg2, Oid collid);
 static bytea *bytea_catenate(bytea *t1, bytea *t2);
 static bytea *bytea_substring(Datum str,
-				int S,
-				int L,
-				bool length_not_specified);
+							  int S,
+							  int L,
+							  bool length_not_specified);
 static bytea *bytea_overlay(bytea *t1, bytea *t2, int sp, int sl);
 static void appendStringInfoText(StringInfo str, const text *t);
 static Datum text_to_array_internal(PG_FUNCTION_ARGS);
 static text *array_to_text_internal(FunctionCallInfo fcinfo, ArrayType *v,
-					   const char *fldsep, const char *null_string);
+									const char *fldsep, const char *null_string);
 static StringInfo makeStringAggState(FunctionCallInfo fcinfo);
 static bool text_format_parse_digits(const char **ptr, const char *end_ptr,
-						 int *value);
+									 int *value);
 static const char *text_format_parse_format(const char *start_ptr,
-						 const char *end_ptr,
-						 int *argpos, int *widthpos,
-						 int *flags, int *width);
+											const char *end_ptr,
+											int *argpos, int *widthpos,
+											int *flags, int *width);
 static void text_format_string_conversion(StringInfo buf, char conversion,
-							  FmgrInfo *typOutputInfo,
-							  Datum value, bool isNull,
-							  int flags, int width);
+										  FmgrInfo *typOutputInfo,
+										  Datum value, bool isNull,
+										  int flags, int width);
 static void text_format_append_string(StringInfo buf, const char *str,
-						  int flags, int width);
+									  int flags, int width);
 
 
 /*****************************************************************************
diff --git a/src/backend/utils/adt/windowfuncs.c b/src/backend/utils/adt/windowfuncs.c
index 650e140723a2..aa177df017bf 100644
--- a/src/backend/utils/adt/windowfuncs.c
+++ b/src/backend/utils/adt/windowfuncs.c
@@ -37,7 +37,7 @@ typedef struct
 
 static bool rank_up(WindowObject winobj);
 static Datum leadlag_common(FunctionCallInfo fcinfo,
-			   bool forward, bool withoffset, bool withdefault);
+							bool forward, bool withoffset, bool withdefault);
 
 
 /*
diff --git a/src/backend/utils/adt/xml.c b/src/backend/utils/adt/xml.c
index 48b8034f8d08..d43c3055f3a5 100644
--- a/src/backend/utils/adt/xml.c
+++ b/src/backend/utils/adt/xml.c
@@ -118,10 +118,10 @@ struct PgXmlErrorContext
 };
 
 static xmlParserInputPtr xmlPgEntityLoader(const char *URL, const char *ID,
-				  xmlParserCtxtPtr ctxt);
+										   xmlParserCtxtPtr ctxt);
 static void xml_errorHandler(void *data, xmlErrorPtr error);
 static void xml_ereport_by_code(int level, int sqlcode,
-					const char *msg, int errcode);
+								const char *msg, int errcode);
 static void chopStringInfoNewlines(StringInfo str);
 static void appendStringInfoLineSeparator(StringInfo str);
 
@@ -137,41 +137,41 @@ static char *xml_pstrdup(const char *string);
 #endif							/* USE_LIBXMLCONTEXT */
 
 static xmlChar *xml_text2xmlChar(text *in);
-static int parse_xml_decl(const xmlChar *str, size_t *lenp,
-			   xmlChar **version, xmlChar **encoding, int *standalone);
+static int	parse_xml_decl(const xmlChar *str, size_t *lenp,
+						   xmlChar **version, xmlChar **encoding, int *standalone);
 static bool print_xml_decl(StringInfo buf, const xmlChar *version,
-			   pg_enc encoding, int standalone);
+						   pg_enc encoding, int standalone);
 static bool xml_doctype_in_content(const xmlChar *str);
 static xmlDocPtr xml_parse(text *data, XmlOptionType xmloption_arg,
-		  bool preserve_whitespace, int encoding);
+						   bool preserve_whitespace, int encoding);
 static text *xml_xmlnodetoxmltype(xmlNodePtr cur, PgXmlErrorContext *xmlerrcxt);
-static int xml_xpathobjtoxmlarray(xmlXPathObjectPtr xpathobj,
-					   ArrayBuildState *astate,
-					   PgXmlErrorContext *xmlerrcxt);
+static int	xml_xpathobjtoxmlarray(xmlXPathObjectPtr xpathobj,
+								   ArrayBuildState *astate,
+								   PgXmlErrorContext *xmlerrcxt);
 static xmlChar *pg_xmlCharStrndup(const char *str, size_t len);
 #endif							/* USE_LIBXML */
 
 static void xmldata_root_element_start(StringInfo result, const char *eltname,
-						   const char *xmlschema, const char *targetns,
-						   bool top_level);
+									   const char *xmlschema, const char *targetns,
+									   bool top_level);
 static void xmldata_root_element_end(StringInfo result, const char *eltname);
 static StringInfo query_to_xml_internal(const char *query, char *tablename,
-					  const char *xmlschema, bool nulls, bool tableforest,
-					  const char *targetns, bool top_level);
+										const char *xmlschema, bool nulls, bool tableforest,
+										const char *targetns, bool top_level);
 static const char *map_sql_table_to_xmlschema(TupleDesc tupdesc, Oid relid,
-						   bool nulls, bool tableforest, const char *targetns);
+											  bool nulls, bool tableforest, const char *targetns);
 static const char *map_sql_schema_to_xmlschema_types(Oid nspid,
-								  List *relid_list, bool nulls,
-								  bool tableforest, const char *targetns);
+													 List *relid_list, bool nulls,
+													 bool tableforest, const char *targetns);
 static const char *map_sql_catalog_to_xmlschema_types(List *nspid_list,
-								   bool nulls, bool tableforest,
-								   const char *targetns);
+													  bool nulls, bool tableforest,
+													  const char *targetns);
 static const char *map_sql_type_to_xml_name(Oid typeoid, int typmod);
 static const char *map_sql_typecoll_to_xmlschema_types(List *tupdesc_list);
 static const char *map_sql_type_to_xmlschema_type(Oid typeoid, int typmod);
 static void SPI_sql_row_to_xmlelement(uint64 rownum, StringInfo result,
-						  char *tablename, bool nulls, bool tableforest,
-						  const char *targetns, bool top_level);
+									  char *tablename, bool nulls, bool tableforest,
+									  const char *targetns, bool top_level);
 
 /* XMLTABLE support */
 #ifdef USE_LIBXML
@@ -195,13 +195,13 @@ typedef struct XmlTableBuilderData
 static void XmlTableInitOpaque(struct TableFuncScanState *state, int natts);
 static void XmlTableSetDocument(struct TableFuncScanState *state, Datum value);
 static void XmlTableSetNamespace(struct TableFuncScanState *state, const char *name,
-					 const char *uri);
+								 const char *uri);
 static void XmlTableSetRowFilter(struct TableFuncScanState *state, const char *path);
 static void XmlTableSetColumnFilter(struct TableFuncScanState *state,
-						const char *path, int colnum);
+									const char *path, int colnum);
 static bool XmlTableFetchRow(struct TableFuncScanState *state);
 static Datum XmlTableGetValue(struct TableFuncScanState *state, int colnum,
-				 Oid typid, int32 typmod, bool *isnull);
+							  Oid typid, int32 typmod, bool *isnull);
 static void XmlTableDestroyOpaque(struct TableFuncScanState *state);
 
 const TableFuncRoutine XmlTableRoutine =
diff --git a/src/backend/utils/cache/catcache.c b/src/backend/utils/cache/catcache.c
index d05930bc4cf6..00def27881d4 100644
--- a/src/backend/utils/cache/catcache.c
+++ b/src/backend/utils/cache/catcache.c
@@ -64,24 +64,24 @@
 static CatCacheHeader *CacheHdr = NULL;
 
 static inline HeapTuple SearchCatCacheInternal(CatCache *cache,
-					   int nkeys,
-					   Datum v1, Datum v2,
-					   Datum v3, Datum v4);
+											   int nkeys,
+											   Datum v1, Datum v2,
+											   Datum v3, Datum v4);
 
 static pg_noinline HeapTuple SearchCatCacheMiss(CatCache *cache,
-				   int nkeys,
-				   uint32 hashValue,
-				   Index hashIndex,
-				   Datum v1, Datum v2,
-				   Datum v3, Datum v4);
+												int nkeys,
+												uint32 hashValue,
+												Index hashIndex,
+												Datum v1, Datum v2,
+												Datum v3, Datum v4);
 
 static uint32 CatalogCacheComputeHashValue(CatCache *cache, int nkeys,
-							 Datum v1, Datum v2, Datum v3, Datum v4);
+										   Datum v1, Datum v2, Datum v3, Datum v4);
 static uint32 CatalogCacheComputeTupleHashValue(CatCache *cache, int nkeys,
-								  HeapTuple tuple);
+												HeapTuple tuple);
 static inline bool CatalogCacheCompareTuple(const CatCache *cache, int nkeys,
-						 const Datum *cachekeys,
-						 const Datum *searchkeys);
+											const Datum *cachekeys,
+											const Datum *searchkeys);
 
 #ifdef CATCACHE_STATS
 static void CatCachePrintStats(int code, Datum arg);
@@ -90,14 +90,14 @@ static void CatCacheRemoveCTup(CatCache *cache, CatCTup *ct);
 static void CatCacheRemoveCList(CatCache *cache, CatCList *cl);
 static void CatalogCacheInitializeCache(CatCache *cache);
 static CatCTup *CatalogCacheCreateEntry(CatCache *cache, HeapTuple ntp,
-						Datum *arguments,
-						uint32 hashValue, Index hashIndex,
-						bool negative);
+										Datum *arguments,
+										uint32 hashValue, Index hashIndex,
+										bool negative);
 
 static void CatCacheFreeKeys(TupleDesc tupdesc, int nkeys, int *attnos,
-				 Datum *keys);
+							 Datum *keys);
 static void CatCacheCopyKeys(TupleDesc tupdesc, int nkeys, int *attnos,
-				 Datum *srckeys, Datum *dstkeys);
+							 Datum *srckeys, Datum *dstkeys);
 
 
 /*
diff --git a/src/backend/utils/cache/evtcache.c b/src/backend/utils/cache/evtcache.c
index 88b0969b8901..419bde567bd4 100644
--- a/src/backend/utils/cache/evtcache.c
+++ b/src/backend/utils/cache/evtcache.c
@@ -50,7 +50,7 @@ static EventTriggerCacheStateType EventTriggerCacheState = ETCS_NEEDS_REBUILD;
 
 static void BuildEventTriggerCache(void);
 static void InvalidateEventCacheCallback(Datum arg,
-							 int cacheid, uint32 hashvalue);
+										 int cacheid, uint32 hashvalue);
 static int	DecodeTextArrayToCString(Datum array, char ***cstringp);
 
 /*
diff --git a/src/backend/utils/cache/plancache.c b/src/backend/utils/cache/plancache.c
index 9851bd43d5c4..4c114439cf92 100644
--- a/src/backend/utils/cache/plancache.c
+++ b/src/backend/utils/cache/plancache.c
@@ -98,12 +98,12 @@ static dlist_head cached_expression_list = DLIST_STATIC_INIT(cached_expression_l
 
 static void ReleaseGenericPlan(CachedPlanSource *plansource);
 static List *RevalidateCachedQuery(CachedPlanSource *plansource,
-					  QueryEnvironment *queryEnv);
+								   QueryEnvironment *queryEnv);
 static bool CheckCachedPlan(CachedPlanSource *plansource);
 static CachedPlan *BuildCachedPlan(CachedPlanSource *plansource, List *qlist,
-				ParamListInfo boundParams, QueryEnvironment *queryEnv);
+								   ParamListInfo boundParams, QueryEnvironment *queryEnv);
 static bool choose_custom_plan(CachedPlanSource *plansource,
-				   ParamListInfo boundParams);
+							   ParamListInfo boundParams);
 static double cached_plan_cost(CachedPlan *plan, bool include_planner);
 static Query *QueryListGetPrimaryStmt(List *stmts);
 static void AcquireExecutorLocks(List *stmt_list, bool acquire);
diff --git a/src/backend/utils/cache/relcache.c b/src/backend/utils/cache/relcache.c
index 969884d4856c..2b992d783273 100644
--- a/src/backend/utils/cache/relcache.c
+++ b/src/backend/utils/cache/relcache.c
@@ -265,13 +265,13 @@ static void RelationFlushRelation(Relation relation);
 static void RememberToFreeTupleDescAtEOX(TupleDesc td);
 static void AtEOXact_cleanup(Relation relation, bool isCommit);
 static void AtEOSubXact_cleanup(Relation relation, bool isCommit,
-					SubTransactionId mySubid, SubTransactionId parentSubid);
+								SubTransactionId mySubid, SubTransactionId parentSubid);
 static bool load_relcache_init_file(bool shared);
 static void write_relcache_init_file(bool shared);
 static void write_item(const void *data, Size len, FILE *fp);
 
 static void formrdesc(const char *relationName, Oid relationReltype,
-		  bool isshared, int natts, const FormData_pg_attribute *attrs);
+					  bool isshared, int natts, const FormData_pg_attribute *attrs);
 
 static HeapTuple ScanPgRelation(Oid targetRelId, bool indexOK, bool force_non_historic);
 static Relation AllocateRelationDesc(Form_pg_class relp);
@@ -288,13 +288,13 @@ static int	CheckConstraintCmp(const void *a, const void *b);
 static List *insert_ordered_oid(List *list, Oid datum);
 static void InitIndexAmRoutine(Relation relation);
 static void IndexSupportInitialize(oidvector *indclass,
-					   RegProcedure *indexSupport,
-					   Oid *opFamily,
-					   Oid *opcInType,
-					   StrategyNumber maxSupportNumber,
-					   AttrNumber maxAttributeNumber);
+								   RegProcedure *indexSupport,
+								   Oid *opFamily,
+								   Oid *opcInType,
+								   StrategyNumber maxSupportNumber,
+								   AttrNumber maxAttributeNumber);
 static OpClassCacheEnt *LookupOpclassInfo(Oid operatorClassOid,
-				  StrategyNumber numSupport);
+										  StrategyNumber numSupport);
 static void RelationCacheInitFileRemoveInDir(const char *tblspcpath);
 static void unlink_initfile(const char *initfilename, int elevel);
 
diff --git a/src/backend/utils/cache/relmapper.c b/src/backend/utils/cache/relmapper.c
index 7ad0aa0b9444..3b4f21bc5482 100644
--- a/src/backend/utils/cache/relmapper.c
+++ b/src/backend/utils/cache/relmapper.c
@@ -133,13 +133,13 @@ static RelMapFile pending_local_updates;
 
 /* non-export function prototypes */
 static void apply_map_update(RelMapFile *map, Oid relationId, Oid fileNode,
-				 bool add_okay);
+							 bool add_okay);
 static void merge_map_updates(RelMapFile *map, const RelMapFile *updates,
-				  bool add_okay);
+							  bool add_okay);
 static void load_relmap_file(bool shared);
 static void write_relmap_file(bool shared, RelMapFile *newmap,
-				  bool write_wal, bool send_sinval, bool preserve_files,
-				  Oid dbid, Oid tsid, const char *dbpath);
+							  bool write_wal, bool send_sinval, bool preserve_files,
+							  Oid dbid, Oid tsid, const char *dbpath);
 static void perform_relmap_update(bool shared, const RelMapFile *updates);
 
 
diff --git a/src/backend/utils/cache/typcache.c b/src/backend/utils/cache/typcache.c
index 7857424c2c10..fc01e7876d90 100644
--- a/src/backend/utils/cache/typcache.c
+++ b/src/backend/utils/cache/typcache.c
@@ -301,10 +301,10 @@ static void load_enum_cache_data(TypeCacheEntry *tcache);
 static EnumItem *find_enumitem(TypeCacheEnumData *enumdata, Oid arg);
 static int	enum_oid_cmp(const void *left, const void *right);
 static void shared_record_typmod_registry_detach(dsm_segment *segment,
-									 Datum datum);
+												 Datum datum);
 static TupleDesc find_or_make_matching_shared_tupledesc(TupleDesc tupdesc);
 static dsa_pointer share_tupledesc(dsa_area *area, TupleDesc tupdesc,
-				uint32 typmod);
+								   uint32 typmod);
 
 
 /*
diff --git a/src/backend/utils/fmgr/dfmgr.c b/src/backend/utils/fmgr/dfmgr.c
index 456297a5313b..be684786d640 100644
--- a/src/backend/utils/fmgr/dfmgr.c
+++ b/src/backend/utils/fmgr/dfmgr.c
@@ -78,7 +78,7 @@ char	   *Dynamic_library_path;
 
 static void *internal_load_library(const char *libname);
 static void incompatible_module_error(const char *libname,
-						  const Pg_magic_struct *module_magic_data) pg_attribute_noreturn();
+									  const Pg_magic_struct *module_magic_data) pg_attribute_noreturn();
 static void internal_unload_library(const char *libname);
 static bool file_exists(const char *name);
 static char *expand_dynamic_library_name(const char *name);
diff --git a/src/backend/utils/fmgr/fmgr.c b/src/backend/utils/fmgr/fmgr.c
index f039567e2095..9b640ccd406d 100644
--- a/src/backend/utils/fmgr/fmgr.c
+++ b/src/backend/utils/fmgr/fmgr.c
@@ -53,12 +53,12 @@ static HTAB *CFuncHash = NULL;
 
 
 static void fmgr_info_cxt_security(Oid functionId, FmgrInfo *finfo, MemoryContext mcxt,
-					   bool ignore_security);
+								   bool ignore_security);
 static void fmgr_info_C_lang(Oid functionId, FmgrInfo *finfo, HeapTuple procedureTuple);
 static void fmgr_info_other_lang(Oid functionId, FmgrInfo *finfo, HeapTuple procedureTuple);
 static CFuncHashTabEntry *lookup_C_func(HeapTuple procedureTuple);
 static void record_C_func(HeapTuple procedureTuple,
-			  PGFunction user_fn, const Pg_finfo_record *inforec);
+						  PGFunction user_fn, const Pg_finfo_record *inforec);
 
 /* extern so it's callable via JIT */
 extern Datum fmgr_security_definer(PG_FUNCTION_ARGS);
diff --git a/src/backend/utils/fmgr/funcapi.c b/src/backend/utils/fmgr/funcapi.c
index a5e77a208ef9..b7fac5d29549 100644
--- a/src/backend/utils/fmgr/funcapi.c
+++ b/src/backend/utils/fmgr/funcapi.c
@@ -33,13 +33,13 @@
 
 static void shutdown_MultiFuncCall(Datum arg);
 static TypeFuncClass internal_get_result_type(Oid funcid,
-						 Node *call_expr,
-						 ReturnSetInfo *rsinfo,
-						 Oid *resultTypeId,
-						 TupleDesc *resultTupleDesc);
+											  Node *call_expr,
+											  ReturnSetInfo *rsinfo,
+											  Oid *resultTypeId,
+											  TupleDesc *resultTupleDesc);
 static bool resolve_polymorphic_tupdesc(TupleDesc tupdesc,
-							oidvector *declared_args,
-							Node *call_expr);
+										oidvector *declared_args,
+										Node *call_expr);
 static TypeFuncClass get_type_func_class(Oid typid, Oid *base_typeid);
 
 
diff --git a/src/backend/utils/mb/mbutils.c b/src/backend/utils/mb/mbutils.c
index bc2be43e2165..4630e8958679 100644
--- a/src/backend/utils/mb/mbutils.c
+++ b/src/backend/utils/mb/mbutils.c
@@ -86,7 +86,7 @@ static int	pending_client_encoding = PG_SQL_ASCII;
 
 /* Internal functions */
 static char *perform_default_encoding_conversion(const char *src,
-									int len, bool is_client_to_server);
+												 int len, bool is_client_to_server);
 static int	cliplen(const char *str, int len, int limit);
 
 
diff --git a/src/backend/utils/misc/guc.c b/src/backend/utils/misc/guc.c
index 8acfa303c5d2..0516940f7495 100644
--- a/src/backend/utils/misc/guc.c
+++ b/src/backend/utils/misc/guc.c
@@ -141,23 +141,23 @@ char	   *GUC_check_errhint_string;
 static void do_serialize(char **destptr, Size *maxbytes, const char *fmt,...) pg_attribute_printf(3, 4);
 
 static void set_config_sourcefile(const char *name, char *sourcefile,
-					  int sourceline);
+								  int sourceline);
 static bool call_bool_check_hook(struct config_bool *conf, bool *newval,
-					 void **extra, GucSource source, int elevel);
+								 void **extra, GucSource source, int elevel);
 static bool call_int_check_hook(struct config_int *conf, int *newval,
-					void **extra, GucSource source, int elevel);
+								void **extra, GucSource source, int elevel);
 static bool call_real_check_hook(struct config_real *conf, double *newval,
-					 void **extra, GucSource source, int elevel);
+								 void **extra, GucSource source, int elevel);
 static bool call_string_check_hook(struct config_string *conf, char **newval,
-					   void **extra, GucSource source, int elevel);
+								   void **extra, GucSource source, int elevel);
 static bool call_enum_check_hook(struct config_enum *conf, int *newval,
-					 void **extra, GucSource source, int elevel);
+								 void **extra, GucSource source, int elevel);
 
 static bool check_log_destination(char **newval, void **extra, GucSource source);
 static void assign_log_destination(const char *newval, void *extra);
 
 static bool check_wal_consistency_checking(char **newval, void **extra,
-							   GucSource source);
+										   GucSource source);
 static void assign_wal_consistency_checking(const char *newval, void *extra);
 
 #ifdef HAVE_SYSLOG
@@ -218,7 +218,7 @@ static bool check_default_with_oids(bool *newval, void **extra, GucSource source
 
 /* Private functions in guc-file.l that need to be called from guc.c */
 static ConfigVariable *ProcessConfigFileInternal(GucContext context,
-						  bool applySettings, int elevel);
+												 bool applySettings, int elevel);
 
 
 /*
@@ -4602,18 +4602,18 @@ static void InitializeOneGUCOption(struct config_generic *gconf);
 static void push_old_value(struct config_generic *gconf, GucAction action);
 static void ReportGUCOption(struct config_generic *record);
 static void reapply_stacked_values(struct config_generic *variable,
-					   struct config_string *pHolder,
-					   GucStack *stack,
-					   const char *curvalue,
-					   GucContext curscontext, GucSource cursource);
+								   struct config_string *pHolder,
+								   GucStack *stack,
+								   const char *curvalue,
+								   GucContext curscontext, GucSource cursource);
 static void ShowGUCConfigOption(const char *name, DestReceiver *dest);
 static void ShowAllGUCConfig(DestReceiver *dest);
 static char *_ShowOption(struct config_generic *record, bool use_units);
 static bool validate_option_array_item(const char *name, const char *value,
-						   bool skipIfNoPermissions);
+									   bool skipIfNoPermissions);
 static void write_auto_conf_file(int fd, const char *filename, ConfigVariable *head_p);
 static void replace_auto_config_value(ConfigVariable **head_p, ConfigVariable **tail_p,
-						  const char *name, const char *value);
+									  const char *name, const char *value);
 
 
 /*
diff --git a/src/backend/utils/misc/tzparser.c b/src/backend/utils/misc/tzparser.c
index 906bd87055d6..cdb9db475d0d 100644
--- a/src/backend/utils/misc/tzparser.c
+++ b/src/backend/utils/misc/tzparser.c
@@ -35,11 +35,11 @@
 
 static bool validateTzEntry(tzEntry *tzentry);
 static bool splitTzLine(const char *filename, int lineno,
-			char *line, tzEntry *tzentry);
-static int addToArray(tzEntry **base, int *arraysize, int n,
-		   tzEntry *entry, bool override);
-static int ParseTzFile(const char *filename, int depth,
-			tzEntry **base, int *arraysize, int n);
+						char *line, tzEntry *tzentry);
+static int	addToArray(tzEntry **base, int *arraysize, int n,
+					   tzEntry *entry, bool override);
+static int	ParseTzFile(const char *filename, int depth,
+						tzEntry **base, int *arraysize, int n);
 
 
 /*
diff --git a/src/backend/utils/mmgr/aset.c b/src/backend/utils/mmgr/aset.c
index 08aff333a412..6e4a3434394e 100644
--- a/src/backend/utils/mmgr/aset.c
+++ b/src/backend/utils/mmgr/aset.c
@@ -273,8 +273,8 @@ static void AllocSetDelete(MemoryContext context);
 static Size AllocSetGetChunkSpace(MemoryContext context, void *pointer);
 static bool AllocSetIsEmpty(MemoryContext context);
 static void AllocSetStats(MemoryContext context,
-			  MemoryStatsPrintFunc printfunc, void *passthru,
-			  MemoryContextCounters *totals);
+						  MemoryStatsPrintFunc printfunc, void *passthru,
+						  MemoryContextCounters *totals);
 
 #ifdef MEMORY_CONTEXT_CHECKING
 static void AllocSetCheck(MemoryContext context);
diff --git a/src/backend/utils/mmgr/dsa.c b/src/backend/utils/mmgr/dsa.c
index 1135ca91227b..4b826cdaa50a 100644
--- a/src/backend/utils/mmgr/dsa.c
+++ b/src/backend/utils/mmgr/dsa.c
@@ -382,28 +382,28 @@ struct dsa_area
 	(segment_map_ptr - &area->segment_maps[0])
 
 static void init_span(dsa_area *area, dsa_pointer span_pointer,
-		  dsa_area_pool *pool, dsa_pointer start, size_t npages,
-		  uint16 size_class);
+					  dsa_area_pool *pool, dsa_pointer start, size_t npages,
+					  uint16 size_class);
 static bool transfer_first_span(dsa_area *area, dsa_area_pool *pool,
-					int fromclass, int toclass);
+								int fromclass, int toclass);
 static inline dsa_pointer alloc_object(dsa_area *area, int size_class);
 static bool ensure_active_superblock(dsa_area *area, dsa_area_pool *pool,
-						 int size_class);
+									 int size_class);
 static dsa_segment_map *get_segment_by_index(dsa_area *area,
-					 dsa_segment_index index);
+											 dsa_segment_index index);
 static void destroy_superblock(dsa_area *area, dsa_pointer span_pointer);
 static void unlink_span(dsa_area *area, dsa_area_span *span);
 static void add_span_to_fullness_class(dsa_area *area, dsa_area_span *span,
-						   dsa_pointer span_pointer, int fclass);
+									   dsa_pointer span_pointer, int fclass);
 static void unlink_segment(dsa_area *area, dsa_segment_map *segment_map);
 static dsa_segment_map *get_best_segment(dsa_area *area, size_t npages);
 static dsa_segment_map *make_new_segment(dsa_area *area, size_t requested_pages);
 static dsa_area *create_internal(void *place, size_t size,
-				int tranche_id,
-				dsm_handle control_handle,
-				dsm_segment *control_segment);
+								 int tranche_id,
+								 dsm_handle control_handle,
+								 dsm_segment *control_segment);
 static dsa_area *attach_internal(void *place, dsm_segment *segment,
-				dsa_handle handle);
+								 dsa_handle handle);
 static void check_for_freed_segments(dsa_area *area);
 static void check_for_freed_segments_locked(dsa_area *area);
 
diff --git a/src/backend/utils/mmgr/freepage.c b/src/backend/utils/mmgr/freepage.c
index 925723500154..0c9e98973ab4 100644
--- a/src/backend/utils/mmgr/freepage.c
+++ b/src/backend/utils/mmgr/freepage.c
@@ -126,41 +126,41 @@ typedef struct FreePageBtreeSearchResult
 
 /* Helper functions */
 static void FreePageBtreeAdjustAncestorKeys(FreePageManager *fpm,
-								FreePageBtree *btp);
+											FreePageBtree *btp);
 static Size FreePageBtreeCleanup(FreePageManager *fpm);
 static FreePageBtree *FreePageBtreeFindLeftSibling(char *base,
-							 FreePageBtree *btp);
+												   FreePageBtree *btp);
 static FreePageBtree *FreePageBtreeFindRightSibling(char *base,
-							  FreePageBtree *btp);
+													FreePageBtree *btp);
 static Size FreePageBtreeFirstKey(FreePageBtree *btp);
 static FreePageBtree *FreePageBtreeGetRecycled(FreePageManager *fpm);
 static void FreePageBtreeInsertInternal(char *base, FreePageBtree *btp,
-							Size index, Size first_page, FreePageBtree *child);
+										Size index, Size first_page, FreePageBtree *child);
 static void FreePageBtreeInsertLeaf(FreePageBtree *btp, Size index,
-						Size first_page, Size npages);
+									Size first_page, Size npages);
 static void FreePageBtreeRecycle(FreePageManager *fpm, Size pageno);
 static void FreePageBtreeRemove(FreePageManager *fpm, FreePageBtree *btp,
-					Size index);
+								Size index);
 static void FreePageBtreeRemovePage(FreePageManager *fpm, FreePageBtree *btp);
 static void FreePageBtreeSearch(FreePageManager *fpm, Size first_page,
-					FreePageBtreeSearchResult *result);
+								FreePageBtreeSearchResult *result);
 static Size FreePageBtreeSearchInternal(FreePageBtree *btp, Size first_page);
 static Size FreePageBtreeSearchLeaf(FreePageBtree *btp, Size first_page);
 static FreePageBtree *FreePageBtreeSplitPage(FreePageManager *fpm,
-					   FreePageBtree *btp);
+											 FreePageBtree *btp);
 static void FreePageBtreeUpdateParentPointers(char *base, FreePageBtree *btp);
 static void FreePageManagerDumpBtree(FreePageManager *fpm, FreePageBtree *btp,
-						 FreePageBtree *parent, int level, StringInfo buf);
+									 FreePageBtree *parent, int level, StringInfo buf);
 static void FreePageManagerDumpSpans(FreePageManager *fpm,
-						 FreePageSpanLeader *span, Size expected_pages,
-						 StringInfo buf);
+									 FreePageSpanLeader *span, Size expected_pages,
+									 StringInfo buf);
 static bool FreePageManagerGetInternal(FreePageManager *fpm, Size npages,
-						   Size *first_page);
+									   Size *first_page);
 static Size FreePageManagerPutInternal(FreePageManager *fpm, Size first_page,
-						   Size npages, bool soft);
+									   Size npages, bool soft);
 static void FreePagePopSpanLeader(FreePageManager *fpm, Size pageno);
 static void FreePagePushSpanLeader(FreePageManager *fpm, Size first_page,
-					   Size npages);
+								   Size npages);
 static Size FreePageManagerLargestContiguous(FreePageManager *fpm);
 static void FreePageManagerUpdateLargest(FreePageManager *fpm);
 
diff --git a/src/backend/utils/mmgr/generation.c b/src/backend/utils/mmgr/generation.c
index 02a23694cb1f..eaacafb7be59 100644
--- a/src/backend/utils/mmgr/generation.c
+++ b/src/backend/utils/mmgr/generation.c
@@ -154,8 +154,8 @@ static void GenerationDelete(MemoryContext context);
 static Size GenerationGetChunkSpace(MemoryContext context, void *pointer);
 static bool GenerationIsEmpty(MemoryContext context);
 static void GenerationStats(MemoryContext context,
-				MemoryStatsPrintFunc printfunc, void *passthru,
-				MemoryContextCounters *totals);
+							MemoryStatsPrintFunc printfunc, void *passthru,
+							MemoryContextCounters *totals);
 
 #ifdef MEMORY_CONTEXT_CHECKING
 static void GenerationCheck(MemoryContext context);
diff --git a/src/backend/utils/mmgr/mcxt.c b/src/backend/utils/mmgr/mcxt.c
index 43c58c351b87..b07be1223698 100644
--- a/src/backend/utils/mmgr/mcxt.c
+++ b/src/backend/utils/mmgr/mcxt.c
@@ -54,10 +54,10 @@ MemoryContext PortalContext = NULL;
 
 static void MemoryContextCallResetCallbacks(MemoryContext context);
 static void MemoryContextStatsInternal(MemoryContext context, int level,
-						   bool print, int max_children,
-						   MemoryContextCounters *totals);
+									   bool print, int max_children,
+									   MemoryContextCounters *totals);
 static void MemoryContextStatsPrint(MemoryContext context, void *passthru,
-						const char *stats_string);
+									const char *stats_string);
 
 /*
  * You should not do memory allocations within a critical section, because
diff --git a/src/backend/utils/mmgr/slab.c b/src/backend/utils/mmgr/slab.c
index 33d69239d9a9..e23669fb4fbb 100644
--- a/src/backend/utils/mmgr/slab.c
+++ b/src/backend/utils/mmgr/slab.c
@@ -132,8 +132,8 @@ static void SlabDelete(MemoryContext context);
 static Size SlabGetChunkSpace(MemoryContext context, void *pointer);
 static bool SlabIsEmpty(MemoryContext context);
 static void SlabStats(MemoryContext context,
-		  MemoryStatsPrintFunc printfunc, void *passthru,
-		  MemoryContextCounters *totals);
+					  MemoryStatsPrintFunc printfunc, void *passthru,
+					  MemoryContextCounters *totals);
 #ifdef MEMORY_CONTEXT_CHECKING
 static void SlabCheck(MemoryContext context);
 #endif
diff --git a/src/backend/utils/resowner/resowner.c b/src/backend/utils/resowner/resowner.c
index 64aafef31140..7be11c48abe0 100644
--- a/src/backend/utils/resowner/resowner.c
+++ b/src/backend/utils/resowner/resowner.c
@@ -165,9 +165,9 @@ static bool ResourceArrayRemove(ResourceArray *resarr, Datum value);
 static bool ResourceArrayGetAny(ResourceArray *resarr, Datum *value);
 static void ResourceArrayFree(ResourceArray *resarr);
 static void ResourceOwnerReleaseInternal(ResourceOwner owner,
-							 ResourceReleasePhase phase,
-							 bool isCommit,
-							 bool isTopLevel);
+										 ResourceReleasePhase phase,
+										 bool isCommit,
+										 bool isTopLevel);
 static void ReleaseAuxProcessResourcesCallback(int code, Datum arg);
 static void PrintRelCacheLeakWarning(Relation rel);
 static void PrintPlanCacheLeakWarning(CachedPlan *plan);
diff --git a/src/backend/utils/sort/logtape.c b/src/backend/utils/sort/logtape.c
index f21934dbbc23..8985b9e09552 100644
--- a/src/backend/utils/sort/logtape.c
+++ b/src/backend/utils/sort/logtape.c
@@ -210,7 +210,7 @@ static void ltsReadBlock(LogicalTapeSet *lts, long blocknum, void *buffer);
 static long ltsGetFreeBlock(LogicalTapeSet *lts);
 static void ltsReleaseBlock(LogicalTapeSet *lts, long blocknum);
 static void ltsConcatWorkerTapes(LogicalTapeSet *lts, TapeShare *shared,
-					 SharedFileSet *fileset);
+								 SharedFileSet *fileset);
 
 
 /*
diff --git a/src/backend/utils/sort/sharedtuplestore.c b/src/backend/utils/sort/sharedtuplestore.c
index 08106aec567d..8df18eb2ee7c 100644
--- a/src/backend/utils/sort/sharedtuplestore.c
+++ b/src/backend/utils/sort/sharedtuplestore.c
@@ -97,7 +97,7 @@ struct SharedTuplestoreAccessor
 };
 
 static void sts_filename(char *name, SharedTuplestoreAccessor *accessor,
-			 int participant);
+						 int participant);
 
 /*
  * Return the amount of shared memory required to hold SharedTuplestore for a
diff --git a/src/backend/utils/sort/tuplesort.c b/src/backend/utils/sort/tuplesort.c
index 3eebd9ef51cf..7b8e67899e91 100644
--- a/src/backend/utils/sort/tuplesort.c
+++ b/src/backend/utils/sort/tuplesort.c
@@ -589,8 +589,8 @@ struct Sharedsort
 
 
 static Tuplesortstate *tuplesort_begin_common(int workMem,
-					   SortCoordinate coordinate,
-					   bool randomAccess);
+											  SortCoordinate coordinate,
+											  bool randomAccess);
 static void puttuple_common(Tuplesortstate *state, SortTuple *tuple);
 static bool consider_abort_common(Tuplesortstate *state);
 static void inittapes(Tuplesortstate *state, bool mergeruns);
@@ -612,36 +612,36 @@ static void reversedirection(Tuplesortstate *state);
 static unsigned int getlen(Tuplesortstate *state, int tapenum, bool eofOK);
 static void markrunend(Tuplesortstate *state, int tapenum);
 static void *readtup_alloc(Tuplesortstate *state, Size tuplen);
-static int comparetup_heap(const SortTuple *a, const SortTuple *b,
-				Tuplesortstate *state);
+static int	comparetup_heap(const SortTuple *a, const SortTuple *b,
+							Tuplesortstate *state);
 static void copytup_heap(Tuplesortstate *state, SortTuple *stup, void *tup);
 static void writetup_heap(Tuplesortstate *state, int tapenum,
-			  SortTuple *stup);
+						  SortTuple *stup);
 static void readtup_heap(Tuplesortstate *state, SortTuple *stup,
-			 int tapenum, unsigned int len);
-static int comparetup_cluster(const SortTuple *a, const SortTuple *b,
-				   Tuplesortstate *state);
+						 int tapenum, unsigned int len);
+static int	comparetup_cluster(const SortTuple *a, const SortTuple *b,
+							   Tuplesortstate *state);
 static void copytup_cluster(Tuplesortstate *state, SortTuple *stup, void *tup);
 static void writetup_cluster(Tuplesortstate *state, int tapenum,
-				 SortTuple *stup);
+							 SortTuple *stup);
 static void readtup_cluster(Tuplesortstate *state, SortTuple *stup,
-				int tapenum, unsigned int len);
-static int comparetup_index_btree(const SortTuple *a, const SortTuple *b,
-					   Tuplesortstate *state);
-static int comparetup_index_hash(const SortTuple *a, const SortTuple *b,
-					  Tuplesortstate *state);
+							int tapenum, unsigned int len);
+static int	comparetup_index_btree(const SortTuple *a, const SortTuple *b,
+								   Tuplesortstate *state);
+static int	comparetup_index_hash(const SortTuple *a, const SortTuple *b,
+								  Tuplesortstate *state);
 static void copytup_index(Tuplesortstate *state, SortTuple *stup, void *tup);
 static void writetup_index(Tuplesortstate *state, int tapenum,
-			   SortTuple *stup);
+						   SortTuple *stup);
 static void readtup_index(Tuplesortstate *state, SortTuple *stup,
-			  int tapenum, unsigned int len);
-static int comparetup_datum(const SortTuple *a, const SortTuple *b,
-				 Tuplesortstate *state);
+						  int tapenum, unsigned int len);
+static int	comparetup_datum(const SortTuple *a, const SortTuple *b,
+							 Tuplesortstate *state);
 static void copytup_datum(Tuplesortstate *state, SortTuple *stup, void *tup);
 static void writetup_datum(Tuplesortstate *state, int tapenum,
-			   SortTuple *stup);
+						   SortTuple *stup);
 static void readtup_datum(Tuplesortstate *state, SortTuple *stup,
-			  int tapenum, unsigned int len);
+						  int tapenum, unsigned int len);
 static int	worker_get_identifier(Tuplesortstate *state);
 static void worker_freeze_result_tape(Tuplesortstate *state);
 static void worker_nomergeruns(Tuplesortstate *state);
diff --git a/src/backend/utils/sort/tuplestore.c b/src/backend/utils/sort/tuplestore.c
index 0f38e7c70844..3fc7f921821c 100644
--- a/src/backend/utils/sort/tuplestore.c
+++ b/src/backend/utils/sort/tuplestore.c
@@ -234,8 +234,8 @@ struct Tuplestorestate
 
 
 static Tuplestorestate *tuplestore_begin_common(int eflags,
-						bool interXact,
-						int maxKBytes);
+												bool interXact,
+												int maxKBytes);
 static void tuplestore_puttuple_common(Tuplestorestate *state, void *tuple);
 static void dumptuples(Tuplestorestate *state);
 static unsigned int getlen(Tuplestorestate *state, bool eofOK);
diff --git a/src/backend/utils/time/snapmgr.c b/src/backend/utils/time/snapmgr.c
index 3b442935bb65..ef9fc15ac368 100644
--- a/src/backend/utils/time/snapmgr.c
+++ b/src/backend/utils/time/snapmgr.c
@@ -196,8 +196,8 @@ static ActiveSnapshotElt *OldestActiveSnapshot = NULL;
  * Currently registered Snapshots.  Ordered in a heap by xmin, so that we can
  * quickly find the one with lowest xmin, to advance our MyPgXact->xmin.
  */
-static int xmin_cmp(const pairingheap_node *a, const pairingheap_node *b,
-		 void *arg);
+static int	xmin_cmp(const pairingheap_node *a, const pairingheap_node *b,
+					 void *arg);
 
 static pairingheap RegisteredSnapshots = {&xmin_cmp, NULL, NULL};
 
diff --git a/src/bin/initdb/findtimezone.c b/src/bin/initdb/findtimezone.c
index 53b3b1b198a9..3477a08efdc7 100644
--- a/src/bin/initdb/findtimezone.c
+++ b/src/bin/initdb/findtimezone.c
@@ -159,10 +159,10 @@ struct tztry
 };
 
 static bool check_system_link_file(const char *linkname, struct tztry *tt,
-					   char *bestzonename);
+								   char *bestzonename);
 static void scan_available_timezones(char *tzdir, char *tzdirsub,
-						 struct tztry *tt,
-						 int *bestscore, char *bestzonename);
+									 struct tztry *tt,
+									 int *bestscore, char *bestzonename);
 
 
 /*
diff --git a/src/bin/initdb/initdb.c b/src/bin/initdb/initdb.c
index 9a9069e551ea..ad5cd4194a76 100644
--- a/src/bin/initdb/initdb.c
+++ b/src/bin/initdb/initdb.c
@@ -231,7 +231,7 @@ static char bin_path[MAXPGPATH];
 static char backend_exec[MAXPGPATH];
 
 static char **replace_token(char **lines,
-			  const char *token, const char *replacement);
+							const char *token, const char *replacement);
 
 #ifndef HAVE_UNIX_SOCKETS
 static char **filter_lines_with_token(char **lines, const char *token);
@@ -268,7 +268,7 @@ static char *escape_quotes(const char *src);
 static char *escape_quotes_bki(const char *src);
 static int	locale_date_order(const char *locale);
 static void check_locale_name(int category, const char *locale,
-				  char **canonname);
+							  char **canonname);
 static bool check_locale_encoding(const char *locale, int encoding);
 static void setlocales(void);
 static void usage(const char *progname);
diff --git a/src/bin/pg_basebackup/pg_basebackup.c b/src/bin/pg_basebackup/pg_basebackup.c
index 74d7c856648e..9f0bede93b90 100644
--- a/src/bin/pg_basebackup/pg_basebackup.c
+++ b/src/bin/pg_basebackup/pg_basebackup.c
@@ -152,7 +152,7 @@ static void WriteRecoveryConf(void);
 static void BaseBackup(void);
 
 static bool reached_end_position(XLogRecPtr segendpos, uint32 timeline,
-					 bool segment_finished);
+								 bool segment_finished);
 
 static const char *get_tablespace_mapping(const char *dir);
 static void tablespace_list_append(const char *arg);
diff --git a/src/bin/pg_basebackup/pg_receivewal.c b/src/bin/pg_basebackup/pg_receivewal.c
index 86859b7813f8..f39c1339d722 100644
--- a/src/bin/pg_basebackup/pg_receivewal.c
+++ b/src/bin/pg_basebackup/pg_receivewal.c
@@ -54,7 +54,7 @@ static void close_destination_dir(DIR *dest_dir, char *dest_folder);
 static XLogRecPtr FindStreamingStart(uint32 *tli);
 static void StreamLog(void);
 static bool stop_streaming(XLogRecPtr segendpos, uint32 timeline,
-			   bool segment_finished);
+						   bool segment_finished);
 
 static void
 disconnect_atexit(void)
diff --git a/src/bin/pg_basebackup/pg_recvlogical.c b/src/bin/pg_basebackup/pg_recvlogical.c
index 2e45c1464255..b029118bf604 100644
--- a/src/bin/pg_basebackup/pg_recvlogical.c
+++ b/src/bin/pg_basebackup/pg_recvlogical.c
@@ -68,7 +68,7 @@ static void usage(void);
 static void StreamLogicalLog(void);
 static bool flushAndSendFeedback(PGconn *conn, TimestampTz *now);
 static void prepareToTerminate(PGconn *conn, XLogRecPtr endpos,
-				   bool keepalive, XLogRecPtr lsn);
+							   bool keepalive, XLogRecPtr lsn);
 
 static void
 usage(void)
diff --git a/src/bin/pg_basebackup/receivelog.c b/src/bin/pg_basebackup/receivelog.c
index bf99a7dbc8e7..2fd16421aa75 100644
--- a/src/bin/pg_basebackup/receivelog.c
+++ b/src/bin/pg_basebackup/receivelog.c
@@ -39,23 +39,23 @@ static XLogRecPtr lastFlushPosition = InvalidXLogRecPtr;
 static bool still_sending = true;	/* feedback still needs to be sent? */
 
 static PGresult *HandleCopyStream(PGconn *conn, StreamCtl *stream,
-				 XLogRecPtr *stoppos);
+								  XLogRecPtr *stoppos);
 static int	CopyStreamPoll(PGconn *conn, long timeout_ms, pgsocket stop_socket);
-static int CopyStreamReceive(PGconn *conn, long timeout, pgsocket stop_socket,
-				  char **buffer);
+static int	CopyStreamReceive(PGconn *conn, long timeout, pgsocket stop_socket,
+							  char **buffer);
 static bool ProcessKeepaliveMsg(PGconn *conn, StreamCtl *stream, char *copybuf,
-					int len, XLogRecPtr blockpos, TimestampTz *last_status);
+								int len, XLogRecPtr blockpos, TimestampTz *last_status);
 static bool ProcessXLogDataMsg(PGconn *conn, StreamCtl *stream, char *copybuf, int len,
-				   XLogRecPtr *blockpos);
+							   XLogRecPtr *blockpos);
 static PGresult *HandleEndOfCopyStream(PGconn *conn, StreamCtl *stream, char *copybuf,
-					  XLogRecPtr blockpos, XLogRecPtr *stoppos);
+									   XLogRecPtr blockpos, XLogRecPtr *stoppos);
 static bool CheckCopyStreamStop(PGconn *conn, StreamCtl *stream, XLogRecPtr blockpos,
-					XLogRecPtr *stoppos);
+								XLogRecPtr *stoppos);
 static long CalculateCopyStreamSleeptime(TimestampTz now, int standby_message_timeout,
-							 TimestampTz last_status);
+										 TimestampTz last_status);
 
 static bool ReadEndOfStreamingResult(PGresult *res, XLogRecPtr *startpos,
-						 uint32 *timeline);
+									 uint32 *timeline);
 
 static bool
 mark_file_as_archived(StreamCtl *stream, const char *fname)
diff --git a/src/bin/pg_basebackup/receivelog.h b/src/bin/pg_basebackup/receivelog.h
index 9f82c16e68de..b6e2743f5545 100644
--- a/src/bin/pg_basebackup/receivelog.h
+++ b/src/bin/pg_basebackup/receivelog.h
@@ -53,6 +53,6 @@ typedef struct StreamCtl
 
 extern bool CheckServerVersionForStreaming(PGconn *conn);
 extern bool ReceiveXlogStream(PGconn *conn,
-				  StreamCtl *stream);
+							  StreamCtl *stream);
 
 #endif							/* RECEIVELOG_H */
diff --git a/src/bin/pg_basebackup/streamutil.h b/src/bin/pg_basebackup/streamutil.h
index 2fa74e71bd09..a756eee262c8 100644
--- a/src/bin/pg_basebackup/streamutil.h
+++ b/src/bin/pg_basebackup/streamutil.h
@@ -33,21 +33,21 @@ extern PGconn *GetConnection(void);
 
 /* Replication commands */
 extern bool CreateReplicationSlot(PGconn *conn, const char *slot_name,
-					  const char *plugin, bool is_temporary,
-					  bool is_physical, bool reserve_wal,
-					  bool slot_exists_ok);
+								  const char *plugin, bool is_temporary,
+								  bool is_physical, bool reserve_wal,
+								  bool slot_exists_ok);
 extern bool DropReplicationSlot(PGconn *conn, const char *slot_name);
 extern bool RunIdentifySystem(PGconn *conn, char **sysid,
-				  TimeLineID *starttli,
-				  XLogRecPtr *startpos,
-				  char **db_name);
+							  TimeLineID *starttli,
+							  XLogRecPtr *startpos,
+							  char **db_name);
 extern bool RetrieveWalSegSize(PGconn *conn);
 extern TimestampTz feGetCurrentTimestamp(void);
 extern void feTimestampDifference(TimestampTz start_time, TimestampTz stop_time,
-					  long *secs, int *microsecs);
+								  long *secs, int *microsecs);
 
 extern bool feTimestampDifferenceExceeds(TimestampTz start_time, TimestampTz stop_time,
-							 int msec);
+										 int msec);
 extern void fe_sendint64(int64 i, char *buf);
 extern int64 fe_recvint64(char *buf);
 
diff --git a/src/bin/pg_basebackup/walmethods.h b/src/bin/pg_basebackup/walmethods.h
index 247692e4b436..94d0f6bc9114 100644
--- a/src/bin/pg_basebackup/walmethods.h
+++ b/src/bin/pg_basebackup/walmethods.h
@@ -86,7 +86,7 @@ struct WalWriteMethod
  *						   not all those required for pg_receivewal)
  */
 WalWriteMethod *CreateWalDirectoryMethod(const char *basedir,
-						 int compression, bool sync);
+										 int compression, bool sync);
 WalWriteMethod *CreateWalTarMethod(const char *tarbase, int compression, bool sync);
 
 /* Cleanup routines for previously-created methods */
diff --git a/src/bin/pg_dump/common.c b/src/bin/pg_dump/common.c
index 522a2450886f..8fbaeccf49dd 100644
--- a/src/bin/pg_dump/common.c
+++ b/src/bin/pg_dump/common.c
@@ -67,18 +67,18 @@ static ExtensionMemberId *extmembers;
 static int	numextmembers;
 
 static void flagInhTables(Archive *fout, TableInfo *tbinfo, int numTables,
-			  InhInfo *inhinfo, int numInherits);
+						  InhInfo *inhinfo, int numInherits);
 static void flagInhIndexes(Archive *fout, TableInfo *tblinfo, int numTables);
 static void flagInhAttrs(DumpOptions *dopt, TableInfo *tblinfo, int numTables);
 static DumpableObject **buildIndexArray(void *objArray, int numObjs,
-				Size objSize);
+										Size objSize);
 static int	DOCatalogIdCompare(const void *p1, const void *p2);
 static int	ExtensionMemberIdCompare(const void *p1, const void *p2);
 static void findParentsByOid(TableInfo *self,
-				 InhInfo *inhinfo, int numInherits);
+							 InhInfo *inhinfo, int numInherits);
 static int	strInArray(const char *pattern, char **arr, int arr_size);
 static IndxInfo *findIndexByOid(Oid oid, DumpableObject **idxinfoindex,
-			   int numIndexes);
+								int numIndexes);
 
 
 /*
diff --git a/src/bin/pg_dump/compress_io.c b/src/bin/pg_dump/compress_io.c
index 952caef52c33..03c3e73ad040 100644
--- a/src/bin/pg_dump/compress_io.c
+++ b/src/bin/pg_dump/compress_io.c
@@ -75,23 +75,23 @@ struct CompressorState
 };
 
 static void ParseCompressionOption(int compression, CompressionAlgorithm *alg,
-					   int *level);
+								   int *level);
 
 /* Routines that support zlib compressed data I/O */
 #ifdef HAVE_LIBZ
 static void InitCompressorZlib(CompressorState *cs, int level);
 static void DeflateCompressorZlib(ArchiveHandle *AH, CompressorState *cs,
-					  bool flush);
+								  bool flush);
 static void ReadDataFromArchiveZlib(ArchiveHandle *AH, ReadFunc readF);
 static void WriteDataToArchiveZlib(ArchiveHandle *AH, CompressorState *cs,
-					   const char *data, size_t dLen);
+								   const char *data, size_t dLen);
 static void EndCompressorZlib(ArchiveHandle *AH, CompressorState *cs);
 #endif
 
 /* Routines that support uncompressed data I/O */
 static void ReadDataFromArchiveNone(ArchiveHandle *AH, ReadFunc readF);
 static void WriteDataToArchiveNone(ArchiveHandle *AH, CompressorState *cs,
-					   const char *data, size_t dLen);
+								   const char *data, size_t dLen);
 
 /*
  * Interprets a numeric 'compression' value. The algorithm implied by the
diff --git a/src/bin/pg_dump/compress_io.h b/src/bin/pg_dump/compress_io.h
index b6cd4b551d23..69f7c8d94ead 100644
--- a/src/bin/pg_dump/compress_io.h
+++ b/src/bin/pg_dump/compress_io.h
@@ -48,9 +48,9 @@ typedef struct CompressorState CompressorState;
 
 extern CompressorState *AllocateCompressor(int compression, WriteFunc writeF);
 extern void ReadDataFromArchive(ArchiveHandle *AH, int compression,
-					ReadFunc readF);
+								ReadFunc readF);
 extern void WriteDataToArchive(ArchiveHandle *AH, CompressorState *cs,
-				   const void *data, size_t dLen);
+							   const void *data, size_t dLen);
 extern void EndCompressor(ArchiveHandle *AH, CompressorState *cs);
 
 
diff --git a/src/bin/pg_dump/dumputils.c b/src/bin/pg_dump/dumputils.c
index 67691eb57a84..ef8b53cd091f 100644
--- a/src/bin/pg_dump/dumputils.c
+++ b/src/bin/pg_dump/dumputils.c
@@ -21,12 +21,12 @@
 
 
 static bool parseAclItem(const char *item, const char *type,
-			 const char *name, const char *subname, int remoteVersion,
-			 PQExpBuffer grantee, PQExpBuffer grantor,
-			 PQExpBuffer privs, PQExpBuffer privswgo);
+						 const char *name, const char *subname, int remoteVersion,
+						 PQExpBuffer grantee, PQExpBuffer grantor,
+						 PQExpBuffer privs, PQExpBuffer privswgo);
 static char *copyAclUserName(PQExpBuffer output, char *input);
 static void AddAcl(PQExpBuffer aclbuf, const char *keyword,
-	   const char *subname);
+				   const char *subname);
 
 
 /*
diff --git a/src/bin/pg_dump/dumputils.h b/src/bin/pg_dump/dumputils.h
index 8194272bd721..7ec5df9513f1 100644
--- a/src/bin/pg_dump/dumputils.h
+++ b/src/bin/pg_dump/dumputils.h
@@ -37,33 +37,33 @@
 
 
 extern bool buildACLCommands(const char *name, const char *subname, const char *nspname,
-				 const char *type, const char *acls, const char *racls,
-				 const char *owner, const char *prefix, int remoteVersion,
-				 PQExpBuffer sql);
+							 const char *type, const char *acls, const char *racls,
+							 const char *owner, const char *prefix, int remoteVersion,
+							 PQExpBuffer sql);
 extern bool buildDefaultACLCommands(const char *type, const char *nspname,
-						const char *acls, const char *racls,
-						const char *initacls, const char *initracls,
-						const char *owner,
-						int remoteVersion,
-						PQExpBuffer sql);
+									const char *acls, const char *racls,
+									const char *initacls, const char *initracls,
+									const char *owner,
+									int remoteVersion,
+									PQExpBuffer sql);
 extern void buildShSecLabelQuery(PGconn *conn, const char *catalog_name,
-					 Oid objectId, PQExpBuffer sql);
+								 Oid objectId, PQExpBuffer sql);
 extern void emitShSecLabels(PGconn *conn, PGresult *res,
-				PQExpBuffer buffer, const char *objtype, const char *objname);
+							PQExpBuffer buffer, const char *objtype, const char *objname);
 
 extern void buildACLQueries(PQExpBuffer acl_subquery, PQExpBuffer racl_subquery,
-				PQExpBuffer init_acl_subquery, PQExpBuffer init_racl_subquery,
-				const char *acl_column, const char *acl_owner,
-				const char *obj_kind, bool binary_upgrade);
+							PQExpBuffer init_acl_subquery, PQExpBuffer init_racl_subquery,
+							const char *acl_column, const char *acl_owner,
+							const char *obj_kind, bool binary_upgrade);
 
 extern bool variable_is_guc_list_quote(const char *name);
 
 extern bool SplitGUCList(char *rawstring, char separator,
-			 char ***namelist);
+						 char ***namelist);
 
 extern void makeAlterConfigCommand(PGconn *conn, const char *configitem,
-					   const char *type, const char *name,
-					   const char *type2, const char *name2,
-					   PQExpBuffer buf);
+								   const char *type, const char *name,
+								   const char *type2, const char *name2,
+								   PQExpBuffer buf);
 
 #endif							/* DUMPUTILS_H */
diff --git a/src/bin/pg_dump/parallel.c b/src/bin/pg_dump/parallel.c
index 7152fd6457d4..03479f1a13cc 100644
--- a/src/bin/pg_dump/parallel.c
+++ b/src/bin/pg_dump/parallel.c
@@ -211,14 +211,14 @@ static bool HasEveryWorkerTerminated(ParallelState *pstate);
 static void lockTableForWorker(ArchiveHandle *AH, TocEntry *te);
 static void WaitForCommands(ArchiveHandle *AH, int pipefd[2]);
 static bool ListenToWorkers(ArchiveHandle *AH, ParallelState *pstate,
-				bool do_wait);
+							bool do_wait);
 static char *getMessageFromMaster(int pipefd[2]);
 static void sendMessageToMaster(int pipefd[2], const char *str);
 static int	select_loop(int maxFd, fd_set *workerset);
 static char *getMessageFromWorker(ParallelState *pstate,
-					 bool do_wait, int *worker);
+								  bool do_wait, int *worker);
 static void sendMessageToWorker(ParallelState *pstate,
-					int worker, const char *str);
+								int worker, const char *str);
 static char *readMessageFromPipe(int fd);
 
 #define messageStartsWith(msg, prefix) \
diff --git a/src/bin/pg_dump/parallel.h b/src/bin/pg_dump/parallel.h
index a4e355c0363a..b51ed92430b2 100644
--- a/src/bin/pg_dump/parallel.h
+++ b/src/bin/pg_dump/parallel.h
@@ -54,15 +54,15 @@ extern void init_parallel_dump_utils(void);
 
 extern bool IsEveryWorkerIdle(ParallelState *pstate);
 extern void WaitForWorkers(ArchiveHandle *AH, ParallelState *pstate,
-			   WFW_WaitOption mode);
+						   WFW_WaitOption mode);
 
 extern ParallelState *ParallelBackupStart(ArchiveHandle *AH);
 extern void DispatchJobForTocEntry(ArchiveHandle *AH,
-					   ParallelState *pstate,
-					   TocEntry *te,
-					   T_Action act,
-					   ParallelCompletionPtr callback,
-					   void *callback_data);
+								   ParallelState *pstate,
+								   TocEntry *te,
+								   T_Action act,
+								   ParallelCompletionPtr callback,
+								   void *callback_data);
 extern void ParallelBackupEnd(ArchiveHandle *AH, ParallelState *pstate);
 
 extern void set_archive_cancel_info(ArchiveHandle *AH, PGconn *conn);
diff --git a/src/bin/pg_dump/pg_backup.h b/src/bin/pg_dump/pg_backup.h
index 7ab27391fbaf..79c87a649d56 100644
--- a/src/bin/pg_dump/pg_backup.h
+++ b/src/bin/pg_dump/pg_backup.h
@@ -243,11 +243,11 @@ typedef void (*SetupWorkerPtrType) (Archive *AH);
  */
 
 extern void ConnectDatabase(Archive *AH,
-				const char *dbname,
-				const char *pghost,
-				const char *pgport,
-				const char *username,
-				trivalue prompt_password);
+							const char *dbname,
+							const char *pghost,
+							const char *pgport,
+							const char *username,
+							trivalue prompt_password);
 extern void DisconnectDatabase(Archive *AHX);
 extern PGconn *GetConnection(Archive *AHX);
 
@@ -270,8 +270,8 @@ extern Archive *OpenArchive(const char *FileSpec, const ArchiveFormat fmt);
 
 /* Create a new archive */
 extern Archive *CreateArchive(const char *FileSpec, const ArchiveFormat fmt,
-			  const int compression, bool dosync, ArchiveMode mode,
-			  SetupWorkerPtrType setupDumpWorker);
+							  const int compression, bool dosync, ArchiveMode mode,
+							  SetupWorkerPtrType setupDumpWorker);
 
 /* The --list option */
 extern void PrintTOCSummary(Archive *AH);
diff --git a/src/bin/pg_dump/pg_backup_archiver.c b/src/bin/pg_dump/pg_backup_archiver.c
index 564772ea7e39..40c77af540c9 100644
--- a/src/bin/pg_dump/pg_backup_archiver.c
+++ b/src/bin/pg_dump/pg_backup_archiver.c
@@ -69,10 +69,10 @@ typedef struct _parallelReadyList
 
 
 static ArchiveHandle *_allocAH(const char *FileSpec, const ArchiveFormat fmt,
-		 const int compression, bool dosync, ArchiveMode mode,
-		 SetupWorkerPtrType setupWorkerPtr);
+							   const int compression, bool dosync, ArchiveMode mode,
+							   SetupWorkerPtrType setupWorkerPtr);
 static void _getObjectDescription(PQExpBuffer buf, TocEntry *te,
-					  ArchiveHandle *AH);
+								  ArchiveHandle *AH);
 static void _printTocEntry(ArchiveHandle *AH, TocEntry *te, bool isData);
 static char *sanitize_line(const char *str, bool want_hyphen);
 static void _doSetFixedOutputState(ArchiveHandle *AH);
@@ -104,12 +104,12 @@ static void RestoreOutput(ArchiveHandle *AH, OutputContext savedContext);
 
 static int	restore_toc_entry(ArchiveHandle *AH, TocEntry *te, bool is_parallel);
 static void restore_toc_entries_prefork(ArchiveHandle *AH,
-							TocEntry *pending_list);
+										TocEntry *pending_list);
 static void restore_toc_entries_parallel(ArchiveHandle *AH,
-							 ParallelState *pstate,
-							 TocEntry *pending_list);
+										 ParallelState *pstate,
+										 TocEntry *pending_list);
 static void restore_toc_entries_postfork(ArchiveHandle *AH,
-							 TocEntry *pending_list);
+										 TocEntry *pending_list);
 static void pending_list_header_init(TocEntry *l);
 static void pending_list_append(TocEntry *l, TocEntry *te);
 static void pending_list_remove(TocEntry *te);
@@ -120,25 +120,25 @@ static void ready_list_remove(ParallelReadyList *ready_list, int i);
 static void ready_list_sort(ParallelReadyList *ready_list);
 static int	TocEntrySizeCompare(const void *p1, const void *p2);
 static void move_to_ready_list(TocEntry *pending_list,
-				   ParallelReadyList *ready_list,
-				   RestorePass pass);
+							   ParallelReadyList *ready_list,
+							   RestorePass pass);
 static TocEntry *pop_next_work_item(ArchiveHandle *AH,
-				   ParallelReadyList *ready_list,
-				   ParallelState *pstate);
+									ParallelReadyList *ready_list,
+									ParallelState *pstate);
 static void mark_dump_job_done(ArchiveHandle *AH,
-				   TocEntry *te,
-				   int status,
-				   void *callback_data);
+							   TocEntry *te,
+							   int status,
+							   void *callback_data);
 static void mark_restore_job_done(ArchiveHandle *AH,
-					  TocEntry *te,
-					  int status,
-					  void *callback_data);
+								  TocEntry *te,
+								  int status,
+								  void *callback_data);
 static void fix_dependencies(ArchiveHandle *AH);
 static bool has_lock_conflicts(TocEntry *te1, TocEntry *te2);
 static void repoint_table_dependencies(ArchiveHandle *AH);
 static void identify_locking_dependencies(ArchiveHandle *AH, TocEntry *te);
 static void reduce_dependencies(ArchiveHandle *AH, TocEntry *te,
-					ParallelReadyList *ready_list);
+								ParallelReadyList *ready_list);
 static void mark_create_done(ArchiveHandle *AH, TocEntry *te);
 static void inhibit_data_for_failed_table(ArchiveHandle *AH, TocEntry *te);
 
diff --git a/src/bin/pg_dump/pg_backup_archiver.h b/src/bin/pg_dump/pg_backup_archiver.h
index f3905c00fd80..edc93da7370e 100644
--- a/src/bin/pg_dump/pg_backup_archiver.h
+++ b/src/bin/pg_dump/pg_backup_archiver.h
@@ -424,7 +424,7 @@ typedef struct _archiveOpts
 #define ARCHIVE_OPTS(...) &(ArchiveOpts){__VA_ARGS__}
 /* Called to add a TOC entry */
 extern TocEntry *ArchiveEntry(Archive *AHX, CatalogId catalogId,
-			 DumpId dumpId, ArchiveOpts *opts);
+							  DumpId dumpId, ArchiveOpts *opts);
 
 extern void WriteTOC(ArchiveHandle *AH);
 extern void ReadTOC(ArchiveHandle *AH);
diff --git a/src/bin/pg_dump/pg_backup_db.h b/src/bin/pg_dump/pg_backup_db.h
index a79f5283fe52..8888dd34b9b0 100644
--- a/src/bin/pg_dump/pg_backup_db.h
+++ b/src/bin/pg_dump/pg_backup_db.h
@@ -15,7 +15,7 @@ extern int	ExecuteSqlCommandBuf(Archive *AHX, const char *buf, size_t bufLen);
 
 extern void ExecuteSqlStatement(Archive *AHX, const char *query);
 extern PGresult *ExecuteSqlQuery(Archive *AHX, const char *query,
-				ExecStatusType status);
+								 ExecStatusType status);
 extern PGresult *ExecuteSqlQueryForSingleRow(Archive *fout, const char *query);
 
 extern void EndDBCopyMode(Archive *AHX, const char *tocEntryTag);
diff --git a/src/bin/pg_dump/pg_backup_directory.c b/src/bin/pg_dump/pg_backup_directory.c
index cfa2f6ec7475..38a2185ab453 100644
--- a/src/bin/pg_dump/pg_backup_directory.c
+++ b/src/bin/pg_dump/pg_backup_directory.c
@@ -92,7 +92,7 @@ static int	_WorkerJobRestoreDirectory(ArchiveHandle *AH, TocEntry *te);
 static int	_WorkerJobDumpDirectory(ArchiveHandle *AH, TocEntry *te);
 
 static void setFilePath(ArchiveHandle *AH, char *buf,
-			const char *relativeFilename);
+						const char *relativeFilename);
 
 /*
  *	Init routine required by ALL formats. This is a global routine
diff --git a/src/bin/pg_dump/pg_dump.c b/src/bin/pg_dump/pg_dump.c
index 38a01758a14b..c11cab70d8ed 100644
--- a/src/bin/pg_dump/pg_dump.c
+++ b/src/bin/pg_dump/pg_dump.c
@@ -152,32 +152,32 @@ static int	extra_float_digits;
 
 static void help(const char *progname);
 static void setup_connection(Archive *AH,
-				 const char *dumpencoding, const char *dumpsnapshot,
-				 char *use_role);
+							 const char *dumpencoding, const char *dumpsnapshot,
+							 char *use_role);
 static ArchiveFormat parseArchiveFormat(const char *format, ArchiveMode *mode);
 static void expand_schema_name_patterns(Archive *fout,
-							SimpleStringList *patterns,
-							SimpleOidList *oids,
-							bool strict_names);
+										SimpleStringList *patterns,
+										SimpleOidList *oids,
+										bool strict_names);
 static void expand_table_name_patterns(Archive *fout,
-						   SimpleStringList *patterns,
-						   SimpleOidList *oids,
-						   bool strict_names);
+									   SimpleStringList *patterns,
+									   SimpleOidList *oids,
+									   bool strict_names);
 static NamespaceInfo *findNamespace(Archive *fout, Oid nsoid);
 static void dumpTableData(Archive *fout, TableDataInfo *tdinfo);
 static void refreshMatViewData(Archive *fout, TableDataInfo *tdinfo);
 static void guessConstraintInheritance(TableInfo *tblinfo, int numTables);
 static void dumpComment(Archive *fout, const char *type, const char *name,
-			const char *namespace, const char *owner,
-			CatalogId catalogId, int subid, DumpId dumpId);
-static int findComments(Archive *fout, Oid classoid, Oid objoid,
-			 CommentItem **items);
+						const char *namespace, const char *owner,
+						CatalogId catalogId, int subid, DumpId dumpId);
+static int	findComments(Archive *fout, Oid classoid, Oid objoid,
+						 CommentItem **items);
 static int	collectComments(Archive *fout, CommentItem **items);
 static void dumpSecLabel(Archive *fout, const char *type, const char *name,
-			 const char *namespace, const char *owner,
-			 CatalogId catalogId, int subid, DumpId dumpId);
-static int findSecLabels(Archive *fout, Oid classoid, Oid objoid,
-			  SecLabelItem **items);
+						 const char *namespace, const char *owner,
+						 CatalogId catalogId, int subid, DumpId dumpId);
+static int	findSecLabels(Archive *fout, Oid classoid, Oid objoid,
+						  SecLabelItem **items);
 static int	collectSecLabels(Archive *fout, SecLabelItem **items);
 static void dumpDumpableObject(Archive *fout, DumpableObject *dobj);
 static void dumpNamespace(Archive *fout, NamespaceInfo *nspinfo);
@@ -222,24 +222,24 @@ static void dumpTSConfig(Archive *fout, TSConfigInfo *cfginfo);
 static void dumpForeignDataWrapper(Archive *fout, FdwInfo *fdwinfo);
 static void dumpForeignServer(Archive *fout, ForeignServerInfo *srvinfo);
 static void dumpUserMappings(Archive *fout,
-				 const char *servername, const char *namespace,
-				 const char *owner, CatalogId catalogId, DumpId dumpId);
+							 const char *servername, const char *namespace,
+							 const char *owner, CatalogId catalogId, DumpId dumpId);
 static void dumpDefaultACL(Archive *fout, DefaultACLInfo *daclinfo);
 
 static void dumpACL(Archive *fout, CatalogId objCatId, DumpId objDumpId,
-		const char *type, const char *name, const char *subname,
-		const char *nspname, const char *owner,
-		const char *acls, const char *racls,
-		const char *initacls, const char *initracls);
+					const char *type, const char *name, const char *subname,
+					const char *nspname, const char *owner,
+					const char *acls, const char *racls,
+					const char *initacls, const char *initracls);
 
 static void getDependencies(Archive *fout);
 static void BuildArchiveDependencies(Archive *fout);
 static void findDumpableDependencies(ArchiveHandle *AH, DumpableObject *dobj,
-						 DumpId **dependencies, int *nDeps, int *allocDeps);
+									 DumpId **dependencies, int *nDeps, int *allocDeps);
 
 static DumpableObject *createBoundaryObjects(void);
 static void addBoundaryDependencies(DumpableObject **dobjs, int numObjs,
-						DumpableObject *boundaryObjs);
+									DumpableObject *boundaryObjs);
 
 static void getDomainConstraints(Archive *fout, TypeInfo *tyinfo);
 static void getTableData(DumpOptions *dopt, TableInfo *tblinfo, int numTables, char relkind);
@@ -247,16 +247,16 @@ static void makeTableDataInfo(DumpOptions *dopt, TableInfo *tbinfo);
 static void buildMatViewRefreshDependencies(Archive *fout);
 static void getTableDataFKConstraints(void);
 static char *format_function_arguments(FuncInfo *finfo, char *funcargs,
-						  bool is_agg);
+									   bool is_agg);
 static char *format_function_arguments_old(Archive *fout,
-							  FuncInfo *finfo, int nallargs,
-							  char **allargtypes,
-							  char **argmodes,
-							  char **argnames);
+										   FuncInfo *finfo, int nallargs,
+										   char **allargtypes,
+										   char **argmodes,
+										   char **argnames);
 static char *format_function_signature(Archive *fout,
-						  FuncInfo *finfo, bool honor_quotes);
+									   FuncInfo *finfo, bool honor_quotes);
 static char *convertRegProcReference(Archive *fout,
-						const char *proc);
+									 const char *proc);
 static char *getFormattedOperatorName(Archive *fout, const char *oproid);
 static char *convertTSFunction(Archive *fout, Oid funcOid);
 static Oid	findLastBuiltinOid_V71(Archive *fout);
@@ -270,29 +270,29 @@ static void dumpPublicationTable(Archive *fout, PublicationRelInfo *pubrinfo);
 static void dumpSubscription(Archive *fout, SubscriptionInfo *subinfo);
 static void dumpDatabase(Archive *AH);
 static void dumpDatabaseConfig(Archive *AH, PQExpBuffer outbuf,
-				   const char *dbname, Oid dboid);
+							   const char *dbname, Oid dboid);
 static void dumpEncoding(Archive *AH);
 static void dumpStdStrings(Archive *AH);
 static void dumpSearchPath(Archive *AH);
 static void binary_upgrade_set_type_oids_by_type_oid(Archive *fout,
-										 PQExpBuffer upgrade_buffer,
-										 Oid pg_type_oid,
-										 bool force_array_type);
+													 PQExpBuffer upgrade_buffer,
+													 Oid pg_type_oid,
+													 bool force_array_type);
 static bool binary_upgrade_set_type_oids_by_rel_oid(Archive *fout,
-										PQExpBuffer upgrade_buffer, Oid pg_rel_oid);
+													PQExpBuffer upgrade_buffer, Oid pg_rel_oid);
 static void binary_upgrade_set_pg_class_oids(Archive *fout,
-								 PQExpBuffer upgrade_buffer,
-								 Oid pg_class_oid, bool is_index);
+											 PQExpBuffer upgrade_buffer,
+											 Oid pg_class_oid, bool is_index);
 static void binary_upgrade_extension_member(PQExpBuffer upgrade_buffer,
-								DumpableObject *dobj,
-								const char *objtype,
-								const char *objname,
-								const char *objnamespace);
+											DumpableObject *dobj,
+											const char *objtype,
+											const char *objname,
+											const char *objnamespace);
 static const char *getAttrName(int attrnum, TableInfo *tblInfo);
 static const char *fmtCopyColumnList(const TableInfo *ti, PQExpBuffer buffer);
 static bool nonemptyReloptions(const char *reloptions);
 static void appendReloptionsArrayAH(PQExpBuffer buffer, const char *reloptions,
-						const char *prefix, Archive *fout);
+									const char *prefix, Archive *fout);
 static char *get_synchronized_snapshot(Archive *fout);
 static void setupDumpWorker(Archive *AHX);
 static TableInfo *getRootTableInfo(TableInfo *tbinfo);
diff --git a/src/bin/pg_dump/pg_dump.h b/src/bin/pg_dump/pg_dump.h
index 4f9ebb4904d4..c3c2ea147369 100644
--- a/src/bin/pg_dump/pg_dump.h
+++ b/src/bin/pg_dump/pg_dump.h
@@ -676,7 +676,7 @@ extern ExtensionInfo *findOwningExtension(CatalogId catalogId);
 extern void parseOidArray(const char *str, Oid *array, int arraysize);
 
 extern void sortDumpableObjects(DumpableObject **objs, int numObjs,
-					DumpId preBoundaryId, DumpId postBoundaryId);
+								DumpId preBoundaryId, DumpId postBoundaryId);
 extern void sortDumpableObjectsByTypeName(DumpableObject **objs, int numObjs);
 
 /*
@@ -711,19 +711,19 @@ extern TSDictInfo *getTSDictionaries(Archive *fout, int *numTSDicts);
 extern TSTemplateInfo *getTSTemplates(Archive *fout, int *numTSTemplates);
 extern TSConfigInfo *getTSConfigurations(Archive *fout, int *numTSConfigs);
 extern FdwInfo *getForeignDataWrappers(Archive *fout,
-					   int *numForeignDataWrappers);
+									   int *numForeignDataWrappers);
 extern ForeignServerInfo *getForeignServers(Archive *fout,
-				  int *numForeignServers);
+											int *numForeignServers);
 extern DefaultACLInfo *getDefaultACLs(Archive *fout, int *numDefaultACLs);
 extern void getExtensionMembership(Archive *fout, ExtensionInfo extinfo[],
-					   int numExtensions);
+								   int numExtensions);
 extern void processExtensionTables(Archive *fout, ExtensionInfo extinfo[],
-					   int numExtensions);
+								   int numExtensions);
 extern EventTriggerInfo *getEventTriggers(Archive *fout, int *numEventTriggers);
 extern void getPolicies(Archive *fout, TableInfo tblinfo[], int numTables);
 extern void getPublications(Archive *fout);
 extern void getPublicationTables(Archive *fout, TableInfo tblinfo[],
-					 int numTables);
+								 int numTables);
 extern void getSubscriptions(Archive *fout);
 
 #endif							/* PG_DUMP_H */
diff --git a/src/bin/pg_dump/pg_dump_sort.c b/src/bin/pg_dump/pg_dump_sort.c
index 90ec67ca671f..54430a50047d 100644
--- a/src/bin/pg_dump/pg_dump_sort.c
+++ b/src/bin/pg_dump/pg_dump_sort.c
@@ -87,22 +87,22 @@ static DumpId postDataBoundId;
 
 static int	DOTypeNameCompare(const void *p1, const void *p2);
 static bool TopoSort(DumpableObject **objs,
-		 int numObjs,
-		 DumpableObject **ordering,
-		 int *nOrdering);
+					 int numObjs,
+					 DumpableObject **ordering,
+					 int *nOrdering);
 static void addHeapElement(int val, int *heap, int heapLength);
 static int	removeHeapElement(int *heap, int heapLength);
 static void findDependencyLoops(DumpableObject **objs, int nObjs, int totObjs);
-static int findLoop(DumpableObject *obj,
-		 DumpId startPoint,
-		 bool *processed,
-		 DumpId *searchFailed,
-		 DumpableObject **workspace,
-		 int depth);
+static int	findLoop(DumpableObject *obj,
+					 DumpId startPoint,
+					 bool *processed,
+					 DumpId *searchFailed,
+					 DumpableObject **workspace,
+					 int depth);
 static void repairDependencyLoop(DumpableObject **loop,
-					 int nLoop);
+								 int nLoop);
 static void describeDumpableObject(DumpableObject *obj,
-					   char *buf, int bufsize);
+								   char *buf, int bufsize);
 
 
 /*
diff --git a/src/bin/pg_dump/pg_dumpall.c b/src/bin/pg_dump/pg_dumpall.c
index e8fe5b596a69..7623fc8b4ea5 100644
--- a/src/bin/pg_dump/pg_dumpall.c
+++ b/src/bin/pg_dump/pg_dumpall.c
@@ -45,16 +45,16 @@ static void dumpDatabases(PGconn *conn);
 static void dumpTimestamp(const char *msg);
 static int	runPgDump(const char *dbname, const char *create_opts);
 static void buildShSecLabels(PGconn *conn,
-				 const char *catalog_name, Oid objectId,
-				 const char *objtype, const char *objname,
-				 PQExpBuffer buffer);
+							 const char *catalog_name, Oid objectId,
+							 const char *objtype, const char *objname,
+							 PQExpBuffer buffer);
 static PGconn *connectDatabase(const char *dbname, const char *connstr, const char *pghost, const char *pgport,
-				const char *pguser, trivalue prompt_password, bool fail_on_error);
+							   const char *pguser, trivalue prompt_password, bool fail_on_error);
 static char *constructConnStr(const char **keywords, const char **values);
 static PGresult *executeQuery(PGconn *conn, const char *query);
 static void executeCommand(PGconn *conn, const char *query);
 static void expand_dbname_patterns(PGconn *conn, SimpleStringList *patterns,
-					   SimpleStringList *names);
+								   SimpleStringList *names);
 
 static char pg_dump_bin[MAXPGPATH];
 static const char *progname;
diff --git a/src/bin/pg_rewind/copy_fetch.c b/src/bin/pg_rewind/copy_fetch.c
index 2ada8611ee41..d74001eb05bf 100644
--- a/src/bin/pg_rewind/copy_fetch.c
+++ b/src/bin/pg_rewind/copy_fetch.c
@@ -21,7 +21,7 @@
 #include "pg_rewind.h"
 
 static void recurse_dir(const char *datadir, const char *path,
-			process_file_callback_t callback);
+						process_file_callback_t callback);
 
 static void execute_pagemap(datapagemap_t *pagemap, const char *path);
 
diff --git a/src/bin/pg_rewind/filemap.c b/src/bin/pg_rewind/filemap.c
index 3c7ef900139f..601f7e9690e6 100644
--- a/src/bin/pg_rewind/filemap.c
+++ b/src/bin/pg_rewind/filemap.c
@@ -25,7 +25,7 @@ filemap_t  *filemap = NULL;
 
 static bool isRelDataFile(const char *path);
 static char *datasegpath(RelFileNode rnode, ForkNumber forknum,
-			BlockNumber segno);
+						 BlockNumber segno);
 static int	path_cmp(const void *a, const void *b);
 static int	final_filemap_cmp(const void *a, const void *b);
 static void filemap_list_to_array(filemap_t *map);
diff --git a/src/bin/pg_rewind/filemap.h b/src/bin/pg_rewind/filemap.h
index 800cc611603f..588228404cd2 100644
--- a/src/bin/pg_rewind/filemap.h
+++ b/src/bin/pg_rewind/filemap.h
@@ -95,11 +95,11 @@ extern void print_filemap(void);
 
 /* Functions for populating the filemap */
 extern void process_source_file(const char *path, file_type_t type,
-					size_t newsize, const char *link_target);
+								size_t newsize, const char *link_target);
 extern void process_target_file(const char *path, file_type_t type,
-					size_t newsize, const char *link_target);
+								size_t newsize, const char *link_target);
 extern void process_block_change(ForkNumber forknum, RelFileNode rnode,
-					 BlockNumber blkno);
+								 BlockNumber blkno);
 extern void filemap_finalize(void);
 
 #endif							/* FILEMAP_H */
diff --git a/src/bin/pg_rewind/parsexlog.c b/src/bin/pg_rewind/parsexlog.c
index b31071bc09de..287af60c4e72 100644
--- a/src/bin/pg_rewind/parsexlog.c
+++ b/src/bin/pg_rewind/parsexlog.c
@@ -47,10 +47,10 @@ typedef struct XLogPageReadPrivate
 	int			tliIndex;
 } XLogPageReadPrivate;
 
-static int SimpleXLogPageRead(XLogReaderState *xlogreader,
-				   XLogRecPtr targetPagePtr,
-				   int reqLen, XLogRecPtr targetRecPtr, char *readBuf,
-				   TimeLineID *pageTLI);
+static int	SimpleXLogPageRead(XLogReaderState *xlogreader,
+							   XLogRecPtr targetPagePtr,
+							   int reqLen, XLogRecPtr targetRecPtr, char *readBuf,
+							   TimeLineID *pageTLI);
 
 /*
  * Read WAL from the datadir/pg_wal, starting from 'startpoint' on timeline
diff --git a/src/bin/pg_rewind/pg_rewind.c b/src/bin/pg_rewind/pg_rewind.c
index 6cd39176285f..6e77201be6c7 100644
--- a/src/bin/pg_rewind/pg_rewind.c
+++ b/src/bin/pg_rewind/pg_rewind.c
@@ -33,10 +33,10 @@
 static void usage(const char *progname);
 
 static void createBackupLabel(XLogRecPtr startpoint, TimeLineID starttli,
-				  XLogRecPtr checkpointloc);
+							  XLogRecPtr checkpointloc);
 
 static void digestControlFile(ControlFileData *ControlFile, char *source,
-				  size_t size);
+							  size_t size);
 static void syncTargetDirectory(void);
 static void sanityChecks(void);
 static void findCommonAncestorTimeline(XLogRecPtr *recptr, int *tliIndex);
diff --git a/src/bin/pg_rewind/pg_rewind.h b/src/bin/pg_rewind/pg_rewind.h
index a54a5d7fd4e0..1125c7e60f68 100644
--- a/src/bin/pg_rewind/pg_rewind.h
+++ b/src/bin/pg_rewind/pg_rewind.h
@@ -40,19 +40,19 @@ extern uint64 fetch_done;
 
 /* in parsexlog.c */
 extern void extractPageMap(const char *datadir, XLogRecPtr startpoint,
-			   int tliIndex, XLogRecPtr endpoint);
+						   int tliIndex, XLogRecPtr endpoint);
 extern void findLastCheckpoint(const char *datadir, XLogRecPtr searchptr,
-				   int tliIndex,
-				   XLogRecPtr *lastchkptrec, TimeLineID *lastchkpttli,
-				   XLogRecPtr *lastchkptredo);
+							   int tliIndex,
+							   XLogRecPtr *lastchkptrec, TimeLineID *lastchkpttli,
+							   XLogRecPtr *lastchkptredo);
 extern XLogRecPtr readOneRecord(const char *datadir, XLogRecPtr ptr,
-			  int tliIndex);
+								int tliIndex);
 
 /* in pg_rewind.c */
 extern void progress_report(bool force);
 
 /* in timeline.c */
 extern TimeLineHistoryEntry *rewind_parseTimeLineHistory(char *buffer,
-							TimeLineID targetTLI, int *nentries);
+														 TimeLineID targetTLI, int *nentries);
 
 #endif							/* PG_REWIND_H */
diff --git a/src/bin/pg_upgrade/info.c b/src/bin/pg_upgrade/info.c
index 2f925f086c31..5c7b4337ba4c 100644
--- a/src/bin/pg_upgrade/info.c
+++ b/src/bin/pg_upgrade/info.c
@@ -16,11 +16,11 @@
 
 
 static void create_rel_filename_map(const char *old_data, const char *new_data,
-						const DbInfo *old_db, const DbInfo *new_db,
-						const RelInfo *old_rel, const RelInfo *new_rel,
-						FileNameMap *map);
+									const DbInfo *old_db, const DbInfo *new_db,
+									const RelInfo *old_rel, const RelInfo *new_rel,
+									FileNameMap *map);
 static void report_unmatched_relation(const RelInfo *rel, const DbInfo *db,
-						  bool is_new_db);
+									  bool is_new_db);
 static void free_db_and_rel_infos(DbInfoArr *db_arr);
 static void get_db_infos(ClusterInfo *cluster);
 static void get_rel_infos(ClusterInfo *cluster, DbInfo *dbinfo);
diff --git a/src/bin/pg_upgrade/option.c b/src/bin/pg_upgrade/option.c
index ab5e2d6a303f..171aaa8f13d4 100644
--- a/src/bin/pg_upgrade/option.c
+++ b/src/bin/pg_upgrade/option.c
@@ -22,8 +22,8 @@
 
 static void usage(void);
 static void check_required_directory(char **dirpath,
-						 const char *envVarName, bool useCwd,
-						 const char *cmdLineOption, const char *description);
+									 const char *envVarName, bool useCwd,
+									 const char *cmdLineOption, const char *description);
 #define FIX_DEFAULT_READ_ONLY "-c default_transaction_read_only=false"
 
 
diff --git a/src/bin/pg_upgrade/pg_upgrade.h b/src/bin/pg_upgrade/pg_upgrade.h
index 2f67eee22b82..5d31750d8674 100644
--- a/src/bin/pg_upgrade/pg_upgrade.h
+++ b/src/bin/pg_upgrade/pg_upgrade.h
@@ -342,8 +342,8 @@ void		check_and_dump_old_cluster(bool live_check);
 void		check_new_cluster(void);
 void		report_clusters_compatible(void);
 void		issue_warnings_and_set_wal_level(void);
-void output_completion_banner(char *analyze_script_file_name,
-						 char *deletion_script_file_name);
+void		output_completion_banner(char *analyze_script_file_name,
+									 char *deletion_script_file_name);
 void		check_cluster_versions(void);
 void		check_cluster_compatibility(bool live_check);
 void		create_script_for_old_cluster_deletion(char **deletion_script_file_name);
@@ -366,22 +366,22 @@ void		generate_old_dump(void);
 
 #define EXEC_PSQL_ARGS "--echo-queries --set ON_ERROR_STOP=on --no-psqlrc --dbname=template1"
 
-bool exec_prog(const char *log_file, const char *opt_log_file,
-		  bool report_error, bool exit_on_error, const char *fmt,...) pg_attribute_printf(5, 6);
+bool		exec_prog(const char *log_file, const char *opt_log_file,
+					  bool report_error, bool exit_on_error, const char *fmt,...) pg_attribute_printf(5, 6);
 void		verify_directories(void);
 bool		pid_lock_file_exists(const char *datadir);
 
 
 /* file.c */
 
-void cloneFile(const char *src, const char *dst,
-		  const char *schemaName, const char *relName);
-void copyFile(const char *src, const char *dst,
-		 const char *schemaName, const char *relName);
-void linkFile(const char *src, const char *dst,
-		 const char *schemaName, const char *relName);
-void rewriteVisibilityMap(const char *fromfile, const char *tofile,
+void		cloneFile(const char *src, const char *dst,
+					  const char *schemaName, const char *relName);
+void		copyFile(const char *src, const char *dst,
 					 const char *schemaName, const char *relName);
+void		linkFile(const char *src, const char *dst,
+					 const char *schemaName, const char *relName);
+void		rewriteVisibilityMap(const char *fromfile, const char *tofile,
+								 const char *schemaName, const char *relName);
 void		check_file_clone(void);
 void		check_hard_link(void);
 
@@ -396,11 +396,11 @@ void		check_loadable_libraries(void);
 /* info.c */
 
 FileNameMap *gen_db_file_maps(DbInfo *old_db,
-				 DbInfo *new_db, int *nmaps, const char *old_pgdata,
-				 const char *new_pgdata);
+							  DbInfo *new_db, int *nmaps, const char *old_pgdata,
+							  const char *new_pgdata);
 void		get_db_and_rel_infos(ClusterInfo *cluster);
-void print_maps(FileNameMap *maps, int n,
-		   const char *db_name);
+void		print_maps(FileNameMap *maps, int n,
+					   const char *db_name);
 
 /* option.c */
 
@@ -410,11 +410,11 @@ void		get_sock_dir(ClusterInfo *cluster, bool live_check);
 
 /* relfilenode.c */
 
-void transfer_all_new_tablespaces(DbInfoArr *old_db_arr,
-							 DbInfoArr *new_db_arr, char *old_pgdata, char *new_pgdata);
-void transfer_all_new_dbs(DbInfoArr *old_db_arr,
-					 DbInfoArr *new_db_arr, char *old_pgdata, char *new_pgdata,
-					 char *old_tablespace);
+void		transfer_all_new_tablespaces(DbInfoArr *old_db_arr,
+										 DbInfoArr *new_db_arr, char *old_pgdata, char *new_pgdata);
+void		transfer_all_new_dbs(DbInfoArr *old_db_arr,
+								 DbInfoArr *new_db_arr, char *old_pgdata, char *new_pgdata,
+								 char *old_tablespace);
 
 /* tablespace.c */
 
@@ -451,17 +451,17 @@ void		pg_putenv(const char *var, const char *val);
 
 /* version.c */
 
-void new_9_0_populate_pg_largeobject_metadata(ClusterInfo *cluster,
-										 bool check_mode);
+void		new_9_0_populate_pg_largeobject_metadata(ClusterInfo *cluster,
+													 bool check_mode);
 void		old_9_3_check_for_line_data_type_usage(ClusterInfo *cluster);
 void		old_9_6_check_for_unknown_data_type_usage(ClusterInfo *cluster);
-void old_9_6_invalidate_hash_indexes(ClusterInfo *cluster,
-								bool check_mode);
+void		old_9_6_invalidate_hash_indexes(ClusterInfo *cluster,
+											bool check_mode);
 
 /* parallel.c */
-void parallel_exec_prog(const char *log_file, const char *opt_log_file,
-				   const char *fmt,...) pg_attribute_printf(3, 4);
-void parallel_transfer_all_new_dbs(DbInfoArr *old_db_arr, DbInfoArr *new_db_arr,
-							  char *old_pgdata, char *new_pgdata,
-							  char *old_tablespace);
+void		parallel_exec_prog(const char *log_file, const char *opt_log_file,
+							   const char *fmt,...) pg_attribute_printf(3, 4);
+void		parallel_transfer_all_new_dbs(DbInfoArr *old_db_arr, DbInfoArr *new_db_arr,
+										  char *old_pgdata, char *new_pgdata,
+										  char *old_tablespace);
 bool		reap_child(bool wait_for_child);
diff --git a/src/bin/pgbench/pgbench.c b/src/bin/pgbench/pgbench.c
index e99ab1e07f1e..8b84658ccdac 100644
--- a/src/bin/pgbench/pgbench.c
+++ b/src/bin/pgbench/pgbench.c
@@ -576,12 +576,12 @@ static void setBoolValue(PgBenchValue *pv, bool bval);
 static void setIntValue(PgBenchValue *pv, int64 ival);
 static void setDoubleValue(PgBenchValue *pv, double dval);
 static bool evaluateExpr(CState *st, PgBenchExpr *expr,
-			 PgBenchValue *retval);
+						 PgBenchValue *retval);
 static ConnectionStateEnum executeMetaCommand(CState *st, instr_time *now);
 static void doLog(TState *thread, CState *st,
-	  StatsData *agg, bool skipped, double latency, double lag);
+				  StatsData *agg, bool skipped, double latency, double lag);
 static void processXactStats(TState *thread, CState *st, instr_time *now,
-				 bool skipped, StatsData *agg);
+							 bool skipped, StatsData *agg);
 static void addScript(ParsedScript script);
 static void *threadRun(void *arg);
 static void finishCon(CState *st);
diff --git a/src/bin/pgbench/pgbench.h b/src/bin/pgbench/pgbench.h
index dc557d416c5c..c4a1e298e06d 100644
--- a/src/bin/pgbench/pgbench.h
+++ b/src/bin/pgbench/pgbench.h
@@ -143,22 +143,22 @@ extern int	expr_yyparse(yyscan_t yyscanner);
 extern int	expr_yylex(union YYSTYPE *lvalp, yyscan_t yyscanner);
 extern void expr_yyerror(yyscan_t yyscanner, const char *str) pg_attribute_noreturn();
 extern void expr_yyerror_more(yyscan_t yyscanner, const char *str,
-				  const char *more) pg_attribute_noreturn();
+							  const char *more) pg_attribute_noreturn();
 extern bool expr_lex_one_word(PsqlScanState state, PQExpBuffer word_buf,
-				  int *offset);
+							  int *offset);
 extern yyscan_t expr_scanner_init(PsqlScanState state,
-				  const char *source, int lineno, int start_offset,
-				  const char *command);
+								  const char *source, int lineno, int start_offset,
+								  const char *command);
 extern void expr_scanner_finish(yyscan_t yyscanner);
 extern int	expr_scanner_offset(PsqlScanState state);
 extern char *expr_scanner_get_substring(PsqlScanState state,
-						   int start_offset, int end_offset,
-						   bool chomp);
+										int start_offset, int end_offset,
+										bool chomp);
 extern int	expr_scanner_get_lineno(PsqlScanState state, int offset);
 
 extern void syntax_error(const char *source, int lineno, const char *line,
-			 const char *cmd, const char *msg,
-			 const char *more, int col) pg_attribute_noreturn();
+						 const char *cmd, const char *msg,
+						 const char *more, int col) pg_attribute_noreturn();
 
 extern bool strtoint64(const char *str, bool errorOK, int64 *pi);
 extern bool strtodouble(const char *str, bool errorOK, double *pd);
diff --git a/src/bin/psql/command.c b/src/bin/psql/command.c
index df3824f689c4..a3280eeb180a 100644
--- a/src/bin/psql/command.c
+++ b/src/bin/psql/command.c
@@ -55,77 +55,77 @@ typedef enum EditableObjectType
 
 /* local function declarations */
 static backslashResult exec_command(const char *cmd,
-			 PsqlScanState scan_state,
-			 ConditionalStack cstack,
-			 PQExpBuffer query_buf,
-			 PQExpBuffer previous_buf);
+									PsqlScanState scan_state,
+									ConditionalStack cstack,
+									PQExpBuffer query_buf,
+									PQExpBuffer previous_buf);
 static backslashResult exec_command_a(PsqlScanState scan_state, bool active_branch);
 static backslashResult exec_command_C(PsqlScanState scan_state, bool active_branch);
 static backslashResult exec_command_connect(PsqlScanState scan_state, bool active_branch);
 static backslashResult exec_command_cd(PsqlScanState scan_state, bool active_branch,
-				const char *cmd);
+									   const char *cmd);
 static backslashResult exec_command_conninfo(PsqlScanState scan_state, bool active_branch);
 static backslashResult exec_command_copy(PsqlScanState scan_state, bool active_branch);
 static backslashResult exec_command_copyright(PsqlScanState scan_state, bool active_branch);
 static backslashResult exec_command_crosstabview(PsqlScanState scan_state, bool active_branch);
 static backslashResult exec_command_d(PsqlScanState scan_state, bool active_branch,
-			   const char *cmd);
+									  const char *cmd);
 static backslashResult exec_command_edit(PsqlScanState scan_state, bool active_branch,
-				  PQExpBuffer query_buf, PQExpBuffer previous_buf);
+										 PQExpBuffer query_buf, PQExpBuffer previous_buf);
 static backslashResult exec_command_ef_ev(PsqlScanState scan_state, bool active_branch,
-				   PQExpBuffer query_buf, bool is_func);
+										  PQExpBuffer query_buf, bool is_func);
 static backslashResult exec_command_echo(PsqlScanState scan_state, bool active_branch,
-				  const char *cmd);
+										 const char *cmd);
 static backslashResult exec_command_elif(PsqlScanState scan_state, ConditionalStack cstack,
-				  PQExpBuffer query_buf);
+										 PQExpBuffer query_buf);
 static backslashResult exec_command_else(PsqlScanState scan_state, ConditionalStack cstack,
-				  PQExpBuffer query_buf);
+										 PQExpBuffer query_buf);
 static backslashResult exec_command_endif(PsqlScanState scan_state, ConditionalStack cstack,
-				   PQExpBuffer query_buf);
+										  PQExpBuffer query_buf);
 static backslashResult exec_command_encoding(PsqlScanState scan_state, bool active_branch);
 static backslashResult exec_command_errverbose(PsqlScanState scan_state, bool active_branch);
 static backslashResult exec_command_f(PsqlScanState scan_state, bool active_branch);
 static backslashResult exec_command_g(PsqlScanState scan_state, bool active_branch,
-			   const char *cmd);
+									  const char *cmd);
 static backslashResult exec_command_gdesc(PsqlScanState scan_state, bool active_branch);
 static backslashResult exec_command_gexec(PsqlScanState scan_state, bool active_branch);
 static backslashResult exec_command_gset(PsqlScanState scan_state, bool active_branch);
 static backslashResult exec_command_help(PsqlScanState scan_state, bool active_branch);
 static backslashResult exec_command_html(PsqlScanState scan_state, bool active_branch);
 static backslashResult exec_command_include(PsqlScanState scan_state, bool active_branch,
-					 const char *cmd);
+											const char *cmd);
 static backslashResult exec_command_if(PsqlScanState scan_state, ConditionalStack cstack,
-				PQExpBuffer query_buf);
+									   PQExpBuffer query_buf);
 static backslashResult exec_command_list(PsqlScanState scan_state, bool active_branch,
-				  const char *cmd);
+										 const char *cmd);
 static backslashResult exec_command_lo(PsqlScanState scan_state, bool active_branch,
-				const char *cmd);
+									   const char *cmd);
 static backslashResult exec_command_out(PsqlScanState scan_state, bool active_branch);
 static backslashResult exec_command_print(PsqlScanState scan_state, bool active_branch,
-				   PQExpBuffer query_buf, PQExpBuffer previous_buf);
+										  PQExpBuffer query_buf, PQExpBuffer previous_buf);
 static backslashResult exec_command_password(PsqlScanState scan_state, bool active_branch);
 static backslashResult exec_command_prompt(PsqlScanState scan_state, bool active_branch,
-					const char *cmd);
+										   const char *cmd);
 static backslashResult exec_command_pset(PsqlScanState scan_state, bool active_branch);
 static backslashResult exec_command_quit(PsqlScanState scan_state, bool active_branch);
 static backslashResult exec_command_reset(PsqlScanState scan_state, bool active_branch,
-				   PQExpBuffer query_buf);
+										  PQExpBuffer query_buf);
 static backslashResult exec_command_s(PsqlScanState scan_state, bool active_branch);
 static backslashResult exec_command_set(PsqlScanState scan_state, bool active_branch);
 static backslashResult exec_command_setenv(PsqlScanState scan_state, bool active_branch,
-					const char *cmd);
+										   const char *cmd);
 static backslashResult exec_command_sf_sv(PsqlScanState scan_state, bool active_branch,
-				   const char *cmd, bool is_func);
+										  const char *cmd, bool is_func);
 static backslashResult exec_command_t(PsqlScanState scan_state, bool active_branch);
 static backslashResult exec_command_T(PsqlScanState scan_state, bool active_branch);
 static backslashResult exec_command_timing(PsqlScanState scan_state, bool active_branch);
 static backslashResult exec_command_unset(PsqlScanState scan_state, bool active_branch,
-				   const char *cmd);
+										  const char *cmd);
 static backslashResult exec_command_write(PsqlScanState scan_state, bool active_branch,
-				   const char *cmd,
-				   PQExpBuffer query_buf, PQExpBuffer previous_buf);
+										  const char *cmd,
+										  PQExpBuffer query_buf, PQExpBuffer previous_buf);
 static backslashResult exec_command_watch(PsqlScanState scan_state, bool active_branch,
-				   PQExpBuffer query_buf, PQExpBuffer previous_buf);
+										  PQExpBuffer query_buf, PQExpBuffer previous_buf);
 static backslashResult exec_command_x(PsqlScanState scan_state, bool active_branch);
 static backslashResult exec_command_z(PsqlScanState scan_state, bool active_branch);
 static backslashResult exec_command_shell_escape(PsqlScanState scan_state, bool active_branch);
@@ -139,24 +139,24 @@ static void ignore_slash_filepipe(PsqlScanState scan_state);
 static void ignore_slash_whole_line(PsqlScanState scan_state);
 static bool is_branching_command(const char *cmd);
 static void save_query_text_state(PsqlScanState scan_state, ConditionalStack cstack,
-					  PQExpBuffer query_buf);
+								  PQExpBuffer query_buf);
 static void discard_query_text(PsqlScanState scan_state, ConditionalStack cstack,
-				   PQExpBuffer query_buf);
+							   PQExpBuffer query_buf);
 static void copy_previous_query(PQExpBuffer query_buf, PQExpBuffer previous_buf);
 static bool do_connect(enum trivalue reuse_previous_specification,
-		   char *dbname, char *user, char *host, char *port);
+					   char *dbname, char *user, char *host, char *port);
 static bool do_edit(const char *filename_arg, PQExpBuffer query_buf,
-		int lineno, bool *edited);
+					int lineno, bool *edited);
 static bool do_shell(const char *command);
 static bool do_watch(PQExpBuffer query_buf, double sleep);
 static bool lookup_object_oid(EditableObjectType obj_type, const char *desc,
-				  Oid *obj_oid);
+							  Oid *obj_oid);
 static bool get_create_object_cmd(EditableObjectType obj_type, Oid oid,
-					  PQExpBuffer buf);
+								  PQExpBuffer buf);
 static int	strip_lineno_from_objdesc(char *obj);
 static int	count_lines_in_buf(PQExpBuffer buf);
 static void print_with_linenumbers(FILE *output, char *lines,
-					   const char *header_keyword);
+								   const char *header_keyword);
 static void minimal_error_message(PGresult *res);
 
 static void printSSLInfo(void);
diff --git a/src/bin/psql/command.h b/src/bin/psql/command.h
index de748d320eab..33791b6ff8be 100644
--- a/src/bin/psql/command.h
+++ b/src/bin/psql/command.h
@@ -26,16 +26,16 @@ typedef enum _backslashResult
 
 
 extern backslashResult HandleSlashCmds(PsqlScanState scan_state,
-				ConditionalStack cstack,
-				PQExpBuffer query_buf,
-				PQExpBuffer previous_buf);
+									   ConditionalStack cstack,
+									   PQExpBuffer query_buf,
+									   PQExpBuffer previous_buf);
 
 extern int	process_file(char *filename, bool use_relative_path);
 
 extern bool do_pset(const char *param,
-		const char *value,
-		printQueryOpt *popt,
-		bool quiet);
+					const char *value,
+					printQueryOpt *popt,
+					bool quiet);
 
 extern void connection_warnings(bool in_startup);
 
diff --git a/src/bin/psql/common.h b/src/bin/psql/common.h
index 4739b8ee3391..282a520116a7 100644
--- a/src/bin/psql/common.h
+++ b/src/bin/psql/common.h
@@ -18,7 +18,7 @@ extern bool openQueryOutputFile(const char *fname, FILE **fout, bool *is_pipe);
 extern bool setQFout(const char *fname);
 
 extern char *psql_get_variable(const char *varname, PsqlScanQuoteType quote,
-				  void *passthrough);
+							   void *passthrough);
 
 extern void NoticeProcessor(void *arg, const char *message);
 
diff --git a/src/bin/psql/copy.h b/src/bin/psql/copy.h
index 9b30979d2c63..cee731beeb44 100644
--- a/src/bin/psql/copy.h
+++ b/src/bin/psql/copy.h
@@ -17,8 +17,8 @@ extern bool do_copy(const char *args);
 /* lower level processors for copy in/out streams */
 
 extern bool handleCopyOut(PGconn *conn, FILE *copystream,
-			  PGresult **res);
+						  PGresult **res);
 extern bool handleCopyIn(PGconn *conn, FILE *copystream, bool isbinary,
-			 PGresult **res);
+						 PGresult **res);
 
 #endif
diff --git a/src/bin/psql/crosstabview.c b/src/bin/psql/crosstabview.c
index 184ebe6d21cb..83789cb911af 100644
--- a/src/bin/psql/crosstabview.c
+++ b/src/bin/psql/crosstabview.c
@@ -79,13 +79,13 @@ typedef struct _avl_tree
 
 
 static bool printCrosstab(const PGresult *results,
-			  int num_columns, pivot_field *piv_columns, int field_for_columns,
-			  int num_rows, pivot_field *piv_rows, int field_for_rows,
-			  int field_for_data);
+						  int num_columns, pivot_field *piv_columns, int field_for_columns,
+						  int num_rows, pivot_field *piv_rows, int field_for_rows,
+						  int field_for_data);
 static void avlInit(avl_tree *tree);
 static void avlMergeValue(avl_tree *tree, char *name, char *sort_value);
-static int avlCollectFields(avl_tree *tree, avl_node *node,
-				 pivot_field *fields, int idx);
+static int	avlCollectFields(avl_tree *tree, avl_node *node,
+							 pivot_field *fields, int idx);
 static void avlFree(avl_tree *tree, avl_node *node);
 static void rankSort(int num_columns, pivot_field *piv_columns);
 static int	indexOfColumn(char *arg, const PGresult *res);
diff --git a/src/bin/psql/describe.c b/src/bin/psql/describe.c
index 3dc5447f1af4..97167d2c4bdb 100644
--- a/src/bin/psql/describe.c
+++ b/src/bin/psql/describe.c
@@ -31,19 +31,19 @@
 
 
 static bool describeOneTableDetails(const char *schemaname,
-						const char *relationname,
-						const char *oid,
-						bool verbose);
+									const char *relationname,
+									const char *oid,
+									bool verbose);
 static void add_tablespace_footer(printTableContent *const cont, char relkind,
-					  Oid tablespace, const bool newline);
+								  Oid tablespace, const bool newline);
 static void add_role_attribute(PQExpBuffer buf, const char *const str);
 static bool listTSParsersVerbose(const char *pattern);
 static bool describeOneTSParser(const char *oid, const char *nspname,
-					const char *prsname);
+								const char *prsname);
 static bool listTSConfigsVerbose(const char *pattern);
 static bool describeOneTSConfig(const char *oid, const char *nspname,
-					const char *cfgname,
-					const char *pnspname, const char *prsname);
+								const char *cfgname,
+								const char *pnspname, const char *prsname);
 static void printACLColumn(PQExpBuffer buf, const char *colname);
 static bool listOneExtensionContents(const char *extname, const char *oid);
 
diff --git a/src/bin/psql/startup.c b/src/bin/psql/startup.c
index dc6dcbba0113..bb9921a89418 100644
--- a/src/bin/psql/startup.c
+++ b/src/bin/psql/startup.c
@@ -81,9 +81,9 @@ struct adhoc_opts
 };
 
 static void parse_psql_options(int argc, char *argv[],
-				   struct adhoc_opts *options);
+							   struct adhoc_opts *options);
 static void simple_action_list_append(SimpleActionList *list,
-						  enum _actions action, const char *val);
+									  enum _actions action, const char *val);
 static void process_psqlrc(char *argv0);
 static void process_psqlrc_file(char *filename);
 static void showVersion(void);
diff --git a/src/bin/psql/stringutils.h b/src/bin/psql/stringutils.h
index 3ecfad5c1675..16a7af0b5201 100644
--- a/src/bin/psql/stringutils.h
+++ b/src/bin/psql/stringutils.h
@@ -11,17 +11,17 @@
 /* The cooler version of strtok() which knows about quotes and doesn't
  * overwrite your input */
 extern char *strtokx(const char *s,
-		const char *whitespace,
-		const char *delim,
-		const char *quote,
-		char escape,
-		bool e_strings,
-		bool del_quotes,
-		int encoding);
+					 const char *whitespace,
+					 const char *delim,
+					 const char *quote,
+					 char escape,
+					 bool e_strings,
+					 bool del_quotes,
+					 int encoding);
 
 extern void strip_quotes(char *source, char quote, char escape, int encoding);
 
 extern char *quote_if_needed(const char *source, const char *entails_quote,
-				char quote, char escape, int encoding);
+							 char quote, char escape, int encoding);
 
 #endif							/* STRINGUTILS_H */
diff --git a/src/bin/psql/tab-complete.c b/src/bin/psql/tab-complete.c
index 04ce3e722f2e..c6347b619004 100644
--- a/src/bin/psql/tab-complete.c
+++ b/src/bin/psql/tab-complete.c
@@ -1075,15 +1075,15 @@ static char *complete_from_versioned_query(const char *text, int state);
 static char *complete_from_schema_query(const char *text, int state);
 static char *complete_from_versioned_schema_query(const char *text, int state);
 static char *_complete_from_query(const char *simple_query,
-					 const SchemaQuery *schema_query,
-					 const char *text, int state);
+								  const SchemaQuery *schema_query,
+								  const char *text, int state);
 static char *complete_from_list(const char *text, int state);
 static char *complete_from_const(const char *text, int state);
 static void append_variable_names(char ***varnames, int *nvars,
-					  int *maxvars, const char *varname,
-					  const char *prefix, const char *suffix);
+								  int *maxvars, const char *varname,
+								  const char *prefix, const char *suffix);
 static char **complete_from_variables(const char *text,
-						const char *prefix, const char *suffix, bool need_value);
+									  const char *prefix, const char *suffix, bool need_value);
 static char *complete_from_files(const char *text, int state);
 
 static char *pg_strdup_keyword_case(const char *s, const char *ref);
diff --git a/src/bin/psql/variables.h b/src/bin/psql/variables.h
index c7e509eeeedc..9d4cf5471348 100644
--- a/src/bin/psql/variables.h
+++ b/src/bin/psql/variables.h
@@ -75,11 +75,11 @@ typedef struct _variable *VariableSpace;
 VariableSpace CreateVariableSpace(void);
 const char *GetVariable(VariableSpace space, const char *name);
 
-bool ParseVariableBool(const char *value, const char *name,
-				  bool *result);
+bool		ParseVariableBool(const char *value, const char *name,
+							  bool *result);
 
-bool ParseVariableNum(const char *value, const char *name,
-				 int *result);
+bool		ParseVariableNum(const char *value, const char *name,
+							 int *result);
 
 void		PrintVariables(VariableSpace space);
 
@@ -87,9 +87,9 @@ bool		SetVariable(VariableSpace space, const char *name, const char *value);
 bool		SetVariableBool(VariableSpace space, const char *name);
 bool		DeleteVariable(VariableSpace space, const char *name);
 
-void SetVariableHooks(VariableSpace space, const char *name,
-				 VariableSubstituteHook shook,
-				 VariableAssignHook ahook);
+void		SetVariableHooks(VariableSpace space, const char *name,
+							 VariableSubstituteHook shook,
+							 VariableAssignHook ahook);
 
 void		PsqlVarEnumError(const char *name, const char *value, const char *suggestions);
 
diff --git a/src/bin/scripts/clusterdb.c b/src/bin/scripts/clusterdb.c
index a1b4119efa56..15fff91e1615 100644
--- a/src/bin/scripts/clusterdb.c
+++ b/src/bin/scripts/clusterdb.c
@@ -17,13 +17,13 @@
 
 
 static void cluster_one_database(const char *dbname, bool verbose, const char *table,
-					 const char *host, const char *port,
-					 const char *username, enum trivalue prompt_password,
-					 const char *progname, bool echo);
+								 const char *host, const char *port,
+								 const char *username, enum trivalue prompt_password,
+								 const char *progname, bool echo);
 static void cluster_all_databases(bool verbose, const char *maintenance_db,
-					  const char *host, const char *port,
-					  const char *username, enum trivalue prompt_password,
-					  const char *progname, bool echo, bool quiet);
+								  const char *host, const char *port,
+								  const char *username, enum trivalue prompt_password,
+								  const char *progname, bool echo, bool quiet);
 
 static void help(const char *progname);
 
diff --git a/src/bin/scripts/common.h b/src/bin/scripts/common.h
index b59ade0c39a1..35d1a3e0d516 100644
--- a/src/bin/scripts/common.h
+++ b/src/bin/scripts/common.h
@@ -26,33 +26,33 @@ extern bool CancelRequested;
 typedef void (*help_handler) (const char *progname);
 
 extern void handle_help_version_opts(int argc, char *argv[],
-						 const char *fixed_progname,
-						 help_handler hlp);
+									 const char *fixed_progname,
+									 help_handler hlp);
 
 extern PGconn *connectDatabase(const char *dbname, const char *pghost,
-				const char *pgport, const char *pguser,
-				enum trivalue prompt_password, const char *progname,
-				bool echo, bool fail_ok, bool allow_password_reuse);
+							   const char *pgport, const char *pguser,
+							   enum trivalue prompt_password, const char *progname,
+							   bool echo, bool fail_ok, bool allow_password_reuse);
 
 extern PGconn *connectMaintenanceDatabase(const char *maintenance_db,
-						   const char *pghost, const char *pgport,
-						   const char *pguser, enum trivalue prompt_password,
-						   const char *progname, bool echo);
+										  const char *pghost, const char *pgport,
+										  const char *pguser, enum trivalue prompt_password,
+										  const char *progname, bool echo);
 
 extern PGresult *executeQuery(PGconn *conn, const char *query,
-			 const char *progname, bool echo);
+							  const char *progname, bool echo);
 
 extern void executeCommand(PGconn *conn, const char *query,
-			   const char *progname, bool echo);
+						   const char *progname, bool echo);
 
 extern bool executeMaintenanceCommand(PGconn *conn, const char *query,
-						  bool echo);
+									  bool echo);
 
 extern void splitTableColumnsSpec(const char *spec, int encoding,
-					  char **table, const char **columns);
+								  char **table, const char **columns);
 
 extern void appendQualifiedRelation(PQExpBuffer buf, const char *name,
-						PGconn *conn, const char *progname, bool echo);
+									PGconn *conn, const char *progname, bool echo);
 
 extern bool yesno_prompt(const char *question);
 
diff --git a/src/bin/scripts/reindexdb.c b/src/bin/scripts/reindexdb.c
index ba4d10e65c17..bec57589d33a 100644
--- a/src/bin/scripts/reindexdb.c
+++ b/src/bin/scripts/reindexdb.c
@@ -17,20 +17,20 @@
 
 
 static void reindex_one_database(const char *name, const char *dbname,
-					 const char *type, const char *host,
-					 const char *port, const char *username,
-					 enum trivalue prompt_password, const char *progname,
-					 bool echo, bool verbose, bool concurrently);
+								 const char *type, const char *host,
+								 const char *port, const char *username,
+								 enum trivalue prompt_password, const char *progname,
+								 bool echo, bool verbose, bool concurrently);
 static void reindex_all_databases(const char *maintenance_db,
-					  const char *host, const char *port,
-					  const char *username, enum trivalue prompt_password,
-					  const char *progname, bool echo,
-					  bool quiet, bool verbose, bool concurrently);
+								  const char *host, const char *port,
+								  const char *username, enum trivalue prompt_password,
+								  const char *progname, bool echo,
+								  bool quiet, bool verbose, bool concurrently);
 static void reindex_system_catalogs(const char *dbname,
-						const char *host, const char *port,
-						const char *username, enum trivalue prompt_password,
-						const char *progname, bool echo, bool verbose,
-						bool concurrently);
+									const char *host, const char *port,
+									const char *username, enum trivalue prompt_password,
+									const char *progname, bool echo, bool verbose,
+									bool concurrently);
 static void help(const char *progname);
 
 int
diff --git a/src/bin/scripts/vacuumdb.c b/src/bin/scripts/vacuumdb.c
index 6d216aab6b82..df2a315f9584 100644
--- a/src/bin/scripts/vacuumdb.c
+++ b/src/bin/scripts/vacuumdb.c
@@ -50,32 +50,32 @@ typedef struct vacuumingOptions
 
 
 static void vacuum_one_database(const char *dbname, vacuumingOptions *vacopts,
-					int stage,
-					SimpleStringList *tables,
-					const char *host, const char *port,
-					const char *username, enum trivalue prompt_password,
-					int concurrentCons,
-					const char *progname, bool echo, bool quiet);
+								int stage,
+								SimpleStringList *tables,
+								const char *host, const char *port,
+								const char *username, enum trivalue prompt_password,
+								int concurrentCons,
+								const char *progname, bool echo, bool quiet);
 
 static void vacuum_all_databases(vacuumingOptions *vacopts,
-					 bool analyze_in_stages,
-					 const char *maintenance_db,
-					 const char *host, const char *port,
-					 const char *username, enum trivalue prompt_password,
-					 int concurrentCons,
-					 const char *progname, bool echo, bool quiet);
+								 bool analyze_in_stages,
+								 const char *maintenance_db,
+								 const char *host, const char *port,
+								 const char *username, enum trivalue prompt_password,
+								 int concurrentCons,
+								 const char *progname, bool echo, bool quiet);
 
 static void prepare_vacuum_command(PQExpBuffer sql, int serverVersion,
-					   vacuumingOptions *vacopts, const char *table);
+								   vacuumingOptions *vacopts, const char *table);
 
 static void run_vacuum_command(PGconn *conn, const char *sql, bool echo,
-				   const char *table, const char *progname, bool async);
+							   const char *table, const char *progname, bool async);
 
 static ParallelSlot *GetIdleSlot(ParallelSlot slots[], int numslots,
-			const char *progname);
+								 const char *progname);
 
 static bool ProcessQueryResult(PGconn *conn, PGresult *result,
-				   const char *progname);
+							   const char *progname);
 
 static bool GetQueryResult(PGconn *conn, const char *progname);
 
diff --git a/src/common/file_utils.c b/src/common/file_utils.c
index 3d7a637212b9..8b9ebcb314ff 100644
--- a/src/common/file_utils.c
+++ b/src/common/file_utils.c
@@ -39,8 +39,8 @@
 static int	pre_sync_fname(const char *fname, bool isdir);
 #endif
 static void walkdir(const char *path,
-		int (*action) (const char *fname, bool isdir),
-		bool process_symlinks);
+					int (*action) (const char *fname, bool isdir),
+					bool process_symlinks);
 
 /*
  * Issue fsync recursively on PGDATA and all its contents.
diff --git a/src/common/ip.c b/src/common/ip.c
index 8b56251c9688..7897fdc9ffe6 100644
--- a/src/common/ip.c
+++ b/src/common/ip.c
@@ -39,14 +39,14 @@
 
 
 #ifdef	HAVE_UNIX_SOCKETS
-static int getaddrinfo_unix(const char *path,
-				 const struct addrinfo *hintsp,
-				 struct addrinfo **result);
-
-static int getnameinfo_unix(const struct sockaddr_un *sa, int salen,
-				 char *node, int nodelen,
-				 char *service, int servicelen,
-				 int flags);
+static int	getaddrinfo_unix(const char *path,
+							 const struct addrinfo *hintsp,
+							 struct addrinfo **result);
+
+static int	getnameinfo_unix(const struct sockaddr_un *sa, int salen,
+							 char *node, int nodelen,
+							 char *service, int servicelen,
+							 int flags);
 #endif
 
 
diff --git a/src/fe_utils/print.c b/src/fe_utils/print.c
index 779a95e8bc18..e41f42ea9817 100644
--- a/src/fe_utils/print.c
+++ b/src/fe_utils/print.c
@@ -200,10 +200,10 @@ static const unicodeStyleFormat unicode_style = {
 /* Local functions */
 static int	strlen_max_width(unsigned char *str, int *target_width, int encoding);
 static void IsPagerNeeded(const printTableContent *cont, int extra_lines, bool expanded,
-			  FILE **fout, bool *is_pager);
+						  FILE **fout, bool *is_pager);
 
 static void print_aligned_vertical(const printTableContent *cont,
-					   FILE *fout, bool is_pager);
+								   FILE *fout, bool is_pager);
 
 
 /* Count number of digits in integral part of number */
diff --git a/src/include/access/amvalidate.h b/src/include/access/amvalidate.h
index 5888c22350f9..317e1e689380 100644
--- a/src/include/access/amvalidate.h
+++ b/src/include/access/amvalidate.h
@@ -28,9 +28,9 @@ typedef struct OpFamilyOpFuncGroup
 /* Functions in access/index/amvalidate.c */
 extern List *identify_opfamily_groups(CatCList *oprlist, CatCList *proclist);
 extern bool check_amproc_signature(Oid funcid, Oid restype, bool exact,
-					   int minargs, int maxargs,...);
+								   int minargs, int maxargs,...);
 extern bool check_amop_signature(Oid opno, Oid restype,
-					 Oid lefttype, Oid righttype);
+								 Oid lefttype, Oid righttype);
 extern bool opfamily_can_sort_type(Oid opfamilyoid, Oid datatypeoid);
 
 #endif							/* AMVALIDATE_H */
diff --git a/src/include/access/brin_internal.h b/src/include/access/brin_internal.h
index 1defef832daa..b1c91999469f 100644
--- a/src/include/access/brin_internal.h
+++ b/src/include/access/brin_internal.h
@@ -85,23 +85,23 @@ typedef struct BrinDesc
 extern BrinDesc *brin_build_desc(Relation rel);
 extern void brin_free_desc(BrinDesc *bdesc);
 extern IndexBuildResult *brinbuild(Relation heap, Relation index,
-		  struct IndexInfo *indexInfo);
+								   struct IndexInfo *indexInfo);
 extern void brinbuildempty(Relation index);
 extern bool brininsert(Relation idxRel, Datum *values, bool *nulls,
-		   ItemPointer heaptid, Relation heapRel,
-		   IndexUniqueCheck checkUnique,
-		   struct IndexInfo *indexInfo);
+					   ItemPointer heaptid, Relation heapRel,
+					   IndexUniqueCheck checkUnique,
+					   struct IndexInfo *indexInfo);
 extern IndexScanDesc brinbeginscan(Relation r, int nkeys, int norderbys);
 extern int64 bringetbitmap(IndexScanDesc scan, TIDBitmap *tbm);
 extern void brinrescan(IndexScanDesc scan, ScanKey scankey, int nscankeys,
-		   ScanKey orderbys, int norderbys);
+					   ScanKey orderbys, int norderbys);
 extern void brinendscan(IndexScanDesc scan);
 extern IndexBulkDeleteResult *brinbulkdelete(IndexVacuumInfo *info,
-			   IndexBulkDeleteResult *stats,
-			   IndexBulkDeleteCallback callback,
-			   void *callback_state);
+											 IndexBulkDeleteResult *stats,
+											 IndexBulkDeleteCallback callback,
+											 void *callback_state);
 extern IndexBulkDeleteResult *brinvacuumcleanup(IndexVacuumInfo *info,
-				  IndexBulkDeleteResult *stats);
+												IndexBulkDeleteResult *stats);
 extern bytea *brinoptions(Datum reloptions, bool validate);
 
 /* brin_validate.c */
diff --git a/src/include/access/brin_pageops.h b/src/include/access/brin_pageops.h
index 30d1761fc76f..044923581059 100644
--- a/src/include/access/brin_pageops.h
+++ b/src/include/access/brin_pageops.h
@@ -14,24 +14,24 @@
 #include "access/brin_revmap.h"
 
 extern bool brin_doupdate(Relation idxrel, BlockNumber pagesPerRange,
-			  BrinRevmap *revmap, BlockNumber heapBlk,
-			  Buffer oldbuf, OffsetNumber oldoff,
-			  const BrinTuple *origtup, Size origsz,
-			  const BrinTuple *newtup, Size newsz,
-			  bool samepage);
+						  BrinRevmap *revmap, BlockNumber heapBlk,
+						  Buffer oldbuf, OffsetNumber oldoff,
+						  const BrinTuple *origtup, Size origsz,
+						  const BrinTuple *newtup, Size newsz,
+						  bool samepage);
 extern bool brin_can_do_samepage_update(Buffer buffer, Size origsz,
-							Size newsz);
+										Size newsz);
 extern OffsetNumber brin_doinsert(Relation idxrel, BlockNumber pagesPerRange,
-			  BrinRevmap *revmap, Buffer *buffer, BlockNumber heapBlk,
-			  BrinTuple *tup, Size itemsz);
+								  BrinRevmap *revmap, Buffer *buffer, BlockNumber heapBlk,
+								  BrinTuple *tup, Size itemsz);
 
 extern void brin_page_init(Page page, uint16 type);
 extern void brin_metapage_init(Page page, BlockNumber pagesPerRange,
-				   uint16 version);
+							   uint16 version);
 
 extern bool brin_start_evacuating_page(Relation idxRel, Buffer buf);
 extern void brin_evacuate_page(Relation idxRel, BlockNumber pagesPerRange,
-				   BrinRevmap *revmap, Buffer buf);
+							   BrinRevmap *revmap, Buffer buf);
 
 extern void brin_page_cleanup(Relation idxrel, Buffer buf);
 
diff --git a/src/include/access/brin_revmap.h b/src/include/access/brin_revmap.h
index 3a7518c820b7..2ade88bc1e5a 100644
--- a/src/include/access/brin_revmap.h
+++ b/src/include/access/brin_revmap.h
@@ -24,18 +24,18 @@
 typedef struct BrinRevmap BrinRevmap;
 
 extern BrinRevmap *brinRevmapInitialize(Relation idxrel,
-					 BlockNumber *pagesPerRange, Snapshot snapshot);
+										BlockNumber *pagesPerRange, Snapshot snapshot);
 extern void brinRevmapTerminate(BrinRevmap *revmap);
 
 extern void brinRevmapExtend(BrinRevmap *revmap,
-				 BlockNumber heapBlk);
+							 BlockNumber heapBlk);
 extern Buffer brinLockRevmapPageForUpdate(BrinRevmap *revmap,
-							BlockNumber heapBlk);
+										  BlockNumber heapBlk);
 extern void brinSetHeapBlockItemptr(Buffer rmbuf, BlockNumber pagesPerRange,
-						BlockNumber heapBlk, ItemPointerData tid);
+									BlockNumber heapBlk, ItemPointerData tid);
 extern BrinTuple *brinGetTupleForHeapBlock(BrinRevmap *revmap,
-						 BlockNumber heapBlk, Buffer *buf, OffsetNumber *off,
-						 Size *size, int mode, Snapshot snapshot);
+										   BlockNumber heapBlk, Buffer *buf, OffsetNumber *off,
+										   Size *size, int mode, Snapshot snapshot);
 extern bool brinRevmapDesummarizeRange(Relation idxrel, BlockNumber heapBlk);
 
 #endif							/* BRIN_REVMAP_H */
diff --git a/src/include/access/brin_tuple.h b/src/include/access/brin_tuple.h
index f07796a9714f..474541eba460 100644
--- a/src/include/access/brin_tuple.h
+++ b/src/include/access/brin_tuple.h
@@ -84,19 +84,19 @@ typedef struct BrinTuple
 
 
 extern BrinTuple *brin_form_tuple(BrinDesc *brdesc, BlockNumber blkno,
-				BrinMemTuple *tuple, Size *size);
+								  BrinMemTuple *tuple, Size *size);
 extern BrinTuple *brin_form_placeholder_tuple(BrinDesc *brdesc,
-							BlockNumber blkno, Size *size);
+											  BlockNumber blkno, Size *size);
 extern void brin_free_tuple(BrinTuple *tuple);
 extern BrinTuple *brin_copy_tuple(BrinTuple *tuple, Size len,
-				BrinTuple *dest, Size *destsz);
+								  BrinTuple *dest, Size *destsz);
 extern bool brin_tuples_equal(const BrinTuple *a, Size alen,
-				  const BrinTuple *b, Size blen);
+							  const BrinTuple *b, Size blen);
 
 extern BrinMemTuple *brin_new_memtuple(BrinDesc *brdesc);
 extern BrinMemTuple *brin_memtuple_initialize(BrinMemTuple *dtuple,
-						 BrinDesc *brdesc);
+											  BrinDesc *brdesc);
 extern BrinMemTuple *brin_deform_tuple(BrinDesc *brdesc,
-				  BrinTuple *tuple, BrinMemTuple *dMemtuple);
+									   BrinTuple *tuple, BrinMemTuple *dMemtuple);
 
 #endif							/* BRIN_TUPLE_H */
diff --git a/src/include/access/clog.h b/src/include/access/clog.h
index 57ef9fe858e1..90ca61e7f67d 100644
--- a/src/include/access/clog.h
+++ b/src/include/access/clog.h
@@ -36,7 +36,7 @@ typedef struct xl_clog_truncate
 } xl_clog_truncate;
 
 extern void TransactionIdSetTreeStatus(TransactionId xid, int nsubxids,
-						   TransactionId *subxids, XidStatus status, XLogRecPtr lsn);
+									   TransactionId *subxids, XidStatus status, XLogRecPtr lsn);
 extern XidStatus TransactionIdGetStatus(TransactionId xid, XLogRecPtr *lsn);
 
 extern Size CLOGShmemBuffers(void);
diff --git a/src/include/access/commit_ts.h b/src/include/access/commit_ts.h
index 123c91128b88..e22bfbf3e62b 100644
--- a/src/include/access/commit_ts.h
+++ b/src/include/access/commit_ts.h
@@ -20,15 +20,15 @@
 extern PGDLLIMPORT bool track_commit_timestamp;
 
 extern bool check_track_commit_timestamp(bool *newval, void **extra,
-							 GucSource source);
+										 GucSource source);
 
 extern void TransactionTreeSetCommitTsData(TransactionId xid, int nsubxids,
-							   TransactionId *subxids, TimestampTz timestamp,
-							   RepOriginId nodeid, bool write_xlog);
+										   TransactionId *subxids, TimestampTz timestamp,
+										   RepOriginId nodeid, bool write_xlog);
 extern bool TransactionIdGetCommitTsData(TransactionId xid,
-							 TimestampTz *ts, RepOriginId *nodeid);
+										 TimestampTz *ts, RepOriginId *nodeid);
 extern TransactionId GetLatestCommitTsData(TimestampTz *ts,
-					  RepOriginId *nodeid);
+										   RepOriginId *nodeid);
 
 extern Size CommitTsShmemBuffers(void);
 extern Size CommitTsShmemSize(void);
@@ -42,7 +42,7 @@ extern void CheckPointCommitTs(void);
 extern void ExtendCommitTs(TransactionId newestXact);
 extern void TruncateCommitTs(TransactionId oldestXact);
 extern void SetCommitTsLimit(TransactionId oldestXact,
-				 TransactionId newestXact);
+							 TransactionId newestXact);
 extern void AdvanceOldestCommitTsXid(TransactionId oldestXact);
 
 /* XLOG stuff */
diff --git a/src/include/access/genam.h b/src/include/access/genam.h
index 9717183ef23d..8c053be2caf5 100644
--- a/src/include/access/genam.h
+++ b/src/include/access/genam.h
@@ -132,86 +132,86 @@ extern Relation index_open(Oid relationId, LOCKMODE lockmode);
 extern void index_close(Relation relation, LOCKMODE lockmode);
 
 extern bool index_insert(Relation indexRelation,
-			 Datum *values, bool *isnull,
-			 ItemPointer heap_t_ctid,
-			 Relation heapRelation,
-			 IndexUniqueCheck checkUnique,
-			 struct IndexInfo *indexInfo);
+						 Datum *values, bool *isnull,
+						 ItemPointer heap_t_ctid,
+						 Relation heapRelation,
+						 IndexUniqueCheck checkUnique,
+						 struct IndexInfo *indexInfo);
 
 extern IndexScanDesc index_beginscan(Relation heapRelation,
-				Relation indexRelation,
-				Snapshot snapshot,
-				int nkeys, int norderbys);
+									 Relation indexRelation,
+									 Snapshot snapshot,
+									 int nkeys, int norderbys);
 extern IndexScanDesc index_beginscan_bitmap(Relation indexRelation,
-					   Snapshot snapshot,
-					   int nkeys);
+											Snapshot snapshot,
+											int nkeys);
 extern void index_rescan(IndexScanDesc scan,
-			 ScanKey keys, int nkeys,
-			 ScanKey orderbys, int norderbys);
+						 ScanKey keys, int nkeys,
+						 ScanKey orderbys, int norderbys);
 extern void index_endscan(IndexScanDesc scan);
 extern void index_markpos(IndexScanDesc scan);
 extern void index_restrpos(IndexScanDesc scan);
 extern Size index_parallelscan_estimate(Relation indexrel, Snapshot snapshot);
 extern void index_parallelscan_initialize(Relation heaprel, Relation indexrel,
-							  Snapshot snapshot, ParallelIndexScanDesc target);
+										  Snapshot snapshot, ParallelIndexScanDesc target);
 extern void index_parallelrescan(IndexScanDesc scan);
 extern IndexScanDesc index_beginscan_parallel(Relation heaprel,
-						 Relation indexrel, int nkeys, int norderbys,
-						 ParallelIndexScanDesc pscan);
+											  Relation indexrel, int nkeys, int norderbys,
+											  ParallelIndexScanDesc pscan);
 extern ItemPointer index_getnext_tid(IndexScanDesc scan,
-				  ScanDirection direction);
+									 ScanDirection direction);
 struct TupleTableSlot;
 extern bool index_fetch_heap(IndexScanDesc scan, struct TupleTableSlot *slot);
 extern bool index_getnext_slot(IndexScanDesc scan, ScanDirection direction,
-				   struct TupleTableSlot *slot);
+							   struct TupleTableSlot *slot);
 extern int64 index_getbitmap(IndexScanDesc scan, TIDBitmap *bitmap);
 
 extern IndexBulkDeleteResult *index_bulk_delete(IndexVacuumInfo *info,
-				  IndexBulkDeleteResult *stats,
-				  IndexBulkDeleteCallback callback,
-				  void *callback_state);
+												IndexBulkDeleteResult *stats,
+												IndexBulkDeleteCallback callback,
+												void *callback_state);
 extern IndexBulkDeleteResult *index_vacuum_cleanup(IndexVacuumInfo *info,
-					 IndexBulkDeleteResult *stats);
+												   IndexBulkDeleteResult *stats);
 extern bool index_can_return(Relation indexRelation, int attno);
 extern RegProcedure index_getprocid(Relation irel, AttrNumber attnum,
-				uint16 procnum);
+									uint16 procnum);
 extern FmgrInfo *index_getprocinfo(Relation irel, AttrNumber attnum,
-				  uint16 procnum);
+								   uint16 procnum);
 extern void index_store_float8_orderby_distances(IndexScanDesc scan,
-									 Oid *orderByTypes, double *distances,
-									 bool recheckOrderBy);
+												 Oid *orderByTypes, double *distances,
+												 bool recheckOrderBy);
 
 /*
  * index access method support routines (in genam.c)
  */
 extern IndexScanDesc RelationGetIndexScan(Relation indexRelation,
-					 int nkeys, int norderbys);
+										  int nkeys, int norderbys);
 extern void IndexScanEnd(IndexScanDesc scan);
 extern char *BuildIndexValueDescription(Relation indexRelation,
-						   Datum *values, bool *isnull);
+										Datum *values, bool *isnull);
 extern TransactionId index_compute_xid_horizon_for_tuples(Relation irel,
-									 Relation hrel,
-									 Buffer ibuf,
-									 OffsetNumber *itemnos,
-									 int nitems);
+														  Relation hrel,
+														  Buffer ibuf,
+														  OffsetNumber *itemnos,
+														  int nitems);
 
 /*
  * heap-or-index access to system catalogs (in genam.c)
  */
 extern SysScanDesc systable_beginscan(Relation heapRelation,
-				   Oid indexId,
-				   bool indexOK,
-				   Snapshot snapshot,
-				   int nkeys, ScanKey key);
+									  Oid indexId,
+									  bool indexOK,
+									  Snapshot snapshot,
+									  int nkeys, ScanKey key);
 extern HeapTuple systable_getnext(SysScanDesc sysscan);
 extern bool systable_recheck_tuple(SysScanDesc sysscan, HeapTuple tup);
 extern void systable_endscan(SysScanDesc sysscan);
 extern SysScanDesc systable_beginscan_ordered(Relation heapRelation,
-						   Relation indexRelation,
-						   Snapshot snapshot,
-						   int nkeys, ScanKey key);
+											  Relation indexRelation,
+											  Snapshot snapshot,
+											  int nkeys, ScanKey key);
 extern HeapTuple systable_getnext_ordered(SysScanDesc sysscan,
-						 ScanDirection direction);
+										  ScanDirection direction);
 extern void systable_endscan_ordered(SysScanDesc sysscan);
 
 #endif							/* GENAM_H */
diff --git a/src/include/access/generic_xlog.h b/src/include/access/generic_xlog.h
index cb5b5b713a66..129c15cc2714 100644
--- a/src/include/access/generic_xlog.h
+++ b/src/include/access/generic_xlog.h
@@ -32,7 +32,7 @@ typedef struct GenericXLogState GenericXLogState;
 /* API for construction of generic xlog records */
 extern GenericXLogState *GenericXLogStart(Relation relation);
 extern Page GenericXLogRegisterBuffer(GenericXLogState *state, Buffer buffer,
-						  int flags);
+									  int flags);
 extern XLogRecPtr GenericXLogFinish(GenericXLogState *state);
 extern void GenericXLogAbort(GenericXLogState *state);
 
diff --git a/src/include/access/gin.h b/src/include/access/gin.h
index 4f0fa0378271..a8eef5a3795d 100644
--- a/src/include/access/gin.h
+++ b/src/include/access/gin.h
@@ -72,6 +72,6 @@ extern int	gin_pending_list_limit;
 /* ginutil.c */
 extern void ginGetStats(Relation index, GinStatsData *stats);
 extern void ginUpdateStats(Relation index, const GinStatsData *stats,
-			   bool is_build);
+						   bool is_build);
 
 #endif							/* GIN_H */
diff --git a/src/include/access/gin_private.h b/src/include/access/gin_private.h
index e56aaa17abfc..afb3e1572169 100644
--- a/src/include/access/gin_private.h
+++ b/src/include/access/gin_private.h
@@ -90,32 +90,32 @@ extern Buffer GinNewBuffer(Relation index);
 extern void GinInitBuffer(Buffer b, uint32 f);
 extern void GinInitPage(Page page, uint32 f, Size pageSize);
 extern void GinInitMetabuffer(Buffer b);
-extern int ginCompareEntries(GinState *ginstate, OffsetNumber attnum,
-				  Datum a, GinNullCategory categorya,
-				  Datum b, GinNullCategory categoryb);
-extern int ginCompareAttEntries(GinState *ginstate,
-					 OffsetNumber attnuma, Datum a, GinNullCategory categorya,
-					 OffsetNumber attnumb, Datum b, GinNullCategory categoryb);
+extern int	ginCompareEntries(GinState *ginstate, OffsetNumber attnum,
+							  Datum a, GinNullCategory categorya,
+							  Datum b, GinNullCategory categoryb);
+extern int	ginCompareAttEntries(GinState *ginstate,
+								 OffsetNumber attnuma, Datum a, GinNullCategory categorya,
+								 OffsetNumber attnumb, Datum b, GinNullCategory categoryb);
 extern Datum *ginExtractEntries(GinState *ginstate, OffsetNumber attnum,
-				  Datum value, bool isNull,
-				  int32 *nentries, GinNullCategory **categories);
+								Datum value, bool isNull,
+								int32 *nentries, GinNullCategory **categories);
 
 extern OffsetNumber gintuple_get_attrnum(GinState *ginstate, IndexTuple tuple);
 extern Datum gintuple_get_key(GinState *ginstate, IndexTuple tuple,
-				 GinNullCategory *category);
+							  GinNullCategory *category);
 
 /* gininsert.c */
 extern IndexBuildResult *ginbuild(Relation heap, Relation index,
-		 struct IndexInfo *indexInfo);
+								  struct IndexInfo *indexInfo);
 extern void ginbuildempty(Relation index);
 extern bool gininsert(Relation index, Datum *values, bool *isnull,
-		  ItemPointer ht_ctid, Relation heapRel,
-		  IndexUniqueCheck checkUnique,
-		  struct IndexInfo *indexInfo);
+					  ItemPointer ht_ctid, Relation heapRel,
+					  IndexUniqueCheck checkUnique,
+					  struct IndexInfo *indexInfo);
 extern void ginEntryInsert(GinState *ginstate,
-			   OffsetNumber attnum, Datum key, GinNullCategory category,
-			   ItemPointerData *items, uint32 nitem,
-			   GinStatsData *buildStats);
+						   OffsetNumber attnum, Datum key, GinNullCategory category,
+						   ItemPointerData *items, uint32 nitem,
+						   GinStatsData *buildStats);
 
 /* ginbtree.c */
 
@@ -196,34 +196,34 @@ typedef struct
  */
 
 extern GinBtreeStack *ginFindLeafPage(GinBtree btree, bool searchMode,
-				bool rootConflictCheck, Snapshot snapshot);
+									  bool rootConflictCheck, Snapshot snapshot);
 extern Buffer ginStepRight(Buffer buffer, Relation index, int lockmode);
 extern void freeGinBtreeStack(GinBtreeStack *stack);
 extern void ginInsertValue(GinBtree btree, GinBtreeStack *stack,
-			   void *insertdata, GinStatsData *buildStats);
+						   void *insertdata, GinStatsData *buildStats);
 
 /* ginentrypage.c */
 extern IndexTuple GinFormTuple(GinState *ginstate,
-			 OffsetNumber attnum, Datum key, GinNullCategory category,
-			 Pointer data, Size dataSize, int nipd, bool errorTooBig);
+							   OffsetNumber attnum, Datum key, GinNullCategory category,
+							   Pointer data, Size dataSize, int nipd, bool errorTooBig);
 extern void ginPrepareEntryScan(GinBtree btree, OffsetNumber attnum,
-					Datum key, GinNullCategory category,
-					GinState *ginstate);
+								Datum key, GinNullCategory category,
+								GinState *ginstate);
 extern void ginEntryFillRoot(GinBtree btree, Page root, BlockNumber lblkno, Page lpage, BlockNumber rblkno, Page rpage);
 extern ItemPointer ginReadTuple(GinState *ginstate, OffsetNumber attnum,
-			 IndexTuple itup, int *nitems);
+								IndexTuple itup, int *nitems);
 
 /* gindatapage.c */
 extern ItemPointer GinDataLeafPageGetItems(Page page, int *nitems, ItemPointerData advancePast);
 extern int	GinDataLeafPageGetItemsToTbm(Page page, TIDBitmap *tbm);
 extern BlockNumber createPostingTree(Relation index,
-				  ItemPointerData *items, uint32 nitems,
-				  GinStatsData *buildStats, Buffer entrybuffer);
+									 ItemPointerData *items, uint32 nitems,
+									 GinStatsData *buildStats, Buffer entrybuffer);
 extern void GinDataPageAddPostingItem(Page page, PostingItem *data, OffsetNumber offset);
 extern void GinPageDeletePostingItem(Page page, OffsetNumber offset);
 extern void ginInsertItemPointers(Relation index, BlockNumber rootBlkno,
-					  ItemPointerData *items, uint32 nitem,
-					  GinStatsData *buildStats);
+								  ItemPointerData *items, uint32 nitem,
+								  GinStatsData *buildStats);
 extern GinBtreeStack *ginScanBeginPostingTree(GinBtree btree, Relation index, BlockNumber rootBlkno, Snapshot snapshot);
 extern void ginDataFillRoot(GinBtree btree, Page root, BlockNumber lblkno, Page lpage, BlockNumber rblkno, Page rpage);
 
@@ -366,7 +366,7 @@ typedef GinScanOpaqueData *GinScanOpaque;
 extern IndexScanDesc ginbeginscan(Relation rel, int nkeys, int norderbys);
 extern void ginendscan(IndexScanDesc scan);
 extern void ginrescan(IndexScanDesc scan, ScanKey key, int nscankeys,
-		  ScanKey orderbys, int norderbys);
+					  ScanKey orderbys, int norderbys);
 extern void ginNewScanKey(IndexScanDesc scan);
 extern void ginFreeScanKeys(GinScanOpaque so);
 
@@ -378,13 +378,13 @@ extern void ginInitConsistentFunction(GinState *ginstate, GinScanKey key);
 
 /* ginvacuum.c */
 extern IndexBulkDeleteResult *ginbulkdelete(IndexVacuumInfo *info,
-			  IndexBulkDeleteResult *stats,
-			  IndexBulkDeleteCallback callback,
-			  void *callback_state);
+											IndexBulkDeleteResult *stats,
+											IndexBulkDeleteCallback callback,
+											void *callback_state);
 extern IndexBulkDeleteResult *ginvacuumcleanup(IndexVacuumInfo *info,
-				 IndexBulkDeleteResult *stats);
+											   IndexBulkDeleteResult *stats);
 extern ItemPointer ginVacuumItemPointers(GinVacuumState *gvs,
-					  ItemPointerData *items, int nitem, int *nremaining);
+										 ItemPointerData *items, int nitem, int *nremaining);
 
 /* ginvalidate.c */
 extern bool ginvalidate(Oid opclassoid);
@@ -414,13 +414,13 @@ typedef struct
 
 extern void ginInitBA(BuildAccumulator *accum);
 extern void ginInsertBAEntries(BuildAccumulator *accum,
-				   ItemPointer heapptr, OffsetNumber attnum,
-				   Datum *entries, GinNullCategory *categories,
-				   int32 nentries);
+							   ItemPointer heapptr, OffsetNumber attnum,
+							   Datum *entries, GinNullCategory *categories,
+							   int32 nentries);
 extern void ginBeginBAScan(BuildAccumulator *accum);
 extern ItemPointerData *ginGetBAEntry(BuildAccumulator *accum,
-			  OffsetNumber *attnum, Datum *key, GinNullCategory *category,
-			  uint32 *n);
+									  OffsetNumber *attnum, Datum *key, GinNullCategory *category,
+									  uint32 *n);
 
 /* ginfast.c */
 
@@ -433,25 +433,25 @@ typedef struct GinTupleCollector
 } GinTupleCollector;
 
 extern void ginHeapTupleFastInsert(GinState *ginstate,
-					   GinTupleCollector *collector);
+								   GinTupleCollector *collector);
 extern void ginHeapTupleFastCollect(GinState *ginstate,
-						GinTupleCollector *collector,
-						OffsetNumber attnum, Datum value, bool isNull,
-						ItemPointer ht_ctid);
+									GinTupleCollector *collector,
+									OffsetNumber attnum, Datum value, bool isNull,
+									ItemPointer ht_ctid);
 extern void ginInsertCleanup(GinState *ginstate, bool full_clean,
-				 bool fill_fsm, bool forceCleanup, IndexBulkDeleteResult *stats);
+							 bool fill_fsm, bool forceCleanup, IndexBulkDeleteResult *stats);
 
 /* ginpostinglist.c */
 
 extern GinPostingList *ginCompressPostingList(const ItemPointer ptrs, int nptrs,
-					   int maxsize, int *nwritten);
+											  int maxsize, int *nwritten);
 extern int	ginPostingListDecodeAllSegmentsToTbm(GinPostingList *ptr, int totalsize, TIDBitmap *tbm);
 
 extern ItemPointer ginPostingListDecodeAllSegments(GinPostingList *ptr, int len, int *ndecoded);
 extern ItemPointer ginPostingListDecode(GinPostingList *ptr, int *ndecoded);
 extern ItemPointer ginMergeItemPointers(ItemPointerData *a, uint32 na,
-					 ItemPointerData *b, uint32 nb,
-					 int *nmerged);
+										ItemPointerData *b, uint32 nb,
+										int *nmerged);
 
 /*
  * Merging the results of several gin scans compares item pointers a lot,
diff --git a/src/include/access/gist_private.h b/src/include/access/gist_private.h
index 614d9996ec2c..f80694bf9a84 100644
--- a/src/include/access/gist_private.h
+++ b/src/include/access/gist_private.h
@@ -391,18 +391,18 @@ typedef struct GiSTOptions
 /* gist.c */
 extern void gistbuildempty(Relation index);
 extern bool gistinsert(Relation r, Datum *values, bool *isnull,
-		   ItemPointer ht_ctid, Relation heapRel,
-		   IndexUniqueCheck checkUnique,
-		   struct IndexInfo *indexInfo);
+					   ItemPointer ht_ctid, Relation heapRel,
+					   IndexUniqueCheck checkUnique,
+					   struct IndexInfo *indexInfo);
 extern MemoryContext createTempGistContext(void);
 extern GISTSTATE *initGISTstate(Relation index);
 extern void freeGISTstate(GISTSTATE *giststate);
 extern void gistdoinsert(Relation r,
-			 IndexTuple itup,
-			 Size freespace,
-			 GISTSTATE *GISTstate,
-			 Relation heapRel,
-			 bool is_build);
+						 IndexTuple itup,
+						 Size freespace,
+						 GISTSTATE *GISTstate,
+						 Relation heapRel,
+						 bool is_build);
 
 /* A List of these is returned from gistplacetopage() in *splitinfo */
 typedef struct
@@ -412,38 +412,38 @@ typedef struct
 } GISTPageSplitInfo;
 
 extern bool gistplacetopage(Relation rel, Size freespace, GISTSTATE *giststate,
-				Buffer buffer,
-				IndexTuple *itup, int ntup,
-				OffsetNumber oldoffnum, BlockNumber *newblkno,
-				Buffer leftchildbuf,
-				List **splitinfo,
-				bool markleftchild,
-				Relation heapRel,
-				bool is_build);
+							Buffer buffer,
+							IndexTuple *itup, int ntup,
+							OffsetNumber oldoffnum, BlockNumber *newblkno,
+							Buffer leftchildbuf,
+							List **splitinfo,
+							bool markleftchild,
+							Relation heapRel,
+							bool is_build);
 
 extern SplitedPageLayout *gistSplit(Relation r, Page page, IndexTuple *itup,
-		  int len, GISTSTATE *giststate);
+									int len, GISTSTATE *giststate);
 
 /* gistxlog.c */
 extern XLogRecPtr gistXLogPageDelete(Buffer buffer,
-				   TransactionId xid, Buffer parentBuffer,
-				   OffsetNumber downlinkOffset);
+									 TransactionId xid, Buffer parentBuffer,
+									 OffsetNumber downlinkOffset);
 
 extern void gistXLogPageReuse(Relation rel, BlockNumber blkno,
-				  TransactionId latestRemovedXid);
+							  TransactionId latestRemovedXid);
 
 extern XLogRecPtr gistXLogUpdate(Buffer buffer,
-			   OffsetNumber *todelete, int ntodelete,
-			   IndexTuple *itup, int ntup,
-			   Buffer leftchild);
+								 OffsetNumber *todelete, int ntodelete,
+								 IndexTuple *itup, int ntup,
+								 Buffer leftchild);
 
 extern XLogRecPtr gistXLogDelete(Buffer buffer, OffsetNumber *todelete,
-			   int ntodelete, TransactionId latestRemovedXid);
+								 int ntodelete, TransactionId latestRemovedXid);
 
 extern XLogRecPtr gistXLogSplit(bool page_is_leaf,
-			  SplitedPageLayout *dist,
-			  BlockNumber origrlink, GistNSN oldnsn,
-			  Buffer leftchild, bool markfollowright);
+								SplitedPageLayout *dist,
+								BlockNumber origrlink, GistNSN oldnsn,
+								Buffer leftchild, bool markfollowright);
 
 /* gistget.c */
 extern bool gistgettuple(IndexScanDesc scan, ScanDirection dir);
@@ -463,90 +463,90 @@ extern bool gistvalidate(Oid opclassoid);
 
 extern bytea *gistoptions(Datum reloptions, bool validate);
 extern bool gistproperty(Oid index_oid, int attno,
-			 IndexAMProperty prop, const char *propname,
-			 bool *res, bool *isnull);
+						 IndexAMProperty prop, const char *propname,
+						 bool *res, bool *isnull);
 extern bool gistfitpage(IndexTuple *itvec, int len);
 extern bool gistnospace(Page page, IndexTuple *itvec, int len, OffsetNumber todelete, Size freespace);
 extern void gistcheckpage(Relation rel, Buffer buf);
 extern Buffer gistNewBuffer(Relation r);
 extern bool gistPageRecyclable(Page page);
 extern void gistfillbuffer(Page page, IndexTuple *itup, int len,
-			   OffsetNumber off);
+						   OffsetNumber off);
 extern IndexTuple *gistextractpage(Page page, int *len /* out */ );
 extern IndexTuple *gistjoinvector(
-			   IndexTuple *itvec, int *len,
-			   IndexTuple *additvec, int addlen);
+								  IndexTuple *itvec, int *len,
+								  IndexTuple *additvec, int addlen);
 extern IndexTupleData *gistfillitupvec(IndexTuple *vec, int veclen, int *memlen);
 
 extern IndexTuple gistunion(Relation r, IndexTuple *itvec,
-		  int len, GISTSTATE *giststate);
+							int len, GISTSTATE *giststate);
 extern IndexTuple gistgetadjusted(Relation r,
-				IndexTuple oldtup,
-				IndexTuple addtup,
-				GISTSTATE *giststate);
+								  IndexTuple oldtup,
+								  IndexTuple addtup,
+								  GISTSTATE *giststate);
 extern IndexTuple gistFormTuple(GISTSTATE *giststate,
-			  Relation r, Datum *attdata, bool *isnull, bool isleaf);
+								Relation r, Datum *attdata, bool *isnull, bool isleaf);
 
 extern OffsetNumber gistchoose(Relation r, Page p,
-		   IndexTuple it,
-		   GISTSTATE *giststate);
+							   IndexTuple it,
+							   GISTSTATE *giststate);
 
 extern void GISTInitBuffer(Buffer b, uint32 f);
 extern void gistdentryinit(GISTSTATE *giststate, int nkey, GISTENTRY *e,
-			   Datum k, Relation r, Page pg, OffsetNumber o,
-			   bool l, bool isNull);
+						   Datum k, Relation r, Page pg, OffsetNumber o,
+						   bool l, bool isNull);
 
 extern float gistpenalty(GISTSTATE *giststate, int attno,
-			GISTENTRY *key1, bool isNull1,
-			GISTENTRY *key2, bool isNull2);
+						 GISTENTRY *key1, bool isNull1,
+						 GISTENTRY *key2, bool isNull2);
 extern void gistMakeUnionItVec(GISTSTATE *giststate, IndexTuple *itvec, int len,
-				   Datum *attr, bool *isnull);
+							   Datum *attr, bool *isnull);
 extern bool gistKeyIsEQ(GISTSTATE *giststate, int attno, Datum a, Datum b);
 extern void gistDeCompressAtt(GISTSTATE *giststate, Relation r, IndexTuple tuple, Page p,
-				  OffsetNumber o, GISTENTRY *attdata, bool *isnull);
+							  OffsetNumber o, GISTENTRY *attdata, bool *isnull);
 extern HeapTuple gistFetchTuple(GISTSTATE *giststate, Relation r,
-			   IndexTuple tuple);
+								IndexTuple tuple);
 extern void gistMakeUnionKey(GISTSTATE *giststate, int attno,
-				 GISTENTRY *entry1, bool isnull1,
-				 GISTENTRY *entry2, bool isnull2,
-				 Datum *dst, bool *dstisnull);
+							 GISTENTRY *entry1, bool isnull1,
+							 GISTENTRY *entry2, bool isnull2,
+							 Datum *dst, bool *dstisnull);
 
 extern XLogRecPtr gistGetFakeLSN(Relation rel);
 
 /* gistvacuum.c */
 extern IndexBulkDeleteResult *gistbulkdelete(IndexVacuumInfo *info,
-			   IndexBulkDeleteResult *stats,
-			   IndexBulkDeleteCallback callback,
-			   void *callback_state);
+											 IndexBulkDeleteResult *stats,
+											 IndexBulkDeleteCallback callback,
+											 void *callback_state);
 extern IndexBulkDeleteResult *gistvacuumcleanup(IndexVacuumInfo *info,
-				  IndexBulkDeleteResult *stats);
+												IndexBulkDeleteResult *stats);
 
 /* gistsplit.c */
 extern void gistSplitByKey(Relation r, Page page, IndexTuple *itup,
-			   int len, GISTSTATE *giststate,
-			   GistSplitVector *v,
-			   int attno);
+						   int len, GISTSTATE *giststate,
+						   GistSplitVector *v,
+						   int attno);
 
 /* gistbuild.c */
 extern IndexBuildResult *gistbuild(Relation heap, Relation index,
-		  struct IndexInfo *indexInfo);
+								   struct IndexInfo *indexInfo);
 extern void gistValidateBufferingOption(const char *value);
 
 /* gistbuildbuffers.c */
 extern GISTBuildBuffers *gistInitBuildBuffers(int pagesPerBuffer, int levelStep,
-					 int maxLevel);
+											  int maxLevel);
 extern GISTNodeBuffer *gistGetNodeBuffer(GISTBuildBuffers *gfbb,
-				  GISTSTATE *giststate,
-				  BlockNumber blkno, int level);
+										 GISTSTATE *giststate,
+										 BlockNumber blkno, int level);
 extern void gistPushItupToNodeBuffer(GISTBuildBuffers *gfbb,
-						 GISTNodeBuffer *nodeBuffer, IndexTuple item);
+									 GISTNodeBuffer *nodeBuffer, IndexTuple item);
 extern bool gistPopItupFromNodeBuffer(GISTBuildBuffers *gfbb,
-						  GISTNodeBuffer *nodeBuffer, IndexTuple *item);
+									  GISTNodeBuffer *nodeBuffer, IndexTuple *item);
 extern void gistFreeBuildBuffers(GISTBuildBuffers *gfbb);
 extern void gistRelocateBuildBuffersOnSplit(GISTBuildBuffers *gfbb,
-								GISTSTATE *giststate, Relation r,
-								int level, Buffer buffer,
-								List *splitinfo);
+											GISTSTATE *giststate, Relation r,
+											int level, Buffer buffer,
+											List *splitinfo);
 extern void gistUnloadNodeBuffers(GISTBuildBuffers *gfbb);
 
 #endif							/* GIST_PRIVATE_H */
diff --git a/src/include/access/gistscan.h b/src/include/access/gistscan.h
index cf9ab2ab56aa..c02445a69808 100644
--- a/src/include/access/gistscan.h
+++ b/src/include/access/gistscan.h
@@ -18,7 +18,7 @@
 
 extern IndexScanDesc gistbeginscan(Relation r, int nkeys, int norderbys);
 extern void gistrescan(IndexScanDesc scan, ScanKey key, int nkeys,
-		   ScanKey orderbys, int norderbys);
+					   ScanKey orderbys, int norderbys);
 extern void gistendscan(IndexScanDesc scan);
 
 #endif							/* GISTSCAN_H */
diff --git a/src/include/access/hash.h b/src/include/access/hash.h
index a1b0ccc898d8..210351863e22 100644
--- a/src/include/access/hash.h
+++ b/src/include/access/hash.h
@@ -343,24 +343,24 @@ typedef HashMetaPageData *HashMetaPage;
 /* public routines */
 
 extern IndexBuildResult *hashbuild(Relation heap, Relation index,
-		  struct IndexInfo *indexInfo);
+								   struct IndexInfo *indexInfo);
 extern void hashbuildempty(Relation index);
 extern bool hashinsert(Relation rel, Datum *values, bool *isnull,
-		   ItemPointer ht_ctid, Relation heapRel,
-		   IndexUniqueCheck checkUnique,
-		   struct IndexInfo *indexInfo);
+					   ItemPointer ht_ctid, Relation heapRel,
+					   IndexUniqueCheck checkUnique,
+					   struct IndexInfo *indexInfo);
 extern bool hashgettuple(IndexScanDesc scan, ScanDirection dir);
 extern int64 hashgetbitmap(IndexScanDesc scan, TIDBitmap *tbm);
 extern IndexScanDesc hashbeginscan(Relation rel, int nkeys, int norderbys);
 extern void hashrescan(IndexScanDesc scan, ScanKey scankey, int nscankeys,
-		   ScanKey orderbys, int norderbys);
+					   ScanKey orderbys, int norderbys);
 extern void hashendscan(IndexScanDesc scan);
 extern IndexBulkDeleteResult *hashbulkdelete(IndexVacuumInfo *info,
-			   IndexBulkDeleteResult *stats,
-			   IndexBulkDeleteCallback callback,
-			   void *callback_state);
+											 IndexBulkDeleteResult *stats,
+											 IndexBulkDeleteCallback callback,
+											 void *callback_state);
 extern IndexBulkDeleteResult *hashvacuumcleanup(IndexVacuumInfo *info,
-				  IndexBulkDeleteResult *stats);
+												IndexBulkDeleteResult *stats);
 extern bytea *hashoptions(Datum reloptions, bool validate);
 extern bool hashvalidate(Oid opclassoid);
 
@@ -369,52 +369,52 @@ extern bool hashvalidate(Oid opclassoid);
 /* hashinsert.c */
 extern void _hash_doinsert(Relation rel, IndexTuple itup, Relation heapRel);
 extern OffsetNumber _hash_pgaddtup(Relation rel, Buffer buf,
-			   Size itemsize, IndexTuple itup);
+								   Size itemsize, IndexTuple itup);
 extern void _hash_pgaddmultitup(Relation rel, Buffer buf, IndexTuple *itups,
-					OffsetNumber *itup_offsets, uint16 nitups);
+								OffsetNumber *itup_offsets, uint16 nitups);
 
 /* hashovfl.c */
 extern Buffer _hash_addovflpage(Relation rel, Buffer metabuf, Buffer buf, bool retain_pin);
 extern BlockNumber _hash_freeovflpage(Relation rel, Buffer bucketbuf, Buffer ovflbuf,
-				   Buffer wbuf, IndexTuple *itups, OffsetNumber *itup_offsets,
-				   Size *tups_size, uint16 nitups, BufferAccessStrategy bstrategy);
+									  Buffer wbuf, IndexTuple *itups, OffsetNumber *itup_offsets,
+									  Size *tups_size, uint16 nitups, BufferAccessStrategy bstrategy);
 extern void _hash_initbitmapbuffer(Buffer buf, uint16 bmsize, bool initpage);
 extern void _hash_squeezebucket(Relation rel,
-					Bucket bucket, BlockNumber bucket_blkno,
-					Buffer bucket_buf,
-					BufferAccessStrategy bstrategy);
+								Bucket bucket, BlockNumber bucket_blkno,
+								Buffer bucket_buf,
+								BufferAccessStrategy bstrategy);
 extern uint32 _hash_ovflblkno_to_bitno(HashMetaPage metap, BlockNumber ovflblkno);
 
 /* hashpage.c */
 extern Buffer _hash_getbuf(Relation rel, BlockNumber blkno,
-			 int access, int flags);
+						   int access, int flags);
 extern Buffer _hash_getbuf_with_condlock_cleanup(Relation rel,
-								   BlockNumber blkno, int flags);
+												 BlockNumber blkno, int flags);
 extern HashMetaPage _hash_getcachedmetap(Relation rel, Buffer *metabuf,
-					 bool force_refresh);
+										 bool force_refresh);
 extern Buffer _hash_getbucketbuf_from_hashkey(Relation rel, uint32 hashkey,
-								int access,
-								HashMetaPage *cachedmetap);
+											  int access,
+											  HashMetaPage *cachedmetap);
 extern Buffer _hash_getinitbuf(Relation rel, BlockNumber blkno);
 extern void _hash_initbuf(Buffer buf, uint32 max_bucket, uint32 num_bucket,
-			  uint32 flag, bool initpage);
+						  uint32 flag, bool initpage);
 extern Buffer _hash_getnewbuf(Relation rel, BlockNumber blkno,
-				ForkNumber forkNum);
+							  ForkNumber forkNum);
 extern Buffer _hash_getbuf_with_strategy(Relation rel, BlockNumber blkno,
-						   int access, int flags,
-						   BufferAccessStrategy bstrategy);
+										 int access, int flags,
+										 BufferAccessStrategy bstrategy);
 extern void _hash_relbuf(Relation rel, Buffer buf);
 extern void _hash_dropbuf(Relation rel, Buffer buf);
 extern void _hash_dropscanbuf(Relation rel, HashScanOpaque so);
 extern uint32 _hash_init(Relation rel, double num_tuples,
-		   ForkNumber forkNum);
+						 ForkNumber forkNum);
 extern void _hash_init_metabuffer(Buffer buf, double num_tuples,
-					  RegProcedure procid, uint16 ffactor, bool initpage);
+								  RegProcedure procid, uint16 ffactor, bool initpage);
 extern void _hash_pageinit(Page page, Size size);
 extern void _hash_expandtable(Relation rel, Buffer metabuf);
 extern void _hash_finish_split(Relation rel, Buffer metabuf, Buffer obuf,
-				   Bucket obucket, uint32 maxbucket, uint32 highmask,
-				   uint32 lowmask);
+							   Bucket obucket, uint32 maxbucket, uint32 highmask,
+							   uint32 lowmask);
 
 /* hashsearch.c */
 extern bool _hash_next(IndexScanDesc scan, ScanDirection dir);
@@ -426,7 +426,7 @@ typedef struct HSpool HSpool;	/* opaque struct in hashsort.c */
 extern HSpool *_h_spoolinit(Relation heap, Relation index, uint32 num_buckets);
 extern void _h_spooldestroy(HSpool *hspool);
 extern void _h_spool(HSpool *hspool, ItemPointer self,
-		 Datum *values, bool *isnull);
+					 Datum *values, bool *isnull);
 extern void _h_indexbuild(HSpool *hspool, Relation heapRel);
 
 /* hashutil.c */
@@ -434,30 +434,30 @@ extern bool _hash_checkqual(IndexScanDesc scan, IndexTuple itup);
 extern uint32 _hash_datum2hashkey(Relation rel, Datum key);
 extern uint32 _hash_datum2hashkey_type(Relation rel, Datum key, Oid keytype);
 extern Bucket _hash_hashkey2bucket(uint32 hashkey, uint32 maxbucket,
-					 uint32 highmask, uint32 lowmask);
+								   uint32 highmask, uint32 lowmask);
 extern uint32 _hash_log2(uint32 num);
 extern uint32 _hash_spareindex(uint32 num_bucket);
 extern uint32 _hash_get_totalbuckets(uint32 splitpoint_phase);
 extern void _hash_checkpage(Relation rel, Buffer buf, int flags);
 extern uint32 _hash_get_indextuple_hashkey(IndexTuple itup);
 extern bool _hash_convert_tuple(Relation index,
-					Datum *user_values, bool *user_isnull,
-					Datum *index_values, bool *index_isnull);
+								Datum *user_values, bool *user_isnull,
+								Datum *index_values, bool *index_isnull);
 extern OffsetNumber _hash_binsearch(Page page, uint32 hash_value);
 extern OffsetNumber _hash_binsearch_last(Page page, uint32 hash_value);
 extern BlockNumber _hash_get_oldblock_from_newbucket(Relation rel, Bucket new_bucket);
 extern BlockNumber _hash_get_newblock_from_oldbucket(Relation rel, Bucket old_bucket);
 extern Bucket _hash_get_newbucket_from_oldbucket(Relation rel, Bucket old_bucket,
-								   uint32 lowmask, uint32 maxbucket);
+												 uint32 lowmask, uint32 maxbucket);
 extern void _hash_kill_items(IndexScanDesc scan);
 
 /* hash.c */
 extern void hashbucketcleanup(Relation rel, Bucket cur_bucket,
-				  Buffer bucket_buf, BlockNumber bucket_blkno,
-				  BufferAccessStrategy bstrategy,
-				  uint32 maxbucket, uint32 highmask, uint32 lowmask,
-				  double *tuples_removed, double *num_index_tuples,
-				  bool bucket_has_garbage,
-				  IndexBulkDeleteCallback callback, void *callback_state);
+							  Buffer bucket_buf, BlockNumber bucket_blkno,
+							  BufferAccessStrategy bstrategy,
+							  uint32 maxbucket, uint32 highmask, uint32 lowmask,
+							  double *tuples_removed, double *num_index_tuples,
+							  bool bucket_has_garbage,
+							  IndexBulkDeleteCallback callback, void *callback_state);
 
 #endif							/* HASH_H */
diff --git a/src/include/access/heapam.h b/src/include/access/heapam.h
index 62aaa08eff37..b88bd8a4d73c 100644
--- a/src/include/access/heapam.h
+++ b/src/include/access/heapam.h
@@ -108,26 +108,26 @@ typedef enum
 #define HeapScanIsValid(scan) PointerIsValid(scan)
 
 extern TableScanDesc heap_beginscan(Relation relation, Snapshot snapshot,
-			   int nkeys, ScanKey key,
-			   ParallelTableScanDesc parallel_scan,
-			   uint32 flags);
+									int nkeys, ScanKey key,
+									ParallelTableScanDesc parallel_scan,
+									uint32 flags);
 extern void heap_setscanlimits(TableScanDesc scan, BlockNumber startBlk,
-				   BlockNumber endBlk);
+							   BlockNumber endBlk);
 extern void heapgetpage(TableScanDesc scan, BlockNumber page);
 extern void heap_rescan(TableScanDesc scan, ScanKey key, bool set_params,
-			bool allow_strat, bool allow_sync, bool allow_pagemode);
+						bool allow_strat, bool allow_sync, bool allow_pagemode);
 extern void heap_rescan_set_params(TableScanDesc scan, ScanKey key,
-					   bool allow_strat, bool allow_sync, bool allow_pagemode);
+								   bool allow_strat, bool allow_sync, bool allow_pagemode);
 extern void heap_endscan(TableScanDesc scan);
 extern HeapTuple heap_getnext(TableScanDesc scan, ScanDirection direction);
 extern bool heap_getnextslot(TableScanDesc sscan,
-				 ScanDirection direction, struct TupleTableSlot *slot);
+							 ScanDirection direction, struct TupleTableSlot *slot);
 
 extern bool heap_fetch(Relation relation, Snapshot snapshot,
-		   HeapTuple tuple, Buffer *userbuf);
+					   HeapTuple tuple, Buffer *userbuf);
 extern bool heap_hot_search_buffer(ItemPointer tid, Relation relation,
-					   Buffer buffer, Snapshot snapshot, HeapTuple heapTuple,
-					   bool *all_dead, bool first_call);
+								   Buffer buffer, Snapshot snapshot, HeapTuple heapTuple,
+								   bool *all_dead, bool first_call);
 
 extern void heap_get_latest_tid(TableScanDesc scan, ItemPointer tid);
 extern void setLastTid(const ItemPointer tid);
@@ -137,52 +137,52 @@ extern void FreeBulkInsertState(BulkInsertState);
 extern void ReleaseBulkInsertStatePin(BulkInsertState bistate);
 
 extern void heap_insert(Relation relation, HeapTuple tup, CommandId cid,
-			int options, BulkInsertState bistate);
+						int options, BulkInsertState bistate);
 extern void heap_multi_insert(Relation relation, struct TupleTableSlot **slots,
-				  int ntuples, CommandId cid, int options,
-				  BulkInsertState bistate);
+							  int ntuples, CommandId cid, int options,
+							  BulkInsertState bistate);
 extern TM_Result heap_delete(Relation relation, ItemPointer tid,
-			CommandId cid, Snapshot crosscheck, bool wait,
-			struct TM_FailureData *tmfd, bool changingPart);
+							 CommandId cid, Snapshot crosscheck, bool wait,
+							 struct TM_FailureData *tmfd, bool changingPart);
 extern void heap_finish_speculative(Relation relation, ItemPointer tid);
 extern void heap_abort_speculative(Relation relation, ItemPointer tid);
 extern TM_Result heap_update(Relation relation, ItemPointer otid,
-			HeapTuple newtup,
-			CommandId cid, Snapshot crosscheck, bool wait,
-			struct TM_FailureData *tmfd, LockTupleMode *lockmode);
+							 HeapTuple newtup,
+							 CommandId cid, Snapshot crosscheck, bool wait,
+							 struct TM_FailureData *tmfd, LockTupleMode *lockmode);
 extern TM_Result heap_lock_tuple(Relation relation, HeapTuple tuple,
-				CommandId cid, LockTupleMode mode, LockWaitPolicy wait_policy,
-				bool follow_update,
-				Buffer *buffer, struct TM_FailureData *tmfd);
+								 CommandId cid, LockTupleMode mode, LockWaitPolicy wait_policy,
+								 bool follow_update,
+								 Buffer *buffer, struct TM_FailureData *tmfd);
 
 extern void heap_inplace_update(Relation relation, HeapTuple tuple);
 extern bool heap_freeze_tuple(HeapTupleHeader tuple,
-				  TransactionId relfrozenxid, TransactionId relminmxid,
-				  TransactionId cutoff_xid, TransactionId cutoff_multi);
+							  TransactionId relfrozenxid, TransactionId relminmxid,
+							  TransactionId cutoff_xid, TransactionId cutoff_multi);
 extern bool heap_tuple_needs_freeze(HeapTupleHeader tuple, TransactionId cutoff_xid,
-						MultiXactId cutoff_multi, Buffer buf);
+									MultiXactId cutoff_multi, Buffer buf);
 extern bool heap_tuple_needs_eventual_freeze(HeapTupleHeader tuple);
 
 extern void simple_heap_insert(Relation relation, HeapTuple tup);
 extern void simple_heap_delete(Relation relation, ItemPointer tid);
 extern void simple_heap_update(Relation relation, ItemPointer otid,
-				   HeapTuple tup);
+							   HeapTuple tup);
 
 extern void heap_sync(Relation relation);
 
 extern TransactionId heap_compute_xid_horizon_for_tuples(Relation rel,
-									ItemPointerData *items,
-									int nitems);
+														 ItemPointerData *items,
+														 int nitems);
 
 /* in heap/pruneheap.c */
 extern void heap_page_prune_opt(Relation relation, Buffer buffer);
-extern int heap_page_prune(Relation relation, Buffer buffer,
-				TransactionId OldestXmin,
-				bool report_stats, TransactionId *latestRemovedXid);
+extern int	heap_page_prune(Relation relation, Buffer buffer,
+							TransactionId OldestXmin,
+							bool report_stats, TransactionId *latestRemovedXid);
 extern void heap_page_prune_execute(Buffer buffer,
-						OffsetNumber *redirected, int nredirected,
-						OffsetNumber *nowdead, int ndead,
-						OffsetNumber *nowunused, int nunused);
+									OffsetNumber *redirected, int nredirected,
+									OffsetNumber *nowdead, int ndead,
+									OffsetNumber *nowunused, int nunused);
 extern void heap_get_root_tuples(Page page, OffsetNumber *root_offsets);
 
 /* in heap/syncscan.c */
@@ -194,17 +194,17 @@ extern Size SyncScanShmemSize(void);
 /* in heap/vacuumlazy.c */
 struct VacuumParams;
 extern void heap_vacuum_rel(Relation onerel,
-				struct VacuumParams *params, BufferAccessStrategy bstrategy);
+							struct VacuumParams *params, BufferAccessStrategy bstrategy);
 
 /* in heap/heapam_visibility.c */
 extern bool HeapTupleSatisfiesVisibility(HeapTuple stup, Snapshot snapshot,
-							 Buffer buffer);
+										 Buffer buffer);
 extern TM_Result HeapTupleSatisfiesUpdate(HeapTuple stup, CommandId curcid,
-						 Buffer buffer);
+										  Buffer buffer);
 extern HTSV_Result HeapTupleSatisfiesVacuum(HeapTuple stup, TransactionId OldestXmin,
-						 Buffer buffer);
+											Buffer buffer);
 extern void HeapTupleSetHintBits(HeapTupleHeader tuple, Buffer buffer,
-					 uint16 infomask, TransactionId xid);
+								 uint16 infomask, TransactionId xid);
 extern bool HeapTupleHeaderIsOnlyLocked(HeapTupleHeader tuple);
 extern bool XidInMVCCSnapshot(TransactionId xid, Snapshot snapshot);
 extern bool HeapTupleIsSurelyDead(HeapTuple htup, TransactionId OldestXmin);
@@ -215,9 +215,9 @@ extern bool HeapTupleIsSurelyDead(HeapTuple htup, TransactionId OldestXmin);
  */
 struct HTAB;
 extern bool ResolveCminCmaxDuringDecoding(struct HTAB *tuplecid_data,
-							  Snapshot snapshot,
-							  HeapTuple htup,
-							  Buffer buffer,
-							  CommandId *cmin, CommandId *cmax);
+										  Snapshot snapshot,
+										  HeapTuple htup,
+										  Buffer buffer,
+										  CommandId *cmin, CommandId *cmax);
 
 #endif							/* HEAPAM_H */
diff --git a/src/include/access/heapam_xlog.h b/src/include/access/heapam_xlog.h
index 22cd13c47fce..f6cdca83eab5 100644
--- a/src/include/access/heapam_xlog.h
+++ b/src/include/access/heapam_xlog.h
@@ -384,7 +384,7 @@ typedef struct xl_heap_rewrite_mapping
 } xl_heap_rewrite_mapping;
 
 extern void HeapTupleHeaderAdvanceLatestRemovedXid(HeapTupleHeader tuple,
-									   TransactionId *latestRemovedXid);
+												   TransactionId *latestRemovedXid);
 
 extern void heap_redo(XLogReaderState *record);
 extern void heap_desc(StringInfo buf, XLogReaderState *record);
@@ -396,25 +396,25 @@ extern const char *heap2_identify(uint8 info);
 extern void heap_xlog_logical_rewrite(XLogReaderState *r);
 
 extern XLogRecPtr log_heap_cleanup_info(RelFileNode rnode,
-					  TransactionId latestRemovedXid);
+										TransactionId latestRemovedXid);
 extern XLogRecPtr log_heap_clean(Relation reln, Buffer buffer,
-			   OffsetNumber *redirected, int nredirected,
-			   OffsetNumber *nowdead, int ndead,
-			   OffsetNumber *nowunused, int nunused,
-			   TransactionId latestRemovedXid);
+								 OffsetNumber *redirected, int nredirected,
+								 OffsetNumber *nowdead, int ndead,
+								 OffsetNumber *nowunused, int nunused,
+								 TransactionId latestRemovedXid);
 extern XLogRecPtr log_heap_freeze(Relation reln, Buffer buffer,
-				TransactionId cutoff_xid, xl_heap_freeze_tuple *tuples,
-				int ntuples);
+								  TransactionId cutoff_xid, xl_heap_freeze_tuple *tuples,
+								  int ntuples);
 extern bool heap_prepare_freeze_tuple(HeapTupleHeader tuple,
-						  TransactionId relfrozenxid,
-						  TransactionId relminmxid,
-						  TransactionId cutoff_xid,
-						  TransactionId cutoff_multi,
-						  xl_heap_freeze_tuple *frz,
-						  bool *totally_frozen);
+									  TransactionId relfrozenxid,
+									  TransactionId relminmxid,
+									  TransactionId cutoff_xid,
+									  TransactionId cutoff_multi,
+									  xl_heap_freeze_tuple *frz,
+									  bool *totally_frozen);
 extern void heap_execute_freeze_tuple(HeapTupleHeader tuple,
-						  xl_heap_freeze_tuple *xlrec_tp);
+									  xl_heap_freeze_tuple *xlrec_tp);
 extern XLogRecPtr log_heap_visible(RelFileNode rnode, Buffer heap_buffer,
-				 Buffer vm_buffer, TransactionId cutoff_xid, uint8 flags);
+								   Buffer vm_buffer, TransactionId cutoff_xid, uint8 flags);
 
 #endif							/* HEAPAM_XLOG_H */
diff --git a/src/include/access/hio.h b/src/include/access/hio.h
index 8daa12a5cbf7..dbaabcc073d9 100644
--- a/src/include/access/hio.h
+++ b/src/include/access/hio.h
@@ -35,10 +35,10 @@ typedef struct BulkInsertStateData
 
 
 extern void RelationPutHeapTuple(Relation relation, Buffer buffer,
-					 HeapTuple tuple, bool token);
+								 HeapTuple tuple, bool token);
 extern Buffer RelationGetBufferForTuple(Relation relation, Size len,
-						  Buffer otherBuffer, int options,
-						  BulkInsertStateData *bistate,
-						  Buffer *vmbuffer, Buffer *vmbuffer_other);
+										Buffer otherBuffer, int options,
+										BulkInsertStateData *bistate,
+										Buffer *vmbuffer, Buffer *vmbuffer_other);
 
 #endif							/* HIO_H */
diff --git a/src/include/access/htup.h b/src/include/access/htup.h
index 27d92d4567fc..c716c7ee26cd 100644
--- a/src/include/access/htup.h
+++ b/src/include/access/htup.h
@@ -81,7 +81,7 @@ typedef HeapTupleData *HeapTuple;
 extern CommandId HeapTupleHeaderGetCmin(HeapTupleHeader tup);
 extern CommandId HeapTupleHeaderGetCmax(HeapTupleHeader tup);
 extern void HeapTupleHeaderAdjustCmax(HeapTupleHeader tup,
-						  CommandId *cmax, bool *iscombo);
+									  CommandId *cmax, bool *iscombo);
 
 /* Prototype for HeapTupleHeader accessors in heapam.c */
 extern TransactionId HeapTupleGetUpdateXid(HeapTupleHeader tuple);
diff --git a/src/include/access/htup_details.h b/src/include/access/htup_details.h
index 8c9cc374829c..27f963e9e8de 100644
--- a/src/include/access/htup_details.h
+++ b/src/include/access/htup_details.h
@@ -740,7 +740,7 @@ struct MinimalTupleData
 #else							/* defined(DISABLE_COMPLEX_MACRO) */
 
 extern Datum fastgetattr(HeapTuple tup, int attnum, TupleDesc tupleDesc,
-			bool *isnull);
+						 bool *isnull);
 #endif							/* defined(DISABLE_COMPLEX_MACRO) */
 
 
@@ -775,39 +775,39 @@ extern Datum fastgetattr(HeapTuple tup, int attnum, TupleDesc tupleDesc,
 
 /* prototypes for functions in common/heaptuple.c */
 extern Size heap_compute_data_size(TupleDesc tupleDesc,
-					   Datum *values, bool *isnull);
+								   Datum *values, bool *isnull);
 extern void heap_fill_tuple(TupleDesc tupleDesc,
-				Datum *values, bool *isnull,
-				char *data, Size data_size,
-				uint16 *infomask, bits8 *bit);
+							Datum *values, bool *isnull,
+							char *data, Size data_size,
+							uint16 *infomask, bits8 *bit);
 extern bool heap_attisnull(HeapTuple tup, int attnum, TupleDesc tupleDesc);
 extern Datum nocachegetattr(HeapTuple tup, int attnum,
-			   TupleDesc att);
+							TupleDesc att);
 extern Datum heap_getsysattr(HeapTuple tup, int attnum, TupleDesc tupleDesc,
-				bool *isnull);
+							 bool *isnull);
 extern Datum getmissingattr(TupleDesc tupleDesc,
-			   int attnum, bool *isnull);
+							int attnum, bool *isnull);
 extern HeapTuple heap_copytuple(HeapTuple tuple);
 extern void heap_copytuple_with_tuple(HeapTuple src, HeapTuple dest);
 extern Datum heap_copy_tuple_as_datum(HeapTuple tuple, TupleDesc tupleDesc);
 extern HeapTuple heap_form_tuple(TupleDesc tupleDescriptor,
-				Datum *values, bool *isnull);
+								 Datum *values, bool *isnull);
 extern HeapTuple heap_modify_tuple(HeapTuple tuple,
-				  TupleDesc tupleDesc,
-				  Datum *replValues,
-				  bool *replIsnull,
-				  bool *doReplace);
+								   TupleDesc tupleDesc,
+								   Datum *replValues,
+								   bool *replIsnull,
+								   bool *doReplace);
 extern HeapTuple heap_modify_tuple_by_cols(HeapTuple tuple,
-						  TupleDesc tupleDesc,
-						  int nCols,
-						  int *replCols,
-						  Datum *replValues,
-						  bool *replIsnull);
+										   TupleDesc tupleDesc,
+										   int nCols,
+										   int *replCols,
+										   Datum *replValues,
+										   bool *replIsnull);
 extern void heap_deform_tuple(HeapTuple tuple, TupleDesc tupleDesc,
-				  Datum *values, bool *isnull);
+							  Datum *values, bool *isnull);
 extern void heap_freetuple(HeapTuple htup);
 extern MinimalTuple heap_form_minimal_tuple(TupleDesc tupleDescriptor,
-						Datum *values, bool *isnull);
+											Datum *values, bool *isnull);
 extern void heap_free_minimal_tuple(MinimalTuple mtup);
 extern MinimalTuple heap_copy_minimal_tuple(MinimalTuple mtup);
 extern HeapTuple heap_tuple_from_minimal_tuple(MinimalTuple mtup);
diff --git a/src/include/access/itup.h b/src/include/access/itup.h
index 8c3a57a8ebaa..744ffb6c61cc 100644
--- a/src/include/access/itup.h
+++ b/src/include/access/itup.h
@@ -149,13 +149,13 @@ typedef IndexAttributeBitMapData * IndexAttributeBitMap;
 
 /* routines in indextuple.c */
 extern IndexTuple index_form_tuple(TupleDesc tupleDescriptor,
-				 Datum *values, bool *isnull);
+								   Datum *values, bool *isnull);
 extern Datum nocache_index_getattr(IndexTuple tup, int attnum,
-					  TupleDesc tupleDesc);
+								   TupleDesc tupleDesc);
 extern void index_deform_tuple(IndexTuple tup, TupleDesc tupleDescriptor,
-				   Datum *values, bool *isnull);
+							   Datum *values, bool *isnull);
 extern IndexTuple CopyIndexTuple(IndexTuple source);
 extern IndexTuple index_truncate_tuple(TupleDesc sourceDescriptor,
-					 IndexTuple source, int leavenatts);
+									   IndexTuple source, int leavenatts);
 
 #endif							/* ITUP_H */
diff --git a/src/include/access/multixact.h b/src/include/access/multixact.h
index 83ae5b6b7951..79e4c8d69278 100644
--- a/src/include/access/multixact.h
+++ b/src/include/access/multixact.h
@@ -100,21 +100,21 @@ typedef struct xl_multixact_truncate
 
 
 extern MultiXactId MultiXactIdCreate(TransactionId xid1,
-				  MultiXactStatus status1, TransactionId xid2,
-				  MultiXactStatus status2);
+									 MultiXactStatus status1, TransactionId xid2,
+									 MultiXactStatus status2);
 extern MultiXactId MultiXactIdExpand(MultiXactId multi, TransactionId xid,
-				  MultiXactStatus status);
+									 MultiXactStatus status);
 extern MultiXactId MultiXactIdCreateFromMembers(int nmembers,
-							 MultiXactMember *members);
+												MultiXactMember *members);
 
 extern MultiXactId ReadNextMultiXactId(void);
 extern bool MultiXactIdIsRunning(MultiXactId multi, bool isLockOnly);
 extern void MultiXactIdSetOldestMember(void);
-extern int GetMultiXactIdMembers(MultiXactId multi, MultiXactMember **xids,
-					  bool allow_old, bool isLockOnly);
+extern int	GetMultiXactIdMembers(MultiXactId multi, MultiXactMember **xids,
+								  bool allow_old, bool isLockOnly);
 extern bool MultiXactIdPrecedes(MultiXactId multi1, MultiXactId multi2);
 extern bool MultiXactIdPrecedesOrEquals(MultiXactId multi1,
-							MultiXactId multi2);
+										MultiXactId multi2);
 
 extern void AtEOXact_MultiXact(void);
 extern void AtPrepare_MultiXact(void);
@@ -127,34 +127,34 @@ extern void StartupMultiXact(void);
 extern void TrimMultiXact(void);
 extern void ShutdownMultiXact(void);
 extern void SetMultiXactIdLimit(MultiXactId oldest_datminmxid,
-					Oid oldest_datoid,
-					bool is_startup);
+								Oid oldest_datoid,
+								bool is_startup);
 extern void MultiXactGetCheckptMulti(bool is_shutdown,
-						 MultiXactId *nextMulti,
-						 MultiXactOffset *nextMultiOffset,
-						 MultiXactId *oldestMulti,
-						 Oid *oldestMultiDB);
+									 MultiXactId *nextMulti,
+									 MultiXactOffset *nextMultiOffset,
+									 MultiXactId *oldestMulti,
+									 Oid *oldestMultiDB);
 extern void CheckPointMultiXact(void);
 extern MultiXactId GetOldestMultiXactId(void);
 extern void TruncateMultiXact(MultiXactId oldestMulti, Oid oldestMultiDB);
 extern void MultiXactSetNextMXact(MultiXactId nextMulti,
-					  MultiXactOffset nextMultiOffset);
+								  MultiXactOffset nextMultiOffset);
 extern void MultiXactAdvanceNextMXact(MultiXactId minMulti,
-						  MultiXactOffset minMultiOffset);
+									  MultiXactOffset minMultiOffset);
 extern void MultiXactAdvanceOldest(MultiXactId oldestMulti, Oid oldestMultiDB);
 extern int	MultiXactMemberFreezeThreshold(void);
 
 extern void multixact_twophase_recover(TransactionId xid, uint16 info,
-						   void *recdata, uint32 len);
+									   void *recdata, uint32 len);
 extern void multixact_twophase_postcommit(TransactionId xid, uint16 info,
-							  void *recdata, uint32 len);
+										  void *recdata, uint32 len);
 extern void multixact_twophase_postabort(TransactionId xid, uint16 info,
-							 void *recdata, uint32 len);
+										 void *recdata, uint32 len);
 
 extern void multixact_redo(XLogReaderState *record);
 extern void multixact_desc(StringInfo buf, XLogReaderState *record);
 extern const char *multixact_identify(uint8 info);
 extern char *mxid_to_string(MultiXactId multi, int nmembers,
-			   MultiXactMember *members);
+							MultiXactMember *members);
 
 #endif							/* MULTIXACT_H */
diff --git a/src/include/access/nbtree.h b/src/include/access/nbtree.h
index 6c1acd4855f3..a3583f225bee 100644
--- a/src/include/access/nbtree.h
+++ b/src/include/access/nbtree.h
@@ -696,26 +696,26 @@ typedef BTScanOpaqueData *BTScanOpaque;
  */
 extern void btbuildempty(Relation index);
 extern bool btinsert(Relation rel, Datum *values, bool *isnull,
-		 ItemPointer ht_ctid, Relation heapRel,
-		 IndexUniqueCheck checkUnique,
-		 struct IndexInfo *indexInfo);
+					 ItemPointer ht_ctid, Relation heapRel,
+					 IndexUniqueCheck checkUnique,
+					 struct IndexInfo *indexInfo);
 extern IndexScanDesc btbeginscan(Relation rel, int nkeys, int norderbys);
 extern Size btestimateparallelscan(void);
 extern void btinitparallelscan(void *target);
 extern bool btgettuple(IndexScanDesc scan, ScanDirection dir);
 extern int64 btgetbitmap(IndexScanDesc scan, TIDBitmap *tbm);
 extern void btrescan(IndexScanDesc scan, ScanKey scankey, int nscankeys,
-		 ScanKey orderbys, int norderbys);
+					 ScanKey orderbys, int norderbys);
 extern void btparallelrescan(IndexScanDesc scan);
 extern void btendscan(IndexScanDesc scan);
 extern void btmarkpos(IndexScanDesc scan);
 extern void btrestrpos(IndexScanDesc scan);
 extern IndexBulkDeleteResult *btbulkdelete(IndexVacuumInfo *info,
-			 IndexBulkDeleteResult *stats,
-			 IndexBulkDeleteCallback callback,
-			 void *callback_state);
+										   IndexBulkDeleteResult *stats,
+										   IndexBulkDeleteCallback callback,
+										   void *callback_state);
 extern IndexBulkDeleteResult *btvacuumcleanup(IndexVacuumInfo *info,
-				IndexBulkDeleteResult *stats);
+											  IndexBulkDeleteResult *stats);
 extern bool btcanreturn(Relation index, int attno);
 
 /*
@@ -730,7 +730,7 @@ extern void _bt_parallel_advance_array_keys(IndexScanDesc scan);
  * prototypes for functions in nbtinsert.c
  */
 extern bool _bt_doinsert(Relation rel, IndexTuple itup,
-			 IndexUniqueCheck checkUnique, Relation heapRel);
+						 IndexUniqueCheck checkUnique, Relation heapRel);
 extern Buffer _bt_getstackbuf(Relation rel, BTStack stack);
 extern void _bt_finish_split(Relation rel, Buffer bbuf, BTStack stack);
 
@@ -738,15 +738,15 @@ extern void _bt_finish_split(Relation rel, Buffer bbuf, BTStack stack);
  * prototypes for functions in nbtsplitloc.c
  */
 extern OffsetNumber _bt_findsplitloc(Relation rel, Page page,
-				 OffsetNumber newitemoff, Size newitemsz, IndexTuple newitem,
-				 bool *newitemonleft);
+									 OffsetNumber newitemoff, Size newitemsz, IndexTuple newitem,
+									 bool *newitemonleft);
 
 /*
  * prototypes for functions in nbtpage.c
  */
 extern void _bt_initmetapage(Page page, BlockNumber rootbknum, uint32 level);
 extern void _bt_update_meta_cleanup_info(Relation rel,
-							 TransactionId oldestBtpoXact, float8 numHeapTuples);
+										 TransactionId oldestBtpoXact, float8 numHeapTuples);
 extern void _bt_upgrademetapage(Page page);
 extern Buffer _bt_getroot(Relation rel, int access);
 extern Buffer _bt_gettrueroot(Relation rel);
@@ -755,30 +755,30 @@ extern bool _bt_heapkeyspace(Relation rel);
 extern void _bt_checkpage(Relation rel, Buffer buf);
 extern Buffer _bt_getbuf(Relation rel, BlockNumber blkno, int access);
 extern Buffer _bt_relandgetbuf(Relation rel, Buffer obuf,
-				 BlockNumber blkno, int access);
+							   BlockNumber blkno, int access);
 extern void _bt_relbuf(Relation rel, Buffer buf);
 extern void _bt_pageinit(Page page, Size size);
 extern bool _bt_page_recyclable(Page page);
 extern void _bt_delitems_delete(Relation rel, Buffer buf,
-					OffsetNumber *itemnos, int nitems, Relation heapRel);
+								OffsetNumber *itemnos, int nitems, Relation heapRel);
 extern void _bt_delitems_vacuum(Relation rel, Buffer buf,
-					OffsetNumber *itemnos, int nitems,
-					BlockNumber lastBlockVacuumed);
+								OffsetNumber *itemnos, int nitems,
+								BlockNumber lastBlockVacuumed);
 extern int	_bt_pagedel(Relation rel, Buffer buf);
 
 /*
  * prototypes for functions in nbtsearch.c
  */
 extern BTStack _bt_search(Relation rel, BTScanInsert key, Buffer *bufP,
-		   int access, Snapshot snapshot);
+						  int access, Snapshot snapshot);
 extern Buffer _bt_moveright(Relation rel, BTScanInsert key, Buffer buf,
-			  bool forupdate, BTStack stack, int access, Snapshot snapshot);
+							bool forupdate, BTStack stack, int access, Snapshot snapshot);
 extern OffsetNumber _bt_binsrch_insert(Relation rel, BTInsertState insertstate);
 extern int32 _bt_compare(Relation rel, BTScanInsert key, Page page, OffsetNumber offnum);
 extern bool _bt_first(IndexScanDesc scan, ScanDirection dir);
 extern bool _bt_next(IndexScanDesc scan, ScanDirection dir);
 extern Buffer _bt_get_endpoint(Relation rel, uint32 level, bool rightmost,
-				 Snapshot snapshot);
+							   Snapshot snapshot);
 
 /*
  * prototypes for functions in nbtutils.c
@@ -792,7 +792,7 @@ extern void _bt_mark_array_keys(IndexScanDesc scan);
 extern void _bt_restore_array_keys(IndexScanDesc scan);
 extern void _bt_preprocess_keys(IndexScanDesc scan);
 extern bool _bt_checkkeys(IndexScanDesc scan, IndexTuple tuple,
-			  int tupnatts, ScanDirection dir, bool *continuescan);
+						  int tupnatts, ScanDirection dir, bool *continuescan);
 extern void _bt_killitems(IndexScanDesc scan);
 extern BTCycleId _bt_vacuum_cycleid(Relation rel);
 extern BTCycleId _bt_start_vacuum(Relation rel);
@@ -802,17 +802,17 @@ extern Size BTreeShmemSize(void);
 extern void BTreeShmemInit(void);
 extern bytea *btoptions(Datum reloptions, bool validate);
 extern bool btproperty(Oid index_oid, int attno,
-		   IndexAMProperty prop, const char *propname,
-		   bool *res, bool *isnull);
+					   IndexAMProperty prop, const char *propname,
+					   bool *res, bool *isnull);
 extern char *btbuildphasename(int64 phasenum);
 extern IndexTuple _bt_truncate(Relation rel, IndexTuple lastleft,
-			 IndexTuple firstright, BTScanInsert itup_key);
-extern int _bt_keep_natts_fast(Relation rel, IndexTuple lastleft,
-					IndexTuple firstright);
+							   IndexTuple firstright, BTScanInsert itup_key);
+extern int	_bt_keep_natts_fast(Relation rel, IndexTuple lastleft,
+								IndexTuple firstright);
 extern bool _bt_check_natts(Relation rel, bool heapkeyspace, Page page,
-				OffsetNumber offnum);
+							OffsetNumber offnum);
 extern void _bt_check_third_page(Relation rel, Relation heap,
-					 bool needheaptidspace, Page page, IndexTuple newtup);
+								 bool needheaptidspace, Page page, IndexTuple newtup);
 
 /*
  * prototypes for functions in nbtvalidate.c
@@ -823,7 +823,7 @@ extern bool btvalidate(Oid opclassoid);
  * prototypes for functions in nbtsort.c
  */
 extern IndexBuildResult *btbuild(Relation heap, Relation index,
-		struct IndexInfo *indexInfo);
+								 struct IndexInfo *indexInfo);
 extern void _bt_parallel_build_main(dsm_segment *seg, shm_toc *toc);
 
 #endif							/* NBTREE_H */
diff --git a/src/include/access/parallel.h b/src/include/access/parallel.h
index e650bb2eef19..c00ae6424c2a 100644
--- a/src/include/access/parallel.h
+++ b/src/include/access/parallel.h
@@ -60,7 +60,7 @@ extern PGDLLIMPORT bool InitializingParallelWorker;
 #define		IsParallelWorker()		(ParallelWorkerNumber >= 0)
 
 extern ParallelContext *CreateParallelContext(const char *library_name,
-					  const char *function_name, int nworkers);
+											  const char *function_name, int nworkers);
 extern void InitializeParallelDSM(ParallelContext *pcxt);
 extern void ReinitializeParallelDSM(ParallelContext *pcxt);
 extern void LaunchParallelWorkers(ParallelContext *pcxt);
diff --git a/src/include/access/printsimple.h b/src/include/access/printsimple.h
index 4d8dd4e67a8a..be81f361917a 100644
--- a/src/include/access/printsimple.h
+++ b/src/include/access/printsimple.h
@@ -18,6 +18,6 @@
 
 extern bool printsimple(TupleTableSlot *slot, DestReceiver *self);
 extern void printsimple_startup(DestReceiver *self, int operation,
-					TupleDesc tupdesc);
+								TupleDesc tupdesc);
 
 #endif							/* PRINTSIMPLE_H */
diff --git a/src/include/access/printtup.h b/src/include/access/printtup.h
index 8b60eba814e8..ab78c5e8803a 100644
--- a/src/include/access/printtup.h
+++ b/src/include/access/printtup.h
@@ -21,15 +21,15 @@ extern DestReceiver *printtup_create_DR(CommandDest dest);
 extern void SetRemoteDestReceiverParams(DestReceiver *self, Portal portal);
 
 extern void SendRowDescriptionMessage(StringInfo buf,
-						  TupleDesc typeinfo, List *targetlist, int16 *formats);
+									  TupleDesc typeinfo, List *targetlist, int16 *formats);
 
 extern void debugStartup(DestReceiver *self, int operation,
-			 TupleDesc typeinfo);
+						 TupleDesc typeinfo);
 extern bool debugtup(TupleTableSlot *slot, DestReceiver *self);
 
 /* XXX these are really in executor/spi.c */
 extern void spi_dest_startup(DestReceiver *self, int operation,
-				 TupleDesc typeinfo);
+							 TupleDesc typeinfo);
 extern bool spi_printtup(TupleTableSlot *slot, DestReceiver *self);
 
 #endif							/* PRINTTUP_H */
diff --git a/src/include/access/relation.h b/src/include/access/relation.h
index d2c019e69fd7..38acaa5a2e95 100644
--- a/src/include/access/relation.h
+++ b/src/include/access/relation.h
@@ -23,7 +23,7 @@ extern Relation relation_open(Oid relationId, LOCKMODE lockmode);
 extern Relation try_relation_open(Oid relationId, LOCKMODE lockmode);
 extern Relation relation_openrv(const RangeVar *relation, LOCKMODE lockmode);
 extern Relation relation_openrv_extended(const RangeVar *relation,
-						 LOCKMODE lockmode, bool missing_ok);
+										 LOCKMODE lockmode, bool missing_ok);
 extern void relation_close(Relation relation, LOCKMODE lockmode);
 
 #endif							/* ACCESS_RELATION_H */
diff --git a/src/include/access/reloptions.h b/src/include/access/reloptions.h
index 7ade18ea46b4..a1912f41e631 100644
--- a/src/include/access/reloptions.h
+++ b/src/include/access/reloptions.h
@@ -247,35 +247,35 @@ typedef struct
 
 extern relopt_kind add_reloption_kind(void);
 extern void add_bool_reloption(bits32 kinds, const char *name, const char *desc,
-				   bool default_val);
+							   bool default_val);
 extern void add_int_reloption(bits32 kinds, const char *name, const char *desc,
-				  int default_val, int min_val, int max_val);
+							  int default_val, int min_val, int max_val);
 extern void add_real_reloption(bits32 kinds, const char *name, const char *desc,
-				   double default_val, double min_val, double max_val);
+							   double default_val, double min_val, double max_val);
 extern void add_string_reloption(bits32 kinds, const char *name, const char *desc,
-					 const char *default_val, validate_string_relopt validator);
+								 const char *default_val, validate_string_relopt validator);
 
 extern Datum transformRelOptions(Datum oldOptions, List *defList,
-					const char *namspace, char *validnsps[],
-					bool acceptOidsOff, bool isReset);
+								 const char *namspace, char *validnsps[],
+								 bool acceptOidsOff, bool isReset);
 extern List *untransformRelOptions(Datum options);
 extern bytea *extractRelOptions(HeapTuple tuple, TupleDesc tupdesc,
-				  amoptions_function amoptions);
+								amoptions_function amoptions);
 extern relopt_value *parseRelOptions(Datum options, bool validate,
-				relopt_kind kind, int *numrelopts);
+									 relopt_kind kind, int *numrelopts);
 extern void *allocateReloptStruct(Size base, relopt_value *options,
-					 int numoptions);
+								  int numoptions);
 extern void fillRelOptions(void *rdopts, Size basesize,
-			   relopt_value *options, int numoptions,
-			   bool validate,
-			   const relopt_parse_elt *elems, int nelems);
+						   relopt_value *options, int numoptions,
+						   bool validate,
+						   const relopt_parse_elt *elems, int nelems);
 
 extern bytea *default_reloptions(Datum reloptions, bool validate,
-				   relopt_kind kind);
+								 relopt_kind kind);
 extern bytea *heap_reloptions(char relkind, Datum reloptions, bool validate);
 extern bytea *view_reloptions(Datum reloptions, bool validate);
 extern bytea *index_reloptions(amoptions_function amoptions, Datum reloptions,
-				 bool validate);
+							   bool validate);
 extern bytea *attribute_reloptions(Datum reloptions, bool validate);
 extern bytea *tablespace_reloptions(Datum reloptions, bool validate);
 extern LOCKMODE AlterTableGetRelOptionsLockLevel(List *defList);
diff --git a/src/include/access/rewriteheap.h b/src/include/access/rewriteheap.h
index 6006249d9629..805625391611 100644
--- a/src/include/access/rewriteheap.h
+++ b/src/include/access/rewriteheap.h
@@ -22,11 +22,11 @@
 typedef struct RewriteStateData *RewriteState;
 
 extern RewriteState begin_heap_rewrite(Relation OldHeap, Relation NewHeap,
-				   TransactionId OldestXmin, TransactionId FreezeXid,
-				   MultiXactId MultiXactCutoff, bool use_wal);
+									   TransactionId OldestXmin, TransactionId FreezeXid,
+									   MultiXactId MultiXactCutoff, bool use_wal);
 extern void end_heap_rewrite(RewriteState state);
 extern void rewrite_heap_tuple(RewriteState state, HeapTuple oldTuple,
-				   HeapTuple newTuple);
+							   HeapTuple newTuple);
 extern bool rewrite_heap_dead_tuple(RewriteState state, HeapTuple oldTuple);
 
 /*
diff --git a/src/include/access/skey.h b/src/include/access/skey.h
index 7f7405d11354..b181ef930fe7 100644
--- a/src/include/access/skey.h
+++ b/src/include/access/skey.h
@@ -127,25 +127,25 @@ typedef ScanKeyData *ScanKey;
  * prototypes for functions in access/common/scankey.c
  */
 extern void ScanKeyInit(ScanKey entry,
-			AttrNumber attributeNumber,
-			StrategyNumber strategy,
-			RegProcedure procedure,
-			Datum argument);
+						AttrNumber attributeNumber,
+						StrategyNumber strategy,
+						RegProcedure procedure,
+						Datum argument);
 extern void ScanKeyEntryInitialize(ScanKey entry,
-					   int flags,
-					   AttrNumber attributeNumber,
-					   StrategyNumber strategy,
-					   Oid subtype,
-					   Oid collation,
-					   RegProcedure procedure,
-					   Datum argument);
+								   int flags,
+								   AttrNumber attributeNumber,
+								   StrategyNumber strategy,
+								   Oid subtype,
+								   Oid collation,
+								   RegProcedure procedure,
+								   Datum argument);
 extern void ScanKeyEntryInitializeWithInfo(ScanKey entry,
-							   int flags,
-							   AttrNumber attributeNumber,
-							   StrategyNumber strategy,
-							   Oid subtype,
-							   Oid collation,
-							   FmgrInfo *finfo,
-							   Datum argument);
+										   int flags,
+										   AttrNumber attributeNumber,
+										   StrategyNumber strategy,
+										   Oid subtype,
+										   Oid collation,
+										   FmgrInfo *finfo,
+										   Datum argument);
 
 #endif							/* SKEY_H */
diff --git a/src/include/access/slru.h b/src/include/access/slru.h
index b6e66f56a0ae..b37eddb3464b 100644
--- a/src/include/access/slru.h
+++ b/src/include/access/slru.h
@@ -139,12 +139,12 @@ typedef SlruCtlData *SlruCtl;
 
 extern Size SimpleLruShmemSize(int nslots, int nlsns);
 extern void SimpleLruInit(SlruCtl ctl, const char *name, int nslots, int nlsns,
-			  LWLock *ctllock, const char *subdir, int tranche_id);
+						  LWLock *ctllock, const char *subdir, int tranche_id);
 extern int	SimpleLruZeroPage(SlruCtl ctl, int pageno);
-extern int SimpleLruReadPage(SlruCtl ctl, int pageno, bool write_ok,
-				  TransactionId xid);
-extern int SimpleLruReadPage_ReadOnly(SlruCtl ctl, int pageno,
-						   TransactionId xid);
+extern int	SimpleLruReadPage(SlruCtl ctl, int pageno, bool write_ok,
+							  TransactionId xid);
+extern int	SimpleLruReadPage_ReadOnly(SlruCtl ctl, int pageno,
+									   TransactionId xid);
 extern void SimpleLruWritePage(SlruCtl ctl, int slotno);
 extern void SimpleLruFlush(SlruCtl ctl, bool allow_redirtied);
 extern void SimpleLruTruncate(SlruCtl ctl, int cutoffPage);
@@ -157,8 +157,8 @@ extern void SlruDeleteSegment(SlruCtl ctl, int segno);
 
 /* SlruScanDirectory public callbacks */
 extern bool SlruScanDirCbReportPresence(SlruCtl ctl, char *filename,
-							int segpage, void *data);
+										int segpage, void *data);
 extern bool SlruScanDirCbDeleteAll(SlruCtl ctl, char *filename, int segpage,
-					   void *data);
+								   void *data);
 
 #endif							/* SLRU_H */
diff --git a/src/include/access/spgist.h b/src/include/access/spgist.h
index 2541d473e907..02c87949cee6 100644
--- a/src/include/access/spgist.h
+++ b/src/include/access/spgist.h
@@ -198,29 +198,29 @@ extern bytea *spgoptions(Datum reloptions, bool validate);
 
 /* spginsert.c */
 extern IndexBuildResult *spgbuild(Relation heap, Relation index,
-		 struct IndexInfo *indexInfo);
+								  struct IndexInfo *indexInfo);
 extern void spgbuildempty(Relation index);
 extern bool spginsert(Relation index, Datum *values, bool *isnull,
-		  ItemPointer ht_ctid, Relation heapRel,
-		  IndexUniqueCheck checkUnique,
-		  struct IndexInfo *indexInfo);
+					  ItemPointer ht_ctid, Relation heapRel,
+					  IndexUniqueCheck checkUnique,
+					  struct IndexInfo *indexInfo);
 
 /* spgscan.c */
 extern IndexScanDesc spgbeginscan(Relation rel, int keysz, int orderbysz);
 extern void spgendscan(IndexScanDesc scan);
 extern void spgrescan(IndexScanDesc scan, ScanKey scankey, int nscankeys,
-		  ScanKey orderbys, int norderbys);
+					  ScanKey orderbys, int norderbys);
 extern int64 spggetbitmap(IndexScanDesc scan, TIDBitmap *tbm);
 extern bool spggettuple(IndexScanDesc scan, ScanDirection dir);
 extern bool spgcanreturn(Relation index, int attno);
 
 /* spgvacuum.c */
 extern IndexBulkDeleteResult *spgbulkdelete(IndexVacuumInfo *info,
-			  IndexBulkDeleteResult *stats,
-			  IndexBulkDeleteCallback callback,
-			  void *callback_state);
+											IndexBulkDeleteResult *stats,
+											IndexBulkDeleteCallback callback,
+											void *callback_state);
 extern IndexBulkDeleteResult *spgvacuumcleanup(IndexVacuumInfo *info,
-				 IndexBulkDeleteResult *stats);
+											   IndexBulkDeleteResult *stats);
 
 /* spgvalidate.c */
 extern bool spgvalidate(Oid opclassoid);
diff --git a/src/include/access/spgist_private.h b/src/include/access/spgist_private.h
index 27daf9436ddc..4a389387325c 100644
--- a/src/include/access/spgist_private.h
+++ b/src/include/access/spgist_private.h
@@ -422,45 +422,45 @@ extern void initSpGistState(SpGistState *state, Relation index);
 extern Buffer SpGistNewBuffer(Relation index);
 extern void SpGistUpdateMetaPage(Relation index);
 extern Buffer SpGistGetBuffer(Relation index, int flags,
-				int needSpace, bool *isNew);
+							  int needSpace, bool *isNew);
 extern void SpGistSetLastUsedPage(Relation index, Buffer buffer);
 extern void SpGistInitPage(Page page, uint16 f);
 extern void SpGistInitBuffer(Buffer b, uint16 f);
 extern void SpGistInitMetapage(Page page);
 extern unsigned int SpGistGetTypeSize(SpGistTypeDesc *att, Datum datum);
 extern SpGistLeafTuple spgFormLeafTuple(SpGistState *state,
-				 ItemPointer heapPtr,
-				 Datum datum, bool isnull);
+										ItemPointer heapPtr,
+										Datum datum, bool isnull);
 extern SpGistNodeTuple spgFormNodeTuple(SpGistState *state,
-				 Datum label, bool isnull);
+										Datum label, bool isnull);
 extern SpGistInnerTuple spgFormInnerTuple(SpGistState *state,
-				  bool hasPrefix, Datum prefix,
-				  int nNodes, SpGistNodeTuple *nodes);
+										  bool hasPrefix, Datum prefix,
+										  int nNodes, SpGistNodeTuple *nodes);
 extern SpGistDeadTuple spgFormDeadTuple(SpGistState *state, int tupstate,
-				 BlockNumber blkno, OffsetNumber offnum);
+										BlockNumber blkno, OffsetNumber offnum);
 extern Datum *spgExtractNodeLabels(SpGistState *state,
-					 SpGistInnerTuple innerTuple);
+								   SpGistInnerTuple innerTuple);
 extern OffsetNumber SpGistPageAddNewItem(SpGistState *state, Page page,
-					 Item item, Size size,
-					 OffsetNumber *startOffset,
-					 bool errorOK);
+										 Item item, Size size,
+										 OffsetNumber *startOffset,
+										 bool errorOK);
 extern bool spgproperty(Oid index_oid, int attno,
-			IndexAMProperty prop, const char *propname,
-			bool *res, bool *isnull);
+						IndexAMProperty prop, const char *propname,
+						bool *res, bool *isnull);
 
 /* spgdoinsert.c */
 extern void spgUpdateNodeLink(SpGistInnerTuple tup, int nodeN,
-				  BlockNumber blkno, OffsetNumber offset);
+							  BlockNumber blkno, OffsetNumber offset);
 extern void spgPageIndexMultiDelete(SpGistState *state, Page page,
-						OffsetNumber *itemnos, int nitems,
-						int firststate, int reststate,
-						BlockNumber blkno, OffsetNumber offnum);
+									OffsetNumber *itemnos, int nitems,
+									int firststate, int reststate,
+									BlockNumber blkno, OffsetNumber offnum);
 extern bool spgdoinsert(Relation index, SpGistState *state,
-			ItemPointer heapPtr, Datum datum, bool isnull);
+						ItemPointer heapPtr, Datum datum, bool isnull);
 
 /* spgproc.c */
 extern double *spg_key_orderbys_distances(Datum key, bool isLeaf,
-						   ScanKey orderbys, int norderbys);
+										  ScanKey orderbys, int norderbys);
 extern BOX *box_copy(BOX *orig);
 
 #endif							/* SPGIST_PRIVATE_H */
diff --git a/src/include/access/table.h b/src/include/access/table.h
index 453f4dd6a1ad..44b0af70f4ee 100644
--- a/src/include/access/table.h
+++ b/src/include/access/table.h
@@ -22,7 +22,7 @@
 extern Relation table_open(Oid relationId, LOCKMODE lockmode);
 extern Relation table_openrv(const RangeVar *relation, LOCKMODE lockmode);
 extern Relation table_openrv_extended(const RangeVar *relation,
-					  LOCKMODE lockmode, bool missing_ok);
+									  LOCKMODE lockmode, bool missing_ok);
 extern void table_close(Relation relation, LOCKMODE lockmode);
 
 /*
diff --git a/src/include/access/tableam.h b/src/include/access/tableam.h
index 31c5eb9e92a9..6f1cd382d820 100644
--- a/src/include/access/tableam.h
+++ b/src/include/access/tableam.h
@@ -748,7 +748,7 @@ table_beginscan(Relation rel, Snapshot snapshot,
  * snapshot appropriate for scanning catalog relations.
  */
 extern TableScanDesc table_beginscan_catalog(Relation rel, int nkeys,
-						struct ScanKeyData *key);
+											 struct ScanKeyData *key);
 
 /*
  * Like table_beginscan(), but table_beginscan_strat() offers an extended API
@@ -895,8 +895,8 @@ extern Size table_parallelscan_estimate(Relation rel, Snapshot snapshot);
  * individual workers attach via table_beginscan_parallel.
  */
 extern void table_parallelscan_initialize(Relation rel,
-							  ParallelTableScanDesc pscan,
-							  Snapshot snapshot);
+										  ParallelTableScanDesc pscan,
+										  Snapshot snapshot);
 
 /*
  * Begin a parallel scan. `pscan` needs to have been initialized with
@@ -906,7 +906,7 @@ extern void table_parallelscan_initialize(Relation rel,
  * Caller must hold a suitable lock on the relation.
  */
 extern TableScanDesc table_beginscan_parallel(Relation rel,
-						 ParallelTableScanDesc pscan);
+											  ParallelTableScanDesc pscan);
 
 /*
  * Restart a parallel scan.  Call this in the leader process.  Caller is
@@ -998,9 +998,9 @@ table_index_fetch_tuple(struct IndexFetchTableData *scan,
  * unique index.
  */
 extern bool table_index_fetch_tuple_check(Relation rel,
-							  ItemPointer tid,
-							  Snapshot snapshot,
-							  bool *all_dead);
+										  ItemPointer tid,
+										  Snapshot snapshot,
+										  bool *all_dead);
 
 
 /* ------------------------------------------------------------------------
@@ -1705,10 +1705,10 @@ table_scan_sample_next_tuple(TableScanDesc scan,
 
 extern void simple_table_insert(Relation rel, TupleTableSlot *slot);
 extern void simple_table_delete(Relation rel, ItemPointer tid,
-					Snapshot snapshot);
+								Snapshot snapshot);
 extern void simple_table_update(Relation rel, ItemPointer otid,
-					TupleTableSlot *slot, Snapshot snapshot,
-					bool *update_indexes);
+								TupleTableSlot *slot, Snapshot snapshot,
+								bool *update_indexes);
 
 
 /* ----------------------------------------------------------------------------
@@ -1718,13 +1718,13 @@ extern void simple_table_update(Relation rel, ItemPointer otid,
 
 extern Size table_block_parallelscan_estimate(Relation rel);
 extern Size table_block_parallelscan_initialize(Relation rel,
-									ParallelTableScanDesc pscan);
+												ParallelTableScanDesc pscan);
 extern void table_block_parallelscan_reinitialize(Relation rel,
-									  ParallelTableScanDesc pscan);
+												  ParallelTableScanDesc pscan);
 extern BlockNumber table_block_parallelscan_nextpage(Relation rel,
-								  ParallelBlockTableScanDesc pbscan);
+													 ParallelBlockTableScanDesc pbscan);
 extern void table_block_parallelscan_startblock_init(Relation rel,
-										 ParallelBlockTableScanDesc pbscan);
+													 ParallelBlockTableScanDesc pbscan);
 
 
 /* ----------------------------------------------------------------------------
@@ -1735,6 +1735,6 @@ extern void table_block_parallelscan_startblock_init(Relation rel,
 extern const TableAmRoutine *GetTableAmRoutine(Oid amhandler);
 extern const TableAmRoutine *GetHeapamTableAmRoutine(void);
 extern bool check_default_table_access_method(char **newval, void **extra,
-								  GucSource source);
+											  GucSource source);
 
 #endif							/* TABLEAM_H */
diff --git a/src/include/access/timeline.h b/src/include/access/timeline.h
index 326926e4cc80..a6dc2edb8939 100644
--- a/src/include/access/timeline.h
+++ b/src/include/access/timeline.h
@@ -33,12 +33,12 @@ extern List *readTimeLineHistory(TimeLineID targetTLI);
 extern bool existsTimeLineHistory(TimeLineID probeTLI);
 extern TimeLineID findNewestTimeLine(TimeLineID startTLI);
 extern void writeTimeLineHistory(TimeLineID newTLI, TimeLineID parentTLI,
-					 XLogRecPtr switchpoint, char *reason);
+								 XLogRecPtr switchpoint, char *reason);
 extern void writeTimeLineHistoryFile(TimeLineID tli, char *content, int size);
 extern void restoreTimeLineHistoryFiles(TimeLineID begin, TimeLineID end);
 extern bool tliInHistory(TimeLineID tli, List *expectedTLIs);
 extern TimeLineID tliOfPointInHistory(XLogRecPtr ptr, List *history);
 extern XLogRecPtr tliSwitchPoint(TimeLineID tli, List *history,
-			   TimeLineID *nextTLI);
+								 TimeLineID *nextTLI);
 
 #endif							/* TIMELINE_H */
diff --git a/src/include/access/transam.h b/src/include/access/transam.h
index 4e08c4b86543..6cbb0c82c736 100644
--- a/src/include/access/transam.h
+++ b/src/include/access/transam.h
@@ -218,7 +218,7 @@ extern bool TransactionIdPrecedesOrEquals(TransactionId id1, TransactionId id2);
 extern bool TransactionIdFollows(TransactionId id1, TransactionId id2);
 extern bool TransactionIdFollowsOrEquals(TransactionId id1, TransactionId id2);
 extern TransactionId TransactionIdLatest(TransactionId mainxid,
-					int nxids, const TransactionId *xids);
+										 int nxids, const TransactionId *xids);
 extern XLogRecPtr TransactionIdGetCommitLSN(TransactionId xid);
 
 /* in transam/varsup.c */
@@ -226,7 +226,7 @@ extern FullTransactionId GetNewTransactionId(bool isSubXact);
 extern void AdvanceNextFullTransactionIdPastXid(TransactionId xid);
 extern FullTransactionId ReadNextFullTransactionId(void);
 extern void SetTransactionIdLimit(TransactionId oldest_datfrozenxid,
-					  Oid oldest_datoid);
+								  Oid oldest_datoid);
 extern void AdvanceOldestClogXid(TransactionId oldest_datfrozenxid);
 extern bool ForceTransactionIdLimitUpdate(void);
 extern Oid	GetNewObjectId(void);
diff --git a/src/include/access/tupconvert.h b/src/include/access/tupconvert.h
index dc91e2a52ad8..509e5c44efce 100644
--- a/src/include/access/tupconvert.h
+++ b/src/include/access/tupconvert.h
@@ -32,23 +32,23 @@ typedef struct TupleConversionMap
 
 
 extern TupleConversionMap *convert_tuples_by_position(TupleDesc indesc,
-						   TupleDesc outdesc,
-						   const char *msg);
+													  TupleDesc outdesc,
+													  const char *msg);
 
 extern TupleConversionMap *convert_tuples_by_name(TupleDesc indesc,
-					   TupleDesc outdesc,
-					   const char *msg);
+												  TupleDesc outdesc,
+												  const char *msg);
 
 extern AttrNumber *convert_tuples_by_name_map(TupleDesc indesc,
-						   TupleDesc outdesc,
-						   const char *msg);
+											  TupleDesc outdesc,
+											  const char *msg);
 extern AttrNumber *convert_tuples_by_name_map_if_req(TupleDesc indesc,
-								  TupleDesc outdesc,
-								  const char *msg);
+													 TupleDesc outdesc,
+													 const char *msg);
 
 extern HeapTuple execute_attr_map_tuple(HeapTuple tuple, TupleConversionMap *map);
 extern TupleTableSlot *execute_attr_map_slot(AttrNumber *attrMap,
-					  TupleTableSlot *in_slot, TupleTableSlot *out_slot);
+											 TupleTableSlot *in_slot, TupleTableSlot *out_slot);
 
 extern void free_conversion_map(TupleConversionMap *map);
 
diff --git a/src/include/access/tupdesc.h b/src/include/access/tupdesc.h
index 3610a9795ed2..a06800555c82 100644
--- a/src/include/access/tupdesc.h
+++ b/src/include/access/tupdesc.h
@@ -106,7 +106,7 @@ extern TupleDesc CreateTupleDescCopyConstr(TupleDesc tupdesc);
 extern void TupleDescCopy(TupleDesc dst, TupleDesc src);
 
 extern void TupleDescCopyEntry(TupleDesc dst, AttrNumber dstAttno,
-				   TupleDesc src, AttrNumber srcAttno);
+							   TupleDesc src, AttrNumber srcAttno);
 
 extern void FreeTupleDesc(TupleDesc tupdesc);
 
@@ -130,22 +130,22 @@ extern bool equalTupleDescs(TupleDesc tupdesc1, TupleDesc tupdesc2);
 extern uint32 hashTupleDesc(TupleDesc tupdesc);
 
 extern void TupleDescInitEntry(TupleDesc desc,
-				   AttrNumber attributeNumber,
-				   const char *attributeName,
-				   Oid oidtypeid,
-				   int32 typmod,
-				   int attdim);
+							   AttrNumber attributeNumber,
+							   const char *attributeName,
+							   Oid oidtypeid,
+							   int32 typmod,
+							   int attdim);
 
 extern void TupleDescInitBuiltinEntry(TupleDesc desc,
-						  AttrNumber attributeNumber,
-						  const char *attributeName,
-						  Oid oidtypeid,
-						  int32 typmod,
-						  int attdim);
+									  AttrNumber attributeNumber,
+									  const char *attributeName,
+									  Oid oidtypeid,
+									  int32 typmod,
+									  int attdim);
 
 extern void TupleDescInitEntryCollation(TupleDesc desc,
-							AttrNumber attributeNumber,
-							Oid collationid);
+										AttrNumber attributeNumber,
+										Oid collationid);
 
 extern TupleDesc BuildDescForRelation(List *schema);
 
diff --git a/src/include/access/tuptoaster.h b/src/include/access/tuptoaster.h
index 4bfefffbf35e..f0aea2496bf7 100644
--- a/src/include/access/tuptoaster.h
+++ b/src/include/access/tuptoaster.h
@@ -133,8 +133,8 @@ do { \
  * ----------
  */
 extern HeapTuple toast_insert_or_update(Relation rel,
-					   HeapTuple newtup, HeapTuple oldtup,
-					   int options);
+										HeapTuple newtup, HeapTuple oldtup,
+										int options);
 
 /* ----------
  * toast_delete -
@@ -171,8 +171,8 @@ extern struct varlena *heap_tuple_untoast_attr(struct varlena *attr);
  * ----------
  */
 extern struct varlena *heap_tuple_untoast_attr_slice(struct varlena *attr,
-							  int32 sliceoffset,
-							  int32 slicelength);
+													 int32 sliceoffset,
+													 int32 slicelength);
 
 /* ----------
  * toast_flatten_tuple -
@@ -190,8 +190,8 @@ extern HeapTuple toast_flatten_tuple(HeapTuple tup, TupleDesc tupleDesc);
  * ----------
  */
 extern Datum toast_flatten_tuple_to_datum(HeapTupleHeader tup,
-							 uint32 tup_len,
-							 TupleDesc tupleDesc);
+										  uint32 tup_len,
+										  TupleDesc tupleDesc);
 
 /* ----------
  * toast_build_flattened_tuple -
@@ -201,8 +201,8 @@ extern Datum toast_flatten_tuple_to_datum(HeapTupleHeader tup,
  * ----------
  */
 extern HeapTuple toast_build_flattened_tuple(TupleDesc tupleDesc,
-							Datum *values,
-							bool *isnull);
+											 Datum *values,
+											 bool *isnull);
 
 /* ----------
  * toast_compress_datum -
diff --git a/src/include/access/twophase.h b/src/include/access/twophase.h
index fcd1913c43a2..b9a531c96e3e 100644
--- a/src/include/access/twophase.h
+++ b/src/include/access/twophase.h
@@ -38,17 +38,17 @@ extern PGPROC *TwoPhaseGetDummyProc(TransactionId xid, bool lock_held);
 extern BackendId TwoPhaseGetDummyBackendId(TransactionId xid, bool lock_held);
 
 extern GlobalTransaction MarkAsPreparing(TransactionId xid, const char *gid,
-				TimestampTz prepared_at,
-				Oid owner, Oid databaseid);
+										 TimestampTz prepared_at,
+										 Oid owner, Oid databaseid);
 
 extern void StartPrepare(GlobalTransaction gxact);
 extern void EndPrepare(GlobalTransaction gxact);
 extern bool StandbyTransactionIdIsPrepared(TransactionId xid);
 
 extern TransactionId PrescanPreparedTransactions(TransactionId **xids_p,
-							int *nxids_p);
+												 int *nxids_p);
 extern void ParsePrepareRecord(uint8 info, char *xlrec,
-				   xl_xact_parsed_prepare *parsed);
+							   xl_xact_parsed_prepare *parsed);
 extern void StandbyRecoverPreparedTransactions(void);
 extern void RecoverPreparedTransactions(void);
 
@@ -57,7 +57,7 @@ extern void CheckPointTwoPhase(XLogRecPtr redo_horizon);
 extern void FinishPreparedTransaction(const char *gid, bool isCommit);
 
 extern void PrepareRedoAdd(char *buf, XLogRecPtr start_lsn,
-			   XLogRecPtr end_lsn, RepOriginId origin_id);
+						   XLogRecPtr end_lsn, RepOriginId origin_id);
 extern void PrepareRedoRemove(TransactionId xid, bool giveWarning);
 extern void restoreTwoPhaseData(void);
 #endif							/* TWOPHASE_H */
diff --git a/src/include/access/twophase_rmgr.h b/src/include/access/twophase_rmgr.h
index 1795eb36684a..b20f94b47525 100644
--- a/src/include/access/twophase_rmgr.h
+++ b/src/include/access/twophase_rmgr.h
@@ -35,6 +35,6 @@ extern const TwoPhaseCallback twophase_standby_recover_callbacks[];
 
 
 extern void RegisterTwoPhaseRecord(TwoPhaseRmgrId rmid, uint16 info,
-					   const void *data, uint32 len);
+								   const void *data, uint32 len);
 
 #endif							/* TWOPHASE_RMGR_H */
diff --git a/src/include/access/visibilitymap.h b/src/include/access/visibilitymap.h
index 1709c4904af9..2d8804351ace 100644
--- a/src/include/access/visibilitymap.h
+++ b/src/include/access/visibilitymap.h
@@ -35,13 +35,13 @@
 	((visibilitymap_get_status((r), (b), (v)) & VISIBILITYMAP_ALL_FROZEN) != 0)
 
 extern bool visibilitymap_clear(Relation rel, BlockNumber heapBlk,
-					Buffer vmbuf, uint8 flags);
+								Buffer vmbuf, uint8 flags);
 extern void visibilitymap_pin(Relation rel, BlockNumber heapBlk,
-				  Buffer *vmbuf);
+							  Buffer *vmbuf);
 extern bool visibilitymap_pin_ok(BlockNumber heapBlk, Buffer vmbuf);
 extern void visibilitymap_set(Relation rel, BlockNumber heapBlk, Buffer heapBuf,
-				  XLogRecPtr recptr, Buffer vmBuf, TransactionId cutoff_xid,
-				  uint8 flags);
+							  XLogRecPtr recptr, Buffer vmBuf, TransactionId cutoff_xid,
+							  uint8 flags);
 extern uint8 visibilitymap_get_status(Relation rel, BlockNumber heapBlk, Buffer *vmbuf);
 extern void visibilitymap_count(Relation rel, BlockNumber *all_visible, BlockNumber *all_frozen);
 extern void visibilitymap_truncate(Relation rel, BlockNumber nheapblocks);
diff --git a/src/include/access/xact.h b/src/include/access/xact.h
index d787f929f7f8..a20726afa0e1 100644
--- a/src/include/access/xact.h
+++ b/src/include/access/xact.h
@@ -413,19 +413,19 @@ extern void UnregisterSubXactCallback(SubXactCallback callback, void *arg);
 extern int	xactGetCommittedChildren(TransactionId **ptr);
 
 extern XLogRecPtr XactLogCommitRecord(TimestampTz commit_time,
-					int nsubxacts, TransactionId *subxacts,
-					int nrels, RelFileNode *rels,
-					int nmsgs, SharedInvalidationMessage *msgs,
-					bool relcacheInval, bool forceSync,
-					int xactflags,
-					TransactionId twophase_xid,
-					const char *twophase_gid);
+									  int nsubxacts, TransactionId *subxacts,
+									  int nrels, RelFileNode *rels,
+									  int nmsgs, SharedInvalidationMessage *msgs,
+									  bool relcacheInval, bool forceSync,
+									  int xactflags,
+									  TransactionId twophase_xid,
+									  const char *twophase_gid);
 
 extern XLogRecPtr XactLogAbortRecord(TimestampTz abort_time,
-				   int nsubxacts, TransactionId *subxacts,
-				   int nrels, RelFileNode *rels,
-				   int xactflags, TransactionId twophase_xid,
-				   const char *twophase_gid);
+									 int nsubxacts, TransactionId *subxacts,
+									 int nrels, RelFileNode *rels,
+									 int xactflags, TransactionId twophase_xid,
+									 const char *twophase_gid);
 extern void xact_redo(XLogReaderState *record);
 
 /* xactdesc.c */
diff --git a/src/include/access/xlog.h b/src/include/access/xlog.h
index 1ead0256ad2b..237f4e0350c8 100644
--- a/src/include/access/xlog.h
+++ b/src/include/access/xlog.h
@@ -257,8 +257,8 @@ extern CheckpointStatsData CheckpointStats;
 struct XLogRecData;
 
 extern XLogRecPtr XLogInsertRecord(struct XLogRecData *rdata,
-				 XLogRecPtr fpw_lsn,
-				 uint8 flags);
+								   XLogRecPtr fpw_lsn,
+								   uint8 flags);
 extern void XLogFlush(XLogRecPtr RecPtr);
 extern bool XLogBackgroundFlush(void);
 extern bool XLogNeedsFlush(XLogRecPtr RecPtr);
@@ -345,11 +345,11 @@ typedef enum SessionBackupState
 } SessionBackupState;
 
 extern XLogRecPtr do_pg_start_backup(const char *backupidstr, bool fast,
-				   TimeLineID *starttli_p, StringInfo labelfile,
-				   List **tablespaces, StringInfo tblspcmapfile, bool infotbssize,
-				   bool needtblspcmapfile);
+									 TimeLineID *starttli_p, StringInfo labelfile,
+									 List **tablespaces, StringInfo tblspcmapfile, bool infotbssize,
+									 bool needtblspcmapfile);
 extern XLogRecPtr do_pg_stop_backup(char *labelfile, bool waitforarchive,
-				  TimeLineID *stoptli_p);
+									TimeLineID *stoptli_p);
 extern void do_pg_abort_backup(void);
 extern SessionBackupState get_backup_status(void);
 
diff --git a/src/include/access/xlog_internal.h b/src/include/access/xlog_internal.h
index f7596071c11e..3cc9c3d669e5 100644
--- a/src/include/access/xlog_internal.h
+++ b/src/include/access/xlog_internal.h
@@ -320,10 +320,10 @@ extern char *recoveryRestoreCommand;
  * Prototypes for functions in xlogarchive.c
  */
 extern bool RestoreArchivedFile(char *path, const char *xlogfname,
-					const char *recovername, off_t expectedSize,
-					bool cleanupEnabled);
+								const char *recovername, off_t expectedSize,
+								bool cleanupEnabled);
 extern void ExecuteRecoveryCommand(const char *command, const char *commandName,
-					   bool failOnerror);
+								   bool failOnerror);
 extern void KeepFileRestoredFromArchive(const char *path, const char *xlogfname);
 extern void XLogArchiveNotify(const char *xlog);
 extern void XLogArchiveNotifySeg(XLogSegNo segno);
diff --git a/src/include/access/xloginsert.h b/src/include/access/xloginsert.h
index 30c4ff7bea1c..df24089ea453 100644
--- a/src/include/access/xloginsert.h
+++ b/src/include/access/xloginsert.h
@@ -46,17 +46,17 @@ extern void XLogEnsureRecordSpace(int nbuffers, int ndatas);
 extern void XLogRegisterData(char *data, int len);
 extern void XLogRegisterBuffer(uint8 block_id, Buffer buffer, uint8 flags);
 extern void XLogRegisterBlock(uint8 block_id, RelFileNode *rnode,
-				  ForkNumber forknum, BlockNumber blknum, char *page,
-				  uint8 flags);
+							  ForkNumber forknum, BlockNumber blknum, char *page,
+							  uint8 flags);
 extern void XLogRegisterBufData(uint8 block_id, char *data, int len);
 extern void XLogResetInsertion(void);
 extern bool XLogCheckBufferNeedsBackup(Buffer buffer);
 
 extern XLogRecPtr log_newpage(RelFileNode *rnode, ForkNumber forkNum,
-			BlockNumber blk, char *page, bool page_std);
+							  BlockNumber blk, char *page, bool page_std);
 extern XLogRecPtr log_newpage_buffer(Buffer buffer, bool page_std);
 extern void log_newpage_range(Relation rel, ForkNumber forkNum,
-				  BlockNumber startblk, BlockNumber endblk, bool page_std);
+							  BlockNumber startblk, BlockNumber endblk, bool page_std);
 extern XLogRecPtr XLogSaveBufferForHint(Buffer buffer, bool buffer_std);
 
 extern void InitXLogInsert(void);
diff --git a/src/include/access/xlogreader.h b/src/include/access/xlogreader.h
index f3bae0bf4924..04228e2a8715 100644
--- a/src/include/access/xlogreader.h
+++ b/src/include/access/xlogreader.h
@@ -198,19 +198,19 @@ struct XLogReaderState
 
 /* Get a new XLogReader */
 extern XLogReaderState *XLogReaderAllocate(int wal_segment_size,
-				   XLogPageReadCB pagereadfunc,
-				   void *private_data);
+										   XLogPageReadCB pagereadfunc,
+										   void *private_data);
 
 /* Free an XLogReader */
 extern void XLogReaderFree(XLogReaderState *state);
 
 /* Read the next XLog record. Returns NULL on end-of-WAL or failure */
 extern struct XLogRecord *XLogReadRecord(XLogReaderState *state,
-			   XLogRecPtr recptr, char **errormsg);
+										 XLogRecPtr recptr, char **errormsg);
 
 /* Validate a page */
 extern bool XLogReaderValidatePageHeader(XLogReaderState *state,
-							 XLogRecPtr recptr, char *phdr);
+										 XLogRecPtr recptr, char *phdr);
 
 /* Invalidate read state */
 extern void XLogReaderInvalReadState(XLogReaderState *state);
@@ -222,7 +222,7 @@ extern XLogRecPtr XLogFindNextRecord(XLogReaderState *state, XLogRecPtr RecPtr);
 /* Functions for decoding an XLogRecord */
 
 extern bool DecodeXLogRecord(XLogReaderState *state, XLogRecord *record,
-				 char **errmsg);
+							 char **errmsg);
 
 #define XLogRecGetTotalLen(decoder) ((decoder)->decoded_record->xl_tot_len)
 #define XLogRecGetPrev(decoder) ((decoder)->decoded_record->xl_prev)
@@ -243,7 +243,7 @@ extern bool DecodeXLogRecord(XLogReaderState *state, XLogRecord *record,
 extern bool RestoreBlockImage(XLogReaderState *recoder, uint8 block_id, char *dst);
 extern char *XLogRecGetBlockData(XLogReaderState *record, uint8 block_id, Size *len);
 extern bool XLogRecGetBlockTag(XLogReaderState *record, uint8 block_id,
-				   RelFileNode *rnode, ForkNumber *forknum,
-				   BlockNumber *blknum);
+							   RelFileNode *rnode, ForkNumber *forknum,
+							   BlockNumber *blknum);
 
 #endif							/* XLOGREADER_H */
diff --git a/src/include/access/xlogutils.h b/src/include/access/xlogutils.h
index 0ab5ba62f51a..4105b59904b4 100644
--- a/src/include/access/xlogutils.h
+++ b/src/include/access/xlogutils.h
@@ -21,7 +21,7 @@ extern void XLogCheckInvalidPages(void);
 extern void XLogDropRelation(RelFileNode rnode, ForkNumber forknum);
 extern void XLogDropDatabase(Oid dbid);
 extern void XLogTruncateRelation(RelFileNode rnode, ForkNumber forkNum,
-					 BlockNumber nblocks);
+								 BlockNumber nblocks);
 
 /* Result codes for XLogReadBufferForRedo[Extended] */
 typedef enum
@@ -34,25 +34,25 @@ typedef enum
 } XLogRedoAction;
 
 extern XLogRedoAction XLogReadBufferForRedo(XLogReaderState *record,
-					  uint8 buffer_id, Buffer *buf);
+											uint8 buffer_id, Buffer *buf);
 extern Buffer XLogInitBufferForRedo(XLogReaderState *record, uint8 block_id);
 extern XLogRedoAction XLogReadBufferForRedoExtended(XLogReaderState *record,
-							  uint8 buffer_id,
-							  ReadBufferMode mode, bool get_cleanup_lock,
-							  Buffer *buf);
+													uint8 buffer_id,
+													ReadBufferMode mode, bool get_cleanup_lock,
+													Buffer *buf);
 
 extern Buffer XLogReadBufferExtended(RelFileNode rnode, ForkNumber forknum,
-					   BlockNumber blkno, ReadBufferMode mode);
+									 BlockNumber blkno, ReadBufferMode mode);
 
 extern Relation CreateFakeRelcacheEntry(RelFileNode rnode);
 extern void FreeFakeRelcacheEntry(Relation fakerel);
 
-extern int read_local_xlog_page(XLogReaderState *state,
-					 XLogRecPtr targetPagePtr, int reqLen,
-					 XLogRecPtr targetRecPtr, char *cur_page,
-					 TimeLineID *pageTLI);
+extern int	read_local_xlog_page(XLogReaderState *state,
+								 XLogRecPtr targetPagePtr, int reqLen,
+								 XLogRecPtr targetRecPtr, char *cur_page,
+								 TimeLineID *pageTLI);
 
 extern void XLogReadDetermineTimeline(XLogReaderState *state,
-						  XLogRecPtr wantPage, uint32 wantLength);
+									  XLogRecPtr wantPage, uint32 wantLength);
 
 #endif
diff --git a/src/include/bootstrap/bootstrap.h b/src/include/bootstrap/bootstrap.h
index ac3a331ee41f..03706ad4f69e 100644
--- a/src/include/bootstrap/bootstrap.h
+++ b/src/include/bootstrap/bootstrap.h
@@ -48,13 +48,13 @@ extern void index_register(Oid heap, Oid ind, IndexInfo *indexInfo);
 extern void build_indices(void);
 
 extern void boot_get_type_io_data(Oid typid,
-					  int16 *typlen,
-					  bool *typbyval,
-					  char *typalign,
-					  char *typdelim,
-					  Oid *typioparam,
-					  Oid *typinput,
-					  Oid *typoutput);
+								  int16 *typlen,
+								  bool *typbyval,
+								  char *typalign,
+								  char *typdelim,
+								  Oid *typioparam,
+								  Oid *typinput,
+								  Oid *typoutput);
 
 extern int	boot_yyparse(void);
 
diff --git a/src/include/c.h b/src/include/c.h
index 0f89c0224d6c..2a082afab11c 100644
--- a/src/include/c.h
+++ b/src/include/c.h
@@ -414,15 +414,15 @@ typedef unsigned long long int uint64;
 
 typedef PG_INT128_TYPE int128
 #if defined(pg_attribute_aligned)
-pg_attribute_aligned(MAXIMUM_ALIGNOF)
+			pg_attribute_aligned(MAXIMUM_ALIGNOF)
 #endif
-;
+		   ;
 
 typedef unsigned PG_INT128_TYPE uint128
 #if defined(pg_attribute_aligned)
-pg_attribute_aligned(MAXIMUM_ALIGNOF)
+			pg_attribute_aligned(MAXIMUM_ALIGNOF)
 #endif
-;
+		   ;
 
 #endif
 #endif
@@ -800,8 +800,8 @@ typedef NameData *Name;
  */
 #ifndef FRONTEND
 extern void ExceptionalCondition(const char *conditionName,
-					 const char *errorType,
-					 const char *fileName, int lineNumber) pg_attribute_noreturn();
+								 const char *errorType,
+								 const char *fileName, int lineNumber) pg_attribute_noreturn();
 #endif
 
 /*
diff --git a/src/include/catalog/catalog.h b/src/include/catalog/catalog.h
index adeba6587300..0e8542d82226 100644
--- a/src/include/catalog/catalog.h
+++ b/src/include/catalog/catalog.h
@@ -34,9 +34,9 @@ extern bool IsReservedName(const char *name);
 
 extern bool IsSharedRelation(Oid relationId);
 
-extern Oid GetNewOidWithIndex(Relation relation, Oid indexId,
-				   AttrNumber oidcolumn);
-extern Oid GetNewRelFileNode(Oid reltablespace, Relation pg_class,
-				  char relpersistence);
+extern Oid	GetNewOidWithIndex(Relation relation, Oid indexId,
+							   AttrNumber oidcolumn);
+extern Oid	GetNewRelFileNode(Oid reltablespace, Relation pg_class,
+							  char relpersistence);
 
 #endif							/* CATALOG_H */
diff --git a/src/include/catalog/dependency.h b/src/include/catalog/dependency.h
index 5a43c1e1a8c4..ef9c86864cd6 100644
--- a/src/include/catalog/dependency.h
+++ b/src/include/catalog/dependency.h
@@ -143,34 +143,34 @@ typedef enum ObjectClass
 /* in dependency.c */
 
 extern void performDeletion(const ObjectAddress *object,
-				DropBehavior behavior, int flags);
+							DropBehavior behavior, int flags);
 
 extern void performMultipleDeletions(const ObjectAddresses *objects,
-						 DropBehavior behavior, int flags);
+									 DropBehavior behavior, int flags);
 
 extern void recordDependencyOnExpr(const ObjectAddress *depender,
-					   Node *expr, List *rtable,
-					   DependencyType behavior);
+								   Node *expr, List *rtable,
+								   DependencyType behavior);
 
 extern void recordDependencyOnSingleRelExpr(const ObjectAddress *depender,
-								Node *expr, Oid relId,
-								DependencyType behavior,
-								DependencyType self_behavior,
-								bool ignore_self);
+											Node *expr, Oid relId,
+											DependencyType behavior,
+											DependencyType self_behavior,
+											bool ignore_self);
 
 extern ObjectClass getObjectClass(const ObjectAddress *object);
 
 extern ObjectAddresses *new_object_addresses(void);
 
 extern void add_exact_object_address(const ObjectAddress *object,
-						 ObjectAddresses *addrs);
+									 ObjectAddresses *addrs);
 
 extern bool object_address_present(const ObjectAddress *object,
-					   const ObjectAddresses *addrs);
+								   const ObjectAddresses *addrs);
 
 extern void record_object_address_dependencies(const ObjectAddress *depender,
-								   ObjectAddresses *referenced,
-								   DependencyType behavior);
+											   ObjectAddresses *referenced,
+											   DependencyType behavior);
 
 extern void sort_object_addresses(ObjectAddresses *addrs);
 
@@ -179,32 +179,32 @@ extern void free_object_addresses(ObjectAddresses *addrs);
 /* in pg_depend.c */
 
 extern void recordDependencyOn(const ObjectAddress *depender,
-				   const ObjectAddress *referenced,
-				   DependencyType behavior);
+							   const ObjectAddress *referenced,
+							   DependencyType behavior);
 
 extern void recordMultipleDependencies(const ObjectAddress *depender,
-						   const ObjectAddress *referenced,
-						   int nreferenced,
-						   DependencyType behavior);
+									   const ObjectAddress *referenced,
+									   int nreferenced,
+									   DependencyType behavior);
 
 extern void recordDependencyOnCurrentExtension(const ObjectAddress *object,
-								   bool isReplace);
+											   bool isReplace);
 
 extern long deleteDependencyRecordsFor(Oid classId, Oid objectId,
-						   bool skipExtensionDeps);
+									   bool skipExtensionDeps);
 
 extern long deleteDependencyRecordsForClass(Oid classId, Oid objectId,
-								Oid refclassId, char deptype);
+											Oid refclassId, char deptype);
 
 extern long changeDependencyFor(Oid classId, Oid objectId,
-					Oid refClassId, Oid oldRefObjectId,
-					Oid newRefObjectId);
+								Oid refClassId, Oid oldRefObjectId,
+								Oid newRefObjectId);
 
 extern long changeDependenciesOf(Oid classId, Oid oldObjectId,
-					 Oid newObjectId);
+								 Oid newObjectId);
 
 extern long changeDependenciesOn(Oid refClassId, Oid oldRefObjectId,
-					 Oid newRefObjectId);
+								 Oid newRefObjectId);
 
 extern Oid	getExtensionOfObject(Oid classId, Oid objectId);
 
@@ -221,24 +221,24 @@ extern List *get_index_ref_constraints(Oid indexId);
 /* in pg_shdepend.c */
 
 extern void recordSharedDependencyOn(ObjectAddress *depender,
-						 ObjectAddress *referenced,
-						 SharedDependencyType deptype);
+									 ObjectAddress *referenced,
+									 SharedDependencyType deptype);
 
 extern void deleteSharedDependencyRecordsFor(Oid classId, Oid objectId,
-								 int32 objectSubId);
+											 int32 objectSubId);
 
 extern void recordDependencyOnOwner(Oid classId, Oid objectId, Oid owner);
 
 extern void changeDependencyOnOwner(Oid classId, Oid objectId,
-						Oid newOwnerId);
+									Oid newOwnerId);
 
 extern void updateAclDependencies(Oid classId, Oid objectId, int32 objectSubId,
-					  Oid ownerId,
-					  int noldmembers, Oid *oldmembers,
-					  int nnewmembers, Oid *newmembers);
+								  Oid ownerId,
+								  int noldmembers, Oid *oldmembers,
+								  int nnewmembers, Oid *newmembers);
 
 extern bool checkSharedDependencies(Oid classId, Oid objectId,
-						char **detail_msg, char **detail_log_msg);
+									char **detail_msg, char **detail_log_msg);
 
 extern void shdepLockAndCheckObject(Oid classId, Oid objectId);
 
diff --git a/src/include/catalog/heap.h b/src/include/catalog/heap.h
index 0d8e5e5b27e0..eec71c29d5bb 100644
--- a/src/include/catalog/heap.h
+++ b/src/include/catalog/heap.h
@@ -46,41 +46,41 @@ typedef struct CookedConstraint
 } CookedConstraint;
 
 extern Relation heap_create(const char *relname,
-			Oid relnamespace,
-			Oid reltablespace,
-			Oid relid,
-			Oid relfilenode,
-			Oid accessmtd,
-			TupleDesc tupDesc,
-			char relkind,
-			char relpersistence,
-			bool shared_relation,
-			bool mapped_relation,
-			bool allow_system_table_mods,
-			TransactionId *relfrozenxid,
-			MultiXactId *relminmxid);
-
-extern Oid heap_create_with_catalog(const char *relname,
-						 Oid relnamespace,
-						 Oid reltablespace,
-						 Oid relid,
-						 Oid reltypeid,
-						 Oid reloftypeid,
-						 Oid ownerid,
-						 Oid accessmtd,
-						 TupleDesc tupdesc,
-						 List *cooked_constraints,
-						 char relkind,
-						 char relpersistence,
-						 bool shared_relation,
-						 bool mapped_relation,
-						 OnCommitAction oncommit,
-						 Datum reloptions,
-						 bool use_user_acl,
-						 bool allow_system_table_mods,
-						 bool is_internal,
-						 Oid relrewrite,
-						 ObjectAddress *typaddress);
+							Oid relnamespace,
+							Oid reltablespace,
+							Oid relid,
+							Oid relfilenode,
+							Oid accessmtd,
+							TupleDesc tupDesc,
+							char relkind,
+							char relpersistence,
+							bool shared_relation,
+							bool mapped_relation,
+							bool allow_system_table_mods,
+							TransactionId *relfrozenxid,
+							MultiXactId *relminmxid);
+
+extern Oid	heap_create_with_catalog(const char *relname,
+									 Oid relnamespace,
+									 Oid reltablespace,
+									 Oid relid,
+									 Oid reltypeid,
+									 Oid reloftypeid,
+									 Oid ownerid,
+									 Oid accessmtd,
+									 TupleDesc tupdesc,
+									 List *cooked_constraints,
+									 char relkind,
+									 char relpersistence,
+									 bool shared_relation,
+									 bool mapped_relation,
+									 OnCommitAction oncommit,
+									 Datum reloptions,
+									 bool use_user_acl,
+									 bool allow_system_table_mods,
+									 bool is_internal,
+									 Oid relrewrite,
+									 ObjectAddress *typaddress);
 
 extern void heap_drop_with_catalog(Oid relid);
 
@@ -93,43 +93,43 @@ extern void heap_truncate_check_FKs(List *relations, bool tempTables);
 extern List *heap_truncate_find_FKs(List *relationIds);
 
 extern void InsertPgAttributeTuple(Relation pg_attribute_rel,
-					   Form_pg_attribute new_attribute,
-					   CatalogIndexState indstate);
+								   Form_pg_attribute new_attribute,
+								   CatalogIndexState indstate);
 
 extern void InsertPgClassTuple(Relation pg_class_desc,
-				   Relation new_rel_desc,
-				   Oid new_rel_oid,
-				   Datum relacl,
-				   Datum reloptions);
+							   Relation new_rel_desc,
+							   Oid new_rel_oid,
+							   Datum relacl,
+							   Datum reloptions);
 
 extern List *AddRelationNewConstraints(Relation rel,
-						  List *newColDefaults,
-						  List *newConstraints,
-						  bool allow_merge,
-						  bool is_local,
-						  bool is_internal,
-						  const char *queryString);
+									   List *newColDefaults,
+									   List *newConstraints,
+									   bool allow_merge,
+									   bool is_local,
+									   bool is_internal,
+									   const char *queryString);
 
 extern void RelationClearMissing(Relation rel);
 extern void SetAttrMissing(Oid relid, char *attname, char *value);
 
-extern Oid StoreAttrDefault(Relation rel, AttrNumber attnum,
-				 Node *expr, bool is_internal,
-				 bool add_column_mode);
+extern Oid	StoreAttrDefault(Relation rel, AttrNumber attnum,
+							 Node *expr, bool is_internal,
+							 bool add_column_mode);
 
 extern Node *cookDefault(ParseState *pstate,
-			Node *raw_default,
-			Oid atttypid,
-			int32 atttypmod,
-			const char *attname,
-			char attgenerated);
+						 Node *raw_default,
+						 Oid atttypid,
+						 int32 atttypmod,
+						 const char *attname,
+						 char attgenerated);
 
 extern void DeleteRelationTuple(Oid relid);
 extern void DeleteAttributeTuples(Oid relid);
 extern void DeleteSystemAttributeTuples(Oid relid);
 extern void RemoveAttributeById(Oid relid, AttrNumber attnum);
 extern void RemoveAttrDefault(Oid relid, AttrNumber attnum,
-				  DropBehavior behavior, bool complain, bool internal);
+							  DropBehavior behavior, bool complain, bool internal);
 extern void RemoveAttrDefaultById(Oid attrdefId);
 extern void RemoveStatistics(Oid relid, AttrNumber attnum);
 
@@ -138,23 +138,23 @@ extern const FormData_pg_attribute *SystemAttributeDefinition(AttrNumber attno);
 extern const FormData_pg_attribute *SystemAttributeByName(const char *attname);
 
 extern void CheckAttributeNamesTypes(TupleDesc tupdesc, char relkind,
-						 int flags);
+									 int flags);
 
 extern void CheckAttributeType(const char *attname,
-				   Oid atttypid, Oid attcollation,
-				   List *containing_rowtypes,
-				   int flags);
+							   Oid atttypid, Oid attcollation,
+							   List *containing_rowtypes,
+							   int flags);
 
 /* pg_partitioned_table catalog manipulation functions */
 extern void StorePartitionKey(Relation rel,
-				  char strategy,
-				  int16 partnatts,
-				  AttrNumber *partattrs,
-				  List *partexprs,
-				  Oid *partopclass,
-				  Oid *partcollation);
+							  char strategy,
+							  int16 partnatts,
+							  AttrNumber *partattrs,
+							  List *partexprs,
+							  Oid *partopclass,
+							  Oid *partcollation);
 extern void RemovePartitionKeyByRelId(Oid relid);
 extern void StorePartitionBound(Relation rel, Relation parent,
-					PartitionBoundSpec *bound);
+								PartitionBoundSpec *bound);
 
 #endif							/* HEAP_H */
diff --git a/src/include/catalog/index.h b/src/include/catalog/index.h
index c5729e262896..1113d25b2d82 100644
--- a/src/include/catalog/index.h
+++ b/src/include/catalog/index.h
@@ -40,9 +40,9 @@ typedef struct ValidateIndexState
 } ValidateIndexState;
 
 extern void index_check_primary_key(Relation heapRel,
-						IndexInfo *indexInfo,
-						bool is_alter_table,
-						IndexStmt *stmt);
+									IndexInfo *indexInfo,
+									bool is_alter_table,
+									IndexStmt *stmt);
 
 #define	INDEX_CREATE_IS_PRIMARY				(1 << 0)
 #define	INDEX_CREATE_ADD_CONSTRAINT			(1 << 1)
@@ -52,25 +52,25 @@ extern void index_check_primary_key(Relation heapRel,
 #define	INDEX_CREATE_PARTITIONED			(1 << 5)
 #define INDEX_CREATE_INVALID				(1 << 6)
 
-extern Oid index_create(Relation heapRelation,
-			 const char *indexRelationName,
-			 Oid indexRelationId,
-			 Oid parentIndexRelid,
-			 Oid parentConstraintId,
-			 Oid relFileNode,
-			 IndexInfo *indexInfo,
-			 List *indexColNames,
-			 Oid accessMethodObjectId,
-			 Oid tableSpaceId,
-			 Oid *collationObjectId,
-			 Oid *classObjectId,
-			 int16 *coloptions,
-			 Datum reloptions,
-			 bits16 flags,
-			 bits16 constr_flags,
-			 bool allow_system_table_mods,
-			 bool is_internal,
-			 Oid *constraintId);
+extern Oid	index_create(Relation heapRelation,
+						 const char *indexRelationName,
+						 Oid indexRelationId,
+						 Oid parentIndexRelid,
+						 Oid parentConstraintId,
+						 Oid relFileNode,
+						 IndexInfo *indexInfo,
+						 List *indexColNames,
+						 Oid accessMethodObjectId,
+						 Oid tableSpaceId,
+						 Oid *collationObjectId,
+						 Oid *classObjectId,
+						 int16 *coloptions,
+						 Datum reloptions,
+						 bits16 flags,
+						 bits16 constr_flags,
+						 bool allow_system_table_mods,
+						 bool is_internal,
+						 Oid *constraintId);
 
 #define	INDEX_CONSTR_CREATE_MARK_AS_PRIMARY	(1 << 0)
 #define	INDEX_CONSTR_CREATE_DEFERRABLE		(1 << 1)
@@ -78,59 +78,59 @@ extern Oid index_create(Relation heapRelation,
 #define	INDEX_CONSTR_CREATE_UPDATE_INDEX	(1 << 3)
 #define	INDEX_CONSTR_CREATE_REMOVE_OLD_DEPS	(1 << 4)
 
-extern Oid index_concurrently_create_copy(Relation heapRelation,
-							   Oid oldIndexId,
-							   const char *newName);
+extern Oid	index_concurrently_create_copy(Relation heapRelation,
+										   Oid oldIndexId,
+										   const char *newName);
 
 extern void index_concurrently_build(Oid heapRelationId,
-						 Oid indexRelationId);
+									 Oid indexRelationId);
 
 extern void index_concurrently_swap(Oid newIndexId,
-						Oid oldIndexId,
-						const char *oldName);
+									Oid oldIndexId,
+									const char *oldName);
 
 extern void index_concurrently_set_dead(Oid heapId,
-							Oid indexId);
+										Oid indexId);
 
 extern ObjectAddress index_constraint_create(Relation heapRelation,
-						Oid indexRelationId,
-						Oid parentConstraintId,
-						IndexInfo *indexInfo,
-						const char *constraintName,
-						char constraintType,
-						bits16 constr_flags,
-						bool allow_system_table_mods,
-						bool is_internal);
+											 Oid indexRelationId,
+											 Oid parentConstraintId,
+											 IndexInfo *indexInfo,
+											 const char *constraintName,
+											 char constraintType,
+											 bits16 constr_flags,
+											 bool allow_system_table_mods,
+											 bool is_internal);
 
 extern void index_drop(Oid indexId, bool concurrent, bool concurrent_lock_mode);
 
 extern IndexInfo *BuildIndexInfo(Relation index);
 
 extern bool CompareIndexInfo(IndexInfo *info1, IndexInfo *info2,
-				 Oid *collations1, Oid *collations2,
-				 Oid *opfamilies1, Oid *opfamilies2,
-				 AttrNumber *attmap, int maplen);
+							 Oid *collations1, Oid *collations2,
+							 Oid *opfamilies1, Oid *opfamilies2,
+							 AttrNumber *attmap, int maplen);
 
 extern void BuildSpeculativeIndexInfo(Relation index, IndexInfo *ii);
 
 extern void FormIndexDatum(IndexInfo *indexInfo,
-			   TupleTableSlot *slot,
-			   EState *estate,
-			   Datum *values,
-			   bool *isnull);
+						   TupleTableSlot *slot,
+						   EState *estate,
+						   Datum *values,
+						   bool *isnull);
 
 extern void index_build(Relation heapRelation,
-			Relation indexRelation,
-			IndexInfo *indexInfo,
-			bool isreindex,
-			bool parallel);
+						Relation indexRelation,
+						IndexInfo *indexInfo,
+						bool isreindex,
+						bool parallel);
 
 extern void validate_index(Oid heapId, Oid indexId, Snapshot snapshot);
 
 extern void index_set_state_flags(Oid indexId, IndexStateFlagsAction action);
 
 extern void reindex_index(Oid indexId, bool skip_constraint_checks,
-			  char relpersistence, int options);
+						  char relpersistence, int options);
 
 /* Flag bits for reindex_relation(): */
 #define REINDEX_REL_PROCESS_TOAST			0x01
diff --git a/src/include/catalog/indexing.h b/src/include/catalog/indexing.h
index f25361365013..5f2aee8a4a97 100644
--- a/src/include/catalog/indexing.h
+++ b/src/include/catalog/indexing.h
@@ -35,12 +35,12 @@ extern CatalogIndexState CatalogOpenIndexes(Relation heapRel);
 extern void CatalogCloseIndexes(CatalogIndexState indstate);
 extern void CatalogTupleInsert(Relation heapRel, HeapTuple tup);
 extern void CatalogTupleInsertWithInfo(Relation heapRel, HeapTuple tup,
-						   CatalogIndexState indstate);
+									   CatalogIndexState indstate);
 extern void CatalogTupleUpdate(Relation heapRel, ItemPointer otid,
-				   HeapTuple tup);
+							   HeapTuple tup);
 extern void CatalogTupleUpdateWithInfo(Relation heapRel,
-						   ItemPointer otid, HeapTuple tup,
-						   CatalogIndexState indstate);
+									   ItemPointer otid, HeapTuple tup,
+									   CatalogIndexState indstate);
 extern void CatalogTupleDelete(Relation heapRel, ItemPointer tid);
 
 
diff --git a/src/include/catalog/namespace.h b/src/include/catalog/namespace.h
index 67418346e62d..672db81d91cd 100644
--- a/src/include/catalog/namespace.h
+++ b/src/include/catalog/namespace.h
@@ -64,14 +64,14 @@ typedef void (*RangeVarGetRelidCallback) (const RangeVar *relation, Oid relId,
 	RangeVarGetRelidExtended(relation, lockmode, \
 							 (missing_ok) ? RVR_MISSING_OK : 0, NULL, NULL)
 
-extern Oid RangeVarGetRelidExtended(const RangeVar *relation,
-						 LOCKMODE lockmode, uint32 flags,
-						 RangeVarGetRelidCallback callback,
-						 void *callback_arg);
+extern Oid	RangeVarGetRelidExtended(const RangeVar *relation,
+									 LOCKMODE lockmode, uint32 flags,
+									 RangeVarGetRelidCallback callback,
+									 void *callback_arg);
 extern Oid	RangeVarGetCreationNamespace(const RangeVar *newRelation);
-extern Oid RangeVarGetAndCheckCreationNamespace(RangeVar *newRelation,
-									 LOCKMODE lockmode,
-									 Oid *existing_relation_id);
+extern Oid	RangeVarGetAndCheckCreationNamespace(RangeVar *newRelation,
+												 LOCKMODE lockmode,
+												 Oid *existing_relation_id);
 extern void RangeVarAdjustRelationPersistence(RangeVar *newRelation, Oid nspid);
 extern Oid	RelnameGetRelid(const char *relname);
 extern bool RelationIsVisible(Oid relid);
@@ -80,15 +80,15 @@ extern Oid	TypenameGetTypid(const char *typname);
 extern bool TypeIsVisible(Oid typid);
 
 extern FuncCandidateList FuncnameGetCandidates(List *names,
-					  int nargs, List *argnames,
-					  bool expand_variadic,
-					  bool expand_defaults,
-					  bool missing_ok);
+											   int nargs, List *argnames,
+											   bool expand_variadic,
+											   bool expand_defaults,
+											   bool missing_ok);
 extern bool FunctionIsVisible(Oid funcid);
 
 extern Oid	OpernameGetOprid(List *names, Oid oprleft, Oid oprright);
 extern FuncCandidateList OpernameGetCandidates(List *names, char oprkind,
-					  bool missing_schema_ok);
+											   bool missing_schema_ok);
 extern bool OperatorIsVisible(Oid oprid);
 
 extern Oid	OpclassnameGetOpcid(Oid amid, const char *opcname);
@@ -119,8 +119,8 @@ extern Oid	get_ts_config_oid(List *names, bool missing_ok);
 extern bool TSConfigIsVisible(Oid cfgid);
 
 extern void DeconstructQualifiedName(List *names,
-						 char **nspname_p,
-						 char **objname_p);
+									 char **nspname_p,
+									 char **objname_p);
 extern Oid	LookupNamespaceNoError(const char *nspname);
 extern Oid	LookupExplicitNamespace(const char *nspname, bool missing_ok);
 extern Oid	get_namespace_oid(const char *nspname, bool missing_ok);
@@ -141,9 +141,9 @@ extern bool isTempNamespaceInUse(Oid namespaceId);
 extern int	GetTempNamespaceBackendId(Oid namespaceId);
 extern Oid	GetTempToastNamespace(void);
 extern void GetTempNamespaceState(Oid *tempNamespaceId,
-					  Oid *tempToastNamespaceId);
+								  Oid *tempToastNamespaceId);
 extern void SetTempNamespaceState(Oid tempNamespaceId,
-					  Oid tempToastNamespaceId);
+								  Oid tempToastNamespaceId);
 extern void ResetTempTableNamespace(void);
 
 extern OverrideSearchPath *GetOverrideSearchPath(MemoryContext context);
@@ -161,7 +161,7 @@ extern Oid	FindDefaultConversionProc(int32 for_encoding, int32 to_encoding);
 extern void InitializeSearchPath(void);
 extern void AtEOXact_Namespace(bool isCommit, bool parallel);
 extern void AtEOSubXact_Namespace(bool isCommit, SubTransactionId mySubid,
-					  SubTransactionId parentSubid);
+								  SubTransactionId parentSubid);
 
 /* stuff for search_path GUC variable */
 extern char *namespace_search_path;
diff --git a/src/include/catalog/objectaccess.h b/src/include/catalog/objectaccess.h
index fbf31bf6b6c3..0170f1f1e410 100644
--- a/src/include/catalog/objectaccess.h
+++ b/src/include/catalog/objectaccess.h
@@ -128,11 +128,11 @@ extern PGDLLIMPORT object_access_hook_type object_access_hook;
 
 /* Core code uses these functions to call the hook (see macros below). */
 extern void RunObjectPostCreateHook(Oid classId, Oid objectId, int subId,
-						bool is_internal);
+									bool is_internal);
 extern void RunObjectDropHook(Oid classId, Oid objectId, int subId,
-				  int dropflags);
+							  int dropflags);
 extern void RunObjectPostAlterHook(Oid classId, Oid objectId, int subId,
-					   Oid auxiliaryId, bool is_internal);
+								   Oid auxiliaryId, bool is_internal);
 extern bool RunNamespaceSearchHook(Oid objectId, bool ereport_on_violation);
 extern void RunFunctionExecuteHook(Oid objectId);
 
diff --git a/src/include/catalog/objectaddress.h b/src/include/catalog/objectaddress.h
index 6412fd58899f..95cc31586837 100644
--- a/src/include/catalog/objectaddress.h
+++ b/src/include/catalog/objectaddress.h
@@ -41,16 +41,16 @@ extern const ObjectAddress InvalidObjectAddress;
 	ObjectAddressSubSet(addr, class_id, object_id, 0)
 
 extern ObjectAddress get_object_address(ObjectType objtype, Node *object,
-				   Relation *relp,
-				   LOCKMODE lockmode, bool missing_ok);
+										Relation *relp,
+										LOCKMODE lockmode, bool missing_ok);
 
 extern ObjectAddress get_object_address_rv(ObjectType objtype, RangeVar *rel,
-					  List *object, Relation *relp,
-					  LOCKMODE lockmode, bool missing_ok);
+										   List *object, Relation *relp,
+										   LOCKMODE lockmode, bool missing_ok);
 
 extern void check_object_ownership(Oid roleid,
-					   ObjectType objtype, ObjectAddress address,
-					   Node *object, Relation relation);
+								   ObjectType objtype, ObjectAddress address,
+								   Node *object, Relation relation);
 
 extern Oid	get_object_namespace(const ObjectAddress *address);
 
@@ -67,7 +67,7 @@ extern ObjectType get_object_type(Oid class_id, Oid object_id);
 extern bool get_object_namensp_unique(Oid class_id);
 
 extern HeapTuple get_catalog_object_by_oid(Relation catalog,
-						  AttrNumber oidcol, Oid objectId);
+										   AttrNumber oidcol, Oid objectId);
 
 extern char *getObjectDescription(const ObjectAddress *object);
 extern char *getObjectDescriptionOids(Oid classid, Oid objid);
@@ -76,7 +76,7 @@ extern int	read_objtype_from_string(const char *objtype);
 extern char *getObjectTypeDescription(const ObjectAddress *object);
 extern char *getObjectIdentity(const ObjectAddress *address);
 extern char *getObjectIdentityParts(const ObjectAddress *address,
-					   List **objname, List **objargs);
+									List **objname, List **objargs);
 extern ArrayType *strlist_to_textarray(List *list);
 
 extern ObjectType get_relkind_objtype(char relkind);
diff --git a/src/include/catalog/partition.h b/src/include/catalog/partition.h
index 616e18af3088..e234b3c0ef88 100644
--- a/src/include/catalog/partition.h
+++ b/src/include/catalog/partition.h
@@ -23,10 +23,10 @@ extern Oid	get_partition_parent(Oid relid);
 extern List *get_partition_ancestors(Oid relid);
 extern Oid	index_get_partition(Relation partition, Oid indexId);
 extern List *map_partition_varattnos(List *expr, int fromrel_varno,
-						Relation to_rel, Relation from_rel,
-						bool *found_whole_row);
+									 Relation to_rel, Relation from_rel,
+									 bool *found_whole_row);
 extern bool has_partition_attrs(Relation rel, Bitmapset *attnums,
-					bool *used_in_expr);
+								bool *used_in_expr);
 
 extern Oid	get_default_partition_oid(Oid parentId);
 extern void update_default_partition_oid(Oid parentId, Oid defaultPartId);
diff --git a/src/include/catalog/pg_aggregate.h b/src/include/catalog/pg_aggregate.h
index 0b111b128328..ff8a21daa8b6 100644
--- a/src/include/catalog/pg_aggregate.h
+++ b/src/include/catalog/pg_aggregate.h
@@ -141,36 +141,36 @@ typedef FormData_pg_aggregate *Form_pg_aggregate;
 
 
 extern ObjectAddress AggregateCreate(const char *aggName,
-				Oid aggNamespace,
-				bool replace,
-				char aggKind,
-				int numArgs,
-				int numDirectArgs,
-				oidvector *parameterTypes,
-				Datum allParameterTypes,
-				Datum parameterModes,
-				Datum parameterNames,
-				List *parameterDefaults,
-				Oid variadicArgType,
-				List *aggtransfnName,
-				List *aggfinalfnName,
-				List *aggcombinefnName,
-				List *aggserialfnName,
-				List *aggdeserialfnName,
-				List *aggmtransfnName,
-				List *aggminvtransfnName,
-				List *aggmfinalfnName,
-				bool finalfnExtraArgs,
-				bool mfinalfnExtraArgs,
-				char finalfnModify,
-				char mfinalfnModify,
-				List *aggsortopName,
-				Oid aggTransType,
-				int32 aggTransSpace,
-				Oid aggmTransType,
-				int32 aggmTransSpace,
-				const char *agginitval,
-				const char *aggminitval,
-				char proparallel);
+									 Oid aggNamespace,
+									 bool replace,
+									 char aggKind,
+									 int numArgs,
+									 int numDirectArgs,
+									 oidvector *parameterTypes,
+									 Datum allParameterTypes,
+									 Datum parameterModes,
+									 Datum parameterNames,
+									 List *parameterDefaults,
+									 Oid variadicArgType,
+									 List *aggtransfnName,
+									 List *aggfinalfnName,
+									 List *aggcombinefnName,
+									 List *aggserialfnName,
+									 List *aggdeserialfnName,
+									 List *aggmtransfnName,
+									 List *aggminvtransfnName,
+									 List *aggmfinalfnName,
+									 bool finalfnExtraArgs,
+									 bool mfinalfnExtraArgs,
+									 char finalfnModify,
+									 char mfinalfnModify,
+									 List *aggsortopName,
+									 Oid aggTransType,
+									 int32 aggTransSpace,
+									 Oid aggmTransType,
+									 int32 aggmTransSpace,
+									 const char *agginitval,
+									 const char *aggminitval,
+									 char proparallel);
 
 #endif							/* PG_AGGREGATE_H */
diff --git a/src/include/catalog/pg_collation.h b/src/include/catalog/pg_collation.h
index 4d2fcb3858a6..d3366f361d11 100644
--- a/src/include/catalog/pg_collation.h
+++ b/src/include/catalog/pg_collation.h
@@ -59,15 +59,15 @@ typedef FormData_pg_collation *Form_pg_collation;
 #endif							/* EXPOSE_TO_CLIENT_CODE */
 
 
-extern Oid CollationCreate(const char *collname, Oid collnamespace,
-				Oid collowner,
-				char collprovider,
-				bool collisdeterministic,
-				int32 collencoding,
-				const char *collcollate, const char *collctype,
-				const char *collversion,
-				bool if_not_exists,
-				bool quiet);
+extern Oid	CollationCreate(const char *collname, Oid collnamespace,
+							Oid collowner,
+							char collprovider,
+							bool collisdeterministic,
+							int32 collencoding,
+							const char *collcollate, const char *collctype,
+							const char *collversion,
+							bool if_not_exists,
+							bool quiet);
 extern void RemoveCollationById(Oid collationOid);
 
 #endif							/* PG_COLLATION_H */
diff --git a/src/include/catalog/pg_constraint.h b/src/include/catalog/pg_constraint.h
index 5a969fc61e5f..c1e60c7dfd2b 100644
--- a/src/include/catalog/pg_constraint.h
+++ b/src/include/catalog/pg_constraint.h
@@ -183,66 +183,66 @@ typedef enum ConstraintCategory
 } ConstraintCategory;
 
 
-extern Oid CreateConstraintEntry(const char *constraintName,
-					  Oid constraintNamespace,
-					  char constraintType,
-					  bool isDeferrable,
-					  bool isDeferred,
-					  bool isValidated,
-					  Oid parentConstrId,
-					  Oid relId,
-					  const int16 *constraintKey,
-					  int constraintNKeys,
-					  int constraintNTotalKeys,
-					  Oid domainId,
-					  Oid indexRelId,
-					  Oid foreignRelId,
-					  const int16 *foreignKey,
-					  const Oid *pfEqOp,
-					  const Oid *ppEqOp,
-					  const Oid *ffEqOp,
-					  int foreignNKeys,
-					  char foreignUpdateType,
-					  char foreignDeleteType,
-					  char foreignMatchType,
-					  const Oid *exclOp,
-					  Node *conExpr,
-					  const char *conBin,
-					  bool conIsLocal,
-					  int conInhCount,
-					  bool conNoInherit,
-					  bool is_internal);
+extern Oid	CreateConstraintEntry(const char *constraintName,
+								  Oid constraintNamespace,
+								  char constraintType,
+								  bool isDeferrable,
+								  bool isDeferred,
+								  bool isValidated,
+								  Oid parentConstrId,
+								  Oid relId,
+								  const int16 *constraintKey,
+								  int constraintNKeys,
+								  int constraintNTotalKeys,
+								  Oid domainId,
+								  Oid indexRelId,
+								  Oid foreignRelId,
+								  const int16 *foreignKey,
+								  const Oid *pfEqOp,
+								  const Oid *ppEqOp,
+								  const Oid *ffEqOp,
+								  int foreignNKeys,
+								  char foreignUpdateType,
+								  char foreignDeleteType,
+								  char foreignMatchType,
+								  const Oid *exclOp,
+								  Node *conExpr,
+								  const char *conBin,
+								  bool conIsLocal,
+								  int conInhCount,
+								  bool conNoInherit,
+								  bool is_internal);
 
 extern void RemoveConstraintById(Oid conId);
 extern void RenameConstraintById(Oid conId, const char *newname);
 
 extern bool ConstraintNameIsUsed(ConstraintCategory conCat, Oid objId,
-					 const char *conname);
+								 const char *conname);
 extern bool ConstraintNameExists(const char *conname, Oid namespaceid);
 extern char *ChooseConstraintName(const char *name1, const char *name2,
-					 const char *label, Oid namespaceid,
-					 List *others);
+								  const char *label, Oid namespaceid,
+								  List *others);
 
 extern void AlterConstraintNamespaces(Oid ownerId, Oid oldNspId,
-						  Oid newNspId, bool isType, ObjectAddresses *objsMoved);
+									  Oid newNspId, bool isType, ObjectAddresses *objsMoved);
 extern void ConstraintSetParentConstraint(Oid childConstrId,
-							  Oid parentConstrId,
-							  Oid childTableId);
+										  Oid parentConstrId,
+										  Oid childTableId);
 extern Oid	get_relation_constraint_oid(Oid relid, const char *conname, bool missing_ok);
 extern Bitmapset *get_relation_constraint_attnos(Oid relid, const char *conname,
-							   bool missing_ok, Oid *constraintOid);
+												 bool missing_ok, Oid *constraintOid);
 extern Oid	get_domain_constraint_oid(Oid typid, const char *conname, bool missing_ok);
 extern Oid	get_relation_idx_constraint_oid(Oid relationId, Oid indexId);
 
 extern Bitmapset *get_primary_key_attnos(Oid relid, bool deferrableOk,
-					   Oid *constraintOid);
+										 Oid *constraintOid);
 extern void DeconstructFkConstraintRow(HeapTuple tuple, int *numfks,
-						   AttrNumber *conkey, AttrNumber *confkey,
-						   Oid *pf_eq_oprs, Oid *pp_eq_oprs, Oid *ff_eq_oprs);
+									   AttrNumber *conkey, AttrNumber *confkey,
+									   Oid *pf_eq_oprs, Oid *pp_eq_oprs, Oid *ff_eq_oprs);
 
 extern bool check_functional_grouping(Oid relid,
-						  Index varno, Index varlevelsup,
-						  List *grouping_columns,
-						  List **constraintDeps);
+									  Index varno, Index varlevelsup,
+									  List *grouping_columns,
+									  List **constraintDeps);
 
 #endif							/* PG_CONSTRAINT_H */
diff --git a/src/include/catalog/pg_conversion.h b/src/include/catalog/pg_conversion.h
index 1a673056de2f..49c70700ab76 100644
--- a/src/include/catalog/pg_conversion.h
+++ b/src/include/catalog/pg_conversion.h
@@ -63,11 +63,11 @@ typedef FormData_pg_conversion *Form_pg_conversion;
 
 
 extern ObjectAddress ConversionCreate(const char *conname, Oid connamespace,
-				 Oid conowner,
-				 int32 conforencoding, int32 contoencoding,
-				 Oid conproc, bool def);
+									  Oid conowner,
+									  int32 conforencoding, int32 contoencoding,
+									  Oid conproc, bool def);
 extern void RemoveConversionById(Oid conversionOid);
-extern Oid FindDefaultConversion(Oid connamespace, int32 for_encoding,
-					  int32 to_encoding);
+extern Oid	FindDefaultConversion(Oid connamespace, int32 for_encoding,
+								  int32 to_encoding);
 
 #endif							/* PG_CONVERSION_H */
diff --git a/src/include/catalog/pg_db_role_setting.h b/src/include/catalog/pg_db_role_setting.h
index 14ef5d046a29..078586d841d0 100644
--- a/src/include/catalog/pg_db_role_setting.h
+++ b/src/include/catalog/pg_db_role_setting.h
@@ -49,6 +49,6 @@ typedef FormData_pg_db_role_setting * Form_pg_db_role_setting;
 extern void AlterSetting(Oid databaseid, Oid roleid, VariableSetStmt *setstmt);
 extern void DropSetting(Oid databaseid, Oid roleid);
 extern void ApplySetting(Snapshot snapshot, Oid databaseid, Oid roleid,
-			 Relation relsetting, GucSource source);
+						 Relation relsetting, GucSource source);
 
 #endif							/* PG_DB_ROLE_SETTING_H */
diff --git a/src/include/catalog/pg_enum.h b/src/include/catalog/pg_enum.h
index d2cd7ccbf197..e963cea0b288 100644
--- a/src/include/catalog/pg_enum.h
+++ b/src/include/catalog/pg_enum.h
@@ -49,10 +49,10 @@ typedef FormData_pg_enum *Form_pg_enum;
 extern void EnumValuesCreate(Oid enumTypeOid, List *vals);
 extern void EnumValuesDelete(Oid enumTypeOid);
 extern void AddEnumLabel(Oid enumTypeOid, const char *newVal,
-			 const char *neighbor, bool newValIsAfter,
-			 bool skipIfExists);
+						 const char *neighbor, bool newValIsAfter,
+						 bool skipIfExists);
 extern void RenameEnumLabel(Oid enumTypeOid,
-				const char *oldVal, const char *newVal);
+							const char *oldVal, const char *newVal);
 extern bool EnumBlacklisted(Oid enum_id);
 extern Size EstimateEnumBlacklistSpace(void);
 extern void SerializeEnumBlacklist(void *space, Size size);
diff --git a/src/include/catalog/pg_inherits.h b/src/include/catalog/pg_inherits.h
index 8a19ee062c6b..a2061ef78753 100644
--- a/src/include/catalog/pg_inherits.h
+++ b/src/include/catalog/pg_inherits.h
@@ -46,12 +46,12 @@ typedef FormData_pg_inherits *Form_pg_inherits;
 
 extern List *find_inheritance_children(Oid parentrelId, LOCKMODE lockmode);
 extern List *find_all_inheritors(Oid parentrelId, LOCKMODE lockmode,
-					List **parents);
+								 List **parents);
 extern bool has_subclass(Oid relationId);
 extern bool has_superclass(Oid relationId);
 extern bool typeInheritsFrom(Oid subclassTypeId, Oid superclassTypeId);
 extern void StoreSingleInheritance(Oid relationId, Oid parentOid,
-					   int32 seqNumber);
+								   int32 seqNumber);
 extern bool DeleteInheritsTuple(Oid inhrelid, Oid inhparent);
 
 #endif							/* PG_INHERITS_H */
diff --git a/src/include/catalog/pg_operator.h b/src/include/catalog/pg_operator.h
index 6c2e468637d9..7c4f6862a862 100644
--- a/src/include/catalog/pg_operator.h
+++ b/src/include/catalog/pg_operator.h
@@ -85,16 +85,16 @@ typedef FormData_pg_operator *Form_pg_operator;
 
 
 extern ObjectAddress OperatorCreate(const char *operatorName,
-			   Oid operatorNamespace,
-			   Oid leftTypeId,
-			   Oid rightTypeId,
-			   Oid procedureId,
-			   List *commutatorName,
-			   List *negatorName,
-			   Oid restrictionId,
-			   Oid joinId,
-			   bool canMerge,
-			   bool canHash);
+									Oid operatorNamespace,
+									Oid leftTypeId,
+									Oid rightTypeId,
+									Oid procedureId,
+									List *commutatorName,
+									List *negatorName,
+									Oid restrictionId,
+									Oid joinId,
+									bool canMerge,
+									bool canHash);
 
 extern ObjectAddress makeOperatorDependencies(HeapTuple tuple, bool isUpdate);
 
diff --git a/src/include/catalog/pg_proc.h b/src/include/catalog/pg_proc.h
index e5270d2ff116..dc29c06f628d 100644
--- a/src/include/catalog/pg_proc.h
+++ b/src/include/catalog/pg_proc.h
@@ -179,31 +179,31 @@ typedef FormData_pg_proc *Form_pg_proc;
 
 
 extern ObjectAddress ProcedureCreate(const char *procedureName,
-				Oid procNamespace,
-				bool replace,
-				bool returnsSet,
-				Oid returnType,
-				Oid proowner,
-				Oid languageObjectId,
-				Oid languageValidator,
-				const char *prosrc,
-				const char *probin,
-				char prokind,
-				bool security_definer,
-				bool isLeakProof,
-				bool isStrict,
-				char volatility,
-				char parallel,
-				oidvector *parameterTypes,
-				Datum allParameterTypes,
-				Datum parameterModes,
-				Datum parameterNames,
-				List *parameterDefaults,
-				Datum trftypes,
-				Datum proconfig,
-				Oid prosupport,
-				float4 procost,
-				float4 prorows);
+									 Oid procNamespace,
+									 bool replace,
+									 bool returnsSet,
+									 Oid returnType,
+									 Oid proowner,
+									 Oid languageObjectId,
+									 Oid languageValidator,
+									 const char *prosrc,
+									 const char *probin,
+									 char prokind,
+									 bool security_definer,
+									 bool isLeakProof,
+									 bool isStrict,
+									 char volatility,
+									 char parallel,
+									 oidvector *parameterTypes,
+									 Datum allParameterTypes,
+									 Datum parameterModes,
+									 Datum parameterNames,
+									 List *parameterDefaults,
+									 Datum trftypes,
+									 Datum proconfig,
+									 Oid prosupport,
+									 float4 procost,
+									 float4 prorows);
 
 extern bool function_parse_error_transpose(const char *prosrc);
 
diff --git a/src/include/catalog/pg_publication.h b/src/include/catalog/pg_publication.h
index 2dad24fc9fe9..d4bf5b1e2fa8 100644
--- a/src/include/catalog/pg_publication.h
+++ b/src/include/catalog/pg_publication.h
@@ -87,7 +87,7 @@ extern List *GetAllTablesPublicationRelations(void);
 
 extern bool is_publishable_relation(Relation rel);
 extern ObjectAddress publication_add_relation(Oid pubid, Relation targetrel,
-						 bool if_not_exists);
+											  bool if_not_exists);
 
 extern Oid	get_publication_oid(const char *pubname, bool missing_ok);
 extern char *get_publication_name(Oid pubid, bool missing_ok);
diff --git a/src/include/catalog/pg_range.h b/src/include/catalog/pg_range.h
index 7a590126a449..b01a074d095d 100644
--- a/src/include/catalog/pg_range.h
+++ b/src/include/catalog/pg_range.h
@@ -59,8 +59,8 @@ typedef FormData_pg_range *Form_pg_range;
  */
 
 extern void RangeCreate(Oid rangeTypeOid, Oid rangeSubType, Oid rangeCollation,
-			Oid rangeSubOpclass, RegProcedure rangeCanonical,
-			RegProcedure rangeSubDiff);
+						Oid rangeSubOpclass, RegProcedure rangeCanonical,
+						RegProcedure rangeSubDiff);
 extern void RangeDelete(Oid rangeTypeOid);
 
 #endif							/* PG_RANGE_H */
diff --git a/src/include/catalog/pg_subscription_rel.h b/src/include/catalog/pg_subscription_rel.h
index cc232bdda881..f7df814a1818 100644
--- a/src/include/catalog/pg_subscription_rel.h
+++ b/src/include/catalog/pg_subscription_rel.h
@@ -68,11 +68,11 @@ typedef struct SubscriptionRelState
 } SubscriptionRelState;
 
 extern void AddSubscriptionRelState(Oid subid, Oid relid, char state,
-						XLogRecPtr sublsn);
+									XLogRecPtr sublsn);
 extern void UpdateSubscriptionRelState(Oid subid, Oid relid, char state,
-						   XLogRecPtr sublsn);
+									   XLogRecPtr sublsn);
 extern char GetSubscriptionRelState(Oid subid, Oid relid,
-						XLogRecPtr *sublsn, bool missing_ok);
+									XLogRecPtr *sublsn, bool missing_ok);
 extern void RemoveSubscriptionRel(Oid subid, Oid relid);
 
 extern List *GetSubscriptionRelations(Oid subid);
diff --git a/src/include/catalog/pg_type.h b/src/include/catalog/pg_type.h
index 4a2473942e9d..2a584b4b1309 100644
--- a/src/include/catalog/pg_type.h
+++ b/src/include/catalog/pg_type.h
@@ -291,56 +291,57 @@ typedef FormData_pg_type *Form_pg_type;
 
 
 extern ObjectAddress TypeShellMake(const char *typeName,
-			  Oid typeNamespace,
-			  Oid ownerId);
+								   Oid typeNamespace,
+								   Oid ownerId);
 
 extern ObjectAddress TypeCreate(Oid newTypeOid,
-		   const char *typeName,
-		   Oid typeNamespace,
-		   Oid relationOid,
-		   char relationKind,
-		   Oid ownerId,
-		   int16 internalSize,
-		   char typeType,
-		   char typeCategory,
-		   bool typePreferred,
-		   char typDelim,
-		   Oid inputProcedure,
-		   Oid outputProcedure,
-		   Oid receiveProcedure,
-		   Oid sendProcedure,
-		   Oid typmodinProcedure,
-		   Oid typmodoutProcedure,
-		   Oid analyzeProcedure,
-		   Oid elementType,
-		   bool isImplicitArray,
-		   Oid arrayType,
-		   Oid baseType,
-		   const char *defaultTypeValue,
-		   char *defaultTypeBin,
-		   bool passedByValue,
-		   char alignment,
-		   char storage,
-		   int32 typeMod,
-		   int32 typNDims,
-		   bool typeNotNull,
-		   Oid typeCollation);
+								const char *typeName,
+								Oid typeNamespace,
+								Oid relationOid,
+								char relationKind,
+								Oid ownerId,
+								int16 internalSize,
+								char typeType,
+								char typeCategory,
+								bool typePreferred,
+								char typDelim,
+								Oid inputProcedure,
+								Oid outputProcedure,
+								Oid receiveProcedure,
+								Oid sendProcedure,
+								Oid typmodinProcedure,
+								Oid typmodoutProcedure,
+								Oid analyzeProcedure,
+								Oid elementType,
+								bool isImplicitArray,
+								Oid arrayType,
+								Oid baseType,
+								const char *defaultTypeValue,
+								char *defaultTypeBin,
+								bool passedByValue,
+								char alignment,
+								char storage,
+								int32 typeMod,
+								int32 typNDims,
+								bool typeNotNull,
+								Oid typeCollation);
 
 extern void GenerateTypeDependencies(Oid typeObjectId,
-						 Form_pg_type typeForm,
-						 Node *defaultExpr,
-						 void *typacl,
-						 char relationKind, /* only for relation rowtypes */
-						 bool isImplicitArray,
-						 bool isDependentType,
-						 bool rebuild);
+									 Form_pg_type typeForm,
+									 Node *defaultExpr,
+									 void *typacl,
+									 char relationKind, /* only for relation
+														 * rowtypes */
+									 bool isImplicitArray,
+									 bool isDependentType,
+									 bool rebuild);
 
 extern void RenameTypeInternal(Oid typeOid, const char *newTypeName,
-				   Oid typeNamespace);
+							   Oid typeNamespace);
 
 extern char *makeArrayTypeName(const char *typeName, Oid typeNamespace);
 
 extern bool moveArrayTypeName(Oid typeOid, const char *typeName,
-				  Oid typeNamespace);
+							  Oid typeNamespace);
 
 #endif							/* PG_TYPE_H */
diff --git a/src/include/catalog/storage.h b/src/include/catalog/storage.h
index f535ed1b5d82..3579d3f3eb0d 100644
--- a/src/include/catalog/storage.h
+++ b/src/include/catalog/storage.h
@@ -24,7 +24,7 @@ extern void RelationDropStorage(Relation rel);
 extern void RelationPreserveStorage(RelFileNode rnode, bool atCommit);
 extern void RelationTruncate(Relation rel, BlockNumber nblocks);
 extern void RelationCopyStorage(SMgrRelation src, SMgrRelation dst,
-					ForkNumber forkNum, char relpersistence);
+								ForkNumber forkNum, char relpersistence);
 
 /*
  * These functions used to be in storage/smgr/smgr.c, which explains the
diff --git a/src/include/catalog/toasting.h b/src/include/catalog/toasting.h
index 5ee628c837a8..a9e633d6bb5e 100644
--- a/src/include/catalog/toasting.h
+++ b/src/include/catalog/toasting.h
@@ -24,11 +24,11 @@
  */
 extern void NewRelationCreateToastTable(Oid relOid, Datum reloptions);
 extern void NewHeapCreateToastTable(Oid relOid, Datum reloptions,
-						LOCKMODE lockmode);
+									LOCKMODE lockmode);
 extern void AlterTableCreateToastTable(Oid relOid, Datum reloptions,
-						   LOCKMODE lockmode);
+									   LOCKMODE lockmode);
 extern void BootstrapToastTable(char *relName,
-					Oid toastOid, Oid toastIndexOid);
+								Oid toastOid, Oid toastIndexOid);
 
 
 /*
diff --git a/src/include/commands/alter.h b/src/include/commands/alter.h
index 1b4cd88fdc05..5c1a13d8d7bc 100644
--- a/src/include/commands/alter.h
+++ b/src/include/commands/alter.h
@@ -22,14 +22,14 @@
 extern ObjectAddress ExecRenameStmt(RenameStmt *stmt);
 
 extern ObjectAddress ExecAlterObjectDependsStmt(AlterObjectDependsStmt *stmt,
-						   ObjectAddress *refAddress);
+												ObjectAddress *refAddress);
 extern ObjectAddress ExecAlterObjectSchemaStmt(AlterObjectSchemaStmt *stmt,
-						  ObjectAddress *oldSchemaAddr);
-extern Oid AlterObjectNamespace_oid(Oid classId, Oid objid, Oid nspOid,
-						 ObjectAddresses *objsMoved);
+											   ObjectAddress *oldSchemaAddr);
+extern Oid	AlterObjectNamespace_oid(Oid classId, Oid objid, Oid nspOid,
+									 ObjectAddresses *objsMoved);
 
 extern ObjectAddress ExecAlterOwnerStmt(AlterOwnerStmt *stmt);
 extern void AlterObjectOwner_internal(Relation catalog, Oid objectId,
-						  Oid new_ownerId);
+									  Oid new_ownerId);
 
 #endif							/* ALTER_H */
diff --git a/src/include/commands/async.h b/src/include/commands/async.h
index cfea78e039d9..d132fd59991f 100644
--- a/src/include/commands/async.h
+++ b/src/include/commands/async.h
@@ -29,8 +29,8 @@ extern Size AsyncShmemSize(void);
 extern void AsyncShmemInit(void);
 
 extern void NotifyMyFrontEnd(const char *channel,
-				 const char *payload,
-				 int32 srcPid);
+							 const char *payload,
+							 int32 srcPid);
 
 /* notify-related SQL statements */
 extern void Async_Notify(const char *channel, const char *payload);
diff --git a/src/include/commands/cluster.h b/src/include/commands/cluster.h
index d30e9c66daef..11b7cdf4ee72 100644
--- a/src/include/commands/cluster.h
+++ b/src/include/commands/cluster.h
@@ -21,18 +21,18 @@
 extern void cluster(ClusterStmt *stmt, bool isTopLevel);
 extern void cluster_rel(Oid tableOid, Oid indexOid, int options);
 extern void check_index_is_clusterable(Relation OldHeap, Oid indexOid,
-						   bool recheck, LOCKMODE lockmode);
+									   bool recheck, LOCKMODE lockmode);
 extern void mark_index_clustered(Relation rel, Oid indexOid, bool is_internal);
 
-extern Oid make_new_heap(Oid OIDOldHeap, Oid NewTableSpace, char relpersistence,
-			  LOCKMODE lockmode);
+extern Oid	make_new_heap(Oid OIDOldHeap, Oid NewTableSpace, char relpersistence,
+						  LOCKMODE lockmode);
 extern void finish_heap_swap(Oid OIDOldHeap, Oid OIDNewHeap,
-				 bool is_system_catalog,
-				 bool swap_toast_by_content,
-				 bool check_constraints,
-				 bool is_internal,
-				 TransactionId frozenXid,
-				 MultiXactId minMulti,
-				 char newrelpersistence);
+							 bool is_system_catalog,
+							 bool swap_toast_by_content,
+							 bool check_constraints,
+							 bool is_internal,
+							 TransactionId frozenXid,
+							 MultiXactId minMulti,
+							 char newrelpersistence);
 
 #endif							/* CLUSTER_H */
diff --git a/src/include/commands/copy.h b/src/include/commands/copy.h
index c70556137c72..bbe0105d77b5 100644
--- a/src/include/commands/copy.h
+++ b/src/include/commands/copy.h
@@ -24,17 +24,17 @@ typedef struct CopyStateData *CopyState;
 typedef int (*copy_data_source_cb) (void *outbuf, int minread, int maxread);
 
 extern void DoCopy(ParseState *state, const CopyStmt *stmt,
-	   int stmt_location, int stmt_len,
-	   uint64 *processed);
+				   int stmt_location, int stmt_len,
+				   uint64 *processed);
 
 extern void ProcessCopyOptions(ParseState *pstate, CopyState cstate, bool is_from, List *options);
 extern CopyState BeginCopyFrom(ParseState *pstate, Relation rel, const char *filename,
-			  bool is_program, copy_data_source_cb data_source_cb, List *attnamelist, List *options);
+							   bool is_program, copy_data_source_cb data_source_cb, List *attnamelist, List *options);
 extern void EndCopyFrom(CopyState cstate);
 extern bool NextCopyFrom(CopyState cstate, ExprContext *econtext,
-			 Datum *values, bool *nulls);
+						 Datum *values, bool *nulls);
 extern bool NextCopyFromRawFields(CopyState cstate,
-					  char ***fields, int *nfields);
+								  char ***fields, int *nfields);
 extern void CopyFromErrorCallback(void *arg);
 
 extern uint64 CopyFrom(CopyState cstate);
diff --git a/src/include/commands/createas.h b/src/include/commands/createas.h
index 1f02b149fb18..abd0525290d3 100644
--- a/src/include/commands/createas.h
+++ b/src/include/commands/createas.h
@@ -22,7 +22,7 @@
 
 
 extern ObjectAddress ExecCreateTableAs(CreateTableAsStmt *stmt, const char *queryString,
-				  ParamListInfo params, QueryEnvironment *queryEnv, char *completionTag);
+									   ParamListInfo params, QueryEnvironment *queryEnv, char *completionTag);
 
 extern int	GetIntoRelEFlags(IntoClause *intoClause);
 
diff --git a/src/include/commands/defrem.h b/src/include/commands/defrem.h
index 029406fd4ed1..b4e7db67c3fa 100644
--- a/src/include/commands/defrem.h
+++ b/src/include/commands/defrem.h
@@ -25,31 +25,31 @@ extern void RemoveObjects(DropStmt *stmt);
 
 /* commands/indexcmds.c */
 extern ObjectAddress DefineIndex(Oid relationId,
-			IndexStmt *stmt,
-			Oid indexRelationId,
-			Oid parentIndexId,
-			Oid parentConstraintId,
-			bool is_alter_table,
-			bool check_rights,
-			bool check_not_in_use,
-			bool skip_build,
-			bool quiet);
+								 IndexStmt *stmt,
+								 Oid indexRelationId,
+								 Oid parentIndexId,
+								 Oid parentConstraintId,
+								 bool is_alter_table,
+								 bool check_rights,
+								 bool check_not_in_use,
+								 bool skip_build,
+								 bool quiet);
 extern void ReindexIndex(RangeVar *indexRelation, int options, bool concurrent);
 extern Oid	ReindexTable(RangeVar *relation, int options, bool concurrent);
 extern void ReindexMultipleTables(const char *objectName, ReindexObjectType objectKind,
-					  int options, bool concurrent);
+								  int options, bool concurrent);
 extern char *makeObjectName(const char *name1, const char *name2,
-			   const char *label);
+							const char *label);
 extern char *ChooseRelationName(const char *name1, const char *name2,
-				   const char *label, Oid namespaceid,
-				   bool isconstraint);
+								const char *label, Oid namespaceid,
+								bool isconstraint);
 extern bool CheckIndexCompatible(Oid oldId,
-					 const char *accessMethodName,
-					 List *attributeList,
-					 List *exclusionOpNames);
+								 const char *accessMethodName,
+								 List *attributeList,
+								 List *exclusionOpNames);
 extern Oid	GetDefaultOpClass(Oid type_id, Oid am_id);
-extern Oid ResolveOpClass(List *opclass, Oid attrType,
-			   const char *accessMethodName, Oid accessMethodId);
+extern Oid	ResolveOpClass(List *opclass, Oid attrType,
+						   const char *accessMethodName, Oid accessMethodId);
 
 /* commands/functioncmds.c */
 extern ObjectAddress CreateFunction(ParseState *pstate, CreateFunctionStmt *stmt);
@@ -62,23 +62,23 @@ extern void DropCastById(Oid castOid);
 extern ObjectAddress CreateTransform(CreateTransformStmt *stmt);
 extern void DropTransformById(Oid transformOid);
 extern void IsThereFunctionInNamespace(const char *proname, int pronargs,
-						   oidvector *proargtypes, Oid nspOid);
+									   oidvector *proargtypes, Oid nspOid);
 extern void ExecuteDoStmt(DoStmt *stmt, bool atomic);
 extern void ExecuteCallStmt(CallStmt *stmt, ParamListInfo params, bool atomic, DestReceiver *dest);
 extern TupleDesc CallStmtResultDesc(CallStmt *stmt);
 extern Oid	get_cast_oid(Oid sourcetypeid, Oid targettypeid, bool missing_ok);
 extern Oid	get_transform_oid(Oid type_id, Oid lang_id, bool missing_ok);
 extern void interpret_function_parameter_list(ParseState *pstate,
-								  List *parameters,
-								  Oid languageOid,
-								  ObjectType objtype,
-								  oidvector **parameterTypes,
-								  ArrayType **allParameterTypes,
-								  ArrayType **parameterModes,
-								  ArrayType **parameterNames,
-								  List **parameterDefaults,
-								  Oid *variadicArgType,
-								  Oid *requiredResultType);
+											  List *parameters,
+											  Oid languageOid,
+											  ObjectType objtype,
+											  oidvector **parameterTypes,
+											  ArrayType **allParameterTypes,
+											  ArrayType **parameterModes,
+											  ArrayType **parameterNames,
+											  List **parameterDefaults,
+											  Oid *variadicArgType,
+											  Oid *requiredResultType);
 
 /* commands/operatorcmds.c */
 extern ObjectAddress DefineOperator(List *names, List *parameters);
@@ -89,12 +89,12 @@ extern ObjectAddress AlterOperator(AlterOperatorStmt *stmt);
 extern ObjectAddress CreateStatistics(CreateStatsStmt *stmt);
 extern void RemoveStatisticsById(Oid statsOid);
 extern void UpdateStatisticsForTypeChange(Oid statsOid,
-							  Oid relationOid, int attnum,
-							  Oid oldColumnType, Oid newColumnType);
+										  Oid relationOid, int attnum,
+										  Oid oldColumnType, Oid newColumnType);
 
 /* commands/aggregatecmds.c */
 extern ObjectAddress DefineAggregate(ParseState *pstate, List *name, List *args, bool oldstyle,
-				List *parameters, bool replace);
+									 List *parameters, bool replace);
 
 /* commands/opclasscmds.c */
 extern ObjectAddress DefineOpClass(CreateOpClassStmt *stmt);
@@ -105,9 +105,9 @@ extern void RemoveOpFamilyById(Oid opfamilyOid);
 extern void RemoveAmOpEntryById(Oid entryOid);
 extern void RemoveAmProcEntryById(Oid entryOid);
 extern void IsThereOpClassInNamespace(const char *opcname, Oid opcmethod,
-						  Oid opcnamespace);
+									  Oid opcnamespace);
 extern void IsThereOpFamilyInNamespace(const char *opfname, Oid opfmethod,
-						   Oid opfnamespace);
+									   Oid opfnamespace);
 extern Oid	get_opclass_oid(Oid amID, List *opclassname, bool missing_ok);
 extern Oid	get_opfamily_oid(Oid amID, List *opfamilyname, bool missing_ok);
 
@@ -123,7 +123,7 @@ extern ObjectAddress DefineTSTemplate(List *names, List *parameters);
 extern void RemoveTSTemplateById(Oid tmplId);
 
 extern ObjectAddress DefineTSConfiguration(List *names, List *parameters,
-					  ObjectAddress *copied);
+										   ObjectAddress *copied);
 extern void RemoveTSConfigurationById(Oid cfgId);
 extern ObjectAddress AlterTSConfiguration(AlterTSConfigurationStmt *stmt);
 
@@ -148,9 +148,9 @@ extern void RemoveUserMappingById(Oid umId);
 extern void CreateForeignTable(CreateForeignTableStmt *stmt, Oid relid);
 extern void ImportForeignSchema(ImportForeignSchemaStmt *stmt);
 extern Datum transformGenericOptions(Oid catalogId,
-						Datum oldOptions,
-						List *options,
-						Oid fdwvalidator);
+									 Datum oldOptions,
+									 List *options,
+									 Oid fdwvalidator);
 
 /* commands/amcmds.c */
 extern ObjectAddress CreateAccessMethod(CreateAmStmt *stmt);
diff --git a/src/include/commands/event_trigger.h b/src/include/commands/event_trigger.h
index 0b8c7cca21f3..fd977e773562 100644
--- a/src/include/commands/event_trigger.h
+++ b/src/include/commands/event_trigger.h
@@ -58,30 +58,30 @@ extern bool EventTriggerBeginCompleteQuery(void);
 extern void EventTriggerEndCompleteQuery(void);
 extern bool trackDroppedObjectsNeeded(void);
 extern void EventTriggerSQLDropAddObject(const ObjectAddress *object,
-							 bool original, bool normal);
+										 bool original, bool normal);
 
 extern void EventTriggerInhibitCommandCollection(void);
 extern void EventTriggerUndoInhibitCommandCollection(void);
 
 extern void EventTriggerCollectSimpleCommand(ObjectAddress address,
-								 ObjectAddress secondaryObject,
-								 Node *parsetree);
+											 ObjectAddress secondaryObject,
+											 Node *parsetree);
 
 extern void EventTriggerAlterTableStart(Node *parsetree);
 extern void EventTriggerAlterTableRelid(Oid objectId);
 extern void EventTriggerCollectAlterTableSubcmd(Node *subcmd,
-									ObjectAddress address);
+												ObjectAddress address);
 extern void EventTriggerAlterTableEnd(void);
 
 extern void EventTriggerCollectGrant(InternalGrant *istmt);
 extern void EventTriggerCollectAlterOpFam(AlterOpFamilyStmt *stmt,
-							  Oid opfamoid, List *operators,
-							  List *procedures);
+										  Oid opfamoid, List *operators,
+										  List *procedures);
 extern void EventTriggerCollectCreateOpClass(CreateOpClassStmt *stmt,
-								 Oid opcoid, List *operators,
-								 List *procedures);
+											 Oid opcoid, List *operators,
+											 List *procedures);
 extern void EventTriggerCollectAlterTSConfig(AlterTSConfigurationStmt *stmt,
-								 Oid cfgId, Oid *dictIds, int ndicts);
+											 Oid cfgId, Oid *dictIds, int ndicts);
 extern void EventTriggerCollectAlterDefPrivs(AlterDefaultPrivilegesStmt *stmt);
 
 #endif							/* EVENT_TRIGGER_H */
diff --git a/src/include/commands/explain.h b/src/include/commands/explain.h
index db48f2950190..f8b79ec120eb 100644
--- a/src/include/commands/explain.h
+++ b/src/include/commands/explain.h
@@ -64,27 +64,27 @@ extern PGDLLIMPORT explain_get_index_name_hook_type explain_get_index_name_hook;
 
 
 extern void ExplainQuery(ParseState *pstate, ExplainStmt *stmt, const char *queryString,
-			 ParamListInfo params, QueryEnvironment *queryEnv, DestReceiver *dest);
+						 ParamListInfo params, QueryEnvironment *queryEnv, DestReceiver *dest);
 
 extern ExplainState *NewExplainState(void);
 
 extern TupleDesc ExplainResultDesc(ExplainStmt *stmt);
 
 extern void ExplainOneUtility(Node *utilityStmt, IntoClause *into,
-				  ExplainState *es, const char *queryString,
-				  ParamListInfo params, QueryEnvironment *queryEnv);
+							  ExplainState *es, const char *queryString,
+							  ParamListInfo params, QueryEnvironment *queryEnv);
 
 extern void ExplainOnePlan(PlannedStmt *plannedstmt, IntoClause *into,
-			   ExplainState *es, const char *queryString,
-			   ParamListInfo params, QueryEnvironment *queryEnv,
-			   const instr_time *planduration);
+						   ExplainState *es, const char *queryString,
+						   ParamListInfo params, QueryEnvironment *queryEnv,
+						   const instr_time *planduration);
 
 extern void ExplainPrintPlan(ExplainState *es, QueryDesc *queryDesc);
 extern void ExplainPrintTriggers(ExplainState *es, QueryDesc *queryDesc);
 
 extern void ExplainPrintJITSummary(ExplainState *es, QueryDesc *queryDesc);
 extern void ExplainPrintJIT(ExplainState *es, int jit_flags,
-				struct JitInstrumentation *jit_instr, int worker_i);
+							struct JitInstrumentation *jit_instr, int worker_i);
 
 extern void ExplainQueryText(ExplainState *es, QueryDesc *queryDesc);
 
@@ -93,21 +93,21 @@ extern void ExplainEndOutput(ExplainState *es);
 extern void ExplainSeparatePlans(ExplainState *es);
 
 extern void ExplainPropertyList(const char *qlabel, List *data,
-					ExplainState *es);
+								ExplainState *es);
 extern void ExplainPropertyListNested(const char *qlabel, List *data,
-						  ExplainState *es);
+									  ExplainState *es);
 extern void ExplainPropertyText(const char *qlabel, const char *value,
-					ExplainState *es);
+								ExplainState *es);
 extern void ExplainPropertyInteger(const char *qlabel, const char *unit,
-					   int64 value, ExplainState *es);
+								   int64 value, ExplainState *es);
 extern void ExplainPropertyFloat(const char *qlabel, const char *unit,
-					 double value, int ndigits, ExplainState *es);
+								 double value, int ndigits, ExplainState *es);
 extern void ExplainPropertyBool(const char *qlabel, bool value,
-					ExplainState *es);
+								ExplainState *es);
 
 extern void ExplainOpenGroup(const char *objtype, const char *labelname,
-				 bool labeled, ExplainState *es);
+							 bool labeled, ExplainState *es);
 extern void ExplainCloseGroup(const char *objtype, const char *labelname,
-				  bool labeled, ExplainState *es);
+							  bool labeled, ExplainState *es);
 
 #endif							/* EXPLAIN_H */
diff --git a/src/include/commands/extension.h b/src/include/commands/extension.h
index 2cdc26c77603..923f8530b41d 100644
--- a/src/include/commands/extension.h
+++ b/src/include/commands/extension.h
@@ -36,20 +36,20 @@ extern ObjectAddress CreateExtension(ParseState *pstate, CreateExtensionStmt *st
 extern void RemoveExtensionById(Oid extId);
 
 extern ObjectAddress InsertExtensionTuple(const char *extName, Oid extOwner,
-					 Oid schemaOid, bool relocatable, const char *extVersion,
-					 Datum extConfig, Datum extCondition,
-					 List *requiredExtensions);
+										  Oid schemaOid, bool relocatable, const char *extVersion,
+										  Datum extConfig, Datum extCondition,
+										  List *requiredExtensions);
 
 extern ObjectAddress ExecAlterExtensionStmt(ParseState *pstate, AlterExtensionStmt *stmt);
 
 extern ObjectAddress ExecAlterExtensionContentsStmt(AlterExtensionContentsStmt *stmt,
-							   ObjectAddress *objAddress);
+													ObjectAddress *objAddress);
 
 extern Oid	get_extension_oid(const char *extname, bool missing_ok);
 extern char *get_extension_name(Oid ext_oid);
 
 extern ObjectAddress AlterExtensionNamespace(const char *extensionName, const char *newschema,
-						Oid *oldschema);
+											 Oid *oldschema);
 
 extern void AlterExtensionOwner_oid(Oid extensionOid, Oid newOwnerId);
 
diff --git a/src/include/commands/matview.h b/src/include/commands/matview.h
index d4461dd80201..edf04bf415a3 100644
--- a/src/include/commands/matview.h
+++ b/src/include/commands/matview.h
@@ -24,7 +24,7 @@
 extern void SetMatViewPopulatedState(Relation relation, bool newstate);
 
 extern ObjectAddress ExecRefreshMatView(RefreshMatViewStmt *stmt, const char *queryString,
-				   ParamListInfo params, char *completionTag);
+										ParamListInfo params, char *completionTag);
 
 extern DestReceiver *CreateTransientRelDestReceiver(Oid oid);
 
diff --git a/src/include/commands/policy.h b/src/include/commands/policy.h
index 725dff5da29a..8650c1a639ba 100644
--- a/src/include/commands/policy.h
+++ b/src/include/commands/policy.h
@@ -28,8 +28,8 @@ extern bool RemoveRoleFromObjectPolicy(Oid roleid, Oid classid, Oid objid);
 extern ObjectAddress CreatePolicy(CreatePolicyStmt *stmt);
 extern ObjectAddress AlterPolicy(AlterPolicyStmt *stmt);
 
-extern Oid get_relation_policy_oid(Oid relid, const char *policy_name,
-						bool missing_ok);
+extern Oid	get_relation_policy_oid(Oid relid, const char *policy_name,
+									bool missing_ok);
 
 extern ObjectAddress rename_policy(RenameStmt *stmt);
 
diff --git a/src/include/commands/portalcmds.h b/src/include/commands/portalcmds.h
index c54051037d65..73220981eeca 100644
--- a/src/include/commands/portalcmds.h
+++ b/src/include/commands/portalcmds.h
@@ -19,10 +19,10 @@
 
 
 extern void PerformCursorOpen(DeclareCursorStmt *cstmt, ParamListInfo params,
-				  const char *queryString, bool isTopLevel);
+							  const char *queryString, bool isTopLevel);
 
 extern void PerformPortalFetch(FetchStmt *stmt, DestReceiver *dest,
-				   char *completionTag);
+							   char *completionTag);
 
 extern void PerformPortalClose(const char *name);
 
diff --git a/src/include/commands/prepare.h b/src/include/commands/prepare.h
index a1ba71418ab6..2ce832419ffb 100644
--- a/src/include/commands/prepare.h
+++ b/src/include/commands/prepare.h
@@ -36,21 +36,21 @@ typedef struct
 
 /* Utility statements PREPARE, EXECUTE, DEALLOCATE, EXPLAIN EXECUTE */
 extern void PrepareQuery(PrepareStmt *stmt, const char *queryString,
-			 int stmt_location, int stmt_len);
+						 int stmt_location, int stmt_len);
 extern void ExecuteQuery(ExecuteStmt *stmt, IntoClause *intoClause,
-			 const char *queryString, ParamListInfo params,
-			 DestReceiver *dest, char *completionTag);
+						 const char *queryString, ParamListInfo params,
+						 DestReceiver *dest, char *completionTag);
 extern void DeallocateQuery(DeallocateStmt *stmt);
 extern void ExplainExecuteQuery(ExecuteStmt *execstmt, IntoClause *into,
-					ExplainState *es, const char *queryString,
-					ParamListInfo params, QueryEnvironment *queryEnv);
+								ExplainState *es, const char *queryString,
+								ParamListInfo params, QueryEnvironment *queryEnv);
 
 /* Low-level access to stored prepared statements */
 extern void StorePreparedStatement(const char *stmt_name,
-					   CachedPlanSource *plansource,
-					   bool from_sql);
+								   CachedPlanSource *plansource,
+								   bool from_sql);
 extern PreparedStatement *FetchPreparedStatement(const char *stmt_name,
-					   bool throwError);
+												 bool throwError);
 extern void DropPreparedStatement(const char *stmt_name, bool showError);
 extern TupleDesc FetchPreparedStatementResultDesc(PreparedStatement *stmt);
 extern List *FetchPreparedStatementTargetList(PreparedStatement *stmt);
diff --git a/src/include/commands/schemacmds.h b/src/include/commands/schemacmds.h
index 6e47e44044fb..fed86118ea83 100644
--- a/src/include/commands/schemacmds.h
+++ b/src/include/commands/schemacmds.h
@@ -18,9 +18,9 @@
 #include "catalog/objectaddress.h"
 #include "nodes/parsenodes.h"
 
-extern Oid CreateSchemaCommand(CreateSchemaStmt *parsetree,
-					const char *queryString,
-					int stmt_location, int stmt_len);
+extern Oid	CreateSchemaCommand(CreateSchemaStmt *parsetree,
+								const char *queryString,
+								int stmt_location, int stmt_len);
 
 extern void RemoveSchemaById(Oid schemaOid);
 
diff --git a/src/include/commands/seclabel.h b/src/include/commands/seclabel.h
index 67bcf281ad4a..4605996a1ff6 100644
--- a/src/include/commands/seclabel.h
+++ b/src/include/commands/seclabel.h
@@ -15,9 +15,9 @@
  * Internal APIs
  */
 extern char *GetSecurityLabel(const ObjectAddress *object,
-				 const char *provider);
+							  const char *provider);
 extern void SetSecurityLabel(const ObjectAddress *object,
-				 const char *provider, const char *label);
+							 const char *provider, const char *label);
 extern void DeleteSecurityLabel(const ObjectAddress *object);
 extern void DeleteSharedSecurityLabel(Oid objectId, Oid classId);
 
@@ -29,6 +29,6 @@ extern ObjectAddress ExecSecLabelStmt(SecLabelStmt *stmt);
 typedef void (*check_object_relabel_type) (const ObjectAddress *object,
 										   const char *seclabel);
 extern void register_label_provider(const char *provider,
-						check_object_relabel_type hook);
+									check_object_relabel_type hook);
 
 #endif							/* SECLABEL_H */
diff --git a/src/include/commands/subscriptioncmds.h b/src/include/commands/subscriptioncmds.h
index 8bcfd8dc2678..b339b074dca0 100644
--- a/src/include/commands/subscriptioncmds.h
+++ b/src/include/commands/subscriptioncmds.h
@@ -19,7 +19,7 @@
 #include "nodes/parsenodes.h"
 
 extern ObjectAddress CreateSubscription(CreateSubscriptionStmt *stmt,
-				   bool isTopLevel);
+										bool isTopLevel);
 extern ObjectAddress AlterSubscription(AlterSubscriptionStmt *stmt);
 extern void DropSubscription(DropSubscriptionStmt *stmt, bool isTopLevel);
 
diff --git a/src/include/commands/tablecmds.h b/src/include/commands/tablecmds.h
index 96927b900d69..b09afa2775b9 100644
--- a/src/include/commands/tablecmds.h
+++ b/src/include/commands/tablecmds.h
@@ -23,7 +23,7 @@
 
 
 extern ObjectAddress DefineRelation(CreateStmt *stmt, char relkind, Oid ownerId,
-			   ObjectAddress *typaddress, const char *queryString);
+									ObjectAddress *typaddress, const char *queryString);
 
 extern void RemoveRelations(DropStmt *drop);
 
@@ -40,21 +40,21 @@ extern void AlterTableInternal(Oid relid, List *cmds, bool recurse);
 extern Oid	AlterTableMoveAll(AlterTableMoveAllStmt *stmt);
 
 extern ObjectAddress AlterTableNamespace(AlterObjectSchemaStmt *stmt,
-					Oid *oldschema);
+										 Oid *oldschema);
 
 extern void AlterTableNamespaceInternal(Relation rel, Oid oldNspOid,
-							Oid nspOid, ObjectAddresses *objsMoved);
+										Oid nspOid, ObjectAddresses *objsMoved);
 
 extern void AlterRelationNamespaceInternal(Relation classRel, Oid relOid,
-							   Oid oldNspOid, Oid newNspOid,
-							   bool hasDependEntry,
-							   ObjectAddresses *objsMoved);
+										   Oid oldNspOid, Oid newNspOid,
+										   bool hasDependEntry,
+										   ObjectAddresses *objsMoved);
 
 extern void CheckTableNotInUse(Relation rel, const char *stmt);
 
 extern void ExecuteTruncate(TruncateStmt *stmt);
 extern void ExecuteTruncateGuts(List *explicit_rels, List *relids, List *relids_logged,
-					DropBehavior behavior, bool restart_seqs);
+								DropBehavior behavior, bool restart_seqs);
 
 extern void SetRelationHasSubclass(Oid relationId, bool relhassubclass);
 
@@ -67,12 +67,12 @@ extern ObjectAddress RenameConstraint(RenameStmt *stmt);
 extern ObjectAddress RenameRelation(RenameStmt *stmt);
 
 extern void RenameRelationInternal(Oid myrelid,
-					   const char *newrelname, bool is_internal,
-					   bool is_index);
+								   const char *newrelname, bool is_internal,
+								   bool is_index);
 
 extern void find_composite_type_dependencies(Oid typeOid,
-								 Relation origRelation,
-								 const char *origTypeName);
+											 Relation origRelation,
+											 const char *origTypeName);
 
 extern void check_of_type(HeapTuple typetuple);
 
@@ -82,15 +82,15 @@ extern void remove_on_commit_action(Oid relid);
 extern void PreCommit_on_commit_actions(void);
 extern void AtEOXact_on_commit_actions(bool isCommit);
 extern void AtEOSubXact_on_commit_actions(bool isCommit,
-							  SubTransactionId mySubid,
-							  SubTransactionId parentSubid);
+										  SubTransactionId mySubid,
+										  SubTransactionId parentSubid);
 
 extern void RangeVarCallbackOwnsTable(const RangeVar *relation,
-						  Oid relId, Oid oldRelId, void *arg);
+									  Oid relId, Oid oldRelId, void *arg);
 
 extern void RangeVarCallbackOwnsRelation(const RangeVar *relation,
-							 Oid relId, Oid oldRelId, void *noCatalogs);
+										 Oid relId, Oid oldRelId, void *noCatalogs);
 extern bool PartConstraintImpliedByRelConstraint(Relation scanrel,
-									 List *partConstraint);
+												 List *partConstraint);
 
 #endif							/* TABLECMDS_H */
diff --git a/src/include/commands/trigger.h b/src/include/commands/trigger.h
index ba6254bf3f1a..a46feeedb0b9 100644
--- a/src/include/commands/trigger.h
+++ b/src/include/commands/trigger.h
@@ -158,9 +158,9 @@ extern PGDLLIMPORT int SessionReplicationRole;
 #define TRIGGER_DISABLED					'D'
 
 extern ObjectAddress CreateTrigger(CreateTrigStmt *stmt, const char *queryString,
-			  Oid relOid, Oid refRelOid, Oid constraintOid, Oid indexOid,
-			  Oid funcoid, Oid parentTriggerOid, Node *whenClause,
-			  bool isInternal, bool in_partition);
+								   Oid relOid, Oid refRelOid, Oid constraintOid, Oid indexOid,
+								   Oid funcoid, Oid parentTriggerOid, Node *whenClause,
+								   bool isInternal, bool in_partition);
 
 extern void RemoveTriggerById(Oid trigOid);
 extern Oid	get_trigger_oid(Oid relid, const char *name, bool missing_ok);
@@ -168,7 +168,7 @@ extern Oid	get_trigger_oid(Oid relid, const char *name, bool missing_ok);
 extern ObjectAddress renametrig(RenameStmt *stmt);
 
 extern void EnableDisableTrigger(Relation rel, const char *tgname,
-					 char fires_when, bool skip_system, LOCKMODE lockmode);
+								 char fires_when, bool skip_system, LOCKMODE lockmode);
 
 extern void RelationBuildTriggers(Relation relation);
 
@@ -177,71 +177,71 @@ extern TriggerDesc *CopyTriggerDesc(TriggerDesc *trigdesc);
 extern const char *FindTriggerIncompatibleWithInheritance(TriggerDesc *trigdesc);
 
 extern TransitionCaptureState *MakeTransitionCaptureState(TriggerDesc *trigdesc,
-						   Oid relid, CmdType cmdType);
+														  Oid relid, CmdType cmdType);
 
 extern void FreeTriggerDesc(TriggerDesc *trigdesc);
 
 extern void ExecBSInsertTriggers(EState *estate,
-					 ResultRelInfo *relinfo);
+								 ResultRelInfo *relinfo);
 extern void ExecASInsertTriggers(EState *estate,
-					 ResultRelInfo *relinfo,
-					 TransitionCaptureState *transition_capture);
+								 ResultRelInfo *relinfo,
+								 TransitionCaptureState *transition_capture);
 extern bool ExecBRInsertTriggers(EState *estate,
-					 ResultRelInfo *relinfo,
-					 TupleTableSlot *slot);
+								 ResultRelInfo *relinfo,
+								 TupleTableSlot *slot);
 extern void ExecARInsertTriggers(EState *estate,
-					 ResultRelInfo *relinfo,
-					 TupleTableSlot *slot,
-					 List *recheckIndexes,
-					 TransitionCaptureState *transition_capture);
+								 ResultRelInfo *relinfo,
+								 TupleTableSlot *slot,
+								 List *recheckIndexes,
+								 TransitionCaptureState *transition_capture);
 extern bool ExecIRInsertTriggers(EState *estate,
-					 ResultRelInfo *relinfo,
-					 TupleTableSlot *slot);
+								 ResultRelInfo *relinfo,
+								 TupleTableSlot *slot);
 extern void ExecBSDeleteTriggers(EState *estate,
-					 ResultRelInfo *relinfo);
+								 ResultRelInfo *relinfo);
 extern void ExecASDeleteTriggers(EState *estate,
-					 ResultRelInfo *relinfo,
-					 TransitionCaptureState *transition_capture);
+								 ResultRelInfo *relinfo,
+								 TransitionCaptureState *transition_capture);
 extern bool ExecBRDeleteTriggers(EState *estate,
-					 EPQState *epqstate,
-					 ResultRelInfo *relinfo,
-					 ItemPointer tupleid,
-					 HeapTuple fdw_trigtuple,
-					 TupleTableSlot **epqslot);
+								 EPQState *epqstate,
+								 ResultRelInfo *relinfo,
+								 ItemPointer tupleid,
+								 HeapTuple fdw_trigtuple,
+								 TupleTableSlot **epqslot);
 extern void ExecARDeleteTriggers(EState *estate,
-					 ResultRelInfo *relinfo,
-					 ItemPointer tupleid,
-					 HeapTuple fdw_trigtuple,
-					 TransitionCaptureState *transition_capture);
+								 ResultRelInfo *relinfo,
+								 ItemPointer tupleid,
+								 HeapTuple fdw_trigtuple,
+								 TransitionCaptureState *transition_capture);
 extern bool ExecIRDeleteTriggers(EState *estate,
-					 ResultRelInfo *relinfo,
-					 HeapTuple trigtuple);
+								 ResultRelInfo *relinfo,
+								 HeapTuple trigtuple);
 extern void ExecBSUpdateTriggers(EState *estate,
-					 ResultRelInfo *relinfo);
+								 ResultRelInfo *relinfo);
 extern void ExecASUpdateTriggers(EState *estate,
-					 ResultRelInfo *relinfo,
-					 TransitionCaptureState *transition_capture);
+								 ResultRelInfo *relinfo,
+								 TransitionCaptureState *transition_capture);
 extern bool ExecBRUpdateTriggers(EState *estate,
-					 EPQState *epqstate,
-					 ResultRelInfo *relinfo,
-					 ItemPointer tupleid,
-					 HeapTuple fdw_trigtuple,
-					 TupleTableSlot *slot);
+								 EPQState *epqstate,
+								 ResultRelInfo *relinfo,
+								 ItemPointer tupleid,
+								 HeapTuple fdw_trigtuple,
+								 TupleTableSlot *slot);
 extern void ExecARUpdateTriggers(EState *estate,
-					 ResultRelInfo *relinfo,
-					 ItemPointer tupleid,
-					 HeapTuple fdw_trigtuple,
-					 TupleTableSlot *slot,
-					 List *recheckIndexes,
-					 TransitionCaptureState *transition_capture);
+								 ResultRelInfo *relinfo,
+								 ItemPointer tupleid,
+								 HeapTuple fdw_trigtuple,
+								 TupleTableSlot *slot,
+								 List *recheckIndexes,
+								 TransitionCaptureState *transition_capture);
 extern bool ExecIRUpdateTriggers(EState *estate,
-					 ResultRelInfo *relinfo,
-					 HeapTuple trigtuple,
-					 TupleTableSlot *slot);
+								 ResultRelInfo *relinfo,
+								 HeapTuple trigtuple,
+								 TupleTableSlot *slot);
 extern void ExecBSTruncateTriggers(EState *estate,
-					   ResultRelInfo *relinfo);
+								   ResultRelInfo *relinfo);
 extern void ExecASTruncateTriggers(EState *estate,
-					   ResultRelInfo *relinfo);
+								   ResultRelInfo *relinfo);
 
 extern void AfterTriggerBeginXact(void);
 extern void AfterTriggerBeginQuery(void);
@@ -258,13 +258,13 @@ extern bool AfterTriggerPendingOnRel(Oid relid);
  * in utils/adt/ri_triggers.c
  */
 extern bool RI_FKey_pk_upd_check_required(Trigger *trigger, Relation pk_rel,
-							  TupleTableSlot *old_slot, TupleTableSlot *new_slot);
+										  TupleTableSlot *old_slot, TupleTableSlot *new_slot);
 extern bool RI_FKey_fk_upd_check_required(Trigger *trigger, Relation fk_rel,
-							  TupleTableSlot *old_slot, TupleTableSlot *new_slot);
+										  TupleTableSlot *old_slot, TupleTableSlot *new_slot);
 extern bool RI_Initial_Check(Trigger *trigger,
-				 Relation fk_rel, Relation pk_rel);
+							 Relation fk_rel, Relation pk_rel);
 extern void RI_PartitionRemove_Check(Trigger *trigger, Relation fk_rel,
-						 Relation pk_rel);
+									 Relation pk_rel);
 
 /* result values for RI_FKey_trigger_type: */
 #define RI_TRIGGER_PK	1		/* is a trigger on the PK relation */
diff --git a/src/include/commands/typecmds.h b/src/include/commands/typecmds.h
index 5ce61cd634fb..8af0665f296c 100644
--- a/src/include/commands/typecmds.h
+++ b/src/include/commands/typecmds.h
@@ -33,10 +33,10 @@ extern Oid	AssignTypeArrayOid(void);
 extern ObjectAddress AlterDomainDefault(List *names, Node *defaultRaw);
 extern ObjectAddress AlterDomainNotNull(List *names, bool notNull);
 extern ObjectAddress AlterDomainAddConstraint(List *names, Node *constr,
-						 ObjectAddress *constrAddr);
+											  ObjectAddress *constrAddr);
 extern ObjectAddress AlterDomainValidateConstraint(List *names, const char *constrName);
 extern ObjectAddress AlterDomainDropConstraint(List *names, const char *constrName,
-						  DropBehavior behavior, bool missing_ok);
+											   DropBehavior behavior, bool missing_ok);
 
 extern void checkDomainOwner(HeapTuple tup);
 
@@ -47,11 +47,11 @@ extern void AlterTypeOwner_oid(Oid typeOid, Oid newOwnerId, bool hasDependEntry)
 extern void AlterTypeOwnerInternal(Oid typeOid, Oid newOwnerId);
 
 extern ObjectAddress AlterTypeNamespace(List *names, const char *newschema,
-				   ObjectType objecttype, Oid *oldschema);
+										ObjectType objecttype, Oid *oldschema);
 extern Oid	AlterTypeNamespace_oid(Oid typeOid, Oid nspOid, ObjectAddresses *objsMoved);
-extern Oid AlterTypeNamespaceInternal(Oid typeOid, Oid nspOid,
-						   bool isImplicitArray,
-						   bool errorOnTableType,
-						   ObjectAddresses *objsMoved);
+extern Oid	AlterTypeNamespaceInternal(Oid typeOid, Oid nspOid,
+									   bool isImplicitArray,
+									   bool errorOnTableType,
+									   ObjectAddresses *objsMoved);
 
 #endif							/* TYPECMDS_H */
diff --git a/src/include/commands/vacuum.h b/src/include/commands/vacuum.h
index c6325a989da0..128f7ae65da7 100644
--- a/src/include/commands/vacuum.h
+++ b/src/include/commands/vacuum.h
@@ -197,42 +197,42 @@ extern int	vacuum_multixact_freeze_table_age;
 /* in commands/vacuum.c */
 extern void ExecVacuum(ParseState *pstate, VacuumStmt *vacstmt, bool isTopLevel);
 extern void vacuum(List *relations, VacuumParams *params,
-	   BufferAccessStrategy bstrategy, bool isTopLevel);
+				   BufferAccessStrategy bstrategy, bool isTopLevel);
 extern void vac_open_indexes(Relation relation, LOCKMODE lockmode,
-				 int *nindexes, Relation **Irel);
+							 int *nindexes, Relation **Irel);
 extern void vac_close_indexes(int nindexes, Relation *Irel, LOCKMODE lockmode);
 extern double vac_estimate_reltuples(Relation relation,
-					   BlockNumber total_pages,
-					   BlockNumber scanned_pages,
-					   double scanned_tuples);
+									 BlockNumber total_pages,
+									 BlockNumber scanned_pages,
+									 double scanned_tuples);
 extern void vac_update_relstats(Relation relation,
-					BlockNumber num_pages,
-					double num_tuples,
-					BlockNumber num_all_visible_pages,
-					bool hasindex,
-					TransactionId frozenxid,
-					MultiXactId minmulti,
-					bool in_outer_xact);
+								BlockNumber num_pages,
+								double num_tuples,
+								BlockNumber num_all_visible_pages,
+								bool hasindex,
+								TransactionId frozenxid,
+								MultiXactId minmulti,
+								bool in_outer_xact);
 extern void vacuum_set_xid_limits(Relation rel,
-					  int freeze_min_age, int freeze_table_age,
-					  int multixact_freeze_min_age,
-					  int multixact_freeze_table_age,
-					  TransactionId *oldestXmin,
-					  TransactionId *freezeLimit,
-					  TransactionId *xidFullScanLimit,
-					  MultiXactId *multiXactCutoff,
-					  MultiXactId *mxactFullScanLimit);
+								  int freeze_min_age, int freeze_table_age,
+								  int multixact_freeze_min_age,
+								  int multixact_freeze_table_age,
+								  TransactionId *oldestXmin,
+								  TransactionId *freezeLimit,
+								  TransactionId *xidFullScanLimit,
+								  MultiXactId *multiXactCutoff,
+								  MultiXactId *mxactFullScanLimit);
 extern void vac_update_datfrozenxid(void);
 extern void vacuum_delay_point(void);
 extern bool vacuum_is_relation_owner(Oid relid, Form_pg_class reltuple,
-						 int options);
+									 int options);
 extern Relation vacuum_open_relation(Oid relid, RangeVar *relation,
-					 int options, bool verbose, LOCKMODE lmode);
+									 int options, bool verbose, LOCKMODE lmode);
 
 /* in commands/analyze.c */
 extern void analyze_rel(Oid relid, RangeVar *relation,
-			VacuumParams *params, List *va_cols, bool in_outer_xact,
-			BufferAccessStrategy bstrategy);
+						VacuumParams *params, List *va_cols, bool in_outer_xact,
+						BufferAccessStrategy bstrategy);
 extern bool std_typanalyze(VacAttrStats *stats);
 
 /* in utils/misc/sampling.c --- duplicate of declarations in utils/sampling.h */
diff --git a/src/include/commands/view.h b/src/include/commands/view.h
index 77d8271aec9c..13a58017ba15 100644
--- a/src/include/commands/view.h
+++ b/src/include/commands/view.h
@@ -20,7 +20,7 @@
 extern void validateWithCheckOption(const char *value);
 
 extern ObjectAddress DefineView(ViewStmt *stmt, const char *queryString,
-		   int stmt_location, int stmt_len);
+								int stmt_location, int stmt_len);
 
 extern void StoreViewQuery(Oid viewOid, Query *viewParse, bool replace);
 
diff --git a/src/include/common/config_info.h b/src/include/common/config_info.h
index 888ba0d6535e..b1b93f3e086f 100644
--- a/src/include/common/config_info.h
+++ b/src/include/common/config_info.h
@@ -16,6 +16,6 @@ typedef struct ConfigData
 } ConfigData;
 
 extern ConfigData *get_configdata(const char *my_exec_path,
-			   size_t *configdata_len);
+								  size_t *configdata_len);
 
 #endif							/* COMMON_CONFIG_INFO_H */
diff --git a/src/include/common/controldata_utils.h b/src/include/common/controldata_utils.h
index c5ef9c369be3..6263afafbbe7 100644
--- a/src/include/common/controldata_utils.h
+++ b/src/include/common/controldata_utils.h
@@ -14,6 +14,6 @@
 
 extern ControlFileData *get_controlfile(const char *DataDir, bool *crc_ok_p);
 extern void update_controlfile(const char *DataDir,
-				   ControlFileData *ControlFile, bool do_sync);
+							   ControlFileData *ControlFile, bool do_sync);
 
 #endif							/* COMMON_CONTROLDATA_UTILS_H */
diff --git a/src/include/common/ip.h b/src/include/common/ip.h
index 08880a13f902..ad7208673dd2 100644
--- a/src/include/common/ip.h
+++ b/src/include/common/ip.h
@@ -24,14 +24,14 @@
 #define IS_AF_UNIX(fam) (0)
 #endif
 
-extern int pg_getaddrinfo_all(const char *hostname, const char *servname,
-				   const struct addrinfo *hintp,
-				   struct addrinfo **result);
+extern int	pg_getaddrinfo_all(const char *hostname, const char *servname,
+							   const struct addrinfo *hintp,
+							   struct addrinfo **result);
 extern void pg_freeaddrinfo_all(int hint_ai_family, struct addrinfo *ai);
 
-extern int pg_getnameinfo_all(const struct sockaddr_storage *addr, int salen,
-				   char *node, int nodelen,
-				   char *service, int servicelen,
-				   int flags);
+extern int	pg_getnameinfo_all(const struct sockaddr_storage *addr, int salen,
+							   char *node, int nodelen,
+							   char *service, int servicelen,
+							   int flags);
 
 #endif							/* IP_H */
diff --git a/src/include/common/md5.h b/src/include/common/md5.h
index 80b7475f4067..aa7cd3f27b52 100644
--- a/src/include/common/md5.h
+++ b/src/include/common/md5.h
@@ -22,6 +22,6 @@
 extern bool pg_md5_hash(const void *buff, size_t len, char *hexsum);
 extern bool pg_md5_binary(const void *buff, size_t len, void *outbuf);
 extern bool pg_md5_encrypt(const char *passwd, const char *salt,
-			   size_t salt_len, char *buf);
+						   size_t salt_len, char *buf);
 
 #endif
diff --git a/src/include/common/pg_lzcompress.h b/src/include/common/pg_lzcompress.h
index 279b66ec7c39..555576436cc8 100644
--- a/src/include/common/pg_lzcompress.h
+++ b/src/include/common/pg_lzcompress.h
@@ -84,8 +84,8 @@ extern const PGLZ_Strategy *const PGLZ_strategy_always;
  * ----------
  */
 extern int32 pglz_compress(const char *source, int32 slen, char *dest,
-			  const PGLZ_Strategy *strategy);
+						   const PGLZ_Strategy *strategy);
 extern int32 pglz_decompress(const char *source, int32 slen, char *dest,
-				int32 rawsize, bool check_complete);
+							 int32 rawsize, bool check_complete);
 
 #endif							/* _PG_LZCOMPRESS_H_ */
diff --git a/src/include/common/relpath.h b/src/include/common/relpath.h
index f3cda129ab57..8ac3929bbf49 100644
--- a/src/include/common/relpath.h
+++ b/src/include/common/relpath.h
@@ -67,7 +67,7 @@ extern int	forkname_chars(const char *str, ForkNumber *fork);
 extern char *GetDatabasePath(Oid dbNode, Oid spcNode);
 
 extern char *GetRelationPath(Oid dbNode, Oid spcNode, Oid relNode,
-				int backendId, ForkNumber forkNumber);
+							 int backendId, ForkNumber forkNumber);
 
 /*
  * Wrapper macros for GetRelationPath.  Beware of multiple
diff --git a/src/include/common/scram-common.h b/src/include/common/scram-common.h
index 258d27531452..d52df67ec8b5 100644
--- a/src/include/common/scram-common.h
+++ b/src/include/common/scram-common.h
@@ -59,12 +59,12 @@ extern void scram_HMAC_update(scram_HMAC_ctx *ctx, const char *str, int slen);
 extern void scram_HMAC_final(uint8 *result, scram_HMAC_ctx *ctx);
 
 extern void scram_SaltedPassword(const char *password, const char *salt,
-					 int saltlen, int iterations, uint8 *result);
+								 int saltlen, int iterations, uint8 *result);
 extern void scram_H(const uint8 *str, int len, uint8 *result);
 extern void scram_ClientKey(const uint8 *salted_password, uint8 *result);
 extern void scram_ServerKey(const uint8 *salted_password, uint8 *result);
 
 extern char *scram_build_verifier(const char *salt, int saltlen, int iterations,
-					 const char *password);
+								  const char *password);
 
 #endif							/* SCRAM_COMMON_H */
diff --git a/src/include/common/sha2.h b/src/include/common/sha2.h
index 6c208ee42edc..830359f6453a 100644
--- a/src/include/common/sha2.h
+++ b/src/include/common/sha2.h
@@ -94,22 +94,22 @@ typedef struct pg_sha512_ctx pg_sha384_ctx;
 /* Interface routines for SHA224/256/384/512 */
 extern void pg_sha224_init(pg_sha224_ctx *ctx);
 extern void pg_sha224_update(pg_sha224_ctx *ctx, const uint8 *input0,
-				 size_t len);
+							 size_t len);
 extern void pg_sha224_final(pg_sha224_ctx *ctx, uint8 *dest);
 
 extern void pg_sha256_init(pg_sha256_ctx *ctx);
 extern void pg_sha256_update(pg_sha256_ctx *ctx, const uint8 *input0,
-				 size_t len);
+							 size_t len);
 extern void pg_sha256_final(pg_sha256_ctx *ctx, uint8 *dest);
 
 extern void pg_sha384_init(pg_sha384_ctx *ctx);
 extern void pg_sha384_update(pg_sha384_ctx *ctx,
-				 const uint8 *, size_t len);
+							 const uint8 *, size_t len);
 extern void pg_sha384_final(pg_sha384_ctx *ctx, uint8 *dest);
 
 extern void pg_sha512_init(pg_sha512_ctx *ctx);
 extern void pg_sha512_update(pg_sha512_ctx *ctx, const uint8 *input0,
-				 size_t len);
+							 size_t len);
 extern void pg_sha512_final(pg_sha512_ctx *ctx, uint8 *dest);
 
 #endif							/* _PG_SHA2_H_ */
diff --git a/src/include/common/string.h b/src/include/common/string.h
index f3467f0ee431..77f31337ca43 100644
--- a/src/include/common/string.h
+++ b/src/include/common/string.h
@@ -11,8 +11,8 @@
 #define COMMON_STRING_H
 
 extern bool pg_str_endswith(const char *str, const char *end);
-extern int strtoint(const char *pg_restrict str, char **pg_restrict endptr,
-		 int base);
+extern int	strtoint(const char *pg_restrict str, char **pg_restrict endptr,
+					 int base);
 extern void pg_clean_ascii(char *str);
 
 #endif							/* COMMON_STRING_H */
diff --git a/src/include/executor/execExpr.h b/src/include/executor/execExpr.h
index 7aacdc5d0499..8e7f7c3d1372 100644
--- a/src/include/executor/execExpr.h
+++ b/src/include/executor/execExpr.h
@@ -710,58 +710,58 @@ extern void CheckExprStillValid(ExprState *state, ExprContext *econtext);
  * expression evaluation, reducing code duplication.
  */
 extern void ExecEvalFuncExprFusage(ExprState *state, ExprEvalStep *op,
-					   ExprContext *econtext);
+								   ExprContext *econtext);
 extern void ExecEvalFuncExprStrictFusage(ExprState *state, ExprEvalStep *op,
-							 ExprContext *econtext);
+										 ExprContext *econtext);
 extern void ExecEvalParamExec(ExprState *state, ExprEvalStep *op,
-				  ExprContext *econtext);
+							  ExprContext *econtext);
 extern void ExecEvalParamExtern(ExprState *state, ExprEvalStep *op,
-					ExprContext *econtext);
+								ExprContext *econtext);
 extern void ExecEvalSQLValueFunction(ExprState *state, ExprEvalStep *op);
 extern void ExecEvalCurrentOfExpr(ExprState *state, ExprEvalStep *op);
 extern void ExecEvalNextValueExpr(ExprState *state, ExprEvalStep *op);
 extern void ExecEvalRowNull(ExprState *state, ExprEvalStep *op,
-				ExprContext *econtext);
+							ExprContext *econtext);
 extern void ExecEvalRowNotNull(ExprState *state, ExprEvalStep *op,
-				   ExprContext *econtext);
+							   ExprContext *econtext);
 extern void ExecEvalArrayExpr(ExprState *state, ExprEvalStep *op);
 extern void ExecEvalArrayCoerce(ExprState *state, ExprEvalStep *op,
-					ExprContext *econtext);
+								ExprContext *econtext);
 extern void ExecEvalRow(ExprState *state, ExprEvalStep *op);
 extern void ExecEvalMinMax(ExprState *state, ExprEvalStep *op);
 extern void ExecEvalFieldSelect(ExprState *state, ExprEvalStep *op,
-					ExprContext *econtext);
+								ExprContext *econtext);
 extern void ExecEvalFieldStoreDeForm(ExprState *state, ExprEvalStep *op,
-						 ExprContext *econtext);
+									 ExprContext *econtext);
 extern void ExecEvalFieldStoreForm(ExprState *state, ExprEvalStep *op,
-					   ExprContext *econtext);
+								   ExprContext *econtext);
 extern bool ExecEvalSubscriptingRef(ExprState *state, ExprEvalStep *op);
 extern void ExecEvalSubscriptingRefFetch(ExprState *state, ExprEvalStep *op);
 extern void ExecEvalSubscriptingRefOld(ExprState *state, ExprEvalStep *op);
 extern void ExecEvalSubscriptingRefAssign(ExprState *state, ExprEvalStep *op);
 extern void ExecEvalConvertRowtype(ExprState *state, ExprEvalStep *op,
-					   ExprContext *econtext);
+								   ExprContext *econtext);
 extern void ExecEvalScalarArrayOp(ExprState *state, ExprEvalStep *op);
 extern void ExecEvalConstraintNotNull(ExprState *state, ExprEvalStep *op);
 extern void ExecEvalConstraintCheck(ExprState *state, ExprEvalStep *op);
 extern void ExecEvalXmlExpr(ExprState *state, ExprEvalStep *op);
 extern void ExecEvalGroupingFunc(ExprState *state, ExprEvalStep *op);
 extern void ExecEvalSubPlan(ExprState *state, ExprEvalStep *op,
-				ExprContext *econtext);
+							ExprContext *econtext);
 extern void ExecEvalAlternativeSubPlan(ExprState *state, ExprEvalStep *op,
-						   ExprContext *econtext);
+									   ExprContext *econtext);
 extern void ExecEvalWholeRowVar(ExprState *state, ExprEvalStep *op,
-					ExprContext *econtext);
+								ExprContext *econtext);
 extern void ExecEvalSysVar(ExprState *state, ExprEvalStep *op,
-			   ExprContext *econtext, TupleTableSlot *slot);
+						   ExprContext *econtext, TupleTableSlot *slot);
 
 extern void ExecAggInitGroup(AggState *aggstate, AggStatePerTrans pertrans, AggStatePerGroup pergroup);
 extern Datum ExecAggTransReparent(AggState *aggstate, AggStatePerTrans pertrans,
-					 Datum newValue, bool newValueIsNull,
-					 Datum oldValue, bool oldValueIsNull);
+								  Datum newValue, bool newValueIsNull,
+								  Datum oldValue, bool oldValueIsNull);
 extern void ExecEvalAggOrderedTransDatum(ExprState *state, ExprEvalStep *op,
-							 ExprContext *econtext);
+										 ExprContext *econtext);
 extern void ExecEvalAggOrderedTransTuple(ExprState *state, ExprEvalStep *op,
-							 ExprContext *econtext);
+										 ExprContext *econtext);
 
 #endif							/* EXEC_EXPR_H */
diff --git a/src/include/executor/execParallel.h b/src/include/executor/execParallel.h
index 98900cfbf275..46fcf8999278 100644
--- a/src/include/executor/execParallel.h
+++ b/src/include/executor/execParallel.h
@@ -37,13 +37,13 @@ typedef struct ParallelExecutorInfo
 } ParallelExecutorInfo;
 
 extern ParallelExecutorInfo *ExecInitParallelPlan(PlanState *planstate,
-					 EState *estate, Bitmapset *sendParam, int nworkers,
-					 int64 tuples_needed);
+												  EState *estate, Bitmapset *sendParam, int nworkers,
+												  int64 tuples_needed);
 extern void ExecParallelCreateReaders(ParallelExecutorInfo *pei);
 extern void ExecParallelFinish(ParallelExecutorInfo *pei);
 extern void ExecParallelCleanup(ParallelExecutorInfo *pei);
 extern void ExecParallelReinitialize(PlanState *planstate,
-						 ParallelExecutorInfo *pei, Bitmapset *sendParam);
+									 ParallelExecutorInfo *pei, Bitmapset *sendParam);
 
 extern void ParallelQueryMain(dsm_segment *seg, shm_toc *toc);
 
diff --git a/src/include/executor/execPartition.h b/src/include/executor/execPartition.h
index bf91b3db3905..580734e9c965 100644
--- a/src/include/executor/execPartition.h
+++ b/src/include/executor/execPartition.h
@@ -138,19 +138,19 @@ typedef struct PartitionPruneState
 } PartitionPruneState;
 
 extern PartitionTupleRouting *ExecSetupPartitionTupleRouting(EState *estate,
-							   ModifyTableState *mtstate,
-							   Relation rel);
+															 ModifyTableState *mtstate,
+															 Relation rel);
 extern ResultRelInfo *ExecFindPartition(ModifyTableState *mtstate,
-				  ResultRelInfo *rootResultRelInfo,
-				  PartitionTupleRouting *proute,
-				  TupleTableSlot *slot,
-				  EState *estate);
+										ResultRelInfo *rootResultRelInfo,
+										PartitionTupleRouting *proute,
+										TupleTableSlot *slot,
+										EState *estate);
 extern void ExecCleanupTupleRouting(ModifyTableState *mtstate,
-						PartitionTupleRouting *proute);
+									PartitionTupleRouting *proute);
 extern PartitionPruneState *ExecCreatePartitionPruneState(PlanState *planstate,
-							  PartitionPruneInfo *partitionpruneinfo);
+														  PartitionPruneInfo *partitionpruneinfo);
 extern Bitmapset *ExecFindMatchingSubPlans(PartitionPruneState *prunestate);
 extern Bitmapset *ExecFindInitialMatchingSubPlans(PartitionPruneState *prunestate,
-								int nsubplans);
+												  int nsubplans);
 
 #endif							/* EXECPARTITION_H */
diff --git a/src/include/executor/execdesc.h b/src/include/executor/execdesc.h
index ea8b67679895..b88fa02d3b73 100644
--- a/src/include/executor/execdesc.h
+++ b/src/include/executor/execdesc.h
@@ -57,13 +57,13 @@ typedef struct QueryDesc
 
 /* in pquery.c */
 extern QueryDesc *CreateQueryDesc(PlannedStmt *plannedstmt,
-				const char *sourceText,
-				Snapshot snapshot,
-				Snapshot crosscheck_snapshot,
-				DestReceiver *dest,
-				ParamListInfo params,
-				QueryEnvironment *queryEnv,
-				int instrument_options);
+								  const char *sourceText,
+								  Snapshot snapshot,
+								  Snapshot crosscheck_snapshot,
+								  DestReceiver *dest,
+								  ParamListInfo params,
+								  QueryEnvironment *queryEnv,
+								  int instrument_options);
 
 extern void FreeQueryDesc(QueryDesc *qdesc);
 
diff --git a/src/include/executor/executor.h b/src/include/executor/executor.h
index 14a58915856b..88134bcc7157 100644
--- a/src/include/executor/executor.h
+++ b/src/include/executor/executor.h
@@ -100,67 +100,67 @@ extern bool ExecMaterializesOutput(NodeTag plantype);
  * prototypes from functions in execCurrent.c
  */
 extern bool execCurrentOf(CurrentOfExpr *cexpr,
-			  ExprContext *econtext,
-			  Oid table_oid,
-			  ItemPointer current_tid);
+						  ExprContext *econtext,
+						  Oid table_oid,
+						  ItemPointer current_tid);
 
 /*
  * prototypes from functions in execGrouping.c
  */
 extern ExprState *execTuplesMatchPrepare(TupleDesc desc,
-					   int numCols,
-					   const AttrNumber *keyColIdx,
-					   const Oid *eqOperators,
-					   const Oid *collations,
-					   PlanState *parent);
+										 int numCols,
+										 const AttrNumber *keyColIdx,
+										 const Oid *eqOperators,
+										 const Oid *collations,
+										 PlanState *parent);
 extern void execTuplesHashPrepare(int numCols,
-					  const Oid *eqOperators,
-					  Oid **eqFuncOids,
-					  FmgrInfo **hashFunctions);
+								  const Oid *eqOperators,
+								  Oid **eqFuncOids,
+								  FmgrInfo **hashFunctions);
 extern TupleHashTable BuildTupleHashTable(PlanState *parent,
-					TupleDesc inputDesc,
-					int numCols, AttrNumber *keyColIdx,
-					const Oid *eqfuncoids,
-					FmgrInfo *hashfunctions,
-					Oid *collations,
-					long nbuckets, Size additionalsize,
-					MemoryContext tablecxt,
-					MemoryContext tempcxt, bool use_variable_hash_iv);
+										  TupleDesc inputDesc,
+										  int numCols, AttrNumber *keyColIdx,
+										  const Oid *eqfuncoids,
+										  FmgrInfo *hashfunctions,
+										  Oid *collations,
+										  long nbuckets, Size additionalsize,
+										  MemoryContext tablecxt,
+										  MemoryContext tempcxt, bool use_variable_hash_iv);
 extern TupleHashTable BuildTupleHashTableExt(PlanState *parent,
-					   TupleDesc inputDesc,
-					   int numCols, AttrNumber *keyColIdx,
-					   const Oid *eqfuncoids,
-					   FmgrInfo *hashfunctions,
-					   Oid *collations,
-					   long nbuckets, Size additionalsize,
-					   MemoryContext metacxt,
-					   MemoryContext tablecxt,
-					   MemoryContext tempcxt, bool use_variable_hash_iv);
+											 TupleDesc inputDesc,
+											 int numCols, AttrNumber *keyColIdx,
+											 const Oid *eqfuncoids,
+											 FmgrInfo *hashfunctions,
+											 Oid *collations,
+											 long nbuckets, Size additionalsize,
+											 MemoryContext metacxt,
+											 MemoryContext tablecxt,
+											 MemoryContext tempcxt, bool use_variable_hash_iv);
 extern TupleHashEntry LookupTupleHashEntry(TupleHashTable hashtable,
-					 TupleTableSlot *slot,
-					 bool *isnew);
+										   TupleTableSlot *slot,
+										   bool *isnew);
 extern TupleHashEntry FindTupleHashEntry(TupleHashTable hashtable,
-				   TupleTableSlot *slot,
-				   ExprState *eqcomp,
-				   FmgrInfo *hashfunctions);
+										 TupleTableSlot *slot,
+										 ExprState *eqcomp,
+										 FmgrInfo *hashfunctions);
 extern void ResetTupleHashTable(TupleHashTable hashtable);
 
 /*
  * prototypes from functions in execJunk.c
  */
 extern JunkFilter *ExecInitJunkFilter(List *targetList,
-				   TupleTableSlot *slot);
+									  TupleTableSlot *slot);
 extern JunkFilter *ExecInitJunkFilterConversion(List *targetList,
-							 TupleDesc cleanTupType,
-							 TupleTableSlot *slot);
+												TupleDesc cleanTupType,
+												TupleTableSlot *slot);
 extern AttrNumber ExecFindJunkAttribute(JunkFilter *junkfilter,
-					  const char *attrName);
+										const char *attrName);
 extern AttrNumber ExecFindJunkAttributeInTlist(List *targetlist,
-							 const char *attrName);
+											   const char *attrName);
 extern Datum ExecGetJunkAttribute(TupleTableSlot *slot, AttrNumber attno,
-					 bool *isNull);
+								  bool *isNull);
 extern TupleTableSlot *ExecFilterJunk(JunkFilter *junkfilter,
-			   TupleTableSlot *slot);
+									  TupleTableSlot *slot);
 
 
 /*
@@ -169,9 +169,9 @@ extern TupleTableSlot *ExecFilterJunk(JunkFilter *junkfilter,
 extern void ExecutorStart(QueryDesc *queryDesc, int eflags);
 extern void standard_ExecutorStart(QueryDesc *queryDesc, int eflags);
 extern void ExecutorRun(QueryDesc *queryDesc,
-			ScanDirection direction, uint64 count, bool execute_once);
+						ScanDirection direction, uint64 count, bool execute_once);
 extern void standard_ExecutorRun(QueryDesc *queryDesc,
-					 ScanDirection direction, uint64 count, bool execute_once);
+								 ScanDirection direction, uint64 count, bool execute_once);
 extern void ExecutorFinish(QueryDesc *queryDesc);
 extern void standard_ExecutorFinish(QueryDesc *queryDesc);
 extern void ExecutorEnd(QueryDesc *queryDesc);
@@ -180,31 +180,31 @@ extern void ExecutorRewind(QueryDesc *queryDesc);
 extern bool ExecCheckRTPerms(List *rangeTable, bool ereport_on_violation);
 extern void CheckValidResultRel(ResultRelInfo *resultRelInfo, CmdType operation);
 extern void InitResultRelInfo(ResultRelInfo *resultRelInfo,
-				  Relation resultRelationDesc,
-				  Index resultRelationIndex,
-				  Relation partition_root,
-				  int instrument_options);
+							  Relation resultRelationDesc,
+							  Index resultRelationIndex,
+							  Relation partition_root,
+							  int instrument_options);
 extern ResultRelInfo *ExecGetTriggerResultRel(EState *estate, Oid relid);
 extern void ExecCleanUpTriggerState(EState *estate);
 extern void ExecConstraints(ResultRelInfo *resultRelInfo,
-				TupleTableSlot *slot, EState *estate);
+							TupleTableSlot *slot, EState *estate);
 extern bool ExecPartitionCheck(ResultRelInfo *resultRelInfo,
-				   TupleTableSlot *slot, EState *estate, bool emitError);
+							   TupleTableSlot *slot, EState *estate, bool emitError);
 extern void ExecPartitionCheckEmitError(ResultRelInfo *resultRelInfo,
-							TupleTableSlot *slot, EState *estate);
+										TupleTableSlot *slot, EState *estate);
 extern void ExecWithCheckOptions(WCOKind kind, ResultRelInfo *resultRelInfo,
-					 TupleTableSlot *slot, EState *estate);
+								 TupleTableSlot *slot, EState *estate);
 extern LockTupleMode ExecUpdateLockMode(EState *estate, ResultRelInfo *relinfo);
 extern ExecRowMark *ExecFindRowMark(EState *estate, Index rti, bool missing_ok);
 extern ExecAuxRowMark *ExecBuildAuxRowMark(ExecRowMark *erm, List *targetlist);
 extern TupleTableSlot *EvalPlanQual(EState *estate, EPQState *epqstate,
-			 Relation relation, Index rti, TupleTableSlot *testslot);
+									Relation relation, Index rti, TupleTableSlot *testslot);
 extern void EvalPlanQualInit(EPQState *epqstate, EState *estate,
-				 Plan *subplan, List *auxrowmarks, int epqParam);
+							 Plan *subplan, List *auxrowmarks, int epqParam);
 extern void EvalPlanQualSetPlan(EPQState *epqstate,
-					Plan *subplan, List *auxrowmarks);
+								Plan *subplan, List *auxrowmarks);
 extern TupleTableSlot *EvalPlanQualSlot(EPQState *epqstate,
-				 Relation relation, Index rti);
+										Relation relation, Index rti);
 
 #define EvalPlanQualSetSlot(epqstate, slot)  ((epqstate)->origslot = (slot))
 extern void EvalPlanQualFetchRowMarks(EPQState *epqstate);
@@ -249,19 +249,19 @@ extern ExprState *ExecInitQual(List *qual, PlanState *parent);
 extern ExprState *ExecInitCheck(List *qual, PlanState *parent);
 extern List *ExecInitExprList(List *nodes, PlanState *parent);
 extern ExprState *ExecBuildAggTrans(AggState *aggstate, struct AggStatePerPhaseData *phase,
-				  bool doSort, bool doHash);
+									bool doSort, bool doHash);
 extern ExprState *ExecBuildGroupingEqual(TupleDesc ldesc, TupleDesc rdesc,
-					   const TupleTableSlotOps *lops, const TupleTableSlotOps *rops,
-					   int numCols,
-					   const AttrNumber *keyColIdx,
-					   const Oid *eqfunctions,
-					   const Oid *collations,
-					   PlanState *parent);
+										 const TupleTableSlotOps *lops, const TupleTableSlotOps *rops,
+										 int numCols,
+										 const AttrNumber *keyColIdx,
+										 const Oid *eqfunctions,
+										 const Oid *collations,
+										 PlanState *parent);
 extern ProjectionInfo *ExecBuildProjectionInfo(List *targetList,
-						ExprContext *econtext,
-						TupleTableSlot *slot,
-						PlanState *parent,
-						TupleDesc inputDesc);
+											   ExprContext *econtext,
+											   TupleTableSlot *slot,
+											   PlanState *parent,
+											   TupleDesc inputDesc);
 extern ExprState *ExecPrepareExpr(Expr *node, EState *estate);
 extern ExprState *ExecPrepareQual(List *qual, EState *estate);
 extern ExprState *ExecPrepareCheck(List *qual, EState *estate);
@@ -404,19 +404,19 @@ extern bool ExecCheck(ExprState *state, ExprContext *context);
  * prototypes from functions in execSRF.c
  */
 extern SetExprState *ExecInitTableFunctionResult(Expr *expr,
-							ExprContext *econtext, PlanState *parent);
+												 ExprContext *econtext, PlanState *parent);
 extern Tuplestorestate *ExecMakeTableFunctionResult(SetExprState *setexpr,
-							ExprContext *econtext,
-							MemoryContext argContext,
-							TupleDesc expectedDesc,
-							bool randomAccess);
+													ExprContext *econtext,
+													MemoryContext argContext,
+													TupleDesc expectedDesc,
+													bool randomAccess);
 extern SetExprState *ExecInitFunctionResultSet(Expr *expr,
-						  ExprContext *econtext, PlanState *parent);
+											   ExprContext *econtext, PlanState *parent);
 extern Datum ExecMakeFunctionResultSet(SetExprState *fcache,
-						  ExprContext *econtext,
-						  MemoryContext argContext,
-						  bool *isNull,
-						  ExprDoneCond *isDone);
+									   ExprContext *econtext,
+									   MemoryContext argContext,
+									   bool *isNull,
+									   ExprDoneCond *isDone);
 
 /*
  * prototypes from functions in execScan.c
@@ -425,7 +425,7 @@ typedef TupleTableSlot *(*ExecScanAccessMtd) (ScanState *node);
 typedef bool (*ExecScanRecheckMtd) (ScanState *node, TupleTableSlot *slot);
 
 extern TupleTableSlot *ExecScan(ScanState *node, ExecScanAccessMtd accessMtd,
-		 ExecScanRecheckMtd recheckMtd);
+								ExecScanRecheckMtd recheckMtd);
 extern void ExecAssignScanProjectionInfo(ScanState *node);
 extern void ExecAssignScanProjectionInfoWithVarno(ScanState *node, Index varno);
 extern void ExecScanReScan(ScanState *node);
@@ -435,17 +435,17 @@ extern void ExecScanReScan(ScanState *node);
  */
 extern void ExecInitResultTypeTL(PlanState *planstate);
 extern void ExecInitResultSlot(PlanState *planstate,
-				   const TupleTableSlotOps *tts_ops);
+							   const TupleTableSlotOps *tts_ops);
 extern void ExecInitResultTupleSlotTL(PlanState *planstate,
-						  const TupleTableSlotOps *tts_ops);
+									  const TupleTableSlotOps *tts_ops);
 extern void ExecInitScanTupleSlot(EState *estate, ScanState *scanstate,
-					  TupleDesc tupleDesc,
-					  const TupleTableSlotOps *tts_ops);
+								  TupleDesc tupleDesc,
+								  const TupleTableSlotOps *tts_ops);
 extern TupleTableSlot *ExecInitExtraTupleSlot(EState *estate,
-					   TupleDesc tupledesc,
-					   const TupleTableSlotOps *tts_ops);
+											  TupleDesc tupledesc,
+											  const TupleTableSlotOps *tts_ops);
 extern TupleTableSlot *ExecInitNullTupleSlot(EState *estate, TupleDesc tupType,
-					  const TupleTableSlotOps *tts_ops);
+											 const TupleTableSlotOps *tts_ops);
 extern TupleDesc ExecTypeFromTL(List *targetList);
 extern TupleDesc ExecCleanTypeFromTL(List *targetList);
 extern TupleDesc ExecTypeFromExprList(List *exprList);
@@ -459,8 +459,8 @@ typedef struct TupOutputState
 } TupOutputState;
 
 extern TupOutputState *begin_tup_output_tupdesc(DestReceiver *dest,
-						 TupleDesc tupdesc,
-						 const TupleTableSlotOps *tts_ops);
+												TupleDesc tupdesc,
+												const TupleTableSlotOps *tts_ops);
 extern void do_tup_output(TupOutputState *tstate, Datum *values, bool *isnull);
 extern void do_text_output_multiline(TupOutputState *tstate, const char *txt);
 extern void end_tup_output(TupOutputState *tstate);
@@ -516,16 +516,16 @@ extern void ExecAssignExprContext(EState *estate, PlanState *planstate);
 extern TupleDesc ExecGetResultType(PlanState *planstate);
 extern TupleTableSlot ExecGetResultSlot(PlanState *planstate);
 extern const TupleTableSlotOps *ExecGetResultSlotOps(PlanState *planstate,
-					 bool *isfixed);
+													 bool *isfixed);
 extern void ExecAssignProjectionInfo(PlanState *planstate,
-						 TupleDesc inputDesc);
+									 TupleDesc inputDesc);
 extern void ExecConditionalAssignProjectionInfo(PlanState *planstate,
-									TupleDesc inputDesc, Index varno);
+												TupleDesc inputDesc, Index varno);
 extern void ExecFreeExprContext(PlanState *planstate);
 extern void ExecAssignScanType(ScanState *scanstate, TupleDesc tupDesc);
 extern void ExecCreateScanSlotFromOuterPlan(EState *estate,
-								ScanState *scanstate,
-								const TupleTableSlotOps *tts_ops);
+											ScanState *scanstate,
+											const TupleTableSlotOps *tts_ops);
 
 extern bool ExecRelationIsTargetRelation(EState *estate, Index scanrelid);
 
@@ -545,16 +545,16 @@ extern Relation ExecGetRangeTableRelation(EState *estate, Index rti);
 extern int	executor_errposition(EState *estate, int location);
 
 extern void RegisterExprContextCallback(ExprContext *econtext,
-							ExprContextCallbackFunction function,
-							Datum arg);
+										ExprContextCallbackFunction function,
+										Datum arg);
 extern void UnregisterExprContextCallback(ExprContext *econtext,
-							  ExprContextCallbackFunction function,
-							  Datum arg);
+										  ExprContextCallbackFunction function,
+										  Datum arg);
 
 extern Datum GetAttributeByName(HeapTupleHeader tuple, const char *attname,
-				   bool *isNull);
+								bool *isNull);
 extern Datum GetAttributeByNum(HeapTupleHeader tuple, AttrNumber attrno,
-				  bool *isNull);
+							   bool *isNull);
 
 extern int	ExecTargetListLength(List *targetlist);
 extern int	ExecCleanTargetListLength(List *targetlist);
@@ -569,33 +569,33 @@ extern TupleTableSlot *ExecGetReturningSlot(EState *estate, ResultRelInfo *relIn
 extern void ExecOpenIndices(ResultRelInfo *resultRelInfo, bool speculative);
 extern void ExecCloseIndices(ResultRelInfo *resultRelInfo);
 extern List *ExecInsertIndexTuples(TupleTableSlot *slot, EState *estate, bool noDupErr,
-					  bool *specConflict, List *arbiterIndexes);
+								   bool *specConflict, List *arbiterIndexes);
 extern bool ExecCheckIndexConstraints(TupleTableSlot *slot, EState *estate,
-						  ItemPointer conflictTid, List *arbiterIndexes);
+									  ItemPointer conflictTid, List *arbiterIndexes);
 extern void check_exclusion_constraint(Relation heap, Relation index,
-						   IndexInfo *indexInfo,
-						   ItemPointer tupleid,
-						   Datum *values, bool *isnull,
-						   EState *estate, bool newIndex);
+									   IndexInfo *indexInfo,
+									   ItemPointer tupleid,
+									   Datum *values, bool *isnull,
+									   EState *estate, bool newIndex);
 
 /*
  * prototypes from functions in execReplication.c
  */
 extern bool RelationFindReplTupleByIndex(Relation rel, Oid idxoid,
-							 LockTupleMode lockmode,
-							 TupleTableSlot *searchslot,
-							 TupleTableSlot *outslot);
+										 LockTupleMode lockmode,
+										 TupleTableSlot *searchslot,
+										 TupleTableSlot *outslot);
 extern bool RelationFindReplTupleSeq(Relation rel, LockTupleMode lockmode,
-						 TupleTableSlot *searchslot, TupleTableSlot *outslot);
+									 TupleTableSlot *searchslot, TupleTableSlot *outslot);
 
 extern void ExecSimpleRelationInsert(EState *estate, TupleTableSlot *slot);
 extern void ExecSimpleRelationUpdate(EState *estate, EPQState *epqstate,
-						 TupleTableSlot *searchslot, TupleTableSlot *slot);
+									 TupleTableSlot *searchslot, TupleTableSlot *slot);
 extern void ExecSimpleRelationDelete(EState *estate, EPQState *epqstate,
-						 TupleTableSlot *searchslot);
+									 TupleTableSlot *searchslot);
 extern void CheckCmdReplicaIdentity(Relation rel, CmdType cmd);
 
 extern void CheckSubscriptionRelkind(char relkind, const char *nspname,
-						 const char *relname);
+									 const char *relname);
 
 #endif							/* EXECUTOR_H  */
diff --git a/src/include/executor/functions.h b/src/include/executor/functions.h
index 2e457417da1d..99131bfadb4a 100644
--- a/src/include/executor/functions.h
+++ b/src/include/executor/functions.h
@@ -23,18 +23,18 @@ typedef struct SQLFunctionParseInfo *SQLFunctionParseInfoPtr;
 extern Datum fmgr_sql(PG_FUNCTION_ARGS);
 
 extern SQLFunctionParseInfoPtr prepare_sql_fn_parse_info(HeapTuple procedureTuple,
-						  Node *call_expr,
-						  Oid inputCollation);
+														 Node *call_expr,
+														 Oid inputCollation);
 
 extern void sql_fn_parser_setup(struct ParseState *pstate,
-					SQLFunctionParseInfoPtr pinfo);
+								SQLFunctionParseInfoPtr pinfo);
 
 extern void check_sql_fn_statements(List *queryTreeList);
 
 extern bool check_sql_fn_retval(Oid func_id, Oid rettype,
-					List *queryTreeList,
-					bool *modifyTargetList,
-					JunkFilter **junkFilter);
+								List *queryTreeList,
+								bool *modifyTargetList,
+								JunkFilter **junkFilter);
 
 extern DestReceiver *CreateSQLFunctionDestReceiver(void);
 
diff --git a/src/include/executor/nodeBitmapHeapscan.h b/src/include/executor/nodeBitmapHeapscan.h
index 0944ec4d8e79..112def153cb2 100644
--- a/src/include/executor/nodeBitmapHeapscan.h
+++ b/src/include/executor/nodeBitmapHeapscan.h
@@ -21,12 +21,12 @@ extern BitmapHeapScanState *ExecInitBitmapHeapScan(BitmapHeapScan *node, EState
 extern void ExecEndBitmapHeapScan(BitmapHeapScanState *node);
 extern void ExecReScanBitmapHeapScan(BitmapHeapScanState *node);
 extern void ExecBitmapHeapEstimate(BitmapHeapScanState *node,
-					   ParallelContext *pcxt);
+								   ParallelContext *pcxt);
 extern void ExecBitmapHeapInitializeDSM(BitmapHeapScanState *node,
-							ParallelContext *pcxt);
+										ParallelContext *pcxt);
 extern void ExecBitmapHeapReInitializeDSM(BitmapHeapScanState *node,
-							  ParallelContext *pcxt);
+										  ParallelContext *pcxt);
 extern void ExecBitmapHeapInitializeWorker(BitmapHeapScanState *node,
-							   ParallelWorkerContext *pwcxt);
+										   ParallelWorkerContext *pwcxt);
 
 #endif							/* NODEBITMAPHEAPSCAN_H */
diff --git a/src/include/executor/nodeCustom.h b/src/include/executor/nodeCustom.h
index 3c1dd19a4a36..2c9cb95d8214 100644
--- a/src/include/executor/nodeCustom.h
+++ b/src/include/executor/nodeCustom.h
@@ -19,7 +19,7 @@
  * General executor code
  */
 extern CustomScanState *ExecInitCustomScan(CustomScan *custom_scan,
-				   EState *estate, int eflags);
+										   EState *estate, int eflags);
 extern void ExecEndCustomScan(CustomScanState *node);
 
 extern void ExecReScanCustomScan(CustomScanState *node);
@@ -30,13 +30,13 @@ extern void ExecCustomRestrPos(CustomScanState *node);
  * Parallel execution support
  */
 extern void ExecCustomScanEstimate(CustomScanState *node,
-					   ParallelContext *pcxt);
+								   ParallelContext *pcxt);
 extern void ExecCustomScanInitializeDSM(CustomScanState *node,
-							ParallelContext *pcxt);
+										ParallelContext *pcxt);
 extern void ExecCustomScanReInitializeDSM(CustomScanState *node,
-							  ParallelContext *pcxt);
+										  ParallelContext *pcxt);
 extern void ExecCustomScanInitializeWorker(CustomScanState *node,
-							   ParallelWorkerContext *pwcxt);
+										   ParallelWorkerContext *pwcxt);
 extern void ExecShutdownCustomScan(CustomScanState *node);
 
 #endif							/* NODECUSTOM_H */
diff --git a/src/include/executor/nodeForeignscan.h b/src/include/executor/nodeForeignscan.h
index 4d5c4d1ed90c..ca7723c89977 100644
--- a/src/include/executor/nodeForeignscan.h
+++ b/src/include/executor/nodeForeignscan.h
@@ -22,13 +22,13 @@ extern void ExecEndForeignScan(ForeignScanState *node);
 extern void ExecReScanForeignScan(ForeignScanState *node);
 
 extern void ExecForeignScanEstimate(ForeignScanState *node,
-						ParallelContext *pcxt);
+									ParallelContext *pcxt);
 extern void ExecForeignScanInitializeDSM(ForeignScanState *node,
-							 ParallelContext *pcxt);
+										 ParallelContext *pcxt);
 extern void ExecForeignScanReInitializeDSM(ForeignScanState *node,
-							   ParallelContext *pcxt);
+										   ParallelContext *pcxt);
 extern void ExecForeignScanInitializeWorker(ForeignScanState *node,
-								ParallelWorkerContext *pwcxt);
+											ParallelWorkerContext *pwcxt);
 extern void ExecShutdownForeignScan(ForeignScanState *node);
 
 #endif							/* NODEFOREIGNSCAN_H */
diff --git a/src/include/executor/nodeGatherMerge.h b/src/include/executor/nodeGatherMerge.h
index 1509b7bcbcef..d818576f1c88 100644
--- a/src/include/executor/nodeGatherMerge.h
+++ b/src/include/executor/nodeGatherMerge.h
@@ -17,8 +17,8 @@
 #include "nodes/execnodes.h"
 
 extern GatherMergeState *ExecInitGatherMerge(GatherMerge *node,
-					EState *estate,
-					int eflags);
+											 EState *estate,
+											 int eflags);
 extern void ExecEndGatherMerge(GatherMergeState *node);
 extern void ExecReScanGatherMerge(GatherMergeState *node);
 extern void ExecShutdownGatherMerge(GatherMergeState *node);
diff --git a/src/include/executor/nodeHash.h b/src/include/executor/nodeHash.h
index 123376602356..fc80f03aa8d9 100644
--- a/src/include/executor/nodeHash.h
+++ b/src/include/executor/nodeHash.h
@@ -25,48 +25,48 @@ extern void ExecEndHash(HashState *node);
 extern void ExecReScanHash(HashState *node);
 
 extern HashJoinTable ExecHashTableCreate(HashState *state, List *hashOperators, List *hashCollations,
-					bool keepNulls);
+										 bool keepNulls);
 extern void ExecParallelHashTableAlloc(HashJoinTable hashtable,
-						   int batchno);
+									   int batchno);
 extern void ExecHashTableDestroy(HashJoinTable hashtable);
 extern void ExecHashTableDetach(HashJoinTable hashtable);
 extern void ExecHashTableDetachBatch(HashJoinTable hashtable);
 extern void ExecParallelHashTableSetCurrentBatch(HashJoinTable hashtable,
-									 int batchno);
+												 int batchno);
 
 extern void ExecHashTableInsert(HashJoinTable hashtable,
-					TupleTableSlot *slot,
-					uint32 hashvalue);
+								TupleTableSlot *slot,
+								uint32 hashvalue);
 extern void ExecParallelHashTableInsert(HashJoinTable hashtable,
-							TupleTableSlot *slot,
-							uint32 hashvalue);
-extern void ExecParallelHashTableInsertCurrentBatch(HashJoinTable hashtable,
 										TupleTableSlot *slot,
 										uint32 hashvalue);
+extern void ExecParallelHashTableInsertCurrentBatch(HashJoinTable hashtable,
+													TupleTableSlot *slot,
+													uint32 hashvalue);
 extern bool ExecHashGetHashValue(HashJoinTable hashtable,
-					 ExprContext *econtext,
-					 List *hashkeys,
-					 bool outer_tuple,
-					 bool keep_nulls,
-					 uint32 *hashvalue);
+								 ExprContext *econtext,
+								 List *hashkeys,
+								 bool outer_tuple,
+								 bool keep_nulls,
+								 uint32 *hashvalue);
 extern void ExecHashGetBucketAndBatch(HashJoinTable hashtable,
-						  uint32 hashvalue,
-						  int *bucketno,
-						  int *batchno);
+									  uint32 hashvalue,
+									  int *bucketno,
+									  int *batchno);
 extern bool ExecScanHashBucket(HashJoinState *hjstate, ExprContext *econtext);
 extern bool ExecParallelScanHashBucket(HashJoinState *hjstate, ExprContext *econtext);
 extern void ExecPrepHashTableForUnmatched(HashJoinState *hjstate);
 extern bool ExecScanHashTableForUnmatched(HashJoinState *hjstate,
-							  ExprContext *econtext);
+										  ExprContext *econtext);
 extern void ExecHashTableReset(HashJoinTable hashtable);
 extern void ExecHashTableResetMatchFlags(HashJoinTable hashtable);
 extern void ExecChooseHashTableSize(double ntuples, int tupwidth, bool useskew,
-						bool try_combined_work_mem,
-						int parallel_workers,
-						size_t *space_allowed,
-						int *numbuckets,
-						int *numbatches,
-						int *num_skew_mcvs);
+									bool try_combined_work_mem,
+									int parallel_workers,
+									size_t *space_allowed,
+									int *numbuckets,
+									int *numbatches,
+									int *num_skew_mcvs);
 extern int	ExecHashGetSkewBucket(HashJoinTable hashtable, uint32 hashvalue);
 extern void ExecHashEstimate(HashState *node, ParallelContext *pcxt);
 extern void ExecHashInitializeDSM(HashState *node, ParallelContext *pcxt);
@@ -74,6 +74,6 @@ extern void ExecHashInitializeWorker(HashState *node, ParallelWorkerContext *pwc
 extern void ExecHashRetrieveInstrumentation(HashState *node);
 extern void ExecShutdownHash(HashState *node);
 extern void ExecHashGetInstrumentation(HashInstrumentation *instrument,
-						   HashJoinTable hashtable);
+									   HashJoinTable hashtable);
 
 #endif							/* NODEHASH_H */
diff --git a/src/include/executor/nodeHashjoin.h b/src/include/executor/nodeHashjoin.h
index e9a8e23d7016..1752b3b208de 100644
--- a/src/include/executor/nodeHashjoin.h
+++ b/src/include/executor/nodeHashjoin.h
@@ -26,9 +26,9 @@ extern void ExecHashJoinEstimate(HashJoinState *state, ParallelContext *pcxt);
 extern void ExecHashJoinInitializeDSM(HashJoinState *state, ParallelContext *pcxt);
 extern void ExecHashJoinReInitializeDSM(HashJoinState *state, ParallelContext *pcxt);
 extern void ExecHashJoinInitializeWorker(HashJoinState *state,
-							 ParallelWorkerContext *pwcxt);
+										 ParallelWorkerContext *pwcxt);
 
 extern void ExecHashJoinSaveTuple(MinimalTuple tuple, uint32 hashvalue,
-					  BufFile **fileptr);
+								  BufFile **fileptr);
 
 #endif							/* NODEHASHJOIN_H */
diff --git a/src/include/executor/nodeIndexonlyscan.h b/src/include/executor/nodeIndexonlyscan.h
index 38a9c13120b0..644166b5bcb8 100644
--- a/src/include/executor/nodeIndexonlyscan.h
+++ b/src/include/executor/nodeIndexonlyscan.h
@@ -25,12 +25,12 @@ extern void ExecReScanIndexOnlyScan(IndexOnlyScanState *node);
 
 /* Support functions for parallel index-only scans */
 extern void ExecIndexOnlyScanEstimate(IndexOnlyScanState *node,
-						  ParallelContext *pcxt);
+									  ParallelContext *pcxt);
 extern void ExecIndexOnlyScanInitializeDSM(IndexOnlyScanState *node,
-							   ParallelContext *pcxt);
+										   ParallelContext *pcxt);
 extern void ExecIndexOnlyScanReInitializeDSM(IndexOnlyScanState *node,
-								 ParallelContext *pcxt);
+											 ParallelContext *pcxt);
 extern void ExecIndexOnlyScanInitializeWorker(IndexOnlyScanState *node,
-								  ParallelWorkerContext *pwcxt);
+											  ParallelWorkerContext *pwcxt);
 
 #endif							/* NODEINDEXONLYSCAN_H */
diff --git a/src/include/executor/nodeIndexscan.h b/src/include/executor/nodeIndexscan.h
index 9f660499f32c..e895ec5b7b3d 100644
--- a/src/include/executor/nodeIndexscan.h
+++ b/src/include/executor/nodeIndexscan.h
@@ -27,21 +27,21 @@ extern void ExecIndexScanEstimate(IndexScanState *node, ParallelContext *pcxt);
 extern void ExecIndexScanInitializeDSM(IndexScanState *node, ParallelContext *pcxt);
 extern void ExecIndexScanReInitializeDSM(IndexScanState *node, ParallelContext *pcxt);
 extern void ExecIndexScanInitializeWorker(IndexScanState *node,
-							  ParallelWorkerContext *pwcxt);
+										  ParallelWorkerContext *pwcxt);
 
 /*
  * These routines are exported to share code with nodeIndexonlyscan.c and
  * nodeBitmapIndexscan.c
  */
 extern void ExecIndexBuildScanKeys(PlanState *planstate, Relation index,
-					   List *quals, bool isorderby,
-					   ScanKey *scanKeys, int *numScanKeys,
-					   IndexRuntimeKeyInfo **runtimeKeys, int *numRuntimeKeys,
-					   IndexArrayKeyInfo **arrayKeys, int *numArrayKeys);
+								   List *quals, bool isorderby,
+								   ScanKey *scanKeys, int *numScanKeys,
+								   IndexRuntimeKeyInfo **runtimeKeys, int *numRuntimeKeys,
+								   IndexArrayKeyInfo **arrayKeys, int *numArrayKeys);
 extern void ExecIndexEvalRuntimeKeys(ExprContext *econtext,
-						 IndexRuntimeKeyInfo *runtimeKeys, int numRuntimeKeys);
+									 IndexRuntimeKeyInfo *runtimeKeys, int numRuntimeKeys);
 extern bool ExecIndexEvalArrayKeys(ExprContext *econtext,
-					   IndexArrayKeyInfo *arrayKeys, int numArrayKeys);
+								   IndexArrayKeyInfo *arrayKeys, int numArrayKeys);
 extern bool ExecIndexAdvanceArrayKeys(IndexArrayKeyInfo *arrayKeys, int numArrayKeys);
 
 #endif							/* NODEINDEXSCAN_H */
diff --git a/src/include/executor/nodeSeqscan.h b/src/include/executor/nodeSeqscan.h
index bf2cea6d494f..f0595b2a35b2 100644
--- a/src/include/executor/nodeSeqscan.h
+++ b/src/include/executor/nodeSeqscan.h
@@ -26,6 +26,6 @@ extern void ExecSeqScanEstimate(SeqScanState *node, ParallelContext *pcxt);
 extern void ExecSeqScanInitializeDSM(SeqScanState *node, ParallelContext *pcxt);
 extern void ExecSeqScanReInitializeDSM(SeqScanState *node, ParallelContext *pcxt);
 extern void ExecSeqScanInitializeWorker(SeqScanState *node,
-							ParallelWorkerContext *pwcxt);
+										ParallelWorkerContext *pwcxt);
 
 #endif							/* NODESEQSCAN_H */
diff --git a/src/include/executor/spi.h b/src/include/executor/spi.h
index 83c28b79bfa7..7bf361874d20 100644
--- a/src/include/executor/spi.h
+++ b/src/include/executor/spi.h
@@ -82,30 +82,30 @@ extern int	SPI_connect(void);
 extern int	SPI_connect_ext(int options);
 extern int	SPI_finish(void);
 extern int	SPI_execute(const char *src, bool read_only, long tcount);
-extern int SPI_execute_plan(SPIPlanPtr plan, Datum *Values, const char *Nulls,
-				 bool read_only, long tcount);
-extern int SPI_execute_plan_with_paramlist(SPIPlanPtr plan,
-								ParamListInfo params,
-								bool read_only, long tcount);
+extern int	SPI_execute_plan(SPIPlanPtr plan, Datum *Values, const char *Nulls,
+							 bool read_only, long tcount);
+extern int	SPI_execute_plan_with_paramlist(SPIPlanPtr plan,
+											ParamListInfo params,
+											bool read_only, long tcount);
 extern int	SPI_exec(const char *src, long tcount);
-extern int SPI_execp(SPIPlanPtr plan, Datum *Values, const char *Nulls,
-		  long tcount);
-extern int SPI_execute_snapshot(SPIPlanPtr plan,
-					 Datum *Values, const char *Nulls,
-					 Snapshot snapshot,
-					 Snapshot crosscheck_snapshot,
-					 bool read_only, bool fire_triggers, long tcount);
-extern int SPI_execute_with_args(const char *src,
-					  int nargs, Oid *argtypes,
-					  Datum *Values, const char *Nulls,
-					  bool read_only, long tcount);
+extern int	SPI_execp(SPIPlanPtr plan, Datum *Values, const char *Nulls,
+					  long tcount);
+extern int	SPI_execute_snapshot(SPIPlanPtr plan,
+								 Datum *Values, const char *Nulls,
+								 Snapshot snapshot,
+								 Snapshot crosscheck_snapshot,
+								 bool read_only, bool fire_triggers, long tcount);
+extern int	SPI_execute_with_args(const char *src,
+								  int nargs, Oid *argtypes,
+								  Datum *Values, const char *Nulls,
+								  bool read_only, long tcount);
 extern SPIPlanPtr SPI_prepare(const char *src, int nargs, Oid *argtypes);
 extern SPIPlanPtr SPI_prepare_cursor(const char *src, int nargs, Oid *argtypes,
-				   int cursorOptions);
+									 int cursorOptions);
 extern SPIPlanPtr SPI_prepare_params(const char *src,
-				   ParserSetupHook parserSetup,
-				   void *parserSetupArg,
-				   int cursorOptions);
+									 ParserSetupHook parserSetup,
+									 void *parserSetupArg,
+									 int cursorOptions);
 extern int	SPI_keepplan(SPIPlanPtr plan);
 extern SPIPlanPtr SPI_saveplan(SPIPlanPtr plan);
 extern int	SPI_freeplan(SPIPlanPtr plan);
@@ -122,7 +122,7 @@ extern CachedPlan *SPI_plan_get_cached_plan(SPIPlanPtr plan);
 extern HeapTuple SPI_copytuple(HeapTuple tuple);
 extern HeapTupleHeader SPI_returntuple(HeapTuple tuple, TupleDesc tupdesc);
 extern HeapTuple SPI_modifytuple(Relation rel, HeapTuple tuple, int natts,
-				int *attnum, Datum *Values, const char *Nulls);
+								 int *attnum, Datum *Values, const char *Nulls);
 extern int	SPI_fnumber(TupleDesc tupdesc, const char *fname);
 extern char *SPI_fname(TupleDesc tupdesc, int fnumber);
 extern char *SPI_getvalue(HeapTuple tuple, TupleDesc tupdesc, int fnumber);
@@ -139,14 +139,14 @@ extern void SPI_freetuple(HeapTuple pointer);
 extern void SPI_freetuptable(SPITupleTable *tuptable);
 
 extern Portal SPI_cursor_open(const char *name, SPIPlanPtr plan,
-				Datum *Values, const char *Nulls, bool read_only);
+							  Datum *Values, const char *Nulls, bool read_only);
 extern Portal SPI_cursor_open_with_args(const char *name,
-						  const char *src,
-						  int nargs, Oid *argtypes,
-						  Datum *Values, const char *Nulls,
-						  bool read_only, int cursorOptions);
+										const char *src,
+										int nargs, Oid *argtypes,
+										Datum *Values, const char *Nulls,
+										bool read_only, int cursorOptions);
 extern Portal SPI_cursor_open_with_paramlist(const char *name, SPIPlanPtr plan,
-							   ParamListInfo params, bool read_only);
+											 ParamListInfo params, bool read_only);
 extern Portal SPI_cursor_find(const char *name);
 extern void SPI_cursor_fetch(Portal portal, bool forward, long count);
 extern void SPI_cursor_move(Portal portal, bool forward, long count);
diff --git a/src/include/executor/tqueue.h b/src/include/executor/tqueue.h
index 0ab1bb741671..e6958c609037 100644
--- a/src/include/executor/tqueue.h
+++ b/src/include/executor/tqueue.h
@@ -27,6 +27,6 @@ extern DestReceiver *CreateTupleQueueDestReceiver(shm_mq_handle *handle);
 extern TupleQueueReader *CreateTupleQueueReader(shm_mq_handle *handle);
 extern void DestroyTupleQueueReader(TupleQueueReader *reader);
 extern HeapTuple TupleQueueReaderNext(TupleQueueReader *reader,
-					 bool nowait, bool *done);
+									  bool nowait, bool *done);
 
 #endif							/* TQUEUE_H */
diff --git a/src/include/executor/tstoreReceiver.h b/src/include/executor/tstoreReceiver.h
index 64f7be483104..6522b7c6df15 100644
--- a/src/include/executor/tstoreReceiver.h
+++ b/src/include/executor/tstoreReceiver.h
@@ -22,8 +22,8 @@
 extern DestReceiver *CreateTuplestoreDestReceiver(void);
 
 extern void SetTuplestoreDestReceiverParams(DestReceiver *self,
-								Tuplestorestate *tStore,
-								MemoryContext tContext,
-								bool detoast);
+											Tuplestorestate *tStore,
+											MemoryContext tContext,
+											bool detoast);
 
 #endif							/* TSTORE_RECEIVER_H */
diff --git a/src/include/executor/tuptable.h b/src/include/executor/tuptable.h
index 7c7059f78f7d..6eaa678a1e7c 100644
--- a/src/include/executor/tuptable.h
+++ b/src/include/executor/tuptable.h
@@ -295,40 +295,40 @@ typedef struct MinimalTupleTableSlot
 
 /* in executor/execTuples.c */
 extern TupleTableSlot *MakeTupleTableSlot(TupleDesc tupleDesc,
-				   const TupleTableSlotOps *tts_ops);
+										  const TupleTableSlotOps *tts_ops);
 extern TupleTableSlot *ExecAllocTableSlot(List **tupleTable, TupleDesc desc,
-				   const TupleTableSlotOps *tts_ops);
+										  const TupleTableSlotOps *tts_ops);
 extern void ExecResetTupleTable(List *tupleTable, bool shouldFree);
 extern TupleTableSlot *MakeSingleTupleTableSlot(TupleDesc tupdesc,
-						 const TupleTableSlotOps *tts_ops);
+												const TupleTableSlotOps *tts_ops);
 extern void ExecDropSingleTupleTableSlot(TupleTableSlot *slot);
 extern void ExecSetSlotDescriptor(TupleTableSlot *slot, TupleDesc tupdesc);
 extern TupleTableSlot *ExecStoreHeapTuple(HeapTuple tuple,
-				   TupleTableSlot *slot,
-				   bool shouldFree);
+										  TupleTableSlot *slot,
+										  bool shouldFree);
 extern void ExecForceStoreHeapTuple(HeapTuple tuple,
-						TupleTableSlot *slot,
-						bool shouldFree);
+									TupleTableSlot *slot,
+									bool shouldFree);
 extern TupleTableSlot *ExecStoreBufferHeapTuple(HeapTuple tuple,
-						 TupleTableSlot *slot,
-						 Buffer buffer);
+												TupleTableSlot *slot,
+												Buffer buffer);
 extern TupleTableSlot *ExecStorePinnedBufferHeapTuple(HeapTuple tuple,
-							   TupleTableSlot *slot,
-							   Buffer buffer);
+													  TupleTableSlot *slot,
+													  Buffer buffer);
 extern TupleTableSlot *ExecStoreMinimalTuple(MinimalTuple mtup,
-					  TupleTableSlot *slot,
-					  bool shouldFree);
+											 TupleTableSlot *slot,
+											 bool shouldFree);
 extern void ExecForceStoreMinimalTuple(MinimalTuple mtup, TupleTableSlot *slot,
-						   bool shouldFree);
+									   bool shouldFree);
 extern TupleTableSlot *ExecStoreVirtualTuple(TupleTableSlot *slot);
 extern TupleTableSlot *ExecStoreAllNullTuple(TupleTableSlot *slot);
 extern void ExecStoreHeapTupleDatum(Datum data, TupleTableSlot *slot);
 extern HeapTuple ExecFetchSlotHeapTuple(TupleTableSlot *slot, bool materialize, bool *shouldFree);
 extern MinimalTuple ExecFetchSlotMinimalTuple(TupleTableSlot *slot,
-						  bool *shouldFree);
+											  bool *shouldFree);
 extern Datum ExecFetchSlotHeapTupleDatum(TupleTableSlot *slot);
 extern void slot_getmissingattrs(TupleTableSlot *slot, int startAttNum,
-					 int lastAttNum);
+								 int lastAttNum);
 extern void slot_getsomeattrs_int(TupleTableSlot *slot, int attnum);
 
 
diff --git a/src/include/fe_utils/mbprint.h b/src/include/fe_utils/mbprint.h
index 4d7c9eee5022..97f0a590e8da 100644
--- a/src/include/fe_utils/mbprint.h
+++ b/src/include/fe_utils/mbprint.h
@@ -22,8 +22,8 @@ struct lineptr
 extern unsigned char *mbvalidate(unsigned char *pwcs, int encoding);
 extern int	pg_wcswidth(const char *pwcs, size_t len, int encoding);
 extern void pg_wcsformat(const unsigned char *pwcs, size_t len, int encoding,
-			 struct lineptr *lines, int count);
+						 struct lineptr *lines, int count);
 extern void pg_wcssize(const unsigned char *pwcs, size_t len, int encoding,
-		   int *width, int *height, int *format_size);
+					   int *width, int *height, int *format_size);
 
 #endif							/* MBPRINT_H */
diff --git a/src/include/fe_utils/print.h b/src/include/fe_utils/print.h
index 2a9e72175c58..f138d963d3f8 100644
--- a/src/include/fe_utils/print.h
+++ b/src/include/fe_utils/print.h
@@ -192,21 +192,21 @@ extern void ClosePager(FILE *pagerpipe);
 extern void html_escaped_print(const char *in, FILE *fout);
 
 extern void printTableInit(printTableContent *const content,
-			   const printTableOpt *opt, const char *title,
-			   const int ncolumns, const int nrows);
+						   const printTableOpt *opt, const char *title,
+						   const int ncolumns, const int nrows);
 extern void printTableAddHeader(printTableContent *const content,
-					char *header, const bool translate, const char align);
+								char *header, const bool translate, const char align);
 extern void printTableAddCell(printTableContent *const content,
-				  char *cell, const bool translate, const bool mustfree);
+							  char *cell, const bool translate, const bool mustfree);
 extern void printTableAddFooter(printTableContent *const content,
-					const char *footer);
+								const char *footer);
 extern void printTableSetFooter(printTableContent *const content,
-					const char *footer);
+								const char *footer);
 extern void printTableCleanup(printTableContent *const content);
 extern void printTable(const printTableContent *cont,
-		   FILE *fout, bool is_pager, FILE *flog);
+					   FILE *fout, bool is_pager, FILE *flog);
 extern void printQuery(const PGresult *result, const printQueryOpt *opt,
-		   FILE *fout, bool is_pager, FILE *flog);
+					   FILE *fout, bool is_pager, FILE *flog);
 
 extern char column_type_alignment(Oid);
 
diff --git a/src/include/fe_utils/psqlscan.h b/src/include/fe_utils/psqlscan.h
index c3a1d5811717..dd2ebcb01d9c 100644
--- a/src/include/fe_utils/psqlscan.h
+++ b/src/include/fe_utils/psqlscan.h
@@ -73,13 +73,13 @@ extern void psql_scan_destroy(PsqlScanState state);
 extern void psql_scan_set_passthrough(PsqlScanState state, void *passthrough);
 
 extern void psql_scan_setup(PsqlScanState state,
-				const char *line, int line_len,
-				int encoding, bool std_strings);
+							const char *line, int line_len,
+							int encoding, bool std_strings);
 extern void psql_scan_finish(PsqlScanState state);
 
 extern PsqlScanResult psql_scan(PsqlScanState state,
-		  PQExpBuffer query_buf,
-		  promptStatus_t *prompt);
+								PQExpBuffer query_buf,
+								promptStatus_t *prompt);
 
 extern void psql_scan_reset(PsqlScanState state);
 
diff --git a/src/include/fe_utils/psqlscan_int.h b/src/include/fe_utils/psqlscan_int.h
index 42a738f4221f..2acb380078df 100644
--- a/src/include/fe_utils/psqlscan_int.h
+++ b/src/include/fe_utils/psqlscan_int.h
@@ -128,21 +128,21 @@ typedef struct PsqlScanStateData
  * compatible lexers.
  */
 extern void psqlscan_push_new_buffer(PsqlScanState state,
-						 const char *newstr, const char *varname);
+									 const char *newstr, const char *varname);
 extern void psqlscan_pop_buffer_stack(PsqlScanState state);
 extern void psqlscan_select_top_buffer(PsqlScanState state);
 extern bool psqlscan_var_is_current_source(PsqlScanState state,
-							   const char *varname);
+										   const char *varname);
 extern YY_BUFFER_STATE psqlscan_prepare_buffer(PsqlScanState state,
-						const char *txt, int len,
-						char **txtcopy);
+											   const char *txt, int len,
+											   char **txtcopy);
 extern void psqlscan_emit(PsqlScanState state, const char *txt, int len);
 extern char *psqlscan_extract_substring(PsqlScanState state,
-						   const char *txt, int len);
+										const char *txt, int len);
 extern void psqlscan_escape_variable(PsqlScanState state,
-						 const char *txt, int len,
-						 PsqlScanQuoteType quote);
+									 const char *txt, int len,
+									 PsqlScanQuoteType quote);
 extern void psqlscan_test_variable(PsqlScanState state,
-					   const char *txt, int len);
+								   const char *txt, int len);
 
 #endif							/* PSQLSCAN_INT_H */
diff --git a/src/include/fe_utils/string_utils.h b/src/include/fe_utils/string_utils.h
index 31c8d7d7a324..8c13cc0a66d6 100644
--- a/src/include/fe_utils/string_utils.h
+++ b/src/include/fe_utils/string_utils.h
@@ -28,17 +28,17 @@ extern const char *fmtId(const char *identifier);
 extern const char *fmtQualifiedId(const char *schema, const char *id);
 
 extern char *formatPGVersionNumber(int version_number, bool include_minor,
-					  char *buf, size_t buflen);
+								   char *buf, size_t buflen);
 
 extern void appendStringLiteral(PQExpBuffer buf, const char *str,
-					int encoding, bool std_strings);
+								int encoding, bool std_strings);
 extern void appendStringLiteralConn(PQExpBuffer buf, const char *str,
-						PGconn *conn);
+									PGconn *conn);
 extern void appendStringLiteralDQ(PQExpBuffer buf, const char *str,
-					  const char *dqprefix);
+								  const char *dqprefix);
 extern void appendByteaLiteral(PQExpBuffer buf,
-				   const unsigned char *str, size_t length,
-				   bool std_strings);
+							   const unsigned char *str, size_t length,
+							   bool std_strings);
 
 extern void appendShellString(PQExpBuffer buf, const char *str);
 extern bool appendShellStringNoError(PQExpBuffer buf, const char *str);
@@ -48,12 +48,12 @@ extern void appendPsqlMetaConnect(PQExpBuffer buf, const char *dbname);
 extern bool parsePGArray(const char *atext, char ***itemarray, int *nitems);
 
 extern bool appendReloptionsArray(PQExpBuffer buffer, const char *reloptions,
-					  const char *prefix, int encoding, bool std_strings);
+								  const char *prefix, int encoding, bool std_strings);
 
 extern bool processSQLNamePattern(PGconn *conn, PQExpBuffer buf,
-					  const char *pattern,
-					  bool have_where, bool force_escape,
-					  const char *schemavar, const char *namevar,
-					  const char *altnamevar, const char *visibilityrule);
+								  const char *pattern,
+								  bool have_where, bool force_escape,
+								  const char *schemavar, const char *namevar,
+								  const char *altnamevar, const char *visibilityrule);
 
 #endif							/* STRING_UTILS_H */
diff --git a/src/include/fmgr.h b/src/include/fmgr.h
index ce6528452533..1ac71a40f55a 100644
--- a/src/include/fmgr.h
+++ b/src/include/fmgr.h
@@ -129,7 +129,7 @@ extern void fmgr_info(Oid functionId, FmgrInfo *finfo);
  * and used to hold all subsidiary data of finfo.
  */
 extern void fmgr_info_cxt(Oid functionId, FmgrInfo *finfo,
-			  MemoryContext mcxt);
+						  MemoryContext mcxt);
 
 /* Convenience macro for setting the fn_expr field */
 #define fmgr_info_set_expr(expr, finfo) \
@@ -139,7 +139,7 @@ extern void fmgr_info_cxt(Oid functionId, FmgrInfo *finfo,
  * Copy an FmgrInfo struct
  */
 extern void fmgr_info_copy(FmgrInfo *dstinfo, FmgrInfo *srcinfo,
-			   MemoryContext destcxt);
+						   MemoryContext destcxt);
 
 extern void fmgr_symbol(Oid functionId, char **mod, char **fn);
 
@@ -229,7 +229,7 @@ extern void fmgr_symbol(Oid functionId, char **mod, char **fn);
 extern struct varlena *pg_detoast_datum(struct varlena *datum);
 extern struct varlena *pg_detoast_datum_copy(struct varlena *datum);
 extern struct varlena *pg_detoast_datum_slice(struct varlena *datum,
-					   int32 first, int32 count);
+											  int32 first, int32 count);
 extern struct varlena *pg_detoast_datum_packed(struct varlena *datum);
 
 #define PG_DETOAST_DATUM(datum) \
@@ -492,35 +492,35 @@ extern int no_such_variable
  * are allowed to be NULL.
  */
 extern Datum DirectFunctionCall1Coll(PGFunction func, Oid collation,
-						Datum arg1);
+									 Datum arg1);
 extern Datum DirectFunctionCall2Coll(PGFunction func, Oid collation,
-						Datum arg1, Datum arg2);
+									 Datum arg1, Datum arg2);
 extern Datum DirectFunctionCall3Coll(PGFunction func, Oid collation,
-						Datum arg1, Datum arg2,
-						Datum arg3);
+									 Datum arg1, Datum arg2,
+									 Datum arg3);
 extern Datum DirectFunctionCall4Coll(PGFunction func, Oid collation,
-						Datum arg1, Datum arg2,
-						Datum arg3, Datum arg4);
+									 Datum arg1, Datum arg2,
+									 Datum arg3, Datum arg4);
 extern Datum DirectFunctionCall5Coll(PGFunction func, Oid collation,
-						Datum arg1, Datum arg2,
-						Datum arg3, Datum arg4, Datum arg5);
+									 Datum arg1, Datum arg2,
+									 Datum arg3, Datum arg4, Datum arg5);
 extern Datum DirectFunctionCall6Coll(PGFunction func, Oid collation,
-						Datum arg1, Datum arg2,
-						Datum arg3, Datum arg4, Datum arg5,
-						Datum arg6);
+									 Datum arg1, Datum arg2,
+									 Datum arg3, Datum arg4, Datum arg5,
+									 Datum arg6);
 extern Datum DirectFunctionCall7Coll(PGFunction func, Oid collation,
-						Datum arg1, Datum arg2,
-						Datum arg3, Datum arg4, Datum arg5,
-						Datum arg6, Datum arg7);
+									 Datum arg1, Datum arg2,
+									 Datum arg3, Datum arg4, Datum arg5,
+									 Datum arg6, Datum arg7);
 extern Datum DirectFunctionCall8Coll(PGFunction func, Oid collation,
-						Datum arg1, Datum arg2,
-						Datum arg3, Datum arg4, Datum arg5,
-						Datum arg6, Datum arg7, Datum arg8);
+									 Datum arg1, Datum arg2,
+									 Datum arg3, Datum arg4, Datum arg5,
+									 Datum arg6, Datum arg7, Datum arg8);
 extern Datum DirectFunctionCall9Coll(PGFunction func, Oid collation,
-						Datum arg1, Datum arg2,
-						Datum arg3, Datum arg4, Datum arg5,
-						Datum arg6, Datum arg7, Datum arg8,
-						Datum arg9);
+									 Datum arg1, Datum arg2,
+									 Datum arg3, Datum arg4, Datum arg5,
+									 Datum arg6, Datum arg7, Datum arg8,
+									 Datum arg9);
 
 /*
  * These functions work like the DirectFunctionCall functions except that
@@ -531,9 +531,9 @@ extern Datum DirectFunctionCall9Coll(PGFunction func, Oid collation,
  * used fn_extra, unless its use is known to be compatible with the callee's.
  */
 extern Datum CallerFInfoFunctionCall1(PGFunction func, FmgrInfo *flinfo,
-						 Oid collation, Datum arg1);
+									  Oid collation, Datum arg1);
 extern Datum CallerFInfoFunctionCall2(PGFunction func, FmgrInfo *flinfo,
-						 Oid collation, Datum arg1, Datum arg2);
+									  Oid collation, Datum arg1, Datum arg2);
 
 /* These are for invocation of a previously-looked-up function with a
  * directly-computed parameter list.  Note that neither arguments nor result
@@ -541,35 +541,35 @@ extern Datum CallerFInfoFunctionCall2(PGFunction func, FmgrInfo *flinfo,
  */
 extern Datum FunctionCall0Coll(FmgrInfo *flinfo, Oid collation);
 extern Datum FunctionCall1Coll(FmgrInfo *flinfo, Oid collation,
-				  Datum arg1);
+							   Datum arg1);
 extern Datum FunctionCall2Coll(FmgrInfo *flinfo, Oid collation,
-				  Datum arg1, Datum arg2);
+							   Datum arg1, Datum arg2);
 extern Datum FunctionCall3Coll(FmgrInfo *flinfo, Oid collation,
-				  Datum arg1, Datum arg2,
-				  Datum arg3);
+							   Datum arg1, Datum arg2,
+							   Datum arg3);
 extern Datum FunctionCall4Coll(FmgrInfo *flinfo, Oid collation,
-				  Datum arg1, Datum arg2,
-				  Datum arg3, Datum arg4);
+							   Datum arg1, Datum arg2,
+							   Datum arg3, Datum arg4);
 extern Datum FunctionCall5Coll(FmgrInfo *flinfo, Oid collation,
-				  Datum arg1, Datum arg2,
-				  Datum arg3, Datum arg4, Datum arg5);
+							   Datum arg1, Datum arg2,
+							   Datum arg3, Datum arg4, Datum arg5);
 extern Datum FunctionCall6Coll(FmgrInfo *flinfo, Oid collation,
-				  Datum arg1, Datum arg2,
-				  Datum arg3, Datum arg4, Datum arg5,
-				  Datum arg6);
+							   Datum arg1, Datum arg2,
+							   Datum arg3, Datum arg4, Datum arg5,
+							   Datum arg6);
 extern Datum FunctionCall7Coll(FmgrInfo *flinfo, Oid collation,
-				  Datum arg1, Datum arg2,
-				  Datum arg3, Datum arg4, Datum arg5,
-				  Datum arg6, Datum arg7);
+							   Datum arg1, Datum arg2,
+							   Datum arg3, Datum arg4, Datum arg5,
+							   Datum arg6, Datum arg7);
 extern Datum FunctionCall8Coll(FmgrInfo *flinfo, Oid collation,
-				  Datum arg1, Datum arg2,
-				  Datum arg3, Datum arg4, Datum arg5,
-				  Datum arg6, Datum arg7, Datum arg8);
+							   Datum arg1, Datum arg2,
+							   Datum arg3, Datum arg4, Datum arg5,
+							   Datum arg6, Datum arg7, Datum arg8);
 extern Datum FunctionCall9Coll(FmgrInfo *flinfo, Oid collation,
-				  Datum arg1, Datum arg2,
-				  Datum arg3, Datum arg4, Datum arg5,
-				  Datum arg6, Datum arg7, Datum arg8,
-				  Datum arg9);
+							   Datum arg1, Datum arg2,
+							   Datum arg3, Datum arg4, Datum arg5,
+							   Datum arg6, Datum arg7, Datum arg8,
+							   Datum arg9);
 
 /* These are for invocation of a function identified by OID with a
  * directly-computed parameter list.  Note that neither arguments nor result
@@ -579,35 +579,35 @@ extern Datum FunctionCall9Coll(FmgrInfo *flinfo, Oid collation,
  */
 extern Datum OidFunctionCall0Coll(Oid functionId, Oid collation);
 extern Datum OidFunctionCall1Coll(Oid functionId, Oid collation,
-					 Datum arg1);
+								  Datum arg1);
 extern Datum OidFunctionCall2Coll(Oid functionId, Oid collation,
-					 Datum arg1, Datum arg2);
+								  Datum arg1, Datum arg2);
 extern Datum OidFunctionCall3Coll(Oid functionId, Oid collation,
-					 Datum arg1, Datum arg2,
-					 Datum arg3);
+								  Datum arg1, Datum arg2,
+								  Datum arg3);
 extern Datum OidFunctionCall4Coll(Oid functionId, Oid collation,
-					 Datum arg1, Datum arg2,
-					 Datum arg3, Datum arg4);
+								  Datum arg1, Datum arg2,
+								  Datum arg3, Datum arg4);
 extern Datum OidFunctionCall5Coll(Oid functionId, Oid collation,
-					 Datum arg1, Datum arg2,
-					 Datum arg3, Datum arg4, Datum arg5);
+								  Datum arg1, Datum arg2,
+								  Datum arg3, Datum arg4, Datum arg5);
 extern Datum OidFunctionCall6Coll(Oid functionId, Oid collation,
-					 Datum arg1, Datum arg2,
-					 Datum arg3, Datum arg4, Datum arg5,
-					 Datum arg6);
+								  Datum arg1, Datum arg2,
+								  Datum arg3, Datum arg4, Datum arg5,
+								  Datum arg6);
 extern Datum OidFunctionCall7Coll(Oid functionId, Oid collation,
-					 Datum arg1, Datum arg2,
-					 Datum arg3, Datum arg4, Datum arg5,
-					 Datum arg6, Datum arg7);
+								  Datum arg1, Datum arg2,
+								  Datum arg3, Datum arg4, Datum arg5,
+								  Datum arg6, Datum arg7);
 extern Datum OidFunctionCall8Coll(Oid functionId, Oid collation,
-					 Datum arg1, Datum arg2,
-					 Datum arg3, Datum arg4, Datum arg5,
-					 Datum arg6, Datum arg7, Datum arg8);
+								  Datum arg1, Datum arg2,
+								  Datum arg3, Datum arg4, Datum arg5,
+								  Datum arg6, Datum arg7, Datum arg8);
 extern Datum OidFunctionCall9Coll(Oid functionId, Oid collation,
-					 Datum arg1, Datum arg2,
-					 Datum arg3, Datum arg4, Datum arg5,
-					 Datum arg6, Datum arg7, Datum arg8,
-					 Datum arg9);
+								  Datum arg1, Datum arg2,
+								  Datum arg3, Datum arg4, Datum arg5,
+								  Datum arg6, Datum arg7, Datum arg8,
+								  Datum arg9);
 
 /* These macros allow the collation argument to be omitted (with a default of
  * InvalidOid, ie, no collation).  They exist mostly for backwards
@@ -673,15 +673,15 @@ extern Datum OidFunctionCall9Coll(Oid functionId, Oid collation,
 
 /* Special cases for convenient invocation of datatype I/O functions. */
 extern Datum InputFunctionCall(FmgrInfo *flinfo, char *str,
-				  Oid typioparam, int32 typmod);
+							   Oid typioparam, int32 typmod);
 extern Datum OidInputFunctionCall(Oid functionId, char *str,
-					 Oid typioparam, int32 typmod);
+								  Oid typioparam, int32 typmod);
 extern char *OutputFunctionCall(FmgrInfo *flinfo, Datum val);
 extern char *OidOutputFunctionCall(Oid functionId, Datum val);
 extern Datum ReceiveFunctionCall(FmgrInfo *flinfo, fmStringInfo buf,
-					Oid typioparam, int32 typmod);
+								 Oid typioparam, int32 typmod);
 extern Datum OidReceiveFunctionCall(Oid functionId, fmStringInfo buf,
-					   Oid typioparam, int32 typmod);
+									Oid typioparam, int32 typmod);
 extern bytea *SendFunctionCall(FmgrInfo *flinfo, Datum val);
 extern bytea *OidSendFunctionCall(Oid functionId, Datum val);
 
@@ -706,7 +706,7 @@ extern bool CheckFunctionValidatorAccess(Oid validatorOid, Oid functionOid);
 extern char *Dynamic_library_path;
 
 extern PGFunction load_external_function(const char *filename, const char *funcname,
-					   bool signalNotFound, void **filehandle);
+										 bool signalNotFound, void **filehandle);
 extern PGFunction lookup_external_function(void *filehandle, const char *funcname);
 extern void load_file(const char *filename, bool restricted);
 extern void **find_rendezvous_variable(const char *varName);
@@ -725,14 +725,14 @@ extern void RestoreLibraryState(char *start_address);
 #define AGG_CONTEXT_AGGREGATE	1	/* regular aggregate */
 #define AGG_CONTEXT_WINDOW		2	/* window function */
 
-extern int AggCheckCallContext(FunctionCallInfo fcinfo,
-					MemoryContext *aggcontext);
+extern int	AggCheckCallContext(FunctionCallInfo fcinfo,
+								MemoryContext *aggcontext);
 extern fmAggrefPtr AggGetAggref(FunctionCallInfo fcinfo);
 extern MemoryContext AggGetTempMemoryContext(FunctionCallInfo fcinfo);
 extern bool AggStateIsShared(FunctionCallInfo fcinfo);
 extern void AggRegisterCallback(FunctionCallInfo fcinfo,
-					fmExprContextCallbackFunction func,
-					Datum arg);
+								fmExprContextCallbackFunction func,
+								Datum arg);
 
 /*
  * We allow plugin modules to hook function entry/exit.  This is intended
diff --git a/src/include/foreign/fdwapi.h b/src/include/foreign/fdwapi.h
index fd91eb633e39..822686033e40 100644
--- a/src/include/foreign/fdwapi.h
+++ b/src/include/foreign/fdwapi.h
@@ -256,7 +256,7 @@ extern FdwRoutine *GetFdwRoutineByServerId(Oid serverid);
 extern FdwRoutine *GetFdwRoutineByRelId(Oid relid);
 extern FdwRoutine *GetFdwRoutineForRelation(Relation relation, bool makecopy);
 extern bool IsImportableForeignTable(const char *tablename,
-						 ImportForeignSchemaStmt *stmt);
+									 ImportForeignSchemaStmt *stmt);
 extern Path *GetExistingLocalJoinPath(RelOptInfo *joinrel);
 
 #endif							/* FDWAPI_H */
diff --git a/src/include/foreign/foreign.h b/src/include/foreign/foreign.h
index 64919c931e9c..46759e3596df 100644
--- a/src/include/foreign/foreign.h
+++ b/src/include/foreign/foreign.h
@@ -77,14 +77,14 @@ typedef struct ForeignTable
 
 extern ForeignServer *GetForeignServer(Oid serverid);
 extern ForeignServer *GetForeignServerExtended(Oid serverid,
-						 bits16 flags);
+											   bits16 flags);
 extern ForeignServer *GetForeignServerByName(const char *name, bool missing_ok);
 extern UserMapping *GetUserMapping(Oid userid, Oid serverid);
 extern ForeignDataWrapper *GetForeignDataWrapper(Oid fdwid);
 extern ForeignDataWrapper *GetForeignDataWrapperExtended(Oid fdwid,
-							  bits16 flags);
+														 bits16 flags);
 extern ForeignDataWrapper *GetForeignDataWrapperByName(const char *name,
-							bool missing_ok);
+													   bool missing_ok);
 extern ForeignTable *GetForeignTable(Oid relid);
 
 extern List *GetForeignColumnOptions(Oid relid, AttrNumber attnum);
diff --git a/src/include/funcapi.h b/src/include/funcapi.h
index 3fc981b96d45..ebba8b6f5454 100644
--- a/src/include/funcapi.h
+++ b/src/include/funcapi.h
@@ -154,35 +154,35 @@ typedef enum TypeFuncClass
 } TypeFuncClass;
 
 extern TypeFuncClass get_call_result_type(FunctionCallInfo fcinfo,
-					 Oid *resultTypeId,
-					 TupleDesc *resultTupleDesc);
+										  Oid *resultTypeId,
+										  TupleDesc *resultTupleDesc);
 extern TypeFuncClass get_expr_result_type(Node *expr,
-					 Oid *resultTypeId,
-					 TupleDesc *resultTupleDesc);
+										  Oid *resultTypeId,
+										  TupleDesc *resultTupleDesc);
 extern TypeFuncClass get_func_result_type(Oid functionId,
-					 Oid *resultTypeId,
-					 TupleDesc *resultTupleDesc);
+										  Oid *resultTypeId,
+										  TupleDesc *resultTupleDesc);
 
 extern TupleDesc get_expr_result_tupdesc(Node *expr, bool noError);
 
 extern bool resolve_polymorphic_argtypes(int numargs, Oid *argtypes,
-							 char *argmodes,
-							 Node *call_expr);
+										 char *argmodes,
+										 Node *call_expr);
 
-extern int get_func_arg_info(HeapTuple procTup,
-				  Oid **p_argtypes, char ***p_argnames,
-				  char **p_argmodes);
+extern int	get_func_arg_info(HeapTuple procTup,
+							  Oid **p_argtypes, char ***p_argnames,
+							  char **p_argmodes);
 
-extern int get_func_input_arg_names(Datum proargnames, Datum proargmodes,
-						 char ***arg_names);
+extern int	get_func_input_arg_names(Datum proargnames, Datum proargmodes,
+									 char ***arg_names);
 
 extern int	get_func_trftypes(HeapTuple procTup, Oid **p_trftypes);
 extern char *get_func_result_name(Oid functionId);
 
 extern TupleDesc build_function_result_tupdesc_d(char prokind,
-								Datum proallargtypes,
-								Datum proargmodes,
-								Datum proargnames);
+												 Datum proallargtypes,
+												 Datum proargmodes,
+												 Datum proargnames);
 extern TupleDesc build_function_result_tupdesc_t(HeapTuple procTuple);
 
 
@@ -331,8 +331,8 @@ extern void end_MultiFuncCall(PG_FUNCTION_ARGS, FuncCallContext *funcctx);
  * The return result is the number of elements stored, or -1 in the case of
  * "VARIADIC NULL".
  */
-extern int extract_variadic_args(FunctionCallInfo fcinfo, int variadic_start,
-					  bool convert_unknown, Datum **values,
-					  Oid **types, bool **nulls);
+extern int	extract_variadic_args(FunctionCallInfo fcinfo, int variadic_start,
+								  bool convert_unknown, Datum **values,
+								  Oid **types, bool **nulls);
 
 #endif							/* FUNCAPI_H */
diff --git a/src/include/getaddrinfo.h b/src/include/getaddrinfo.h
index 209318b5d677..34c728d98a62 100644
--- a/src/include/getaddrinfo.h
+++ b/src/include/getaddrinfo.h
@@ -150,13 +150,13 @@ struct addrinfo
 #endif
 #define getnameinfo pg_getnameinfo
 
-extern int getaddrinfo(const char *node, const char *service,
-			const struct addrinfo *hints, struct addrinfo **res);
+extern int	getaddrinfo(const char *node, const char *service,
+						const struct addrinfo *hints, struct addrinfo **res);
 extern void freeaddrinfo(struct addrinfo *res);
 extern const char *gai_strerror(int errcode);
-extern int getnameinfo(const struct sockaddr *sa, int salen,
-			char *node, int nodelen,
-			char *service, int servicelen, int flags);
+extern int	getnameinfo(const struct sockaddr *sa, int salen,
+						char *node, int nodelen,
+						char *service, int servicelen, int flags);
 #endif							/* HAVE_GETADDRINFO */
 
 #endif							/* GETADDRINFO_H */
diff --git a/src/include/getopt_long.h b/src/include/getopt_long.h
index 4afa8e001fab..02dc54783a5d 100644
--- a/src/include/getopt_long.h
+++ b/src/include/getopt_long.h
@@ -28,9 +28,9 @@ struct option
 
 #ifndef HAVE_GETOPT_LONG
 
-extern int getopt_long(int argc, char *const argv[],
-			const char *optstring,
-			const struct option *longopts, int *longindex);
+extern int	getopt_long(int argc, char *const argv[],
+						const char *optstring,
+						const struct option *longopts, int *longindex);
 #endif
 
 #endif							/* GETOPT_LONG_H */
diff --git a/src/include/lib/binaryheap.h b/src/include/lib/binaryheap.h
index 92dab66a01ca..21f96b9ca6af 100644
--- a/src/include/lib/binaryheap.h
+++ b/src/include/lib/binaryheap.h
@@ -38,8 +38,8 @@ typedef struct binaryheap
 } binaryheap;
 
 extern binaryheap *binaryheap_allocate(int capacity,
-					binaryheap_comparator compare,
-					void *arg);
+									   binaryheap_comparator compare,
+									   void *arg);
 extern void binaryheap_reset(binaryheap *heap);
 extern void binaryheap_free(binaryheap *heap);
 extern void binaryheap_add_unordered(binaryheap *heap, Datum d);
diff --git a/src/include/lib/bloomfilter.h b/src/include/lib/bloomfilter.h
index 181f298217d0..3b952fbed91a 100644
--- a/src/include/lib/bloomfilter.h
+++ b/src/include/lib/bloomfilter.h
@@ -16,12 +16,12 @@
 typedef struct bloom_filter bloom_filter;
 
 extern bloom_filter *bloom_create(int64 total_elems, int bloom_work_mem,
-			 uint64 seed);
+								  uint64 seed);
 extern void bloom_free(bloom_filter *filter);
 extern void bloom_add_element(bloom_filter *filter, unsigned char *elem,
-				  size_t len);
+							  size_t len);
 extern bool bloom_lacks_element(bloom_filter *filter, unsigned char *elem,
-					size_t len);
+								size_t len);
 extern double bloom_prop_bits_set(bloom_filter *filter);
 
 #endif							/* BLOOMFILTER_H */
diff --git a/src/include/lib/dshash.h b/src/include/lib/dshash.h
index e5dfd57f0a03..fa2e28ff3e30 100644
--- a/src/include/lib/dshash.h
+++ b/src/include/lib/dshash.h
@@ -61,21 +61,21 @@ typedef struct dshash_table_item dshash_table_item;
 
 /* Creating, sharing and destroying from hash tables. */
 extern dshash_table *dshash_create(dsa_area *area,
-			  const dshash_parameters *params,
-			  void *arg);
+								   const dshash_parameters *params,
+								   void *arg);
 extern dshash_table *dshash_attach(dsa_area *area,
-			  const dshash_parameters *params,
-			  dshash_table_handle handle,
-			  void *arg);
+								   const dshash_parameters *params,
+								   dshash_table_handle handle,
+								   void *arg);
 extern void dshash_detach(dshash_table *hash_table);
 extern dshash_table_handle dshash_get_hash_table_handle(dshash_table *hash_table);
 extern void dshash_destroy(dshash_table *hash_table);
 
 /* Finding, creating, deleting entries. */
 extern void *dshash_find(dshash_table *hash_table,
-			const void *key, bool exclusive);
+						 const void *key, bool exclusive);
 extern void *dshash_find_or_insert(dshash_table *hash_table,
-					  const void *key, bool *found);
+								   const void *key, bool *found);
 extern bool dshash_delete_key(dshash_table *hash_table, const void *key);
 extern void dshash_delete_entry(dshash_table *hash_table, void *entry);
 extern void dshash_release_lock(dshash_table *hash_table, void *entry);
diff --git a/src/include/lib/knapsack.h b/src/include/lib/knapsack.h
index 2e148ad29300..14fb75ca8b3b 100644
--- a/src/include/lib/knapsack.h
+++ b/src/include/lib/knapsack.h
@@ -11,6 +11,6 @@
 #include "nodes/bitmapset.h"
 
 extern Bitmapset *DiscreteKnapsack(int max_weight, int num_items,
-				 int *item_weights, double *item_values);
+								   int *item_weights, double *item_values);
 
 #endif							/* KNAPSACK_H */
diff --git a/src/include/lib/pairingheap.h b/src/include/lib/pairingheap.h
index 8310c649ad74..4fbed1d9c594 100644
--- a/src/include/lib/pairingheap.h
+++ b/src/include/lib/pairingheap.h
@@ -76,7 +76,7 @@ typedef struct pairingheap
 } pairingheap;
 
 extern pairingheap *pairingheap_allocate(pairingheap_comparator compare,
-					 void *arg);
+										 void *arg);
 extern void pairingheap_free(pairingheap *heap);
 extern void pairingheap_add(pairingheap *heap, pairingheap_node *node);
 extern pairingheap_node *pairingheap_first(pairingheap *heap);
@@ -85,8 +85,8 @@ extern void pairingheap_remove(pairingheap *heap, pairingheap_node *node);
 
 #ifdef PAIRINGHEAP_DEBUG
 extern char *pairingheap_dump(pairingheap *heap,
-				 void (*dumpfunc) (pairingheap_node *node, StringInfo buf, void *opaque),
-				 void *opaque);
+							  void (*dumpfunc) (pairingheap_node *node, StringInfo buf, void *opaque),
+							  void *opaque);
 #endif
 
 /* Resets the heap to be empty. */
diff --git a/src/include/lib/rbtree.h b/src/include/lib/rbtree.h
index 3908208483af..6d79a2401531 100644
--- a/src/include/lib/rbtree.h
+++ b/src/include/lib/rbtree.h
@@ -60,11 +60,11 @@ typedef RBTNode *(*rbt_allocfunc) (void *arg);
 typedef void (*rbt_freefunc) (RBTNode *x, void *arg);
 
 extern RBTree *rbt_create(Size node_size,
-		   rbt_comparator comparator,
-		   rbt_combiner combiner,
-		   rbt_allocfunc allocfunc,
-		   rbt_freefunc freefunc,
-		   void *arg);
+						  rbt_comparator comparator,
+						  rbt_combiner combiner,
+						  rbt_allocfunc allocfunc,
+						  rbt_freefunc freefunc,
+						  void *arg);
 
 extern RBTNode *rbt_find(RBTree *rbt, const RBTNode *data);
 extern RBTNode *rbt_leftmost(RBTree *rbt);
@@ -73,7 +73,7 @@ extern RBTNode *rbt_insert(RBTree *rbt, const RBTNode *data, bool *isNew);
 extern void rbt_delete(RBTree *rbt, RBTNode *node);
 
 extern void rbt_begin_iterate(RBTree *rbt, RBTOrderControl ctrl,
-				  RBTreeIterator *iter);
+							  RBTreeIterator *iter);
 extern RBTNode *rbt_iterate(RBTreeIterator *iter);
 
 #endif							/* RBTREE_H */
diff --git a/src/include/lib/simplehash.h b/src/include/lib/simplehash.h
index d36f15d4a149..5c6bd93bc7ea 100644
--- a/src/include/lib/simplehash.h
+++ b/src/include/lib/simplehash.h
@@ -139,7 +139,7 @@ typedef struct SH_ITERATOR
 
 /* externally visible function prototypes */
 SH_SCOPE	SH_TYPE *SH_CREATE(MemoryContext ctx, uint32 nelements,
-		  void *private_data);
+							   void *private_data);
 SH_SCOPE void SH_DESTROY(SH_TYPE * tb);
 SH_SCOPE void SH_RESET(SH_TYPE * tb);
 SH_SCOPE void SH_GROW(SH_TYPE * tb, uint32 newsize);
diff --git a/src/include/lib/stringinfo.h b/src/include/lib/stringinfo.h
index 729b8bcfdd9c..c4842778c51a 100644
--- a/src/include/lib/stringinfo.h
+++ b/src/include/lib/stringinfo.h
@@ -141,7 +141,7 @@ extern void appendStringInfoSpaces(StringInfo str, int count);
  * if necessary.
  */
 extern void appendBinaryStringInfo(StringInfo str,
-					   const char *data, int datalen);
+								   const char *data, int datalen);
 
 /*------------------------
  * appendBinaryStringInfoNT
@@ -149,7 +149,7 @@ extern void appendBinaryStringInfo(StringInfo str,
  * if necessary. Does not ensure a trailing null-byte exists.
  */
 extern void appendBinaryStringInfoNT(StringInfo str,
-						 const char *data, int datalen);
+									 const char *data, int datalen);
 
 /*------------------------
  * enlargeStringInfo
diff --git a/src/include/libpq/be-fsstubs.h b/src/include/libpq/be-fsstubs.h
index 59dcae5e494c..a753ed1a33e5 100644
--- a/src/include/libpq/be-fsstubs.h
+++ b/src/include/libpq/be-fsstubs.h
@@ -27,6 +27,6 @@ extern int	lo_write(int fd, const char *buf, int len);
  */
 extern void AtEOXact_LargeObject(bool isCommit);
 extern void AtEOSubXact_LargeObject(bool isCommit, SubTransactionId mySubid,
-						SubTransactionId parentSubid);
+									SubTransactionId parentSubid);
 
 #endif							/* BE_FSSTUBS_H */
diff --git a/src/include/libpq/crypt.h b/src/include/libpq/crypt.h
index 5f5d5fa3601e..e6b50a72888b 100644
--- a/src/include/libpq/crypt.h
+++ b/src/include/libpq/crypt.h
@@ -33,14 +33,14 @@ typedef enum PasswordType
 
 extern PasswordType get_password_type(const char *shadow_pass);
 extern char *encrypt_password(PasswordType target_type, const char *role,
-				 const char *password);
+							  const char *password);
 
 extern char *get_role_password(const char *role, char **logdetail);
 
-extern int md5_crypt_verify(const char *role, const char *shadow_pass,
-				 const char *client_pass, const char *md5_salt,
-				 int md5_salt_len, char **logdetail);
-extern int plain_crypt_verify(const char *role, const char *shadow_pass,
-				   const char *client_pass, char **logdetail);
+extern int	md5_crypt_verify(const char *role, const char *shadow_pass,
+							 const char *client_pass, const char *md5_salt,
+							 int md5_salt_len, char **logdetail);
+extern int	plain_crypt_verify(const char *role, const char *shadow_pass,
+							   const char *client_pass, char **logdetail);
 
 #endif
diff --git a/src/include/libpq/hba.h b/src/include/libpq/hba.h
index 186e43357481..d638479d8849 100644
--- a/src/include/libpq/hba.h
+++ b/src/include/libpq/hba.h
@@ -126,9 +126,9 @@ typedef struct Port hbaPort;
 extern bool load_hba(void);
 extern bool load_ident(void);
 extern void hba_getauthmethod(hbaPort *port);
-extern int check_usermap(const char *usermap_name,
-			  const char *pg_role, const char *auth_user,
-			  bool case_sensitive);
+extern int	check_usermap(const char *usermap_name,
+						  const char *pg_role, const char *auth_user,
+						  bool case_sensitive);
 extern bool pg_isblank(const char c);
 
 #endif							/* HBA_H */
diff --git a/src/include/libpq/ifaddr.h b/src/include/libpq/ifaddr.h
index d6151efa9dd8..e68ff04a65e9 100644
--- a/src/include/libpq/ifaddr.h
+++ b/src/include/libpq/ifaddr.h
@@ -18,12 +18,12 @@ typedef void (*PgIfAddrCallback) (struct sockaddr *addr,
 								  struct sockaddr *netmask,
 								  void *cb_data);
 
-extern int pg_range_sockaddr(const struct sockaddr_storage *addr,
-				  const struct sockaddr_storage *netaddr,
-				  const struct sockaddr_storage *netmask);
+extern int	pg_range_sockaddr(const struct sockaddr_storage *addr,
+							  const struct sockaddr_storage *netaddr,
+							  const struct sockaddr_storage *netmask);
 
-extern int pg_sockaddr_cidr_mask(struct sockaddr_storage *mask,
-					  char *numbits, int family);
+extern int	pg_sockaddr_cidr_mask(struct sockaddr_storage *mask,
+								  char *numbits, int family);
 
 extern int	pg_foreach_ifaddr(PgIfAddrCallback callback, void *cb_data);
 
diff --git a/src/include/libpq/libpq.h b/src/include/libpq/libpq.h
index 41f9257aa9d9..79f0860823fc 100644
--- a/src/include/libpq/libpq.h
+++ b/src/include/libpq/libpq.h
@@ -53,9 +53,9 @@ extern const PGDLLIMPORT PQcommMethods *PqCommMethods;
 /*
  * prototypes for functions in pqcomm.c
  */
-extern int StreamServerPort(int family, char *hostName,
-				 unsigned short portNumber, char *unixSocketDir,
-				 pgsocket ListenSocket[], int MaxListen);
+extern int	StreamServerPort(int family, char *hostName,
+							 unsigned short portNumber, char *unixSocketDir,
+							 pgsocket ListenSocket[], int MaxListen);
 extern int	StreamConnection(pgsocket server_fd, Port *port);
 extern void StreamClose(pgsocket sock);
 extern void TouchSocketFiles(void);
@@ -120,9 +120,9 @@ enum ssl_protocol_versions
 /*
  * prototypes for functions in be-secure-common.c
  */
-extern int run_ssl_passphrase_command(const char *prompt, bool is_server_start,
-						   char *buf, int size);
+extern int	run_ssl_passphrase_command(const char *prompt, bool is_server_start,
+									   char *buf, int size);
 extern bool check_ssl_key_file_permissions(const char *ssl_key_file,
-							   bool isServerStart);
+										   bool isServerStart);
 
 #endif							/* LIBPQ_H */
diff --git a/src/include/libpq/pqformat.h b/src/include/libpq/pqformat.h
index dabadf6dbbab..04dcb3ee1ee0 100644
--- a/src/include/libpq/pqformat.h
+++ b/src/include/libpq/pqformat.h
@@ -24,7 +24,7 @@ extern void pq_endmessage_reuse(StringInfo buf);
 
 extern void pq_sendbytes(StringInfo buf, const char *data, int datalen);
 extern void pq_sendcountedtext(StringInfo buf, const char *str, int slen,
-				   bool countincludesself);
+							   bool countincludesself);
 extern void pq_sendtext(StringInfo buf, const char *str, int slen);
 extern void pq_sendstring(StringInfo buf, const char *str);
 extern void pq_send_ascii_string(StringInfo buf, const char *str);
diff --git a/src/include/libpq/scram.h b/src/include/libpq/scram.h
index bc297e2a3369..87e2d56301ce 100644
--- a/src/include/libpq/scram.h
+++ b/src/include/libpq/scram.h
@@ -24,14 +24,14 @@
 /* Routines dedicated to authentication */
 extern void pg_be_scram_get_mechanisms(Port *port, StringInfo buf);
 extern void *pg_be_scram_init(Port *port, const char *selected_mech, const char *shadow_pass);
-extern int pg_be_scram_exchange(void *opaq, const char *input, int inputlen,
-					 char **output, int *outputlen, char **logdetail);
+extern int	pg_be_scram_exchange(void *opaq, const char *input, int inputlen,
+								 char **output, int *outputlen, char **logdetail);
 
 /* Routines to handle and check SCRAM-SHA-256 verifier */
 extern char *pg_be_scram_build_verifier(const char *password);
 extern bool parse_scram_verifier(const char *verifier, int *iterations, char **salt,
-					 uint8 *stored_key, uint8 *server_key);
+								 uint8 *stored_key, uint8 *server_key);
 extern bool scram_verify_plain_password(const char *username,
-							const char *password, const char *verifier);
+										const char *password, const char *verifier);
 
 #endif							/* PG_SCRAM_H */
diff --git a/src/include/mb/pg_wchar.h b/src/include/mb/pg_wchar.h
index 68b8a8626ade..ec101a834ef8 100644
--- a/src/include/mb/pg_wchar.h
+++ b/src/include/mb/pg_wchar.h
@@ -522,12 +522,12 @@ extern int	pg_valid_server_encoding_id(int encoding);
  */
 extern int	pg_mb2wchar(const char *from, pg_wchar *to);
 extern int	pg_mb2wchar_with_len(const char *from, pg_wchar *to, int len);
-extern int pg_encoding_mb2wchar_with_len(int encoding,
-							  const char *from, pg_wchar *to, int len);
+extern int	pg_encoding_mb2wchar_with_len(int encoding,
+										  const char *from, pg_wchar *to, int len);
 extern int	pg_wchar2mb(const pg_wchar *from, char *to);
 extern int	pg_wchar2mb_with_len(const pg_wchar *from, char *to, int len);
-extern int pg_encoding_wchar2mb_with_len(int encoding,
-							  const pg_wchar *from, char *to, int len);
+extern int	pg_encoding_wchar2mb_with_len(int encoding,
+										  const pg_wchar *from, char *to, int len);
 extern int	pg_char_and_wchar_strcmp(const char *s1, const pg_wchar *s2);
 extern int	pg_wchar_strncmp(const pg_wchar *s1, const pg_wchar *s2, size_t n);
 extern int	pg_char_and_wchar_strncmp(const char *s1, const pg_wchar *s2, size_t n);
@@ -542,8 +542,8 @@ extern int	pg_mic_mblen(const unsigned char *mbstr);
 extern int	pg_mbstrlen(const char *mbstr);
 extern int	pg_mbstrlen_with_len(const char *mbstr, int len);
 extern int	pg_mbcliplen(const char *mbstr, int len, int limit);
-extern int pg_encoding_mbcliplen(int encoding, const char *mbstr,
-					  int len, int limit);
+extern int	pg_encoding_mbcliplen(int encoding, const char *mbstr,
+								  int len, int limit);
 extern int	pg_mbcharcliplen(const char *mbstr, int len, int imit);
 extern int	pg_encoding_max_length(int encoding);
 extern int	pg_database_encoding_max_length(void);
@@ -572,8 +572,8 @@ extern unsigned char *unicode_to_utf8(pg_wchar c, unsigned char *utf8string);
 extern pg_wchar utf8_to_unicode(const unsigned char *c);
 extern int	pg_utf_mblen(const unsigned char *);
 extern unsigned char *pg_do_encoding_conversion(unsigned char *src, int len,
-						  int src_encoding,
-						  int dest_encoding);
+												int src_encoding,
+												int dest_encoding);
 
 extern char *pg_client_to_server(const char *s, int len);
 extern char *pg_server_to_client(const char *s, int len);
@@ -584,48 +584,48 @@ extern unsigned short BIG5toCNS(unsigned short big5, unsigned char *lc);
 extern unsigned short CNStoBIG5(unsigned short cns, unsigned char lc);
 
 extern void UtfToLocal(const unsigned char *utf, int len,
-		   unsigned char *iso,
-		   const pg_mb_radix_tree *map,
-		   const pg_utf_to_local_combined *cmap, int cmapsize,
-		   utf_local_conversion_func conv_func,
-		   int encoding);
+					   unsigned char *iso,
+					   const pg_mb_radix_tree *map,
+					   const pg_utf_to_local_combined *cmap, int cmapsize,
+					   utf_local_conversion_func conv_func,
+					   int encoding);
 extern void LocalToUtf(const unsigned char *iso, int len,
-		   unsigned char *utf,
-		   const pg_mb_radix_tree *map,
-		   const pg_local_to_utf_combined *cmap, int cmapsize,
-		   utf_local_conversion_func conv_func,
-		   int encoding);
+					   unsigned char *utf,
+					   const pg_mb_radix_tree *map,
+					   const pg_local_to_utf_combined *cmap, int cmapsize,
+					   utf_local_conversion_func conv_func,
+					   int encoding);
 
 extern bool pg_verifymbstr(const char *mbstr, int len, bool noError);
 extern bool pg_verify_mbstr(int encoding, const char *mbstr, int len,
-				bool noError);
-extern int pg_verify_mbstr_len(int encoding, const char *mbstr, int len,
-					bool noError);
+							bool noError);
+extern int	pg_verify_mbstr_len(int encoding, const char *mbstr, int len,
+								bool noError);
 
 extern void check_encoding_conversion_args(int src_encoding,
-							   int dest_encoding,
-							   int len,
-							   int expected_src_encoding,
-							   int expected_dest_encoding);
+										   int dest_encoding,
+										   int len,
+										   int expected_src_encoding,
+										   int expected_dest_encoding);
 
 extern void report_invalid_encoding(int encoding, const char *mbstr, int len) pg_attribute_noreturn();
 extern void report_untranslatable_char(int src_encoding, int dest_encoding,
-						   const char *mbstr, int len) pg_attribute_noreturn();
+									   const char *mbstr, int len) pg_attribute_noreturn();
 
 extern void local2local(const unsigned char *l, unsigned char *p, int len,
-			int src_encoding, int dest_encoding, const unsigned char *tab);
+						int src_encoding, int dest_encoding, const unsigned char *tab);
 extern void pg_ascii2mic(const unsigned char *l, unsigned char *p, int len);
 extern void pg_mic2ascii(const unsigned char *mic, unsigned char *p, int len);
 extern void latin2mic(const unsigned char *l, unsigned char *p, int len,
-		  int lc, int encoding);
+					  int lc, int encoding);
 extern void mic2latin(const unsigned char *mic, unsigned char *p, int len,
-		  int lc, int encoding);
+					  int lc, int encoding);
 extern void latin2mic_with_table(const unsigned char *l, unsigned char *p,
-					 int len, int lc, int encoding,
-					 const unsigned char *tab);
+								 int len, int lc, int encoding,
+								 const unsigned char *tab);
 extern void mic2latin_with_table(const unsigned char *mic, unsigned char *p,
-					 int len, int lc, int encoding,
-					 const unsigned char *tab);
+								 int len, int lc, int encoding,
+								 const unsigned char *tab);
 
 extern bool pg_utf8_islegal(const unsigned char *source, int length);
 
diff --git a/src/include/miscadmin.h b/src/include/miscadmin.h
index 61283806b651..61a24c2e3c67 100644
--- a/src/include/miscadmin.h
+++ b/src/include/miscadmin.h
@@ -425,7 +425,7 @@ extern AuxProcType MyAuxProcType;
 extern void pg_split_opts(char **argv, int *argcp, const char *optstr);
 extern void InitializeMaxBackends(void);
 extern void InitPostgres(const char *in_dbname, Oid dboid, const char *username,
-			 Oid useroid, char *out_dbname, bool override_allow_connections);
+						 Oid useroid, char *out_dbname, bool override_allow_connections);
 extern void BaseInit(void);
 
 /* in utils/init/miscinit.c */
@@ -437,7 +437,7 @@ extern char *local_preload_libraries_string;
 
 extern void CreateDataDirLockFile(bool amPostmaster);
 extern void CreateSocketLockFile(const char *socketfile, bool amPostmaster,
-					 const char *socketDir);
+								 const char *socketDir);
 extern void TouchSocketLockFiles(void);
 extern void AddToDataDirLockFile(int target_line, const char *str);
 extern bool RecheckDataDirLockFile(void);
diff --git a/src/include/nodes/extensible.h b/src/include/nodes/extensible.h
index 58878edba251..402cdf13a379 100644
--- a/src/include/nodes/extensible.h
+++ b/src/include/nodes/extensible.h
@@ -72,7 +72,7 @@ typedef struct ExtensibleNodeMethods
 
 extern void RegisterExtensibleNodeMethods(const ExtensibleNodeMethods *method);
 extern const ExtensibleNodeMethods *GetExtensibleNodeMethods(const char *name,
-						 bool missing_ok);
+															 bool missing_ok);
 
 /*
  * Flags for custom paths, indicating what capabilities the resulting scan
@@ -155,6 +155,6 @@ typedef struct CustomExecMethods
 
 extern void RegisterCustomScanMethods(const CustomScanMethods *methods);
 extern const CustomScanMethods *GetCustomScanMethods(const char *CustomName,
-					 bool missing_ok);
+													 bool missing_ok);
 
 #endif							/* EXTENSIBLE_H */
diff --git a/src/include/nodes/makefuncs.h b/src/include/nodes/makefuncs.h
index aa25fab14a4e..ad7b41d4aa60 100644
--- a/src/include/nodes/makefuncs.h
+++ b/src/include/nodes/makefuncs.h
@@ -18,42 +18,42 @@
 
 
 extern A_Expr *makeA_Expr(A_Expr_Kind kind, List *name,
-		   Node *lexpr, Node *rexpr, int location);
+						  Node *lexpr, Node *rexpr, int location);
 
 extern A_Expr *makeSimpleA_Expr(A_Expr_Kind kind, char *name,
-				 Node *lexpr, Node *rexpr, int location);
+								Node *lexpr, Node *rexpr, int location);
 
 extern Var *makeVar(Index varno,
-		AttrNumber varattno,
-		Oid vartype,
-		int32 vartypmod,
-		Oid varcollid,
-		Index varlevelsup);
+					AttrNumber varattno,
+					Oid vartype,
+					int32 vartypmod,
+					Oid varcollid,
+					Index varlevelsup);
 
 extern Var *makeVarFromTargetEntry(Index varno,
-					   TargetEntry *tle);
+								   TargetEntry *tle);
 
 extern Var *makeWholeRowVar(RangeTblEntry *rte,
-				Index varno,
-				Index varlevelsup,
-				bool allowScalar);
+							Index varno,
+							Index varlevelsup,
+							bool allowScalar);
 
 extern TargetEntry *makeTargetEntry(Expr *expr,
-				AttrNumber resno,
-				char *resname,
-				bool resjunk);
+									AttrNumber resno,
+									char *resname,
+									bool resjunk);
 
 extern TargetEntry *flatCopyTargetEntry(TargetEntry *src_tle);
 
 extern FromExpr *makeFromExpr(List *fromlist, Node *quals);
 
 extern Const *makeConst(Oid consttype,
-		  int32 consttypmod,
-		  Oid constcollid,
-		  int constlen,
-		  Datum constvalue,
-		  bool constisnull,
-		  bool constbyval);
+						int32 consttypmod,
+						Oid constcollid,
+						int constlen,
+						Datum constvalue,
+						bool constisnull,
+						bool constbyval);
 
 extern Const *makeNullConst(Oid consttype, int32 consttypmod, Oid constcollid);
 
@@ -64,7 +64,7 @@ extern Expr *makeBoolExpr(BoolExprType boolop, List *args, int location);
 extern Alias *makeAlias(const char *aliasname, List *colnames);
 
 extern RelabelType *makeRelabelType(Expr *arg, Oid rtype, int32 rtypmod,
-				Oid rcollid, CoercionForm rformat);
+									Oid rcollid, CoercionForm rformat);
 
 extern RangeVar *makeRangeVar(char *schemaname, char *relname, int location);
 
@@ -73,16 +73,16 @@ extern TypeName *makeTypeNameFromNameList(List *names);
 extern TypeName *makeTypeNameFromOid(Oid typeOid, int32 typmod);
 
 extern ColumnDef *makeColumnDef(const char *colname,
-			  Oid typeOid, int32 typmod, Oid collOid);
+								Oid typeOid, int32 typmod, Oid collOid);
 
 extern FuncExpr *makeFuncExpr(Oid funcid, Oid rettype, List *args,
-			 Oid funccollid, Oid inputcollid, CoercionForm fformat);
+							  Oid funccollid, Oid inputcollid, CoercionForm fformat);
 
 extern FuncCall *makeFuncCall(List *name, List *args, int location);
 
 extern Expr *make_opclause(Oid opno, Oid opresulttype, bool opretset,
-			  Expr *leftop, Expr *rightop,
-			  Oid opcollid, Oid inputcollid);
+						   Expr *leftop, Expr *rightop,
+						   Oid opcollid, Oid inputcollid);
 
 extern Expr *make_andclause(List *andclauses);
 extern Expr *make_orclause(List *orclauses);
@@ -94,7 +94,7 @@ extern List *make_ands_implicit(Expr *clause);
 
 extern DefElem *makeDefElem(char *name, Node *arg, int location);
 extern DefElem *makeDefElemExtended(char *nameSpace, char *name, Node *arg,
-					DefElemAction defaction, int location);
+									DefElemAction defaction, int location);
 
 extern GroupingSet *makeGroupingSet(GroupingSetKind kind, List *content, int location);
 
diff --git a/src/include/nodes/nodeFuncs.h b/src/include/nodes/nodeFuncs.h
index 98759346d125..0cb931c82c72 100644
--- a/src/include/nodes/nodeFuncs.h
+++ b/src/include/nodes/nodeFuncs.h
@@ -123,7 +123,7 @@ get_notclausearg(const void *notclause)
 }
 
 extern bool check_functions_in_node(Node *node, check_function_callback checker,
-						void *context);
+									void *context);
 
 extern bool expression_tree_walker(Node *node, bool (*walker) (),
 								   void *context);
diff --git a/src/include/nodes/nodes.h b/src/include/nodes/nodes.h
index ffb4cd4bcc45..4e2fb39105b2 100644
--- a/src/include/nodes/nodes.h
+++ b/src/include/nodes/nodes.h
@@ -608,9 +608,9 @@ struct StringInfoData;			/* not to include stringinfo.h here */
 extern void outNode(struct StringInfoData *str, const void *obj);
 extern void outToken(struct StringInfoData *str, const char *s);
 extern void outBitmapset(struct StringInfoData *str,
-			 const struct Bitmapset *bms);
+						 const struct Bitmapset *bms);
 extern void outDatum(struct StringInfoData *str, uintptr_t value,
-		 int typlen, bool typbyval);
+					 int typlen, bool typbyval);
 extern char *nodeToString(const void *obj);
 extern char *bmsToString(const struct Bitmapset *bms);
 
diff --git a/src/include/nodes/print.h b/src/include/nodes/print.h
index 81650e4abf9b..cbff56a7242a 100644
--- a/src/include/nodes/print.h
+++ b/src/include/nodes/print.h
@@ -22,7 +22,7 @@
 extern void print(const void *obj);
 extern void pprint(const void *obj);
 extern void elog_node_display(int lev, const char *title,
-				  const void *obj, bool pretty);
+							  const void *obj, bool pretty);
 extern char *format_node_dump(const char *dump);
 extern char *pretty_format_node_dump(const char *dump);
 extern void print_rt(const List *rtable);
diff --git a/src/include/nodes/tidbitmap.h b/src/include/nodes/tidbitmap.h
index 6a7f3054a416..26973ac7a58a 100644
--- a/src/include/nodes/tidbitmap.h
+++ b/src/include/nodes/tidbitmap.h
@@ -53,8 +53,8 @@ extern void tbm_free(TIDBitmap *tbm);
 extern void tbm_free_shared_area(dsa_area *dsa, dsa_pointer dp);
 
 extern void tbm_add_tuples(TIDBitmap *tbm,
-			   const ItemPointer tids, int ntids,
-			   bool recheck);
+						   const ItemPointer tids, int ntids,
+						   bool recheck);
 extern void tbm_add_page(TIDBitmap *tbm, BlockNumber pageno);
 
 extern void tbm_union(TIDBitmap *a, const TIDBitmap *b);
@@ -69,7 +69,7 @@ extern TBMIterateResult *tbm_shared_iterate(TBMSharedIterator *iterator);
 extern void tbm_end_iterate(TBMIterator *iterator);
 extern void tbm_end_shared_iterate(TBMSharedIterator *iterator);
 extern TBMSharedIterator *tbm_attach_shared_iterate(dsa_area *dsa,
-						  dsa_pointer dp);
+													dsa_pointer dp);
 extern long tbm_calculate_entries(double maxbytes);
 
 #endif							/* TIDBITMAP_H */
diff --git a/src/include/optimizer/appendinfo.h b/src/include/optimizer/appendinfo.h
index 790914c1b07a..9fdb6a6036c7 100644
--- a/src/include/optimizer/appendinfo.h
+++ b/src/include/optimizer/appendinfo.h
@@ -18,18 +18,18 @@
 #include "utils/relcache.h"
 
 extern AppendRelInfo *make_append_rel_info(Relation parentrel,
-					 Relation childrel,
-					 Index parentRTindex, Index childRTindex);
+										   Relation childrel,
+										   Index parentRTindex, Index childRTindex);
 extern Node *adjust_appendrel_attrs(PlannerInfo *root, Node *node,
-					   int nappinfos, AppendRelInfo **appinfos);
+									int nappinfos, AppendRelInfo **appinfos);
 extern Node *adjust_appendrel_attrs_multilevel(PlannerInfo *root, Node *node,
-								  Relids child_relids,
-								  Relids top_parent_relids);
+											   Relids child_relids,
+											   Relids top_parent_relids);
 extern Relids adjust_child_relids(Relids relids, int nappinfos,
-					AppendRelInfo **appinfos);
+								  AppendRelInfo **appinfos);
 extern Relids adjust_child_relids_multilevel(PlannerInfo *root, Relids relids,
-							   Relids child_relids, Relids top_parent_relids);
+											 Relids child_relids, Relids top_parent_relids);
 extern AppendRelInfo **find_appinfos_by_relids(PlannerInfo *root,
-						Relids relids, int *nappinfos);
+											   Relids relids, int *nappinfos);
 
 #endif							/* APPENDINFO_H */
diff --git a/src/include/optimizer/clauses.h b/src/include/optimizer/clauses.h
index 5e10fb1d5072..2f9aeec4a77c 100644
--- a/src/include/optimizer/clauses.h
+++ b/src/include/optimizer/clauses.h
@@ -26,7 +26,7 @@ typedef struct
 
 extern bool contain_agg_clause(Node *clause);
 extern void get_agg_clause_costs(PlannerInfo *root, Node *clause,
-					 AggSplit aggsplit, AggClauseCosts *costs);
+								 AggSplit aggsplit, AggClauseCosts *costs);
 
 extern bool contain_window_function(Node *clause);
 extern WindowFuncLists *find_window_functions(Node *clause, Index maxWinRef);
@@ -53,6 +53,6 @@ extern int	NumRelids(Node *clause);
 extern void CommuteOpExpr(OpExpr *clause);
 
 extern Query *inline_set_returning_function(PlannerInfo *root,
-							  RangeTblEntry *rte);
+											RangeTblEntry *rte);
 
 #endif							/* CLAUSES_H */
diff --git a/src/include/optimizer/cost.h b/src/include/optimizer/cost.h
index ac6de0f6bec3..9b6bdbc5189b 100644
--- a/src/include/optimizer/cost.h
+++ b/src/include/optimizer/cost.h
@@ -67,136 +67,136 @@ extern PGDLLIMPORT bool enable_partition_pruning;
 extern PGDLLIMPORT int constraint_exclusion;
 
 extern double index_pages_fetched(double tuples_fetched, BlockNumber pages,
-					double index_pages, PlannerInfo *root);
+								  double index_pages, PlannerInfo *root);
 extern void cost_seqscan(Path *path, PlannerInfo *root, RelOptInfo *baserel,
-			 ParamPathInfo *param_info);
+						 ParamPathInfo *param_info);
 extern void cost_samplescan(Path *path, PlannerInfo *root, RelOptInfo *baserel,
-				ParamPathInfo *param_info);
+							ParamPathInfo *param_info);
 extern void cost_index(IndexPath *path, PlannerInfo *root,
-		   double loop_count, bool partial_path);
+					   double loop_count, bool partial_path);
 extern void cost_bitmap_heap_scan(Path *path, PlannerInfo *root, RelOptInfo *baserel,
-					  ParamPathInfo *param_info,
-					  Path *bitmapqual, double loop_count);
+								  ParamPathInfo *param_info,
+								  Path *bitmapqual, double loop_count);
 extern void cost_bitmap_and_node(BitmapAndPath *path, PlannerInfo *root);
 extern void cost_bitmap_or_node(BitmapOrPath *path, PlannerInfo *root);
 extern void cost_bitmap_tree_node(Path *path, Cost *cost, Selectivity *selec);
 extern void cost_tidscan(Path *path, PlannerInfo *root,
-			 RelOptInfo *baserel, List *tidquals, ParamPathInfo *param_info);
+						 RelOptInfo *baserel, List *tidquals, ParamPathInfo *param_info);
 extern void cost_subqueryscan(SubqueryScanPath *path, PlannerInfo *root,
-				  RelOptInfo *baserel, ParamPathInfo *param_info);
+							  RelOptInfo *baserel, ParamPathInfo *param_info);
 extern void cost_functionscan(Path *path, PlannerInfo *root,
-				  RelOptInfo *baserel, ParamPathInfo *param_info);
+							  RelOptInfo *baserel, ParamPathInfo *param_info);
 extern void cost_tableexprscan(Path *path, PlannerInfo *root,
-				   RelOptInfo *baserel, ParamPathInfo *param_info);
+							   RelOptInfo *baserel, ParamPathInfo *param_info);
 extern void cost_valuesscan(Path *path, PlannerInfo *root,
-				RelOptInfo *baserel, ParamPathInfo *param_info);
+							RelOptInfo *baserel, ParamPathInfo *param_info);
 extern void cost_tablefuncscan(Path *path, PlannerInfo *root,
-				   RelOptInfo *baserel, ParamPathInfo *param_info);
+							   RelOptInfo *baserel, ParamPathInfo *param_info);
 extern void cost_ctescan(Path *path, PlannerInfo *root,
-			 RelOptInfo *baserel, ParamPathInfo *param_info);
-extern void cost_namedtuplestorescan(Path *path, PlannerInfo *root,
 						 RelOptInfo *baserel, ParamPathInfo *param_info);
+extern void cost_namedtuplestorescan(Path *path, PlannerInfo *root,
+									 RelOptInfo *baserel, ParamPathInfo *param_info);
 extern void cost_resultscan(Path *path, PlannerInfo *root,
-				RelOptInfo *baserel, ParamPathInfo *param_info);
+							RelOptInfo *baserel, ParamPathInfo *param_info);
 extern void cost_recursive_union(Path *runion, Path *nrterm, Path *rterm);
 extern void cost_sort(Path *path, PlannerInfo *root,
-		  List *pathkeys, Cost input_cost, double tuples, int width,
-		  Cost comparison_cost, int sort_mem,
-		  double limit_tuples);
+					  List *pathkeys, Cost input_cost, double tuples, int width,
+					  Cost comparison_cost, int sort_mem,
+					  double limit_tuples);
 extern void cost_append(AppendPath *path);
 extern void cost_merge_append(Path *path, PlannerInfo *root,
-				  List *pathkeys, int n_streams,
-				  Cost input_startup_cost, Cost input_total_cost,
-				  double tuples);
+							  List *pathkeys, int n_streams,
+							  Cost input_startup_cost, Cost input_total_cost,
+							  double tuples);
 extern void cost_material(Path *path,
-			  Cost input_startup_cost, Cost input_total_cost,
-			  double tuples, int width);
+						  Cost input_startup_cost, Cost input_total_cost,
+						  double tuples, int width);
 extern void cost_agg(Path *path, PlannerInfo *root,
-		 AggStrategy aggstrategy, const AggClauseCosts *aggcosts,
-		 int numGroupCols, double numGroups,
-		 List *quals,
-		 Cost input_startup_cost, Cost input_total_cost,
-		 double input_tuples);
+					 AggStrategy aggstrategy, const AggClauseCosts *aggcosts,
+					 int numGroupCols, double numGroups,
+					 List *quals,
+					 Cost input_startup_cost, Cost input_total_cost,
+					 double input_tuples);
 extern void cost_windowagg(Path *path, PlannerInfo *root,
-			   List *windowFuncs, int numPartCols, int numOrderCols,
-			   Cost input_startup_cost, Cost input_total_cost,
-			   double input_tuples);
+						   List *windowFuncs, int numPartCols, int numOrderCols,
+						   Cost input_startup_cost, Cost input_total_cost,
+						   double input_tuples);
 extern void cost_group(Path *path, PlannerInfo *root,
-		   int numGroupCols, double numGroups,
-		   List *quals,
-		   Cost input_startup_cost, Cost input_total_cost,
-		   double input_tuples);
+					   int numGroupCols, double numGroups,
+					   List *quals,
+					   Cost input_startup_cost, Cost input_total_cost,
+					   double input_tuples);
 extern void initial_cost_nestloop(PlannerInfo *root,
-					  JoinCostWorkspace *workspace,
-					  JoinType jointype,
-					  Path *outer_path, Path *inner_path,
-					  JoinPathExtraData *extra);
+								  JoinCostWorkspace *workspace,
+								  JoinType jointype,
+								  Path *outer_path, Path *inner_path,
+								  JoinPathExtraData *extra);
 extern void final_cost_nestloop(PlannerInfo *root, NestPath *path,
-					JoinCostWorkspace *workspace,
-					JoinPathExtraData *extra);
+								JoinCostWorkspace *workspace,
+								JoinPathExtraData *extra);
 extern void initial_cost_mergejoin(PlannerInfo *root,
-					   JoinCostWorkspace *workspace,
-					   JoinType jointype,
-					   List *mergeclauses,
-					   Path *outer_path, Path *inner_path,
-					   List *outersortkeys, List *innersortkeys,
-					   JoinPathExtraData *extra);
+								   JoinCostWorkspace *workspace,
+								   JoinType jointype,
+								   List *mergeclauses,
+								   Path *outer_path, Path *inner_path,
+								   List *outersortkeys, List *innersortkeys,
+								   JoinPathExtraData *extra);
 extern void final_cost_mergejoin(PlannerInfo *root, MergePath *path,
-					 JoinCostWorkspace *workspace,
-					 JoinPathExtraData *extra);
+								 JoinCostWorkspace *workspace,
+								 JoinPathExtraData *extra);
 extern void initial_cost_hashjoin(PlannerInfo *root,
-					  JoinCostWorkspace *workspace,
-					  JoinType jointype,
-					  List *hashclauses,
-					  Path *outer_path, Path *inner_path,
-					  JoinPathExtraData *extra,
-					  bool parallel_hash);
+								  JoinCostWorkspace *workspace,
+								  JoinType jointype,
+								  List *hashclauses,
+								  Path *outer_path, Path *inner_path,
+								  JoinPathExtraData *extra,
+								  bool parallel_hash);
 extern void final_cost_hashjoin(PlannerInfo *root, HashPath *path,
-					JoinCostWorkspace *workspace,
-					JoinPathExtraData *extra);
+								JoinCostWorkspace *workspace,
+								JoinPathExtraData *extra);
 extern void cost_gather(GatherPath *path, PlannerInfo *root,
-			RelOptInfo *baserel, ParamPathInfo *param_info, double *rows);
+						RelOptInfo *baserel, ParamPathInfo *param_info, double *rows);
 extern void cost_gather_merge(GatherMergePath *path, PlannerInfo *root,
-				  RelOptInfo *rel, ParamPathInfo *param_info,
-				  Cost input_startup_cost, Cost input_total_cost,
-				  double *rows);
+							  RelOptInfo *rel, ParamPathInfo *param_info,
+							  Cost input_startup_cost, Cost input_total_cost,
+							  double *rows);
 extern void cost_subplan(PlannerInfo *root, SubPlan *subplan, Plan *plan);
 extern void cost_qual_eval(QualCost *cost, List *quals, PlannerInfo *root);
 extern void cost_qual_eval_node(QualCost *cost, Node *qual, PlannerInfo *root);
 extern void compute_semi_anti_join_factors(PlannerInfo *root,
-							   RelOptInfo *joinrel,
-							   RelOptInfo *outerrel,
-							   RelOptInfo *innerrel,
-							   JoinType jointype,
-							   SpecialJoinInfo *sjinfo,
-							   List *restrictlist,
-							   SemiAntiJoinFactors *semifactors);
+										   RelOptInfo *joinrel,
+										   RelOptInfo *outerrel,
+										   RelOptInfo *innerrel,
+										   JoinType jointype,
+										   SpecialJoinInfo *sjinfo,
+										   List *restrictlist,
+										   SemiAntiJoinFactors *semifactors);
 extern void set_baserel_size_estimates(PlannerInfo *root, RelOptInfo *rel);
 extern double get_parameterized_baserel_size(PlannerInfo *root,
-							   RelOptInfo *rel,
-							   List *param_clauses);
+											 RelOptInfo *rel,
+											 List *param_clauses);
 extern double get_parameterized_joinrel_size(PlannerInfo *root,
-							   RelOptInfo *rel,
-							   Path *outer_path,
-							   Path *inner_path,
-							   SpecialJoinInfo *sjinfo,
-							   List *restrict_clauses);
+											 RelOptInfo *rel,
+											 Path *outer_path,
+											 Path *inner_path,
+											 SpecialJoinInfo *sjinfo,
+											 List *restrict_clauses);
 extern void set_joinrel_size_estimates(PlannerInfo *root, RelOptInfo *rel,
-						   RelOptInfo *outer_rel,
-						   RelOptInfo *inner_rel,
-						   SpecialJoinInfo *sjinfo,
-						   List *restrictlist);
+									   RelOptInfo *outer_rel,
+									   RelOptInfo *inner_rel,
+									   SpecialJoinInfo *sjinfo,
+									   List *restrictlist);
 extern void set_subquery_size_estimates(PlannerInfo *root, RelOptInfo *rel);
 extern void set_function_size_estimates(PlannerInfo *root, RelOptInfo *rel);
 extern void set_values_size_estimates(PlannerInfo *root, RelOptInfo *rel);
 extern void set_cte_size_estimates(PlannerInfo *root, RelOptInfo *rel,
-					   double cte_rows);
+								   double cte_rows);
 extern void set_tablefunc_size_estimates(PlannerInfo *root, RelOptInfo *rel);
 extern void set_namedtuplestore_size_estimates(PlannerInfo *root, RelOptInfo *rel);
 extern void set_result_size_estimates(PlannerInfo *root, RelOptInfo *rel);
 extern void set_foreign_size_estimates(PlannerInfo *root, RelOptInfo *rel);
 extern PathTarget *set_pathtarget_cost_width(PlannerInfo *root, PathTarget *target);
 extern double compute_bitmap_pages(PlannerInfo *root, RelOptInfo *baserel,
-					 Path *bitmapqual, int loop_count, Cost *cost, double *tuple);
+								   Path *bitmapqual, int loop_count, Cost *cost, double *tuple);
 
 #endif							/* COST_H */
diff --git a/src/include/optimizer/geqo.h b/src/include/optimizer/geqo.h
index 5b3327665e95..484b360f1fdc 100644
--- a/src/include/optimizer/geqo.h
+++ b/src/include/optimizer/geqo.h
@@ -79,7 +79,7 @@ typedef struct
 
 /* routines in geqo_main.c */
 extern RelOptInfo *geqo(PlannerInfo *root,
-	 int number_of_rels, List *initial_rels);
+						int number_of_rels, List *initial_rels);
 
 /* routines in geqo_eval.c */
 extern Cost geqo_eval(PlannerInfo *root, Gene *tour, int num_gene);
diff --git a/src/include/optimizer/geqo_recombination.h b/src/include/optimizer/geqo_recombination.h
index d95a063d263c..8dfda79cdf9b 100644
--- a/src/include/optimizer/geqo_recombination.h
+++ b/src/include/optimizer/geqo_recombination.h
@@ -43,10 +43,10 @@ extern Edge *alloc_edge_table(PlannerInfo *root, int num_gene);
 extern void free_edge_table(PlannerInfo *root, Edge *edge_table);
 
 extern float gimme_edge_table(PlannerInfo *root, Gene *tour1, Gene *tour2,
-				 int num_gene, Edge *edge_table);
+							  int num_gene, Edge *edge_table);
 
-extern int gimme_tour(PlannerInfo *root, Edge *edge_table, Gene *new_gene,
-		   int num_gene);
+extern int	gimme_tour(PlannerInfo *root, Edge *edge_table, Gene *new_gene,
+					   int num_gene);
 
 
 /* partially matched crossover [PMX] */
@@ -55,8 +55,8 @@ extern int gimme_tour(PlannerInfo *root, Edge *edge_table, Gene *new_gene,
 #define MOM 0					/* indicator for gene from mom */
 
 extern void pmx(PlannerInfo *root,
-	Gene *tour1, Gene *tour2,
-	Gene *offspring, int num_gene);
+				Gene *tour1, Gene *tour2,
+				Gene *offspring, int num_gene);
 
 
 typedef struct City
@@ -71,19 +71,19 @@ extern City * alloc_city_table(PlannerInfo *root, int num_gene);
 extern void free_city_table(PlannerInfo *root, City * city_table);
 
 /* cycle crossover [CX] */
-extern int cx(PlannerInfo *root, Gene *tour1, Gene *tour2,
-   Gene *offspring, int num_gene, City * city_table);
+extern int	cx(PlannerInfo *root, Gene *tour1, Gene *tour2,
+			   Gene *offspring, int num_gene, City * city_table);
 
 /* position crossover [PX] */
 extern void px(PlannerInfo *root, Gene *tour1, Gene *tour2, Gene *offspring,
-   int num_gene, City * city_table);
+			   int num_gene, City * city_table);
 
 /* order crossover [OX1] according to Davis */
 extern void ox1(PlannerInfo *root, Gene *mom, Gene *dad, Gene *offspring,
-	int num_gene, City * city_table);
+				int num_gene, City * city_table);
 
 /* order crossover [OX2] according to Syswerda */
 extern void ox2(PlannerInfo *root, Gene *mom, Gene *dad, Gene *offspring,
-	int num_gene, City * city_table);
+				int num_gene, City * city_table);
 
 #endif							/* GEQO_RECOMBINATION_H */
diff --git a/src/include/optimizer/geqo_selection.h b/src/include/optimizer/geqo_selection.h
index 1631c6c87e1e..85c0d2151048 100644
--- a/src/include/optimizer/geqo_selection.h
+++ b/src/include/optimizer/geqo_selection.h
@@ -27,7 +27,7 @@
 
 
 extern void geqo_selection(PlannerInfo *root,
-			   Chromosome *momma, Chromosome *daddy,
-			   Pool *pool, double bias);
+						   Chromosome *momma, Chromosome *daddy,
+						   Pool *pool, double bias);
 
 #endif							/* GEQO_SELECTION_H */
diff --git a/src/include/optimizer/inherit.h b/src/include/optimizer/inherit.h
index 02a23e5b1bf9..f465a526c706 100644
--- a/src/include/optimizer/inherit.h
+++ b/src/include/optimizer/inherit.h
@@ -18,10 +18,10 @@
 
 
 extern void expand_inherited_rtentry(PlannerInfo *root, RelOptInfo *rel,
-						 RangeTblEntry *rte, Index rti);
+									 RangeTblEntry *rte, Index rti);
 
 extern bool apply_child_basequals(PlannerInfo *root, RelOptInfo *parentrel,
-					  RelOptInfo *childrel, RangeTblEntry *childRTE,
-					  AppendRelInfo *appinfo);
+								  RelOptInfo *childrel, RangeTblEntry *childRTE,
+								  AppendRelInfo *appinfo);
 
 #endif							/* INHERIT_H */
diff --git a/src/include/optimizer/joininfo.h b/src/include/optimizer/joininfo.h
index c6e4be6cf4ec..0807d1901f33 100644
--- a/src/include/optimizer/joininfo.h
+++ b/src/include/optimizer/joininfo.h
@@ -18,13 +18,13 @@
 
 
 extern bool have_relevant_joinclause(PlannerInfo *root,
-						 RelOptInfo *rel1, RelOptInfo *rel2);
+									 RelOptInfo *rel1, RelOptInfo *rel2);
 
 extern void add_join_clause_to_rels(PlannerInfo *root,
-						RestrictInfo *restrictinfo,
-						Relids join_relids);
+									RestrictInfo *restrictinfo,
+									Relids join_relids);
 extern void remove_join_clause_from_rels(PlannerInfo *root,
-							 RestrictInfo *restrictinfo,
-							 Relids join_relids);
+										 RestrictInfo *restrictinfo,
+										 Relids join_relids);
 
 #endif							/* JOININFO_H */
diff --git a/src/include/optimizer/optimizer.h b/src/include/optimizer/optimizer.h
index 6086821f201c..6b8fd3f285ed 100644
--- a/src/include/optimizer/optimizer.h
+++ b/src/include/optimizer/optimizer.h
@@ -54,21 +54,21 @@ struct HeapTupleData;
 /* in path/clausesel.c: */
 
 extern Selectivity clause_selectivity(PlannerInfo *root,
-				   Node *clause,
-				   int varRelid,
-				   JoinType jointype,
-				   SpecialJoinInfo *sjinfo);
+									  Node *clause,
+									  int varRelid,
+									  JoinType jointype,
+									  SpecialJoinInfo *sjinfo);
 extern Selectivity clauselist_selectivity_simple(PlannerInfo *root,
-							  List *clauses,
-							  int varRelid,
-							  JoinType jointype,
-							  SpecialJoinInfo *sjinfo,
-							  Bitmapset *estimatedclauses);
+												 List *clauses,
+												 int varRelid,
+												 JoinType jointype,
+												 SpecialJoinInfo *sjinfo,
+												 Bitmapset *estimatedclauses);
 extern Selectivity clauselist_selectivity(PlannerInfo *root,
-					   List *clauses,
-					   int varRelid,
-					   JoinType jointype,
-					   SpecialJoinInfo *sjinfo);
+										  List *clauses,
+										  int varRelid,
+										  JoinType jointype,
+										  SpecialJoinInfo *sjinfo);
 
 /* in path/costsize.c: */
 
@@ -103,12 +103,12 @@ extern int	force_parallel_mode;
 extern bool parallel_leader_participation;
 
 extern struct PlannedStmt *planner(Query *parse, int cursorOptions,
-		struct ParamListInfoData *boundParams);
+								   struct ParamListInfoData *boundParams);
 
 extern Expr *expression_planner(Expr *expr);
 extern Expr *expression_planner_with_deps(Expr *expr,
-							 List **relationOids,
-							 List **invalItems);
+										  List **relationOids,
+										  List **invalItems);
 
 extern bool plan_cluster_use_sort(Oid tableOid, Oid indexOid);
 extern int	plan_create_index_workers(Oid tableOid, Oid indexOid);
@@ -116,9 +116,9 @@ extern int	plan_create_index_workers(Oid tableOid, Oid indexOid);
 /* in plan/setrefs.c: */
 
 extern void extract_query_dependencies(Node *query,
-						   List **relationOids,
-						   List **invalItems,
-						   bool *hasRowSecurity);
+									   List **relationOids,
+									   List **invalItems,
+									   bool *hasRowSecurity);
 
 /* in prep/prepqual.c: */
 
@@ -136,33 +136,33 @@ extern Node *eval_const_expressions(PlannerInfo *root, Node *node);
 extern Node *estimate_expression_value(PlannerInfo *root, Node *node);
 
 extern Expr *evaluate_expr(Expr *expr, Oid result_type, int32 result_typmod,
-			  Oid result_collation);
+						   Oid result_collation);
 
 extern List *expand_function_arguments(List *args, Oid result_type,
-						  struct HeapTupleData *func_tuple);
+									   struct HeapTupleData *func_tuple);
 
 /* in util/predtest.c: */
 
 extern bool predicate_implied_by(List *predicate_list, List *clause_list,
-					 bool weak);
+								 bool weak);
 extern bool predicate_refuted_by(List *predicate_list, List *clause_list,
-					 bool weak);
+								 bool weak);
 
 /* in util/tlist.c: */
 
 extern int	count_nonjunk_tlist_entries(List *tlist);
 extern TargetEntry *get_sortgroupref_tle(Index sortref,
-					 List *targetList);
+										 List *targetList);
 extern TargetEntry *get_sortgroupclause_tle(SortGroupClause *sgClause,
-						List *targetList);
+											List *targetList);
 extern Node *get_sortgroupclause_expr(SortGroupClause *sgClause,
-						 List *targetList);
+									  List *targetList);
 extern List *get_sortgrouplist_exprs(List *sgClauses,
-						List *targetList);
+									 List *targetList);
 extern SortGroupClause *get_sortgroupref_clause(Index sortref,
-						List *clauses);
+												List *clauses);
 extern SortGroupClause *get_sortgroupref_clause_noerr(Index sortref,
-							  List *clauses);
+													  List *clauses);
 
 /* in util/var.c: */
 
diff --git a/src/include/optimizer/paramassign.h b/src/include/optimizer/paramassign.h
index e18f420eb404..edf3ed86281c 100644
--- a/src/include/optimizer/paramassign.h
+++ b/src/include/optimizer/paramassign.h
@@ -17,18 +17,18 @@
 
 extern Param *replace_outer_var(PlannerInfo *root, Var *var);
 extern Param *replace_outer_placeholdervar(PlannerInfo *root,
-							 PlaceHolderVar *phv);
+										   PlaceHolderVar *phv);
 extern Param *replace_outer_agg(PlannerInfo *root, Aggref *agg);
 extern Param *replace_outer_grouping(PlannerInfo *root, GroupingFunc *grp);
 extern Param *replace_nestloop_param_var(PlannerInfo *root, Var *var);
 extern Param *replace_nestloop_param_placeholdervar(PlannerInfo *root,
-									  PlaceHolderVar *phv);
+													PlaceHolderVar *phv);
 extern void process_subquery_nestloop_params(PlannerInfo *root,
-								 List *subplan_params);
+											 List *subplan_params);
 extern List *identify_current_nestloop_params(PlannerInfo *root,
-								 Relids leftrelids);
+											  Relids leftrelids);
 extern Param *generate_new_exec_param(PlannerInfo *root, Oid paramtype,
-						int32 paramtypmod, Oid paramcollation);
+									  int32 paramtypmod, Oid paramcollation);
 extern int	assign_special_exec_param(PlannerInfo *root);
 
 #endif							/* PARAMASSIGN_H */
diff --git a/src/include/optimizer/pathnode.h b/src/include/optimizer/pathnode.h
index 437250f557e4..e70d6a3f1880 100644
--- a/src/include/optimizer/pathnode.h
+++ b/src/include/optimizer/pathnode.h
@@ -21,259 +21,259 @@
 /*
  * prototypes for pathnode.c
  */
-extern int compare_path_costs(Path *path1, Path *path2,
-				   CostSelector criterion);
-extern int compare_fractional_path_costs(Path *path1, Path *path2,
-							  double fraction);
+extern int	compare_path_costs(Path *path1, Path *path2,
+							   CostSelector criterion);
+extern int	compare_fractional_path_costs(Path *path1, Path *path2,
+										  double fraction);
 extern void set_cheapest(RelOptInfo *parent_rel);
 extern void add_path(RelOptInfo *parent_rel, Path *new_path);
 extern bool add_path_precheck(RelOptInfo *parent_rel,
-				  Cost startup_cost, Cost total_cost,
-				  List *pathkeys, Relids required_outer);
+							  Cost startup_cost, Cost total_cost,
+							  List *pathkeys, Relids required_outer);
 extern void add_partial_path(RelOptInfo *parent_rel, Path *new_path);
 extern bool add_partial_path_precheck(RelOptInfo *parent_rel,
-						  Cost total_cost, List *pathkeys);
+									  Cost total_cost, List *pathkeys);
 
 extern Path *create_seqscan_path(PlannerInfo *root, RelOptInfo *rel,
-					Relids required_outer, int parallel_workers);
+								 Relids required_outer, int parallel_workers);
 extern Path *create_samplescan_path(PlannerInfo *root, RelOptInfo *rel,
-					   Relids required_outer);
+									Relids required_outer);
 extern IndexPath *create_index_path(PlannerInfo *root,
-				  IndexOptInfo *index,
-				  List *indexclauses,
-				  List *indexorderbys,
-				  List *indexorderbycols,
-				  List *pathkeys,
-				  ScanDirection indexscandir,
-				  bool indexonly,
-				  Relids required_outer,
-				  double loop_count,
-				  bool partial_path);
+									IndexOptInfo *index,
+									List *indexclauses,
+									List *indexorderbys,
+									List *indexorderbycols,
+									List *pathkeys,
+									ScanDirection indexscandir,
+									bool indexonly,
+									Relids required_outer,
+									double loop_count,
+									bool partial_path);
 extern BitmapHeapPath *create_bitmap_heap_path(PlannerInfo *root,
-						RelOptInfo *rel,
-						Path *bitmapqual,
-						Relids required_outer,
-						double loop_count,
-						int parallel_degree);
+											   RelOptInfo *rel,
+											   Path *bitmapqual,
+											   Relids required_outer,
+											   double loop_count,
+											   int parallel_degree);
 extern BitmapAndPath *create_bitmap_and_path(PlannerInfo *root,
-					   RelOptInfo *rel,
-					   List *bitmapquals);
+											 RelOptInfo *rel,
+											 List *bitmapquals);
 extern BitmapOrPath *create_bitmap_or_path(PlannerInfo *root,
-					  RelOptInfo *rel,
-					  List *bitmapquals);
+										   RelOptInfo *rel,
+										   List *bitmapquals);
 extern TidPath *create_tidscan_path(PlannerInfo *root, RelOptInfo *rel,
-					List *tidquals, Relids required_outer);
+									List *tidquals, Relids required_outer);
 extern AppendPath *create_append_path(PlannerInfo *root, RelOptInfo *rel,
-				   List *subpaths, List *partial_subpaths,
-				   List *pathkeys, Relids required_outer,
-				   int parallel_workers, bool parallel_aware,
-				   List *partitioned_rels, double rows);
+									  List *subpaths, List *partial_subpaths,
+									  List *pathkeys, Relids required_outer,
+									  int parallel_workers, bool parallel_aware,
+									  List *partitioned_rels, double rows);
 extern MergeAppendPath *create_merge_append_path(PlannerInfo *root,
-						 RelOptInfo *rel,
-						 List *subpaths,
-						 List *pathkeys,
-						 Relids required_outer,
-						 List *partitioned_rels);
+												 RelOptInfo *rel,
+												 List *subpaths,
+												 List *pathkeys,
+												 Relids required_outer,
+												 List *partitioned_rels);
 extern GroupResultPath *create_group_result_path(PlannerInfo *root,
-						 RelOptInfo *rel,
-						 PathTarget *target,
-						 List *havingqual);
+												 RelOptInfo *rel,
+												 PathTarget *target,
+												 List *havingqual);
 extern MaterialPath *create_material_path(RelOptInfo *rel, Path *subpath);
 extern UniquePath *create_unique_path(PlannerInfo *root, RelOptInfo *rel,
-				   Path *subpath, SpecialJoinInfo *sjinfo);
+									  Path *subpath, SpecialJoinInfo *sjinfo);
 extern GatherPath *create_gather_path(PlannerInfo *root,
-				   RelOptInfo *rel, Path *subpath, PathTarget *target,
-				   Relids required_outer, double *rows);
+									  RelOptInfo *rel, Path *subpath, PathTarget *target,
+									  Relids required_outer, double *rows);
 extern GatherMergePath *create_gather_merge_path(PlannerInfo *root,
-						 RelOptInfo *rel,
-						 Path *subpath,
-						 PathTarget *target,
-						 List *pathkeys,
-						 Relids required_outer,
-						 double *rows);
+												 RelOptInfo *rel,
+												 Path *subpath,
+												 PathTarget *target,
+												 List *pathkeys,
+												 Relids required_outer,
+												 double *rows);
 extern SubqueryScanPath *create_subqueryscan_path(PlannerInfo *root,
-						 RelOptInfo *rel, Path *subpath,
-						 List *pathkeys, Relids required_outer);
+												  RelOptInfo *rel, Path *subpath,
+												  List *pathkeys, Relids required_outer);
 extern Path *create_functionscan_path(PlannerInfo *root, RelOptInfo *rel,
-						 List *pathkeys, Relids required_outer);
+									  List *pathkeys, Relids required_outer);
 extern Path *create_tablexprscan_path(PlannerInfo *root, RelOptInfo *rel,
-						 List *pathkeys, Relids required_outer);
+									  List *pathkeys, Relids required_outer);
 extern Path *create_valuesscan_path(PlannerInfo *root, RelOptInfo *rel,
-					   Relids required_outer);
+									Relids required_outer);
 extern Path *create_tablefuncscan_path(PlannerInfo *root, RelOptInfo *rel,
-						  Relids required_outer);
+									   Relids required_outer);
 extern Path *create_ctescan_path(PlannerInfo *root, RelOptInfo *rel,
-					Relids required_outer);
+								 Relids required_outer);
 extern Path *create_namedtuplestorescan_path(PlannerInfo *root, RelOptInfo *rel,
-								Relids required_outer);
+											 Relids required_outer);
 extern Path *create_resultscan_path(PlannerInfo *root, RelOptInfo *rel,
-					   Relids required_outer);
+									Relids required_outer);
 extern Path *create_worktablescan_path(PlannerInfo *root, RelOptInfo *rel,
-						  Relids required_outer);
+									   Relids required_outer);
 extern ForeignPath *create_foreignscan_path(PlannerInfo *root, RelOptInfo *rel,
-						PathTarget *target,
-						double rows, Cost startup_cost, Cost total_cost,
-						List *pathkeys,
-						Relids required_outer,
-						Path *fdw_outerpath,
-						List *fdw_private);
+											PathTarget *target,
+											double rows, Cost startup_cost, Cost total_cost,
+											List *pathkeys,
+											Relids required_outer,
+											Path *fdw_outerpath,
+											List *fdw_private);
 extern ForeignPath *create_foreign_join_path(PlannerInfo *root, RelOptInfo *rel,
-						 PathTarget *target,
-						 double rows, Cost startup_cost, Cost total_cost,
-						 List *pathkeys,
-						 Relids required_outer,
-						 Path *fdw_outerpath,
-						 List *fdw_private);
+											 PathTarget *target,
+											 double rows, Cost startup_cost, Cost total_cost,
+											 List *pathkeys,
+											 Relids required_outer,
+											 Path *fdw_outerpath,
+											 List *fdw_private);
 extern ForeignPath *create_foreign_upper_path(PlannerInfo *root, RelOptInfo *rel,
-						  PathTarget *target,
-						  double rows, Cost startup_cost, Cost total_cost,
-						  List *pathkeys,
-						  Path *fdw_outerpath,
-						  List *fdw_private);
+											  PathTarget *target,
+											  double rows, Cost startup_cost, Cost total_cost,
+											  List *pathkeys,
+											  Path *fdw_outerpath,
+											  List *fdw_private);
 
 extern Relids calc_nestloop_required_outer(Relids outerrelids,
-							 Relids outer_paramrels,
-							 Relids innerrelids,
-							 Relids inner_paramrels);
+										   Relids outer_paramrels,
+										   Relids innerrelids,
+										   Relids inner_paramrels);
 extern Relids calc_non_nestloop_required_outer(Path *outer_path, Path *inner_path);
 
 extern NestPath *create_nestloop_path(PlannerInfo *root,
-					 RelOptInfo *joinrel,
-					 JoinType jointype,
-					 JoinCostWorkspace *workspace,
-					 JoinPathExtraData *extra,
-					 Path *outer_path,
-					 Path *inner_path,
-					 List *restrict_clauses,
-					 List *pathkeys,
-					 Relids required_outer);
+									  RelOptInfo *joinrel,
+									  JoinType jointype,
+									  JoinCostWorkspace *workspace,
+									  JoinPathExtraData *extra,
+									  Path *outer_path,
+									  Path *inner_path,
+									  List *restrict_clauses,
+									  List *pathkeys,
+									  Relids required_outer);
 
 extern MergePath *create_mergejoin_path(PlannerInfo *root,
-					  RelOptInfo *joinrel,
-					  JoinType jointype,
-					  JoinCostWorkspace *workspace,
-					  JoinPathExtraData *extra,
-					  Path *outer_path,
-					  Path *inner_path,
-					  List *restrict_clauses,
-					  List *pathkeys,
-					  Relids required_outer,
-					  List *mergeclauses,
-					  List *outersortkeys,
-					  List *innersortkeys);
+										RelOptInfo *joinrel,
+										JoinType jointype,
+										JoinCostWorkspace *workspace,
+										JoinPathExtraData *extra,
+										Path *outer_path,
+										Path *inner_path,
+										List *restrict_clauses,
+										List *pathkeys,
+										Relids required_outer,
+										List *mergeclauses,
+										List *outersortkeys,
+										List *innersortkeys);
 
 extern HashPath *create_hashjoin_path(PlannerInfo *root,
-					 RelOptInfo *joinrel,
-					 JoinType jointype,
-					 JoinCostWorkspace *workspace,
-					 JoinPathExtraData *extra,
-					 Path *outer_path,
-					 Path *inner_path,
-					 bool parallel_hash,
-					 List *restrict_clauses,
-					 Relids required_outer,
-					 List *hashclauses);
+									  RelOptInfo *joinrel,
+									  JoinType jointype,
+									  JoinCostWorkspace *workspace,
+									  JoinPathExtraData *extra,
+									  Path *outer_path,
+									  Path *inner_path,
+									  bool parallel_hash,
+									  List *restrict_clauses,
+									  Relids required_outer,
+									  List *hashclauses);
 
 extern ProjectionPath *create_projection_path(PlannerInfo *root,
-					   RelOptInfo *rel,
-					   Path *subpath,
-					   PathTarget *target);
+											  RelOptInfo *rel,
+											  Path *subpath,
+											  PathTarget *target);
 extern Path *apply_projection_to_path(PlannerInfo *root,
-						 RelOptInfo *rel,
-						 Path *path,
-						 PathTarget *target);
+									  RelOptInfo *rel,
+									  Path *path,
+									  PathTarget *target);
 extern ProjectSetPath *create_set_projection_path(PlannerInfo *root,
-						   RelOptInfo *rel,
-						   Path *subpath,
-						   PathTarget *target);
+												  RelOptInfo *rel,
+												  Path *subpath,
+												  PathTarget *target);
 extern SortPath *create_sort_path(PlannerInfo *root,
-				 RelOptInfo *rel,
-				 Path *subpath,
-				 List *pathkeys,
-				 double limit_tuples);
+								  RelOptInfo *rel,
+								  Path *subpath,
+								  List *pathkeys,
+								  double limit_tuples);
 extern GroupPath *create_group_path(PlannerInfo *root,
-				  RelOptInfo *rel,
-				  Path *subpath,
-				  List *groupClause,
-				  List *qual,
-				  double numGroups);
+									RelOptInfo *rel,
+									Path *subpath,
+									List *groupClause,
+									List *qual,
+									double numGroups);
 extern UpperUniquePath *create_upper_unique_path(PlannerInfo *root,
-						 RelOptInfo *rel,
-						 Path *subpath,
-						 int numCols,
-						 double numGroups);
+												 RelOptInfo *rel,
+												 Path *subpath,
+												 int numCols,
+												 double numGroups);
 extern AggPath *create_agg_path(PlannerInfo *root,
-				RelOptInfo *rel,
-				Path *subpath,
-				PathTarget *target,
-				AggStrategy aggstrategy,
-				AggSplit aggsplit,
-				List *groupClause,
-				List *qual,
-				const AggClauseCosts *aggcosts,
-				double numGroups);
+								RelOptInfo *rel,
+								Path *subpath,
+								PathTarget *target,
+								AggStrategy aggstrategy,
+								AggSplit aggsplit,
+								List *groupClause,
+								List *qual,
+								const AggClauseCosts *aggcosts,
+								double numGroups);
 extern GroupingSetsPath *create_groupingsets_path(PlannerInfo *root,
-						 RelOptInfo *rel,
-						 Path *subpath,
-						 List *having_qual,
-						 AggStrategy aggstrategy,
-						 List *rollups,
-						 const AggClauseCosts *agg_costs,
-						 double numGroups);
+												  RelOptInfo *rel,
+												  Path *subpath,
+												  List *having_qual,
+												  AggStrategy aggstrategy,
+												  List *rollups,
+												  const AggClauseCosts *agg_costs,
+												  double numGroups);
 extern MinMaxAggPath *create_minmaxagg_path(PlannerInfo *root,
-					  RelOptInfo *rel,
-					  PathTarget *target,
-					  List *mmaggregates,
-					  List *quals);
+											RelOptInfo *rel,
+											PathTarget *target,
+											List *mmaggregates,
+											List *quals);
 extern WindowAggPath *create_windowagg_path(PlannerInfo *root,
-					  RelOptInfo *rel,
-					  Path *subpath,
-					  PathTarget *target,
-					  List *windowFuncs,
-					  WindowClause *winclause);
+											RelOptInfo *rel,
+											Path *subpath,
+											PathTarget *target,
+											List *windowFuncs,
+											WindowClause *winclause);
 extern SetOpPath *create_setop_path(PlannerInfo *root,
-				  RelOptInfo *rel,
-				  Path *subpath,
-				  SetOpCmd cmd,
-				  SetOpStrategy strategy,
-				  List *distinctList,
-				  AttrNumber flagColIdx,
-				  int firstFlag,
-				  double numGroups,
-				  double outputRows);
+									RelOptInfo *rel,
+									Path *subpath,
+									SetOpCmd cmd,
+									SetOpStrategy strategy,
+									List *distinctList,
+									AttrNumber flagColIdx,
+									int firstFlag,
+									double numGroups,
+									double outputRows);
 extern RecursiveUnionPath *create_recursiveunion_path(PlannerInfo *root,
-						   RelOptInfo *rel,
-						   Path *leftpath,
-						   Path *rightpath,
-						   PathTarget *target,
-						   List *distinctList,
-						   int wtParam,
-						   double numGroups);
+													  RelOptInfo *rel,
+													  Path *leftpath,
+													  Path *rightpath,
+													  PathTarget *target,
+													  List *distinctList,
+													  int wtParam,
+													  double numGroups);
 extern LockRowsPath *create_lockrows_path(PlannerInfo *root, RelOptInfo *rel,
-					 Path *subpath, List *rowMarks, int epqParam);
+										  Path *subpath, List *rowMarks, int epqParam);
 extern ModifyTablePath *create_modifytable_path(PlannerInfo *root,
-						RelOptInfo *rel,
-						CmdType operation, bool canSetTag,
-						Index nominalRelation, Index rootRelation,
-						bool partColsUpdated,
-						List *resultRelations, List *subpaths,
-						List *subroots,
-						List *withCheckOptionLists, List *returningLists,
-						List *rowMarks, OnConflictExpr *onconflict,
-						int epqParam);
+												RelOptInfo *rel,
+												CmdType operation, bool canSetTag,
+												Index nominalRelation, Index rootRelation,
+												bool partColsUpdated,
+												List *resultRelations, List *subpaths,
+												List *subroots,
+												List *withCheckOptionLists, List *returningLists,
+												List *rowMarks, OnConflictExpr *onconflict,
+												int epqParam);
 extern LimitPath *create_limit_path(PlannerInfo *root, RelOptInfo *rel,
-				  Path *subpath,
-				  Node *limitOffset, Node *limitCount,
-				  int64 offset_est, int64 count_est);
+									Path *subpath,
+									Node *limitOffset, Node *limitCount,
+									int64 offset_est, int64 count_est);
 extern void adjust_limit_rows_costs(double *rows,
-						Cost *startup_cost, Cost *total_cost,
-						int64 offset_est, int64 count_est);
+									Cost *startup_cost, Cost *total_cost,
+									int64 offset_est, int64 count_est);
 
 extern Path *reparameterize_path(PlannerInfo *root, Path *path,
-					Relids required_outer,
-					double loop_count);
+								 Relids required_outer,
+								 double loop_count);
 extern Path *reparameterize_path_by_child(PlannerInfo *root, Path *path,
-							 RelOptInfo *child_rel);
+										  RelOptInfo *child_rel);
 
 /*
  * prototypes for relnode.c
@@ -282,39 +282,39 @@ extern void setup_simple_rel_arrays(PlannerInfo *root);
 extern void setup_append_rel_array(PlannerInfo *root);
 extern void expand_planner_arrays(PlannerInfo *root, int add_size);
 extern RelOptInfo *build_simple_rel(PlannerInfo *root, int relid,
-				 RelOptInfo *parent);
+									RelOptInfo *parent);
 extern RelOptInfo *find_base_rel(PlannerInfo *root, int relid);
 extern RelOptInfo *find_join_rel(PlannerInfo *root, Relids relids);
 extern RelOptInfo *build_join_rel(PlannerInfo *root,
-			   Relids joinrelids,
-			   RelOptInfo *outer_rel,
-			   RelOptInfo *inner_rel,
-			   SpecialJoinInfo *sjinfo,
-			   List **restrictlist_ptr);
+								  Relids joinrelids,
+								  RelOptInfo *outer_rel,
+								  RelOptInfo *inner_rel,
+								  SpecialJoinInfo *sjinfo,
+								  List **restrictlist_ptr);
 extern Relids min_join_parameterization(PlannerInfo *root,
-						  Relids joinrelids,
-						  RelOptInfo *outer_rel,
-						  RelOptInfo *inner_rel);
+										Relids joinrelids,
+										RelOptInfo *outer_rel,
+										RelOptInfo *inner_rel);
 extern RelOptInfo *fetch_upper_rel(PlannerInfo *root, UpperRelationKind kind,
-				Relids relids);
+								   Relids relids);
 extern Relids find_childrel_parents(PlannerInfo *root, RelOptInfo *rel);
 extern ParamPathInfo *get_baserel_parampathinfo(PlannerInfo *root,
-						  RelOptInfo *baserel,
-						  Relids required_outer);
+												RelOptInfo *baserel,
+												Relids required_outer);
 extern ParamPathInfo *get_joinrel_parampathinfo(PlannerInfo *root,
-						  RelOptInfo *joinrel,
-						  Path *outer_path,
-						  Path *inner_path,
-						  SpecialJoinInfo *sjinfo,
-						  Relids required_outer,
-						  List **restrict_clauses);
+												RelOptInfo *joinrel,
+												Path *outer_path,
+												Path *inner_path,
+												SpecialJoinInfo *sjinfo,
+												Relids required_outer,
+												List **restrict_clauses);
 extern ParamPathInfo *get_appendrel_parampathinfo(RelOptInfo *appendrel,
-							Relids required_outer);
+												  Relids required_outer);
 extern ParamPathInfo *find_param_path_info(RelOptInfo *rel,
-					 Relids required_outer);
+										   Relids required_outer);
 extern RelOptInfo *build_child_join_rel(PlannerInfo *root,
-					 RelOptInfo *outer_rel, RelOptInfo *inner_rel,
-					 RelOptInfo *parent_joinrel, List *restrictlist,
-					 SpecialJoinInfo *sjinfo, JoinType jointype);
+										RelOptInfo *outer_rel, RelOptInfo *inner_rel,
+										RelOptInfo *parent_joinrel, List *restrictlist,
+										SpecialJoinInfo *sjinfo, JoinType jointype);
 
 #endif							/* PATHNODE_H */
diff --git a/src/include/optimizer/paths.h b/src/include/optimizer/paths.h
index 0e858097c875..7345137d1da4 100644
--- a/src/include/optimizer/paths.h
+++ b/src/include/optimizer/paths.h
@@ -50,16 +50,16 @@ extern PGDLLIMPORT join_search_hook_type join_search_hook;
 
 extern RelOptInfo *make_one_rel(PlannerInfo *root, List *joinlist);
 extern RelOptInfo *standard_join_search(PlannerInfo *root, int levels_needed,
-					 List *initial_rels);
+										List *initial_rels);
 
 extern void generate_gather_paths(PlannerInfo *root, RelOptInfo *rel,
-					  bool override_rows);
-extern int compute_parallel_worker(RelOptInfo *rel, double heap_pages,
-						double index_pages, int max_workers);
+								  bool override_rows);
+extern int	compute_parallel_worker(RelOptInfo *rel, double heap_pages,
+									double index_pages, int max_workers);
 extern void create_partial_bitmap_paths(PlannerInfo *root, RelOptInfo *rel,
-							Path *bitmapqual);
+										Path *bitmapqual);
 extern void generate_partitionwise_join_paths(PlannerInfo *root,
-								  RelOptInfo *rel);
+											  RelOptInfo *rel);
 
 #ifdef OPTIMIZER_DEBUG
 extern void debug_print_rel(PlannerInfo *root, RelOptInfo *rel);
@@ -71,12 +71,12 @@ extern void debug_print_rel(PlannerInfo *root, RelOptInfo *rel);
  */
 extern void create_index_paths(PlannerInfo *root, RelOptInfo *rel);
 extern bool relation_has_unique_index_for(PlannerInfo *root, RelOptInfo *rel,
-							  List *restrictlist,
-							  List *exprlist, List *oprlist);
+										  List *restrictlist,
+										  List *exprlist, List *oprlist);
 extern bool indexcol_is_bool_constant_for_query(IndexOptInfo *index,
-									int indexcol);
+												int indexcol);
 extern bool match_index_to_operand(Node *operand, int indexcol,
-					   IndexOptInfo *index);
+								   IndexOptInfo *index);
 extern void check_index_predicates(PlannerInfo *root, RelOptInfo *rel);
 
 /*
@@ -90,9 +90,9 @@ extern void create_tidscan_paths(PlannerInfo *root, RelOptInfo *rel);
  *	   routines to create join paths
  */
 extern void add_paths_to_joinrel(PlannerInfo *root, RelOptInfo *joinrel,
-					 RelOptInfo *outerrel, RelOptInfo *innerrel,
-					 JoinType jointype, SpecialJoinInfo *sjinfo,
-					 List *restrictlist);
+								 RelOptInfo *outerrel, RelOptInfo *innerrel,
+								 JoinType jointype, SpecialJoinInfo *sjinfo,
+								 List *restrictlist);
 
 /*
  * joinrels.c
@@ -100,15 +100,15 @@ extern void add_paths_to_joinrel(PlannerInfo *root, RelOptInfo *joinrel,
  */
 extern void join_search_one_level(PlannerInfo *root, int level);
 extern RelOptInfo *make_join_rel(PlannerInfo *root,
-			  RelOptInfo *rel1, RelOptInfo *rel2);
+								 RelOptInfo *rel1, RelOptInfo *rel2);
 extern bool have_join_order_restriction(PlannerInfo *root,
-							RelOptInfo *rel1, RelOptInfo *rel2);
+										RelOptInfo *rel1, RelOptInfo *rel2);
 extern bool have_dangerous_phv(PlannerInfo *root,
-				   Relids outer_relids, Relids inner_params);
+							   Relids outer_relids, Relids inner_params);
 extern void mark_dummy_rel(RelOptInfo *rel);
 extern bool have_partkey_equi_join(RelOptInfo *joinrel,
-					   RelOptInfo *rel1, RelOptInfo *rel2,
-					   JoinType jointype, List *restrictlist);
+								   RelOptInfo *rel1, RelOptInfo *rel2,
+								   JoinType jointype, List *restrictlist);
 
 /*
  * equivclass.c
@@ -121,53 +121,53 @@ typedef bool (*ec_matches_callback_type) (PlannerInfo *root,
 										  void *arg);
 
 extern bool process_equivalence(PlannerInfo *root,
-					RestrictInfo **p_restrictinfo,
-					bool below_outer_join);
+								RestrictInfo **p_restrictinfo,
+								bool below_outer_join);
 extern Expr *canonicalize_ec_expression(Expr *expr,
-						   Oid req_type, Oid req_collation);
+										Oid req_type, Oid req_collation);
 extern void reconsider_outer_join_clauses(PlannerInfo *root);
 extern EquivalenceClass *get_eclass_for_sort_expr(PlannerInfo *root,
-						 Expr *expr,
-						 Relids nullable_relids,
-						 List *opfamilies,
-						 Oid opcintype,
-						 Oid collation,
-						 Index sortref,
-						 Relids rel,
-						 bool create_it);
+												  Expr *expr,
+												  Relids nullable_relids,
+												  List *opfamilies,
+												  Oid opcintype,
+												  Oid collation,
+												  Index sortref,
+												  Relids rel,
+												  bool create_it);
 extern void generate_base_implied_equalities(PlannerInfo *root);
 extern List *generate_join_implied_equalities(PlannerInfo *root,
-								 Relids join_relids,
-								 Relids outer_relids,
-								 RelOptInfo *inner_rel);
+											  Relids join_relids,
+											  Relids outer_relids,
+											  RelOptInfo *inner_rel);
 extern List *generate_join_implied_equalities_for_ecs(PlannerInfo *root,
-										 List *eclasses,
-										 Relids join_relids,
-										 Relids outer_relids,
-										 RelOptInfo *inner_rel);
+													  List *eclasses,
+													  Relids join_relids,
+													  Relids outer_relids,
+													  RelOptInfo *inner_rel);
 extern bool exprs_known_equal(PlannerInfo *root, Node *item1, Node *item2);
 extern EquivalenceClass *match_eclasses_to_foreign_key_col(PlannerInfo *root,
-								  ForeignKeyOptInfo *fkinfo,
-								  int colno);
+														   ForeignKeyOptInfo *fkinfo,
+														   int colno);
 extern void add_child_rel_equivalences(PlannerInfo *root,
-						   AppendRelInfo *appinfo,
-						   RelOptInfo *parent_rel,
-						   RelOptInfo *child_rel);
+									   AppendRelInfo *appinfo,
+									   RelOptInfo *parent_rel,
+									   RelOptInfo *child_rel);
 extern List *generate_implied_equalities_for_column(PlannerInfo *root,
-									   RelOptInfo *rel,
-									   ec_matches_callback_type callback,
-									   void *callback_arg,
-									   Relids prohibited_rels);
+													RelOptInfo *rel,
+													ec_matches_callback_type callback,
+													void *callback_arg,
+													Relids prohibited_rels);
 extern bool have_relevant_eclass_joinclause(PlannerInfo *root,
-								RelOptInfo *rel1, RelOptInfo *rel2);
+											RelOptInfo *rel1, RelOptInfo *rel2);
 extern bool has_relevant_eclass_joinclause(PlannerInfo *root,
-							   RelOptInfo *rel1);
+										   RelOptInfo *rel1);
 extern bool eclass_useful_for_merging(PlannerInfo *root,
-						  EquivalenceClass *eclass,
-						  RelOptInfo *rel);
+									  EquivalenceClass *eclass,
+									  RelOptInfo *rel);
 extern bool is_redundant_derived_clause(RestrictInfo *rinfo, List *clauselist);
 extern bool is_redundant_with_indexclauses(RestrictInfo *rinfo,
-							   List *indexclauses);
+										   List *indexclauses);
 
 /*
  * pathkeys.c
@@ -184,55 +184,55 @@ typedef enum
 extern PathKeysComparison compare_pathkeys(List *keys1, List *keys2);
 extern bool pathkeys_contained_in(List *keys1, List *keys2);
 extern Path *get_cheapest_path_for_pathkeys(List *paths, List *pathkeys,
-							   Relids required_outer,
-							   CostSelector cost_criterion,
-							   bool require_parallel_safe);
+											Relids required_outer,
+											CostSelector cost_criterion,
+											bool require_parallel_safe);
 extern Path *get_cheapest_fractional_path_for_pathkeys(List *paths,
-										  List *pathkeys,
-										  Relids required_outer,
-										  double fraction);
+													   List *pathkeys,
+													   Relids required_outer,
+													   double fraction);
 extern Path *get_cheapest_parallel_safe_total_inner(List *paths);
 extern List *build_index_pathkeys(PlannerInfo *root, IndexOptInfo *index,
-					 ScanDirection scandir);
+								  ScanDirection scandir);
 extern List *build_partition_pathkeys(PlannerInfo *root, RelOptInfo *partrel,
-						 ScanDirection scandir, bool *partialkeys);
+									  ScanDirection scandir, bool *partialkeys);
 extern List *build_expression_pathkey(PlannerInfo *root, Expr *expr,
-						 Relids nullable_relids, Oid opno,
-						 Relids rel, bool create_it);
+									  Relids nullable_relids, Oid opno,
+									  Relids rel, bool create_it);
 extern List *convert_subquery_pathkeys(PlannerInfo *root, RelOptInfo *rel,
-						  List *subquery_pathkeys,
-						  List *subquery_tlist);
+									   List *subquery_pathkeys,
+									   List *subquery_tlist);
 extern List *build_join_pathkeys(PlannerInfo *root,
-					RelOptInfo *joinrel,
-					JoinType jointype,
-					List *outer_pathkeys);
+								 RelOptInfo *joinrel,
+								 JoinType jointype,
+								 List *outer_pathkeys);
 extern List *make_pathkeys_for_sortclauses(PlannerInfo *root,
-							  List *sortclauses,
-							  List *tlist);
+										   List *sortclauses,
+										   List *tlist);
 extern void initialize_mergeclause_eclasses(PlannerInfo *root,
-								RestrictInfo *restrictinfo);
+											RestrictInfo *restrictinfo);
 extern void update_mergeclause_eclasses(PlannerInfo *root,
-							RestrictInfo *restrictinfo);
+										RestrictInfo *restrictinfo);
 extern List *find_mergeclauses_for_outer_pathkeys(PlannerInfo *root,
-									 List *pathkeys,
-									 List *restrictinfos);
+												  List *pathkeys,
+												  List *restrictinfos);
 extern List *select_outer_pathkeys_for_merge(PlannerInfo *root,
-								List *mergeclauses,
-								RelOptInfo *joinrel);
+											 List *mergeclauses,
+											 RelOptInfo *joinrel);
 extern List *make_inner_pathkeys_for_merge(PlannerInfo *root,
-							  List *mergeclauses,
-							  List *outer_pathkeys);
+										   List *mergeclauses,
+										   List *outer_pathkeys);
 extern List *trim_mergeclauses_for_inner_pathkeys(PlannerInfo *root,
-									 List *mergeclauses,
-									 List *pathkeys);
+												  List *mergeclauses,
+												  List *pathkeys);
 extern List *truncate_useless_pathkeys(PlannerInfo *root,
-						  RelOptInfo *rel,
-						  List *pathkeys);
+									   RelOptInfo *rel,
+									   List *pathkeys);
 extern bool has_useful_pathkeys(PlannerInfo *root, RelOptInfo *rel);
 extern PathKey *make_canonical_pathkey(PlannerInfo *root,
-					   EquivalenceClass *eclass, Oid opfamily,
-					   int strategy, bool nulls_first);
+									   EquivalenceClass *eclass, Oid opfamily,
+									   int strategy, bool nulls_first);
 extern void add_paths_to_append_rel(PlannerInfo *root, RelOptInfo *rel,
-						List *live_childrels);
+									List *live_childrels);
 
 #endif							/* PATHS_H */
diff --git a/src/include/optimizer/placeholder.h b/src/include/optimizer/placeholder.h
index 86a1e5d039d4..be27751974f8 100644
--- a/src/include/optimizer/placeholder.h
+++ b/src/include/optimizer/placeholder.h
@@ -18,17 +18,17 @@
 
 
 extern PlaceHolderVar *make_placeholder_expr(PlannerInfo *root, Expr *expr,
-					  Relids phrels);
+											 Relids phrels);
 extern PlaceHolderInfo *find_placeholder_info(PlannerInfo *root,
-					  PlaceHolderVar *phv, bool create_new_ph);
+											  PlaceHolderVar *phv, bool create_new_ph);
 extern void find_placeholders_in_jointree(PlannerInfo *root);
 extern void update_placeholder_eval_levels(PlannerInfo *root,
-							   SpecialJoinInfo *new_sjinfo);
+										   SpecialJoinInfo *new_sjinfo);
 extern void fix_placeholder_input_needed_levels(PlannerInfo *root);
 extern void add_placeholders_to_base_rels(PlannerInfo *root);
 extern void add_placeholders_to_joinrel(PlannerInfo *root, RelOptInfo *joinrel,
-							RelOptInfo *outer_rel, RelOptInfo *inner_rel);
+										RelOptInfo *outer_rel, RelOptInfo *inner_rel);
 extern void add_placeholders_to_child_joinrel(PlannerInfo *root,
-								  RelOptInfo *childrel, RelOptInfo *parentrel);
+											  RelOptInfo *childrel, RelOptInfo *parentrel);
 
 #endif							/* PLACEHOLDER_H */
diff --git a/src/include/optimizer/plancat.h b/src/include/optimizer/plancat.h
index 3254613e6e4c..bbb27f877982 100644
--- a/src/include/optimizer/plancat.h
+++ b/src/include/optimizer/plancat.h
@@ -26,47 +26,47 @@ extern PGDLLIMPORT get_relation_info_hook_type get_relation_info_hook;
 
 
 extern void get_relation_info(PlannerInfo *root, Oid relationObjectId,
-				  bool inhparent, RelOptInfo *rel);
+							  bool inhparent, RelOptInfo *rel);
 
 extern List *infer_arbiter_indexes(PlannerInfo *root);
 
 extern void estimate_rel_size(Relation rel, int32 *attr_widths,
-				  BlockNumber *pages, double *tuples, double *allvisfrac);
+							  BlockNumber *pages, double *tuples, double *allvisfrac);
 
 extern int32 get_rel_data_width(Relation rel, int32 *attr_widths);
 extern int32 get_relation_data_width(Oid relid, int32 *attr_widths);
 
 extern bool relation_excluded_by_constraints(PlannerInfo *root,
-								 RelOptInfo *rel, RangeTblEntry *rte);
+											 RelOptInfo *rel, RangeTblEntry *rte);
 
 extern List *build_physical_tlist(PlannerInfo *root, RelOptInfo *rel);
 
 extern bool has_unique_index(RelOptInfo *rel, AttrNumber attno);
 
 extern Selectivity restriction_selectivity(PlannerInfo *root,
-						Oid operatorid,
-						List *args,
-						Oid inputcollid,
-						int varRelid);
+										   Oid operatorid,
+										   List *args,
+										   Oid inputcollid,
+										   int varRelid);
 
 extern Selectivity join_selectivity(PlannerInfo *root,
-				 Oid operatorid,
-				 List *args,
-				 Oid inputcollid,
-				 JoinType jointype,
-				 SpecialJoinInfo *sjinfo);
+									Oid operatorid,
+									List *args,
+									Oid inputcollid,
+									JoinType jointype,
+									SpecialJoinInfo *sjinfo);
 
 extern Selectivity function_selectivity(PlannerInfo *root,
-					 Oid funcid,
-					 List *args,
-					 Oid inputcollid,
-					 bool is_join,
-					 int varRelid,
-					 JoinType jointype,
-					 SpecialJoinInfo *sjinfo);
+										Oid funcid,
+										List *args,
+										Oid inputcollid,
+										bool is_join,
+										int varRelid,
+										JoinType jointype,
+										SpecialJoinInfo *sjinfo);
 
 extern void add_function_cost(PlannerInfo *root, Oid funcid, Node *node,
-				  QualCost *cost);
+							  QualCost *cost);
 
 extern double get_function_rows(PlannerInfo *root, Oid funcid, Node *node);
 
diff --git a/src/include/optimizer/planmain.h b/src/include/optimizer/planmain.h
index 6d10bf3ee881..e7aaddd50d60 100644
--- a/src/include/optimizer/planmain.h
+++ b/src/include/optimizer/planmain.h
@@ -28,7 +28,7 @@ typedef void (*query_pathkeys_callback) (PlannerInfo *root, void *extra);
  * prototypes for plan/planmain.c
  */
 extern RelOptInfo *query_planner(PlannerInfo *root,
-			  query_pathkeys_callback qp_callback, void *qp_extra);
+								 query_pathkeys_callback qp_callback, void *qp_extra);
 
 /*
  * prototypes for plan/planagg.c
@@ -40,11 +40,11 @@ extern void preprocess_minmax_aggregates(PlannerInfo *root);
  */
 extern Plan *create_plan(PlannerInfo *root, Path *best_path);
 extern ForeignScan *make_foreignscan(List *qptlist, List *qpqual,
-				 Index scanrelid, List *fdw_exprs, List *fdw_private,
-				 List *fdw_scan_tlist, List *fdw_recheck_quals,
-				 Plan *outer_plan);
+									 Index scanrelid, List *fdw_exprs, List *fdw_private,
+									 List *fdw_scan_tlist, List *fdw_recheck_quals,
+									 Plan *outer_plan);
 extern Plan *change_plan_targetlist(Plan *subplan, List *tlist,
-					   bool tlist_parallel_safe);
+									bool tlist_parallel_safe);
 extern Plan *materialize_finished_plan(Plan *subplan);
 extern bool is_projection_capable_path(Path *path);
 extern bool is_projection_capable_plan(Plan *plan);
@@ -52,10 +52,10 @@ extern bool is_projection_capable_plan(Plan *plan);
 /* External use of these functions is deprecated: */
 extern Sort *make_sort_from_sortclauses(List *sortcls, Plan *lefttree);
 extern Agg *make_agg(List *tlist, List *qual,
-		 AggStrategy aggstrategy, AggSplit aggsplit,
-		 int numGroupCols, AttrNumber *grpColIdx, Oid *grpOperators, Oid *grpCollations,
-		 List *groupingSets, List *chain,
-		 double dNumGroups, Plan *lefttree);
+					 AggStrategy aggstrategy, AggSplit aggsplit,
+					 int numGroupCols, AttrNumber *grpColIdx, Oid *grpOperators, Oid *grpCollations,
+					 List *groupingSets, List *chain,
+					 double dNumGroups, Plan *lefttree);
 extern Limit *make_limit(Plan *lefttree, Node *limitOffset, Node *limitCount);
 
 /*
@@ -68,29 +68,29 @@ extern void add_base_rels_to_query(PlannerInfo *root, Node *jtnode);
 extern void add_other_rels_to_query(PlannerInfo *root);
 extern void build_base_rel_tlists(PlannerInfo *root, List *final_tlist);
 extern void add_vars_to_targetlist(PlannerInfo *root, List *vars,
-					   Relids where_needed, bool create_new_ph);
+								   Relids where_needed, bool create_new_ph);
 extern void find_lateral_references(PlannerInfo *root);
 extern void create_lateral_join_info(PlannerInfo *root);
 extern List *deconstruct_jointree(PlannerInfo *root);
 extern void distribute_restrictinfo_to_rels(PlannerInfo *root,
-								RestrictInfo *restrictinfo);
+											RestrictInfo *restrictinfo);
 extern void process_implied_equality(PlannerInfo *root,
-						 Oid opno,
-						 Oid collation,
-						 Expr *item1,
-						 Expr *item2,
-						 Relids qualscope,
-						 Relids nullable_relids,
-						 Index security_level,
-						 bool below_outer_join,
-						 bool both_const);
+									 Oid opno,
+									 Oid collation,
+									 Expr *item1,
+									 Expr *item2,
+									 Relids qualscope,
+									 Relids nullable_relids,
+									 Index security_level,
+									 bool below_outer_join,
+									 bool both_const);
 extern RestrictInfo *build_implied_join_equality(Oid opno,
-							Oid collation,
-							Expr *item1,
-							Expr *item2,
-							Relids qualscope,
-							Relids nullable_relids,
-							Index security_level);
+												 Oid collation,
+												 Expr *item1,
+												 Expr *item2,
+												 Relids qualscope,
+												 Relids nullable_relids,
+												 Index security_level);
 extern void match_foreign_keys_to_quals(PlannerInfo *root);
 
 /*
@@ -101,8 +101,8 @@ extern void reduce_unique_semijoins(PlannerInfo *root);
 extern bool query_supports_distinctness(Query *query);
 extern bool query_is_distinct_for(Query *query, List *colnos, List *opids);
 extern bool innerrel_is_unique(PlannerInfo *root,
-				   Relids joinrelids, Relids outerrelids, RelOptInfo *innerrel,
-				   JoinType jointype, List *restrictlist, bool force_cache);
+							   Relids joinrelids, Relids outerrelids, RelOptInfo *innerrel,
+							   JoinType jointype, List *restrictlist, bool force_cache);
 
 /*
  * prototypes for plan/setrefs.c
diff --git a/src/include/optimizer/planner.h b/src/include/optimizer/planner.h
index 830557e4c218..8d30b9421506 100644
--- a/src/include/optimizer/planner.h
+++ b/src/include/optimizer/planner.h
@@ -38,21 +38,21 @@ extern PGDLLIMPORT create_upper_paths_hook_type create_upper_paths_hook;
 
 
 extern PlannedStmt *standard_planner(Query *parse, int cursorOptions,
-				 ParamListInfo boundParams);
+									 ParamListInfo boundParams);
 
 extern PlannerInfo *subquery_planner(PlannerGlobal *glob, Query *parse,
-				 PlannerInfo *parent_root,
-				 bool hasRecursion, double tuple_fraction);
+									 PlannerInfo *parent_root,
+									 bool hasRecursion, double tuple_fraction);
 
 extern RowMarkType select_rowmark_type(RangeTblEntry *rte,
-					LockClauseStrength strength);
+									   LockClauseStrength strength);
 
 extern bool limit_needed(Query *parse);
 
 extern void mark_partial_aggref(Aggref *agg, AggSplit aggsplit);
 
 extern Path *get_cheapest_fractional_path(RelOptInfo *rel,
-							 double tuple_fraction);
+										  double tuple_fraction);
 
 extern Expr *preprocess_phv_expression(PlannerInfo *root, Expr *expr);
 
diff --git a/src/include/optimizer/restrictinfo.h b/src/include/optimizer/restrictinfo.h
index c34876014ae7..0fe92ad42824 100644
--- a/src/include/optimizer/restrictinfo.h
+++ b/src/include/optimizer/restrictinfo.h
@@ -22,27 +22,27 @@
 	make_restrictinfo(clause, true, false, false, 0, NULL, NULL, NULL)
 
 extern RestrictInfo *make_restrictinfo(Expr *clause,
-				  bool is_pushed_down,
-				  bool outerjoin_delayed,
-				  bool pseudoconstant,
-				  Index security_level,
-				  Relids required_relids,
-				  Relids outer_relids,
-				  Relids nullable_relids);
+									   bool is_pushed_down,
+									   bool outerjoin_delayed,
+									   bool pseudoconstant,
+									   Index security_level,
+									   Relids required_relids,
+									   Relids outer_relids,
+									   Relids nullable_relids);
 extern RestrictInfo *commute_restrictinfo(RestrictInfo *rinfo, Oid comm_op);
 extern bool restriction_is_or_clause(RestrictInfo *restrictinfo);
 extern bool restriction_is_securely_promotable(RestrictInfo *restrictinfo,
-								   RelOptInfo *rel);
+											   RelOptInfo *rel);
 extern List *get_actual_clauses(List *restrictinfo_list);
 extern List *extract_actual_clauses(List *restrictinfo_list,
-					   bool pseudoconstant);
+									bool pseudoconstant);
 extern void extract_actual_join_clauses(List *restrictinfo_list,
-							Relids joinrelids,
-							List **joinquals,
-							List **otherquals);
+										Relids joinrelids,
+										List **joinquals,
+										List **otherquals);
 extern bool join_clause_is_movable_to(RestrictInfo *rinfo, RelOptInfo *baserel);
 extern bool join_clause_is_movable_into(RestrictInfo *rinfo,
-							Relids currentrelids,
-							Relids current_and_outer);
+										Relids currentrelids,
+										Relids current_and_outer);
 
 #endif							/* RESTRICTINFO_H */
diff --git a/src/include/optimizer/subselect.h b/src/include/optimizer/subselect.h
index 2d2c3bcbc060..71a22eeb647f 100644
--- a/src/include/optimizer/subselect.h
+++ b/src/include/optimizer/subselect.h
@@ -18,12 +18,12 @@
 
 extern void SS_process_ctes(PlannerInfo *root);
 extern JoinExpr *convert_ANY_sublink_to_join(PlannerInfo *root,
-							SubLink *sublink,
-							Relids available_rels);
+											 SubLink *sublink,
+											 Relids available_rels);
 extern JoinExpr *convert_EXISTS_sublink_to_join(PlannerInfo *root,
-							   SubLink *sublink,
-							   bool under_not,
-							   Relids available_rels);
+												SubLink *sublink,
+												bool under_not,
+												Relids available_rels);
 extern Node *SS_replace_correlation_vars(PlannerInfo *root, Node *expr);
 extern Node *SS_process_sublinks(PlannerInfo *root, Node *expr, bool isQual);
 extern void SS_identify_outer_params(PlannerInfo *root);
@@ -31,10 +31,10 @@ extern void SS_charge_for_initplans(PlannerInfo *root, RelOptInfo *final_rel);
 extern void SS_attach_initplans(PlannerInfo *root, Plan *plan);
 extern void SS_finalize_plan(PlannerInfo *root, Plan *plan);
 extern Param *SS_make_initplan_output_param(PlannerInfo *root,
-							  Oid resulttype, int32 resulttypmod,
-							  Oid resultcollation);
+											Oid resulttype, int32 resulttypmod,
+											Oid resultcollation);
 extern void SS_make_initplan_from_plan(PlannerInfo *root,
-						   PlannerInfo *subroot, Plan *plan,
-						   Param *prm);
+									   PlannerInfo *subroot, Plan *plan,
+									   Param *prm);
 
 #endif							/* SUBSELECT_H */
diff --git a/src/include/optimizer/tlist.h b/src/include/optimizer/tlist.h
index 46d614f4fb61..8a2378f968d6 100644
--- a/src/include/optimizer/tlist.h
+++ b/src/include/optimizer/tlist.h
@@ -42,13 +42,13 @@ extern List *make_tlist_from_pathtarget(PathTarget *target);
 extern PathTarget *copy_pathtarget(PathTarget *src);
 extern PathTarget *create_empty_pathtarget(void);
 extern void add_column_to_pathtarget(PathTarget *target,
-						 Expr *expr, Index sortgroupref);
+									 Expr *expr, Index sortgroupref);
 extern void add_new_column_to_pathtarget(PathTarget *target, Expr *expr);
 extern void add_new_columns_to_pathtarget(PathTarget *target, List *exprs);
 extern void apply_pathtarget_labeling_to_tlist(List *tlist, PathTarget *target);
 extern void split_pathtarget_at_srfs(PlannerInfo *root,
-						 PathTarget *target, PathTarget *input_target,
-						 List **targets, List **targets_contain_srfs);
+									 PathTarget *target, PathTarget *input_target,
+									 List **targets, List **targets_contain_srfs);
 
 /* Convenience macro to get a PathTarget with valid cost/width fields */
 #define create_pathtarget(root, tlist) \
diff --git a/src/include/parser/analyze.h b/src/include/parser/analyze.h
index 12c91ef79e5a..cb1d96bc35d9 100644
--- a/src/include/parser/analyze.h
+++ b/src/include/parser/analyze.h
@@ -23,14 +23,14 @@ extern PGDLLIMPORT post_parse_analyze_hook_type post_parse_analyze_hook;
 
 
 extern Query *parse_analyze(RawStmt *parseTree, const char *sourceText,
-			  Oid *paramTypes, int numParams, QueryEnvironment *queryEnv);
+							Oid *paramTypes, int numParams, QueryEnvironment *queryEnv);
 extern Query *parse_analyze_varparams(RawStmt *parseTree, const char *sourceText,
-						Oid **paramTypes, int *numParams);
+									  Oid **paramTypes, int *numParams);
 
 extern Query *parse_sub_analyze(Node *parseTree, ParseState *parentParseState,
-				  CommonTableExpr *parentCTE,
-				  bool locked_from_parent,
-				  bool resolve_unknowns);
+								CommonTableExpr *parentCTE,
+								bool locked_from_parent,
+								bool resolve_unknowns);
 
 extern Query *transformTopLevelStmt(ParseState *pstate, RawStmt *parseTree);
 extern Query *transformStmt(ParseState *pstate, Node *parseTree);
@@ -40,10 +40,10 @@ extern bool analyze_requires_snapshot(RawStmt *parseTree);
 extern const char *LCS_asString(LockClauseStrength strength);
 extern void CheckSelectLocking(Query *qry, LockClauseStrength strength);
 extern void applyLockingClause(Query *qry, Index rtindex,
-				   LockClauseStrength strength,
-				   LockWaitPolicy waitPolicy, bool pushedDown);
+							   LockClauseStrength strength,
+							   LockWaitPolicy waitPolicy, bool pushedDown);
 
 extern List *BuildOnConflictExcludedTargetlist(Relation targetrel,
-								  Index exclRelIndex);
+											   Index exclRelIndex);
 
 #endif							/* ANALYZE_H */
diff --git a/src/include/parser/gramparse.h b/src/include/parser/gramparse.h
index 9e6fe888dc5d..add64bc170f4 100644
--- a/src/include/parser/gramparse.h
+++ b/src/include/parser/gramparse.h
@@ -65,8 +65,8 @@ typedef struct base_yy_extra_type
 
 
 /* from parser.c */
-extern int base_yylex(YYSTYPE *lvalp, YYLTYPE *llocp,
-		   core_yyscan_t yyscanner);
+extern int	base_yylex(YYSTYPE *lvalp, YYLTYPE *llocp,
+					   core_yyscan_t yyscanner);
 
 /* from gram.y */
 extern void parser_init(base_yy_extra_type *yyext);
diff --git a/src/include/parser/parse_agg.h b/src/include/parser/parse_agg.h
index 48fe9d714076..102f266d6c9c 100644
--- a/src/include/parser/parse_agg.h
+++ b/src/include/parser/parse_agg.h
@@ -16,13 +16,13 @@
 #include "parser/parse_node.h"
 
 extern void transformAggregateCall(ParseState *pstate, Aggref *agg,
-					   List *args, List *aggorder,
-					   bool agg_distinct);
+								   List *args, List *aggorder,
+								   bool agg_distinct);
 
 extern Node *transformGroupingFunc(ParseState *pstate, GroupingFunc *g);
 
 extern void transformWindowFuncCall(ParseState *pstate, WindowFunc *wfunc,
-						WindowDef *windef);
+									WindowDef *windef);
 
 extern void parseCheckAggregates(ParseState *pstate, Query *qry);
 
@@ -30,39 +30,39 @@ extern List *expand_grouping_sets(List *groupingSets, int limit);
 
 extern int	get_aggregate_argtypes(Aggref *aggref, Oid *inputTypes);
 
-extern Oid resolve_aggregate_transtype(Oid aggfuncid,
-							Oid aggtranstype,
-							Oid *inputTypes,
-							int numArguments);
+extern Oid	resolve_aggregate_transtype(Oid aggfuncid,
+										Oid aggtranstype,
+										Oid *inputTypes,
+										int numArguments);
 
 extern void build_aggregate_transfn_expr(Oid *agg_input_types,
-							 int agg_num_inputs,
-							 int agg_num_direct_inputs,
-							 bool agg_variadic,
-							 Oid agg_state_type,
-							 Oid agg_input_collation,
-							 Oid transfn_oid,
-							 Oid invtransfn_oid,
-							 Expr **transfnexpr,
-							 Expr **invtransfnexpr);
+										 int agg_num_inputs,
+										 int agg_num_direct_inputs,
+										 bool agg_variadic,
+										 Oid agg_state_type,
+										 Oid agg_input_collation,
+										 Oid transfn_oid,
+										 Oid invtransfn_oid,
+										 Expr **transfnexpr,
+										 Expr **invtransfnexpr);
 
 extern void build_aggregate_combinefn_expr(Oid agg_state_type,
-							   Oid agg_input_collation,
-							   Oid combinefn_oid,
-							   Expr **combinefnexpr);
+										   Oid agg_input_collation,
+										   Oid combinefn_oid,
+										   Expr **combinefnexpr);
 
 extern void build_aggregate_serialfn_expr(Oid serialfn_oid,
-							  Expr **serialfnexpr);
+										  Expr **serialfnexpr);
 
 extern void build_aggregate_deserialfn_expr(Oid deserialfn_oid,
-								Expr **deserialfnexpr);
+											Expr **deserialfnexpr);
 
 extern void build_aggregate_finalfn_expr(Oid *agg_input_types,
-							 int num_finalfn_inputs,
-							 Oid agg_state_type,
-							 Oid agg_result_type,
-							 Oid agg_input_collation,
-							 Oid finalfn_oid,
-							 Expr **finalfnexpr);
+										 int num_finalfn_inputs,
+										 Oid agg_state_type,
+										 Oid agg_result_type,
+										 Oid agg_input_collation,
+										 Oid finalfn_oid,
+										 Expr **finalfnexpr);
 
 #endif							/* PARSE_AGG_H */
diff --git a/src/include/parser/parse_clause.h b/src/include/parser/parse_clause.h
index 179f3ab3c35f..42adc63d1fcc 100644
--- a/src/include/parser/parse_clause.h
+++ b/src/include/parser/parse_clause.h
@@ -17,36 +17,36 @@
 #include "parser/parse_node.h"
 
 extern void transformFromClause(ParseState *pstate, List *frmList);
-extern int setTargetTable(ParseState *pstate, RangeVar *relation,
-			   bool inh, bool alsoSource, AclMode requiredPerms);
+extern int	setTargetTable(ParseState *pstate, RangeVar *relation,
+						   bool inh, bool alsoSource, AclMode requiredPerms);
 
 extern Node *transformWhereClause(ParseState *pstate, Node *clause,
-					 ParseExprKind exprKind, const char *constructName);
+								  ParseExprKind exprKind, const char *constructName);
 extern Node *transformLimitClause(ParseState *pstate, Node *clause,
-					 ParseExprKind exprKind, const char *constructName);
+								  ParseExprKind exprKind, const char *constructName);
 extern List *transformGroupClause(ParseState *pstate, List *grouplist,
-					 List **groupingSets,
-					 List **targetlist, List *sortClause,
-					 ParseExprKind exprKind, bool useSQL99);
+								  List **groupingSets,
+								  List **targetlist, List *sortClause,
+								  ParseExprKind exprKind, bool useSQL99);
 extern List *transformSortClause(ParseState *pstate, List *orderlist,
-					List **targetlist, ParseExprKind exprKind,
-					bool useSQL99);
+								 List **targetlist, ParseExprKind exprKind,
+								 bool useSQL99);
 
 extern List *transformWindowDefinitions(ParseState *pstate,
-						   List *windowdefs,
-						   List **targetlist);
+										List *windowdefs,
+										List **targetlist);
 
 extern List *transformDistinctClause(ParseState *pstate,
-						List **targetlist, List *sortClause, bool is_agg);
+									 List **targetlist, List *sortClause, bool is_agg);
 extern List *transformDistinctOnClause(ParseState *pstate, List *distinctlist,
-						  List **targetlist, List *sortClause);
+									   List **targetlist, List *sortClause);
 extern void transformOnConflictArbiter(ParseState *pstate,
-						   OnConflictClause *onConflictClause,
-						   List **arbiterExpr, Node **arbiterWhere,
-						   Oid *constraint);
+									   OnConflictClause *onConflictClause,
+									   List **arbiterExpr, Node **arbiterWhere,
+									   Oid *constraint);
 
 extern List *addTargetToSortList(ParseState *pstate, TargetEntry *tle,
-					List *sortlist, List *targetlist, SortBy *sortby);
+								 List *sortlist, List *targetlist, SortBy *sortby);
 extern Index assignSortGroupRef(TargetEntry *tle, List *tlist);
 extern bool targetIsInSortList(TargetEntry *tle, Oid sortop, List *sortList);
 
diff --git a/src/include/parser/parse_coerce.h b/src/include/parser/parse_coerce.h
index 2a2d9a38053b..37d73ae2cc67 100644
--- a/src/include/parser/parse_coerce.h
+++ b/src/include/parser/parse_coerce.h
@@ -36,58 +36,58 @@ extern bool IsPreferredType(TYPCATEGORY category, Oid type);
 extern TYPCATEGORY TypeCategory(Oid type);
 
 extern Node *coerce_to_target_type(ParseState *pstate,
-					  Node *expr, Oid exprtype,
-					  Oid targettype, int32 targettypmod,
-					  CoercionContext ccontext,
-					  CoercionForm cformat,
-					  int location);
+								   Node *expr, Oid exprtype,
+								   Oid targettype, int32 targettypmod,
+								   CoercionContext ccontext,
+								   CoercionForm cformat,
+								   int location);
 extern bool can_coerce_type(int nargs, const Oid *input_typeids, const Oid *target_typeids,
-				CoercionContext ccontext);
+							CoercionContext ccontext);
 extern Node *coerce_type(ParseState *pstate, Node *node,
-			Oid inputTypeId, Oid targetTypeId, int32 targetTypeMod,
-			CoercionContext ccontext, CoercionForm cformat, int location);
+						 Oid inputTypeId, Oid targetTypeId, int32 targetTypeMod,
+						 CoercionContext ccontext, CoercionForm cformat, int location);
 extern Node *coerce_to_domain(Node *arg, Oid baseTypeId, int32 baseTypeMod,
-				 Oid typeId,
-				 CoercionContext ccontext, CoercionForm cformat, int location,
-				 bool hideInputCoercion);
+							  Oid typeId,
+							  CoercionContext ccontext, CoercionForm cformat, int location,
+							  bool hideInputCoercion);
 
 extern Node *coerce_to_boolean(ParseState *pstate, Node *node,
-				  const char *constructName);
+							   const char *constructName);
 extern Node *coerce_to_specific_type(ParseState *pstate, Node *node,
-						Oid targetTypeId,
-						const char *constructName);
+									 Oid targetTypeId,
+									 const char *constructName);
 
 extern Node *coerce_to_specific_type_typmod(ParseState *pstate, Node *node,
-							   Oid targetTypeId, int32 targetTypmod,
-							   const char *constructName);
+											Oid targetTypeId, int32 targetTypmod,
+											const char *constructName);
 
-extern int parser_coercion_errposition(ParseState *pstate,
-							int coerce_location,
-							Node *input_expr);
+extern int	parser_coercion_errposition(ParseState *pstate,
+										int coerce_location,
+										Node *input_expr);
 
-extern Oid select_common_type(ParseState *pstate, List *exprs,
-				   const char *context, Node **which_expr);
+extern Oid	select_common_type(ParseState *pstate, List *exprs,
+							   const char *context, Node **which_expr);
 extern Node *coerce_to_common_type(ParseState *pstate, Node *node,
-					  Oid targetTypeId,
-					  const char *context);
+								   Oid targetTypeId,
+								   const char *context);
 
 extern bool check_generic_type_consistency(const Oid *actual_arg_types,
-							   const Oid *declared_arg_types,
-							   int nargs);
-extern Oid enforce_generic_type_consistency(const Oid *actual_arg_types,
-								 Oid *declared_arg_types,
-								 int nargs,
-								 Oid rettype,
-								 bool allow_poly);
-extern Oid resolve_generic_type(Oid declared_type,
-					 Oid context_actual_type,
-					 Oid context_declared_type);
+										   const Oid *declared_arg_types,
+										   int nargs);
+extern Oid	enforce_generic_type_consistency(const Oid *actual_arg_types,
+											 Oid *declared_arg_types,
+											 int nargs,
+											 Oid rettype,
+											 bool allow_poly);
+extern Oid	resolve_generic_type(Oid declared_type,
+								 Oid context_actual_type,
+								 Oid context_declared_type);
 
 extern CoercionPathType find_coercion_pathway(Oid targetTypeId,
-					  Oid sourceTypeId,
-					  CoercionContext ccontext,
-					  Oid *funcid);
+											  Oid sourceTypeId,
+											  CoercionContext ccontext,
+											  Oid *funcid);
 extern CoercionPathType find_typmod_coercion_function(Oid typeId,
-							  Oid *funcid);
+													  Oid *funcid);
 
 #endif							/* PARSE_COERCE_H */
diff --git a/src/include/parser/parse_cte.h b/src/include/parser/parse_cte.h
index 7fd35bde019c..0d4ce3608dc6 100644
--- a/src/include/parser/parse_cte.h
+++ b/src/include/parser/parse_cte.h
@@ -19,6 +19,6 @@
 extern List *transformWithClause(ParseState *pstate, WithClause *withClause);
 
 extern void analyzeCTETargetList(ParseState *pstate, CommonTableExpr *cte,
-					 List *tlist);
+								 List *tlist);
 
 #endif							/* PARSE_CTE_H */
diff --git a/src/include/parser/parse_func.h b/src/include/parser/parse_func.h
index 743e6668f02d..d1ec2d97f21c 100644
--- a/src/include/parser/parse_func.h
+++ b/src/include/parser/parse_func.h
@@ -32,42 +32,42 @@ typedef enum
 
 
 extern Node *ParseFuncOrColumn(ParseState *pstate, List *funcname, List *fargs,
-				  Node *last_srf, FuncCall *fn, bool proc_call,
-				  int location);
+							   Node *last_srf, FuncCall *fn, bool proc_call,
+							   int location);
 
 extern FuncDetailCode func_get_detail(List *funcname,
-				List *fargs, List *fargnames,
-				int nargs, Oid *argtypes,
-				bool expand_variadic, bool expand_defaults,
-				Oid *funcid, Oid *rettype,
-				bool *retset, int *nvargs, Oid *vatype,
-				Oid **true_typeids, List **argdefaults);
+									  List *fargs, List *fargnames,
+									  int nargs, Oid *argtypes,
+									  bool expand_variadic, bool expand_defaults,
+									  Oid *funcid, Oid *rettype,
+									  bool *retset, int *nvargs, Oid *vatype,
+									  Oid **true_typeids, List **argdefaults);
 
-extern int func_match_argtypes(int nargs,
-					Oid *input_typeids,
-					FuncCandidateList raw_candidates,
-					FuncCandidateList *candidates);
+extern int	func_match_argtypes(int nargs,
+								Oid *input_typeids,
+								FuncCandidateList raw_candidates,
+								FuncCandidateList *candidates);
 
 extern FuncCandidateList func_select_candidate(int nargs,
-					  Oid *input_typeids,
-					  FuncCandidateList candidates);
+											   Oid *input_typeids,
+											   FuncCandidateList candidates);
 
 extern void make_fn_arguments(ParseState *pstate,
-				  List *fargs,
-				  Oid *actual_arg_types,
-				  Oid *declared_arg_types);
+							  List *fargs,
+							  Oid *actual_arg_types,
+							  Oid *declared_arg_types);
 
 extern const char *funcname_signature_string(const char *funcname, int nargs,
-						  List *argnames, const Oid *argtypes);
+											 List *argnames, const Oid *argtypes);
 extern const char *func_signature_string(List *funcname, int nargs,
-					  List *argnames, const Oid *argtypes);
+										 List *argnames, const Oid *argtypes);
 
-extern Oid LookupFuncName(List *funcname, int nargs, const Oid *argtypes,
-			   bool missing_ok);
-extern Oid LookupFuncWithArgs(ObjectType objtype, ObjectWithArgs *func,
-				   bool missing_ok);
+extern Oid	LookupFuncName(List *funcname, int nargs, const Oid *argtypes,
+						   bool missing_ok);
+extern Oid	LookupFuncWithArgs(ObjectType objtype, ObjectWithArgs *func,
+							   bool missing_ok);
 
 extern void check_srf_call_placement(ParseState *pstate, Node *last_srf,
-						 int location);
+									 int location);
 
 #endif							/* PARSE_FUNC_H */
diff --git a/src/include/parser/parse_node.h b/src/include/parser/parse_node.h
index 63d88b7a26df..7c099e70845e 100644
--- a/src/include/parser/parse_node.h
+++ b/src/include/parser/parse_node.h
@@ -269,20 +269,20 @@ extern void free_parsestate(ParseState *pstate);
 extern int	parser_errposition(ParseState *pstate, int location);
 
 extern void setup_parser_errposition_callback(ParseCallbackState *pcbstate,
-								  ParseState *pstate, int location);
+											  ParseState *pstate, int location);
 extern void cancel_parser_errposition_callback(ParseCallbackState *pcbstate);
 
 extern Var *make_var(ParseState *pstate, RangeTblEntry *rte, int attrno,
-		 int location);
+					 int location);
 extern Oid	transformContainerType(Oid *containerType, int32 *containerTypmod);
 
 extern SubscriptingRef *transformContainerSubscripts(ParseState *pstate,
-							 Node *containerBase,
-							 Oid containerType,
-							 Oid elementType,
-							 int32 containerTypMod,
-							 List *indirection,
-							 Node *assignFrom);
+													 Node *containerBase,
+													 Oid containerType,
+													 Oid elementType,
+													 int32 containerTypMod,
+													 List *indirection,
+													 Node *assignFrom);
 extern Const *make_const(ParseState *pstate, Value *value, int location);
 
 #endif							/* PARSE_NODE_H */
diff --git a/src/include/parser/parse_oper.h b/src/include/parser/parse_oper.h
index 0690ef50cbfc..2265c25e4d37 100644
--- a/src/include/parser/parse_oper.h
+++ b/src/include/parser/parse_oper.h
@@ -22,33 +22,33 @@
 typedef HeapTuple Operator;
 
 /* Routines to look up an operator given name and exact input type(s) */
-extern Oid LookupOperName(ParseState *pstate, List *opername,
-			   Oid oprleft, Oid oprright,
-			   bool noError, int location);
+extern Oid	LookupOperName(ParseState *pstate, List *opername,
+						   Oid oprleft, Oid oprright,
+						   bool noError, int location);
 extern Oid	LookupOperWithArgs(ObjectWithArgs *oper, bool noError);
 
 /* Routines to find operators matching a name and given input types */
 /* NB: the selected operator may require coercion of the input types! */
 extern Operator oper(ParseState *pstate, List *op, Oid arg1, Oid arg2,
-	 bool noError, int location);
+					 bool noError, int location);
 extern Operator right_oper(ParseState *pstate, List *op, Oid arg,
-		   bool noError, int location);
+						   bool noError, int location);
 extern Operator left_oper(ParseState *pstate, List *op, Oid arg,
-		  bool noError, int location);
+						  bool noError, int location);
 
 /* Routines to find operators that DO NOT require coercion --- ie, their */
 /* input types are either exactly as given, or binary-compatible */
 extern Operator compatible_oper(ParseState *pstate, List *op,
-				Oid arg1, Oid arg2,
-				bool noError, int location);
+								Oid arg1, Oid arg2,
+								bool noError, int location);
 
 /* currently no need for compatible_left_oper/compatible_right_oper */
 
 /* Routines for identifying "<", "=", ">" operators for a type */
 extern void get_sort_group_operators(Oid argtype,
-						 bool needLT, bool needEQ, bool needGT,
-						 Oid *ltOpr, Oid *eqOpr, Oid *gtOpr,
-						 bool *isHashable);
+									 bool needLT, bool needEQ, bool needGT,
+									 Oid *ltOpr, Oid *eqOpr, Oid *gtOpr,
+									 bool *isHashable);
 
 /* Convenience routines for common calls on the above */
 extern Oid	compatible_oper_opid(List *op, Oid arg1, Oid arg2, bool noError);
@@ -59,9 +59,9 @@ extern Oid	oprfuncid(Operator op);
 
 /* Build expression tree for an operator invocation */
 extern Expr *make_op(ParseState *pstate, List *opname,
-		Node *ltree, Node *rtree, Node *last_srf, int location);
+					 Node *ltree, Node *rtree, Node *last_srf, int location);
 extern Expr *make_scalar_array_op(ParseState *pstate, List *opname,
-					 bool useOr,
-					 Node *ltree, Node *rtree, int location);
+								  bool useOr,
+								  Node *ltree, Node *rtree, int location);
 
 #endif							/* PARSE_OPER_H */
diff --git a/src/include/parser/parse_param.h b/src/include/parser/parse_param.h
index 006e774cb6f9..acd9e50be389 100644
--- a/src/include/parser/parse_param.h
+++ b/src/include/parser/parse_param.h
@@ -16,9 +16,9 @@
 #include "parser/parse_node.h"
 
 extern void parse_fixed_parameters(ParseState *pstate,
-					   Oid *paramTypes, int numParams);
+								   Oid *paramTypes, int numParams);
 extern void parse_variable_parameters(ParseState *pstate,
-						  Oid **paramTypes, int *numParams);
+									  Oid **paramTypes, int *numParams);
 extern void check_variable_parameters(ParseState *pstate, Query *query);
 extern bool query_contains_extern_params(Query *query);
 
diff --git a/src/include/parser/parse_relation.h b/src/include/parser/parse_relation.h
index 1d4fdfa78b78..f7e078172dee 100644
--- a/src/include/parser/parse_relation.h
+++ b/src/include/parser/parse_relation.h
@@ -35,95 +35,95 @@ typedef struct
 
 
 extern RangeTblEntry *refnameRangeTblEntry(ParseState *pstate,
-					 const char *schemaname,
-					 const char *refname,
-					 int location,
-					 int *sublevels_up);
+										   const char *schemaname,
+										   const char *refname,
+										   int location,
+										   int *sublevels_up);
 extern CommonTableExpr *scanNameSpaceForCTE(ParseState *pstate,
-					const char *refname,
-					Index *ctelevelsup);
+											const char *refname,
+											Index *ctelevelsup);
 extern bool scanNameSpaceForENR(ParseState *pstate, const char *refname);
 extern void checkNameSpaceConflicts(ParseState *pstate, List *namespace1,
-						List *namespace2);
-extern int RTERangeTablePosn(ParseState *pstate,
-				  RangeTblEntry *rte,
-				  int *sublevels_up);
+									List *namespace2);
+extern int	RTERangeTablePosn(ParseState *pstate,
+							  RangeTblEntry *rte,
+							  int *sublevels_up);
 extern RangeTblEntry *GetRTEByRangeTablePosn(ParseState *pstate,
-					   int varno,
-					   int sublevels_up);
+											 int varno,
+											 int sublevels_up);
 extern CommonTableExpr *GetCTEForRTE(ParseState *pstate, RangeTblEntry *rte,
-			 int rtelevelsup);
+									 int rtelevelsup);
 extern Node *scanRTEForColumn(ParseState *pstate, RangeTblEntry *rte,
-				 const char *colname, int location,
-				 int fuzzy_rte_penalty, FuzzyAttrMatchState *fuzzystate);
+							  const char *colname, int location,
+							  int fuzzy_rte_penalty, FuzzyAttrMatchState *fuzzystate);
 extern Node *colNameToVar(ParseState *pstate, const char *colname, bool localonly,
-			 int location);
+						  int location);
 extern void markVarForSelectPriv(ParseState *pstate, Var *var,
-					 RangeTblEntry *rte);
+								 RangeTblEntry *rte);
 extern Relation parserOpenTable(ParseState *pstate, const RangeVar *relation,
-				int lockmode);
+								int lockmode);
 extern RangeTblEntry *addRangeTableEntry(ParseState *pstate,
-				   RangeVar *relation,
-				   Alias *alias,
-				   bool inh,
-				   bool inFromCl);
+										 RangeVar *relation,
+										 Alias *alias,
+										 bool inh,
+										 bool inFromCl);
 extern RangeTblEntry *addRangeTableEntryForRelation(ParseState *pstate,
-							  Relation rel,
-							  int lockmode,
-							  Alias *alias,
-							  bool inh,
-							  bool inFromCl);
+													Relation rel,
+													int lockmode,
+													Alias *alias,
+													bool inh,
+													bool inFromCl);
 extern RangeTblEntry *addRangeTableEntryForSubquery(ParseState *pstate,
-							  Query *subquery,
-							  Alias *alias,
-							  bool lateral,
-							  bool inFromCl);
+													Query *subquery,
+													Alias *alias,
+													bool lateral,
+													bool inFromCl);
 extern RangeTblEntry *addRangeTableEntryForFunction(ParseState *pstate,
-							  List *funcnames,
-							  List *funcexprs,
-							  List *coldeflists,
-							  RangeFunction *rangefunc,
-							  bool lateral,
-							  bool inFromCl);
+													List *funcnames,
+													List *funcexprs,
+													List *coldeflists,
+													RangeFunction *rangefunc,
+													bool lateral,
+													bool inFromCl);
 extern RangeTblEntry *addRangeTableEntryForValues(ParseState *pstate,
-							List *exprs,
-							List *coltypes,
-							List *coltypmods,
-							List *colcollations,
-							Alias *alias,
-							bool lateral,
-							bool inFromCl);
+												  List *exprs,
+												  List *coltypes,
+												  List *coltypmods,
+												  List *colcollations,
+												  Alias *alias,
+												  bool lateral,
+												  bool inFromCl);
 extern RangeTblEntry *addRangeTableEntryForTableFunc(ParseState *pstate,
-							   TableFunc *tf,
-							   Alias *alias,
-							   bool lateral,
-							   bool inFromCl);
+													 TableFunc *tf,
+													 Alias *alias,
+													 bool lateral,
+													 bool inFromCl);
 extern RangeTblEntry *addRangeTableEntryForJoin(ParseState *pstate,
-						  List *colnames,
-						  JoinType jointype,
-						  List *aliasvars,
-						  Alias *alias,
-						  bool inFromCl);
+												List *colnames,
+												JoinType jointype,
+												List *aliasvars,
+												Alias *alias,
+												bool inFromCl);
 extern RangeTblEntry *addRangeTableEntryForCTE(ParseState *pstate,
-						 CommonTableExpr *cte,
-						 Index levelsup,
-						 RangeVar *rv,
-						 bool inFromCl);
+											   CommonTableExpr *cte,
+											   Index levelsup,
+											   RangeVar *rv,
+											   bool inFromCl);
 extern RangeTblEntry *addRangeTableEntryForENR(ParseState *pstate,
-						 RangeVar *rv,
-						 bool inFromCl);
+											   RangeVar *rv,
+											   bool inFromCl);
 extern bool isLockedRefname(ParseState *pstate, const char *refname);
 extern void addRTEtoQuery(ParseState *pstate, RangeTblEntry *rte,
-			  bool addToJoinList,
-			  bool addToRelNameSpace, bool addToVarNameSpace);
+						  bool addToJoinList,
+						  bool addToRelNameSpace, bool addToVarNameSpace);
 extern void errorMissingRTE(ParseState *pstate, RangeVar *relation) pg_attribute_noreturn();
 extern void errorMissingColumn(ParseState *pstate,
-				   const char *relname, const char *colname, int location) pg_attribute_noreturn();
+							   const char *relname, const char *colname, int location) pg_attribute_noreturn();
 extern void expandRTE(RangeTblEntry *rte, int rtindex, int sublevels_up,
-		  int location, bool include_dropped,
-		  List **colnames, List **colvars);
+					  int location, bool include_dropped,
+					  List **colnames, List **colvars);
 extern List *expandRelAttrs(ParseState *pstate, RangeTblEntry *rte,
-			   int rtindex, int sublevels_up, int location);
+							int rtindex, int sublevels_up, int location);
 extern int	attnameAttNum(Relation rd, const char *attname, bool sysColOK);
 extern const NameData *attnumAttName(Relation rd, int attid);
 extern Oid	attnumTypeId(Relation rd, int attid);
diff --git a/src/include/parser/parse_target.h b/src/include/parser/parse_target.h
index a7291fa59d4c..2052254cdd2e 100644
--- a/src/include/parser/parse_target.h
+++ b/src/include/parser/parse_target.h
@@ -18,28 +18,28 @@
 
 
 extern List *transformTargetList(ParseState *pstate, List *targetlist,
-					ParseExprKind exprKind);
+								 ParseExprKind exprKind);
 extern List *transformExpressionList(ParseState *pstate, List *exprlist,
-						ParseExprKind exprKind, bool allowDefault);
+									 ParseExprKind exprKind, bool allowDefault);
 extern void resolveTargetListUnknowns(ParseState *pstate, List *targetlist);
 extern void markTargetListOrigins(ParseState *pstate, List *targetlist);
 extern TargetEntry *transformTargetEntry(ParseState *pstate,
-					 Node *node, Node *expr, ParseExprKind exprKind,
-					 char *colname, bool resjunk);
+										 Node *node, Node *expr, ParseExprKind exprKind,
+										 char *colname, bool resjunk);
 extern Expr *transformAssignedExpr(ParseState *pstate, Expr *expr,
-					  ParseExprKind exprKind,
-					  const char *colname,
-					  int attrno,
-					  List *indirection,
-					  int location);
+								   ParseExprKind exprKind,
+								   const char *colname,
+								   int attrno,
+								   List *indirection,
+								   int location);
 extern void updateTargetListEntry(ParseState *pstate, TargetEntry *tle,
-					  char *colname, int attrno,
-					  List *indirection,
-					  int location);
+								  char *colname, int attrno,
+								  List *indirection,
+								  int location);
 extern List *checkInsertTargets(ParseState *pstate, List *cols,
-				   List **attrnos);
+								List **attrnos);
 extern TupleDesc expandRecordVariable(ParseState *pstate, Var *var,
-					 int levelsup);
+									  int levelsup);
 extern char *FigureColname(Node *node);
 extern char *FigureIndexColname(Node *node);
 
diff --git a/src/include/parser/parse_type.h b/src/include/parser/parse_type.h
index 662ffdf29a97..f90ea9b7ecf6 100644
--- a/src/include/parser/parse_type.h
+++ b/src/include/parser/parse_type.h
@@ -20,14 +20,14 @@
 typedef HeapTuple Type;
 
 extern Type LookupTypeName(ParseState *pstate, const TypeName *typeName,
-			   int32 *typmod_p, bool missing_ok);
-extern Oid LookupTypeNameOid(ParseState *pstate, const TypeName *typeName,
-				  bool missing_ok);
+						   int32 *typmod_p, bool missing_ok);
+extern Oid	LookupTypeNameOid(ParseState *pstate, const TypeName *typeName,
+							  bool missing_ok);
 extern Type typenameType(ParseState *pstate, const TypeName *typeName,
-			 int32 *typmod_p);
+						 int32 *typmod_p);
 extern Oid	typenameTypeId(ParseState *pstate, const TypeName *typeName);
 extern void typenameTypeIdAndMod(ParseState *pstate, const TypeName *typeName,
-					 Oid *typeid_p, int32 *typmod_p);
+								 Oid *typeid_p, int32 *typmod_p);
 
 extern char *TypeNameToString(const TypeName *typeName);
 extern char *TypeNameListToString(List *typenames);
diff --git a/src/include/parser/parse_utilcmd.h b/src/include/parser/parse_utilcmd.h
index 6928aefb06d4..1348064ad07f 100644
--- a/src/include/parser/parse_utilcmd.h
+++ b/src/include/parser/parse_utilcmd.h
@@ -19,17 +19,17 @@
 
 extern List *transformCreateStmt(CreateStmt *stmt, const char *queryString);
 extern List *transformAlterTableStmt(Oid relid, AlterTableStmt *stmt,
-						const char *queryString);
+									 const char *queryString);
 extern IndexStmt *transformIndexStmt(Oid relid, IndexStmt *stmt,
-				   const char *queryString);
+									 const char *queryString);
 extern void transformRuleStmt(RuleStmt *stmt, const char *queryString,
-				  List **actions, Node **whereClause);
+							  List **actions, Node **whereClause);
 extern List *transformCreateSchemaStmt(CreateSchemaStmt *stmt);
 extern PartitionBoundSpec *transformPartitionBound(ParseState *pstate, Relation parent,
-						PartitionBoundSpec *spec);
+												   PartitionBoundSpec *spec);
 extern IndexStmt *generateClonedIndexStmt(RangeVar *heapRel,
-						Relation source_idx,
-						const AttrNumber *attmap, int attmap_length,
-						Oid *constraintOid);
+										  Relation source_idx,
+										  const AttrNumber *attmap, int attmap_length,
+										  Oid *constraintOid);
 
 #endif							/* PARSE_UTILCMD_H */
diff --git a/src/include/parser/parsetree.h b/src/include/parser/parsetree.h
index 9ba78893b00f..cf47e107b9a7 100644
--- a/src/include/parser/parsetree.h
+++ b/src/include/parser/parsetree.h
@@ -42,14 +42,14 @@ extern char *get_rte_attribute_name(RangeTblEntry *rte, AttrNumber attnum);
  * type and typemod info for that attribute of that RTE.
  */
 extern void get_rte_attribute_type(RangeTblEntry *rte, AttrNumber attnum,
-					   Oid *vartype, int32 *vartypmod, Oid *varcollid);
+								   Oid *vartype, int32 *vartypmod, Oid *varcollid);
 
 /*
  * Check whether an attribute of an RTE has been dropped (note that
  * get_rte_attribute_type will fail on such an attr)
  */
 extern bool get_rte_attribute_is_dropped(RangeTblEntry *rte,
-							 AttrNumber attnum);
+										 AttrNumber attnum);
 
 
 /* ----------------
diff --git a/src/include/parser/scanner.h b/src/include/parser/scanner.h
index 91e1c836d22b..731a2bd264ad 100644
--- a/src/include/parser/scanner.h
+++ b/src/include/parser/scanner.h
@@ -121,12 +121,12 @@ extern PGDLLIMPORT const uint16 ScanKeywordTokens[];
 
 /* Entry points in parser/scan.l */
 extern core_yyscan_t scanner_init(const char *str,
-			 core_yy_extra_type *yyext,
-			 const ScanKeywordList *keywordlist,
-			 const uint16 *keyword_tokens);
+								  core_yy_extra_type *yyext,
+								  const ScanKeywordList *keywordlist,
+								  const uint16 *keyword_tokens);
 extern void scanner_finish(core_yyscan_t yyscanner);
-extern int core_yylex(core_YYSTYPE *lvalp, YYLTYPE *llocp,
-		   core_yyscan_t yyscanner);
+extern int	core_yylex(core_YYSTYPE *lvalp, YYLTYPE *llocp,
+					   core_yyscan_t yyscanner);
 extern int	scanner_errposition(int location, core_yyscan_t yyscanner);
 extern void scanner_yyerror(const char *message, core_yyscan_t yyscanner) pg_attribute_noreturn();
 
diff --git a/src/include/parser/scansup.h b/src/include/parser/scansup.h
index 377f0181a4d0..fb2980bd1789 100644
--- a/src/include/parser/scansup.h
+++ b/src/include/parser/scansup.h
@@ -18,10 +18,10 @@
 extern char *scanstr(const char *s);
 
 extern char *downcase_truncate_identifier(const char *ident, int len,
-							 bool warn);
+										  bool warn);
 
 extern char *downcase_identifier(const char *ident, int len,
-					bool warn, bool truncate);
+								 bool warn, bool truncate);
 
 extern void truncate_identifier(char *ident, int len, bool warn);
 
diff --git a/src/include/partitioning/partbounds.h b/src/include/partitioning/partbounds.h
index c954965e4ef7..8585c29c92f5 100644
--- a/src/include/partitioning/partbounds.h
+++ b/src/include/partitioning/partbounds.h
@@ -77,37 +77,37 @@ typedef struct PartitionBoundInfoData
 
 extern int	get_hash_partition_greatest_modulus(PartitionBoundInfo b);
 extern uint64 compute_partition_hash_value(int partnatts, FmgrInfo *partsupfunc,
-							 Oid *partcollation,
-							 Datum *values, bool *isnull);
+										   Oid *partcollation,
+										   Datum *values, bool *isnull);
 extern List *get_qual_from_partbound(Relation rel, Relation parent,
-						PartitionBoundSpec *spec);
+									 PartitionBoundSpec *spec);
 extern PartitionBoundInfo partition_bounds_create(PartitionBoundSpec **boundspecs,
-						int nparts, PartitionKey key, int **mapping);
+												  int nparts, PartitionKey key, int **mapping);
 extern bool partition_bounds_equal(int partnatts, int16 *parttyplen,
-					   bool *parttypbyval, PartitionBoundInfo b1,
-					   PartitionBoundInfo b2);
+								   bool *parttypbyval, PartitionBoundInfo b1,
+								   PartitionBoundInfo b2);
 extern PartitionBoundInfo partition_bounds_copy(PartitionBoundInfo src,
-					  PartitionKey key);
+												PartitionKey key);
 extern bool partitions_are_ordered(PartitionBoundInfo boundinfo, int nparts);
 extern void check_new_partition_bound(char *relname, Relation parent,
-						  PartitionBoundSpec *spec);
+									  PartitionBoundSpec *spec);
 extern void check_default_partition_contents(Relation parent,
-								 Relation defaultRel,
-								 PartitionBoundSpec *new_spec);
+											 Relation defaultRel,
+											 PartitionBoundSpec *new_spec);
 
 extern int32 partition_rbound_datum_cmp(FmgrInfo *partsupfunc,
-						   Oid *partcollation,
-						   Datum *rb_datums, PartitionRangeDatumKind *rb_kind,
-						   Datum *tuple_datums, int n_tuple_datums);
-extern int partition_list_bsearch(FmgrInfo *partsupfunc,
-					   Oid *partcollation,
-					   PartitionBoundInfo boundinfo,
-					   Datum value, bool *is_equal);
-extern int partition_range_datum_bsearch(FmgrInfo *partsupfunc,
-							  Oid *partcollation,
-							  PartitionBoundInfo boundinfo,
-							  int nvalues, Datum *values, bool *is_equal);
-extern int partition_hash_bsearch(PartitionBoundInfo boundinfo,
-					   int modulus, int remainder);
+										Oid *partcollation,
+										Datum *rb_datums, PartitionRangeDatumKind *rb_kind,
+										Datum *tuple_datums, int n_tuple_datums);
+extern int	partition_list_bsearch(FmgrInfo *partsupfunc,
+								   Oid *partcollation,
+								   PartitionBoundInfo boundinfo,
+								   Datum value, bool *is_equal);
+extern int	partition_range_datum_bsearch(FmgrInfo *partsupfunc,
+										  Oid *partcollation,
+										  PartitionBoundInfo boundinfo,
+										  int nvalues, Datum *values, bool *is_equal);
+extern int	partition_hash_bsearch(PartitionBoundInfo boundinfo,
+								   int modulus, int remainder);
 
 #endif							/* PARTBOUNDS_H */
diff --git a/src/include/partitioning/partdesc.h b/src/include/partitioning/partdesc.h
index e70d1142d6cb..38712c155017 100644
--- a/src/include/partitioning/partdesc.h
+++ b/src/include/partitioning/partdesc.h
@@ -38,6 +38,6 @@ extern void DestroyPartitionDirectory(PartitionDirectory pdir);
 extern Oid	get_default_oid_from_partdesc(PartitionDesc partdesc);
 
 extern bool equalPartitionDescs(PartitionKey key, PartitionDesc partdesc1,
-					PartitionDesc partdesc2);
+								PartitionDesc partdesc2);
 
 #endif							/* PARTCACHE_H */
diff --git a/src/include/partitioning/partprune.h b/src/include/partitioning/partprune.h
index b906ae18b83c..06080b19cce1 100644
--- a/src/include/partitioning/partprune.h
+++ b/src/include/partitioning/partprune.h
@@ -69,12 +69,12 @@ typedef struct PartitionPruneContext
 	((partnatts) * (step_id) + (keyno))
 
 extern PartitionPruneInfo *make_partition_pruneinfo(struct PlannerInfo *root,
-						 struct RelOptInfo *parentrel,
-						 List *subpaths,
-						 List *partitioned_rels,
-						 List *prunequal);
+													struct RelOptInfo *parentrel,
+													List *subpaths,
+													List *partitioned_rels,
+													List *prunequal);
 extern Bitmapset *prune_append_rel_partitions(struct RelOptInfo *rel);
 extern Bitmapset *get_matching_partitions(PartitionPruneContext *context,
-						List *pruning_steps);
+										  List *pruning_steps);
 
 #endif							/* PARTPRUNE_H */
diff --git a/src/include/pgstat.h b/src/include/pgstat.h
index b5796a7bba68..0a3ad3a1883b 100644
--- a/src/include/pgstat.h
+++ b/src/include/pgstat.h
@@ -1262,10 +1262,10 @@ extern void pgstat_reset_single_counter(Oid objectid, PgStat_Single_Reset_Type t
 
 extern void pgstat_report_autovac(Oid dboid);
 extern void pgstat_report_vacuum(Oid tableoid, bool shared,
-					 PgStat_Counter livetuples, PgStat_Counter deadtuples);
+								 PgStat_Counter livetuples, PgStat_Counter deadtuples);
 extern void pgstat_report_analyze(Relation rel,
-					  PgStat_Counter livetuples, PgStat_Counter deadtuples,
-					  bool resetcounter);
+								  PgStat_Counter livetuples, PgStat_Counter deadtuples,
+								  bool resetcounter);
 
 extern void pgstat_report_recovery_conflict(int reason);
 extern void pgstat_report_deadlock(void);
@@ -1283,14 +1283,14 @@ extern const char *pgstat_get_wait_event(uint32 wait_event_info);
 extern const char *pgstat_get_wait_event_type(uint32 wait_event_info);
 extern const char *pgstat_get_backend_current_activity(int pid, bool checkUser);
 extern const char *pgstat_get_crashed_backend_activity(int pid, char *buffer,
-									int buflen);
+													   int buflen);
 extern const char *pgstat_get_backend_desc(BackendType backendType);
 
 extern void pgstat_progress_start_command(ProgressCommandType cmdtype,
-							  Oid relid);
+										  Oid relid);
 extern void pgstat_progress_update_param(int index, int64 val);
 extern void pgstat_progress_update_multi_param(int nparam, const int *index,
-								   const int64 *val);
+											   const int64 *val);
 extern void pgstat_progress_end_command(void);
 
 extern PgStat_TableStatus *find_tabstat_entry(Oid rel_id);
@@ -1403,9 +1403,9 @@ extern void pgstat_count_truncate(Relation rel);
 extern void pgstat_update_heap_dead_tuples(Relation rel, int delta);
 
 extern void pgstat_init_function_usage(FunctionCallInfo fcinfo,
-						   PgStat_FunctionCallUsage *fcu);
+									   PgStat_FunctionCallUsage *fcu);
 extern void pgstat_end_function_usage(PgStat_FunctionCallUsage *fcu,
-						  bool finalize);
+									  bool finalize);
 
 extern void AtEOXact_PgStat(bool isCommit, bool parallel);
 extern void AtEOSubXact_PgStat(bool isCommit, int nestDepth);
@@ -1414,9 +1414,9 @@ extern void AtPrepare_PgStat(void);
 extern void PostPrepare_PgStat(void);
 
 extern void pgstat_twophase_postcommit(TransactionId xid, uint16 info,
-						   void *recdata, uint32 len);
+									   void *recdata, uint32 len);
 extern void pgstat_twophase_postabort(TransactionId xid, uint16 info,
-						  void *recdata, uint32 len);
+									  void *recdata, uint32 len);
 
 extern void pgstat_send_archiver(const char *xlog, bool failed);
 extern void pgstat_send_bgwriter(void);
diff --git a/src/include/pgtar.h b/src/include/pgtar.h
index 65328c7f54f8..e69d87d8837b 100644
--- a/src/include/pgtar.h
+++ b/src/include/pgtar.h
@@ -20,7 +20,7 @@ enum tarError
 };
 
 extern enum tarError tarCreateHeader(char *h, const char *filename, const char *linktarget,
-				pgoff_t size, mode_t mode, uid_t uid, gid_t gid, time_t mtime);
+									 pgoff_t size, mode_t mode, uid_t uid, gid_t gid, time_t mtime);
 extern uint64 read_tar_number(const char *s, int len);
 extern void print_tar_number(char *s, int len, uint64 val);
 extern int	tarChecksum(char *header);
diff --git a/src/include/pgtime.h b/src/include/pgtime.h
index a6fe3f5c9c33..ff0e72a3a996 100644
--- a/src/include/pgtime.h
+++ b/src/include/pgtime.h
@@ -47,18 +47,18 @@ typedef struct pg_tzenum pg_tzenum;
 
 extern struct pg_tm *pg_localtime(const pg_time_t *timep, const pg_tz *tz);
 extern struct pg_tm *pg_gmtime(const pg_time_t *timep);
-extern int pg_next_dst_boundary(const pg_time_t *timep,
-					 long int *before_gmtoff,
-					 int *before_isdst,
-					 pg_time_t *boundary,
-					 long int *after_gmtoff,
-					 int *after_isdst,
-					 const pg_tz *tz);
+extern int	pg_next_dst_boundary(const pg_time_t *timep,
+								 long int *before_gmtoff,
+								 int *before_isdst,
+								 pg_time_t *boundary,
+								 long int *after_gmtoff,
+								 int *after_isdst,
+								 const pg_tz *tz);
 extern bool pg_interpret_timezone_abbrev(const char *abbrev,
-							 const pg_time_t *timep,
-							 long int *gmtoff,
-							 int *isdst,
-							 const pg_tz *tz);
+										 const pg_time_t *timep,
+										 long int *gmtoff,
+										 int *isdst,
+										 const pg_tz *tz);
 extern bool pg_get_timezone_offset(const pg_tz *tz, long int *gmtoff);
 extern const char *pg_get_timezone_name(pg_tz *tz);
 extern bool pg_tz_acceptable(pg_tz *tz);
@@ -66,7 +66,7 @@ extern bool pg_tz_acceptable(pg_tz *tz);
 /* these functions are in strftime.c */
 
 extern size_t pg_strftime(char *s, size_t max, const char *format,
-			const struct pg_tm *tm);
+						  const struct pg_tm *tm);
 
 /* these functions and variables are in pgtz.c */
 
diff --git a/src/include/port.h b/src/include/port.h
index 7de6ba67f0d6..b5c03d912b0f 100644
--- a/src/include/port.h
+++ b/src/include/port.h
@@ -48,7 +48,7 @@ extern char *first_dir_separator(const char *filename);
 extern char *last_dir_separator(const char *filename);
 extern char *first_path_var_separator(const char *pathlist);
 extern void join_path_components(char *ret_path,
-					 const char *head, const char *tail);
+								 const char *head, const char *tail);
 extern void canonicalize_path(char *path);
 extern void make_native_path(char *path);
 extern void cleanup_path(char *path);
@@ -104,8 +104,8 @@ extern void set_pglocale_pgservice(const char *argv0, const char *app);
 
 /* Portable way to find binaries (in exec.c) */
 extern int	find_my_exec(const char *argv0, char *retpath);
-extern int find_other_exec(const char *argv0, const char *target,
-				const char *versionstr, char *retpath);
+extern int	find_other_exec(const char *argv0, const char *target,
+							const char *versionstr, char *retpath);
 
 /* Doesn't belong here, but this is used with find_other_exec(), so... */
 #define PG_BACKEND_VERSIONSTR "postgres (PostgreSQL) " PG_VERSION "\n"
@@ -214,7 +214,7 @@ extern const char *pg_strsignal(int signum);
 
 /* Portable prompt handling */
 extern void simple_prompt(const char *prompt, char *destination, size_t destlen,
-			  bool echo);
+						  bool echo);
 
 extern int	pclose_check(FILE *stream);
 
@@ -474,18 +474,18 @@ extern char *dlerror(void);
 
 /* thread.h */
 #ifndef WIN32
-extern int pqGetpwuid(uid_t uid, struct passwd *resultbuf, char *buffer,
-		   size_t buflen, struct passwd **result);
+extern int	pqGetpwuid(uid_t uid, struct passwd *resultbuf, char *buffer,
+					   size_t buflen, struct passwd **result);
 #endif
 
-extern int pqGethostbyname(const char *name,
-				struct hostent *resultbuf,
-				char *buffer, size_t buflen,
-				struct hostent **result,
-				int *herrno);
+extern int	pqGethostbyname(const char *name,
+							struct hostent *resultbuf,
+							char *buffer, size_t buflen,
+							struct hostent **result,
+							int *herrno);
 
 extern void pg_qsort(void *base, size_t nel, size_t elsize,
-		 int (*cmp) (const void *, const void *));
+					 int (*cmp) (const void *, const void *));
 extern int	pg_qsort_strcmp(const void *a, const void *b);
 
 #define qsort(a,b,c,d) pg_qsort(a,b,c,d)
@@ -493,7 +493,7 @@ extern int	pg_qsort_strcmp(const void *a, const void *b);
 typedef int (*qsort_arg_comparator) (const void *a, const void *b, void *arg);
 
 extern void qsort_arg(void *base, size_t nel, size_t elsize,
-		  qsort_arg_comparator cmp, void *arg);
+					  qsort_arg_comparator cmp, void *arg);
 
 /* port/chklocale.c */
 extern int	pg_get_encoding_from_locale(const char *ctype, bool write_message);
@@ -504,7 +504,7 @@ extern int	pg_codepage_to_encoding(UINT cp);
 
 /* port/inet_net_ntop.c */
 extern char *inet_net_ntop(int af, const void *src, int bits,
-			  char *dst, size_t size);
+						   char *dst, size_t size);
 
 /* port/pg_strong_random.c */
 extern bool pg_strong_random(void *buf, size_t len);
diff --git a/src/include/postmaster/autovacuum.h b/src/include/postmaster/autovacuum.h
index 722ef1cec9ab..8451e5d9e275 100644
--- a/src/include/postmaster/autovacuum.h
+++ b/src/include/postmaster/autovacuum.h
@@ -72,7 +72,7 @@ extern void AutovacuumLauncherIAm(void);
 #endif
 
 extern bool AutoVacuumRequestWork(AutoVacuumWorkItemType type,
-					  Oid relationId, BlockNumber blkno);
+								  Oid relationId, BlockNumber blkno);
 
 /* shared memory stuff */
 extern Size AutoVacuumShmemSize(void);
diff --git a/src/include/postmaster/bgworker.h b/src/include/postmaster/bgworker.h
index 7f40340be61b..a8864946cb1c 100644
--- a/src/include/postmaster/bgworker.h
+++ b/src/include/postmaster/bgworker.h
@@ -115,11 +115,11 @@ extern void RegisterBackgroundWorker(BackgroundWorker *worker);
 
 /* Register a new bgworker from a regular backend */
 extern bool RegisterDynamicBackgroundWorker(BackgroundWorker *worker,
-								BackgroundWorkerHandle **handle);
+											BackgroundWorkerHandle **handle);
 
 /* Query the status of a bgworker */
 extern BgwHandleStatus GetBackgroundWorkerPid(BackgroundWorkerHandle *handle,
-					   pid_t *pidp);
+											  pid_t *pidp);
 extern BgwHandleStatus WaitForBackgroundWorkerStartup(BackgroundWorkerHandle *handle, pid_t *pid);
 extern BgwHandleStatus
 			WaitForBackgroundWorkerShutdown(BackgroundWorkerHandle *);
diff --git a/src/include/regex/regex.h b/src/include/regex/regex.h
index 23ad03d93041..dc31899aa4d4 100644
--- a/src/include/regex/regex.h
+++ b/src/include/regex/regex.h
@@ -178,7 +178,7 @@ extern size_t pg_regerror(int, const regex_t *, char *, size_t);
 /* regexp.c */
 extern regex_t *RE_compile_and_cache(text *text_re, int cflags, Oid collation);
 extern bool RE_compile_and_execute(text *text_re, char *dat, int dat_len,
-					   int cflags, Oid collation,
-					   int nmatch, regmatch_t *pmatch);
+								   int cflags, Oid collation,
+								   int nmatch, regmatch_t *pmatch);
 
 #endif							/* _REGEX_H_ */
diff --git a/src/include/regex/regexport.h b/src/include/regex/regexport.h
index f5f1533f155a..972fb604a97a 100644
--- a/src/include/regex/regexport.h
+++ b/src/include/regex/regexport.h
@@ -44,7 +44,7 @@ extern int	pg_reg_getinitialstate(const regex_t *regex);
 extern int	pg_reg_getfinalstate(const regex_t *regex);
 extern int	pg_reg_getnumoutarcs(const regex_t *regex, int st);
 extern void pg_reg_getoutarcs(const regex_t *regex, int st,
-				  regex_arc_t *arcs, int arcs_len);
+							  regex_arc_t *arcs, int arcs_len);
 
 /* Functions for gathering information about colors */
 extern int	pg_reg_getnumcolors(const regex_t *regex);
@@ -52,6 +52,6 @@ extern int	pg_reg_colorisbegin(const regex_t *regex, int co);
 extern int	pg_reg_colorisend(const regex_t *regex, int co);
 extern int	pg_reg_getnumcharacters(const regex_t *regex, int co);
 extern void pg_reg_getcharacters(const regex_t *regex, int co,
-					 pg_wchar *chars, int chars_len);
+								 pg_wchar *chars, int chars_len);
 
 #endif							/* _REGEXPORT_H_ */
diff --git a/src/include/replication/decode.h b/src/include/replication/decode.h
index 007d81fe9214..89689a010b29 100644
--- a/src/include/replication/decode.h
+++ b/src/include/replication/decode.h
@@ -14,7 +14,7 @@
 #include "replication/reorderbuffer.h"
 #include "replication/logical.h"
 
-void LogicalDecodingProcessRecord(LogicalDecodingContext *ctx,
-							 XLogReaderState *record);
+void		LogicalDecodingProcessRecord(LogicalDecodingContext *ctx,
+										 XLogReaderState *record);
 
 #endif
diff --git a/src/include/replication/logical.h b/src/include/replication/logical.h
index 784040919860..f76b9eb4df4c 100644
--- a/src/include/replication/logical.h
+++ b/src/include/replication/logical.h
@@ -95,28 +95,28 @@ typedef struct LogicalDecodingContext
 extern void CheckLogicalDecodingRequirements(void);
 
 extern LogicalDecodingContext *CreateInitDecodingContext(char *plugin,
-						  List *output_plugin_options,
-						  bool need_full_snapshot,
-						  XLogRecPtr restart_lsn,
-						  XLogPageReadCB read_page,
-						  LogicalOutputPluginWriterPrepareWrite prepare_write,
-						  LogicalOutputPluginWriterWrite do_write,
-						  LogicalOutputPluginWriterUpdateProgress update_progress);
+														 List *output_plugin_options,
+														 bool need_full_snapshot,
+														 XLogRecPtr restart_lsn,
+														 XLogPageReadCB read_page,
+														 LogicalOutputPluginWriterPrepareWrite prepare_write,
+														 LogicalOutputPluginWriterWrite do_write,
+														 LogicalOutputPluginWriterUpdateProgress update_progress);
 extern LogicalDecodingContext *CreateDecodingContext(
-					  XLogRecPtr start_lsn,
-					  List *output_plugin_options,
-					  bool fast_forward,
-					  XLogPageReadCB read_page,
-					  LogicalOutputPluginWriterPrepareWrite prepare_write,
-					  LogicalOutputPluginWriterWrite do_write,
-					  LogicalOutputPluginWriterUpdateProgress update_progress);
+													 XLogRecPtr start_lsn,
+													 List *output_plugin_options,
+													 bool fast_forward,
+													 XLogPageReadCB read_page,
+													 LogicalOutputPluginWriterPrepareWrite prepare_write,
+													 LogicalOutputPluginWriterWrite do_write,
+													 LogicalOutputPluginWriterUpdateProgress update_progress);
 extern void DecodingContextFindStartpoint(LogicalDecodingContext *ctx);
 extern bool DecodingContextReady(LogicalDecodingContext *ctx);
 extern void FreeDecodingContext(LogicalDecodingContext *ctx);
 
 extern void LogicalIncreaseXminForSlot(XLogRecPtr lsn, TransactionId xmin);
 extern void LogicalIncreaseRestartDecodingForSlot(XLogRecPtr current_lsn,
-									  XLogRecPtr restart_lsn);
+												  XLogRecPtr restart_lsn);
 extern void LogicalConfirmReceivedLocation(XLogRecPtr lsn);
 
 extern bool filter_by_origin_cb_wrapper(LogicalDecodingContext *ctx, RepOriginId origin_id);
diff --git a/src/include/replication/logicalfuncs.h b/src/include/replication/logicalfuncs.h
index 3fb7ad5d67ce..a9c178a9e687 100644
--- a/src/include/replication/logicalfuncs.h
+++ b/src/include/replication/logicalfuncs.h
@@ -11,9 +11,9 @@
 
 #include "replication/logical.h"
 
-extern int logical_read_local_xlog_page(XLogReaderState *state,
-							 XLogRecPtr targetPagePtr,
-							 int reqLen, XLogRecPtr targetRecPtr,
-							 char *cur_page, TimeLineID *pageTLI);
+extern int	logical_read_local_xlog_page(XLogReaderState *state,
+										 XLogRecPtr targetPagePtr,
+										 int reqLen, XLogRecPtr targetRecPtr,
+										 char *cur_page, TimeLineID *pageTLI);
 
 #endif
diff --git a/src/include/replication/logicalproto.h b/src/include/replication/logicalproto.h
index 9ff6e9a46501..9c0000cc5935 100644
--- a/src/include/replication/logicalproto.h
+++ b/src/include/replication/logicalproto.h
@@ -77,30 +77,30 @@ typedef struct LogicalRepCommitData
 
 extern void logicalrep_write_begin(StringInfo out, ReorderBufferTXN *txn);
 extern void logicalrep_read_begin(StringInfo in,
-					  LogicalRepBeginData *begin_data);
+								  LogicalRepBeginData *begin_data);
 extern void logicalrep_write_commit(StringInfo out, ReorderBufferTXN *txn,
-						XLogRecPtr commit_lsn);
+									XLogRecPtr commit_lsn);
 extern void logicalrep_read_commit(StringInfo in,
-					   LogicalRepCommitData *commit_data);
+								   LogicalRepCommitData *commit_data);
 extern void logicalrep_write_origin(StringInfo out, const char *origin,
-						XLogRecPtr origin_lsn);
+									XLogRecPtr origin_lsn);
 extern char *logicalrep_read_origin(StringInfo in, XLogRecPtr *origin_lsn);
 extern void logicalrep_write_insert(StringInfo out, Relation rel,
-						HeapTuple newtuple);
+									HeapTuple newtuple);
 extern LogicalRepRelId logicalrep_read_insert(StringInfo in, LogicalRepTupleData *newtup);
 extern void logicalrep_write_update(StringInfo out, Relation rel, HeapTuple oldtuple,
-						HeapTuple newtuple);
+									HeapTuple newtuple);
 extern LogicalRepRelId logicalrep_read_update(StringInfo in,
-					   bool *has_oldtuple, LogicalRepTupleData *oldtup,
-					   LogicalRepTupleData *newtup);
+											  bool *has_oldtuple, LogicalRepTupleData *oldtup,
+											  LogicalRepTupleData *newtup);
 extern void logicalrep_write_delete(StringInfo out, Relation rel,
-						HeapTuple oldtuple);
+									HeapTuple oldtuple);
 extern LogicalRepRelId logicalrep_read_delete(StringInfo in,
-					   LogicalRepTupleData *oldtup);
+											  LogicalRepTupleData *oldtup);
 extern void logicalrep_write_truncate(StringInfo out, int nrelids, Oid relids[],
-						  bool cascade, bool restart_seqs);
+									  bool cascade, bool restart_seqs);
 extern List *logicalrep_read_truncate(StringInfo in,
-						 bool *cascade, bool *restart_seqs);
+									  bool *cascade, bool *restart_seqs);
 extern void logicalrep_write_rel(StringInfo out, Relation rel);
 extern LogicalRepRelation *logicalrep_read_rel(StringInfo in);
 extern void logicalrep_write_typ(StringInfo out, Oid typoid);
diff --git a/src/include/replication/logicalrelation.h b/src/include/replication/logicalrelation.h
index 85e0b6ea62f3..2642a3f94eca 100644
--- a/src/include/replication/logicalrelation.h
+++ b/src/include/replication/logicalrelation.h
@@ -32,9 +32,9 @@ typedef struct LogicalRepRelMapEntry
 extern void logicalrep_relmap_update(LogicalRepRelation *remoterel);
 
 extern LogicalRepRelMapEntry *logicalrep_rel_open(LogicalRepRelId remoteid,
-					LOCKMODE lockmode);
+												  LOCKMODE lockmode);
 extern void logicalrep_rel_close(LogicalRepRelMapEntry *rel,
-					 LOCKMODE lockmode);
+								 LOCKMODE lockmode);
 
 extern void logicalrep_typmap_update(LogicalRepTyp *remotetyp);
 extern char *logicalrep_typmap_gettypname(Oid remoteid);
diff --git a/src/include/replication/message.h b/src/include/replication/message.h
index 5ff56f5bcedd..a2e3f6c80262 100644
--- a/src/include/replication/message.h
+++ b/src/include/replication/message.h
@@ -31,7 +31,7 @@ typedef struct xl_logical_message
 #define SizeOfLogicalMessage	(offsetof(xl_logical_message, message))
 
 extern XLogRecPtr LogLogicalMessage(const char *prefix, const char *message,
-				  size_t size, bool transactional);
+									size_t size, bool transactional);
 
 /* RMGR API*/
 #define XLOG_LOGICAL_MESSAGE	0x00
diff --git a/src/include/replication/origin.h b/src/include/replication/origin.h
index 6ef5905e6d53..7422b26a6d85 100644
--- a/src/include/replication/origin.h
+++ b/src/include/replication/origin.h
@@ -43,17 +43,17 @@ extern RepOriginId replorigin_by_name(char *name, bool missing_ok);
 extern RepOriginId replorigin_create(char *name);
 extern void replorigin_drop(RepOriginId roident, bool nowait);
 extern bool replorigin_by_oid(RepOriginId roident, bool missing_ok,
-				  char **roname);
+							  char **roname);
 
 /* API for querying & manipulating replication progress tracking */
 extern void replorigin_advance(RepOriginId node,
-				   XLogRecPtr remote_commit,
-				   XLogRecPtr local_commit,
-				   bool go_backward, bool wal_log);
+							   XLogRecPtr remote_commit,
+							   XLogRecPtr local_commit,
+							   bool go_backward, bool wal_log);
 extern XLogRecPtr replorigin_get_progress(RepOriginId node, bool flush);
 
 extern void replorigin_session_advance(XLogRecPtr remote_commit,
-						   XLogRecPtr local_commit);
+									   XLogRecPtr local_commit);
 extern void replorigin_session_setup(RepOriginId node);
 extern void replorigin_session_reset(void);
 extern XLogRecPtr replorigin_session_get_progress(bool flush);
diff --git a/src/include/replication/reorderbuffer.h b/src/include/replication/reorderbuffer.h
index d68c01c156c1..735e6d32b86c 100644
--- a/src/include/replication/reorderbuffer.h
+++ b/src/include/replication/reorderbuffer.h
@@ -406,30 +406,30 @@ Oid		   *ReorderBufferGetRelids(ReorderBuffer *, int nrelids);
 void		ReorderBufferReturnRelids(ReorderBuffer *, Oid *relids);
 
 void		ReorderBufferQueueChange(ReorderBuffer *, TransactionId, XLogRecPtr lsn, ReorderBufferChange *);
-void ReorderBufferQueueMessage(ReorderBuffer *, TransactionId, Snapshot snapshot, XLogRecPtr lsn,
-						  bool transactional, const char *prefix,
-						  Size message_size, const char *message);
-void ReorderBufferCommit(ReorderBuffer *, TransactionId,
-					XLogRecPtr commit_lsn, XLogRecPtr end_lsn,
-					TimestampTz commit_time, RepOriginId origin_id, XLogRecPtr origin_lsn);
+void		ReorderBufferQueueMessage(ReorderBuffer *, TransactionId, Snapshot snapshot, XLogRecPtr lsn,
+									  bool transactional, const char *prefix,
+									  Size message_size, const char *message);
+void		ReorderBufferCommit(ReorderBuffer *, TransactionId,
+								XLogRecPtr commit_lsn, XLogRecPtr end_lsn,
+								TimestampTz commit_time, RepOriginId origin_id, XLogRecPtr origin_lsn);
 void		ReorderBufferAssignChild(ReorderBuffer *, TransactionId, TransactionId, XLogRecPtr commit_lsn);
-void ReorderBufferCommitChild(ReorderBuffer *, TransactionId, TransactionId,
-						 XLogRecPtr commit_lsn, XLogRecPtr end_lsn);
+void		ReorderBufferCommitChild(ReorderBuffer *, TransactionId, TransactionId,
+									 XLogRecPtr commit_lsn, XLogRecPtr end_lsn);
 void		ReorderBufferAbort(ReorderBuffer *, TransactionId, XLogRecPtr lsn);
 void		ReorderBufferAbortOld(ReorderBuffer *, TransactionId xid);
 void		ReorderBufferForget(ReorderBuffer *, TransactionId, XLogRecPtr lsn);
 
 void		ReorderBufferSetBaseSnapshot(ReorderBuffer *, TransactionId, XLogRecPtr lsn, struct SnapshotData *snap);
 void		ReorderBufferAddSnapshot(ReorderBuffer *, TransactionId, XLogRecPtr lsn, struct SnapshotData *snap);
-void ReorderBufferAddNewCommandId(ReorderBuffer *, TransactionId, XLogRecPtr lsn,
-							 CommandId cid);
-void ReorderBufferAddNewTupleCids(ReorderBuffer *, TransactionId, XLogRecPtr lsn,
-							 RelFileNode node, ItemPointerData pt,
-							 CommandId cmin, CommandId cmax, CommandId combocid);
-void ReorderBufferAddInvalidations(ReorderBuffer *, TransactionId, XLogRecPtr lsn,
-							  Size nmsgs, SharedInvalidationMessage *msgs);
-void ReorderBufferImmediateInvalidation(ReorderBuffer *, uint32 ninvalidations,
-								   SharedInvalidationMessage *invalidations);
+void		ReorderBufferAddNewCommandId(ReorderBuffer *, TransactionId, XLogRecPtr lsn,
+										 CommandId cid);
+void		ReorderBufferAddNewTupleCids(ReorderBuffer *, TransactionId, XLogRecPtr lsn,
+										 RelFileNode node, ItemPointerData pt,
+										 CommandId cmin, CommandId cmax, CommandId combocid);
+void		ReorderBufferAddInvalidations(ReorderBuffer *, TransactionId, XLogRecPtr lsn,
+										  Size nmsgs, SharedInvalidationMessage *msgs);
+void		ReorderBufferImmediateInvalidation(ReorderBuffer *, uint32 ninvalidations,
+											   SharedInvalidationMessage *invalidations);
 void		ReorderBufferProcessXid(ReorderBuffer *, TransactionId xid, XLogRecPtr lsn);
 void		ReorderBufferXidSetCatalogChanges(ReorderBuffer *, TransactionId xid, XLogRecPtr lsn);
 bool		ReorderBufferXidHasCatalogChanges(ReorderBuffer *, TransactionId xid);
diff --git a/src/include/replication/slot.h b/src/include/replication/slot.h
index a8f1d66bae4c..8bc7f521d5e9 100644
--- a/src/include/replication/slot.h
+++ b/src/include/replication/slot.h
@@ -181,7 +181,7 @@ extern void ReplicationSlotsShmemInit(void);
 
 /* management of individual slots */
 extern void ReplicationSlotCreate(const char *name, bool db_specific,
-					  ReplicationSlotPersistency p);
+								  ReplicationSlotPersistency p);
 extern void ReplicationSlotPersist(void);
 extern void ReplicationSlotDrop(const char *name, bool nowait);
 
diff --git a/src/include/replication/snapbuild.h b/src/include/replication/snapbuild.h
index b9fec54975ed..392fe1609ba2 100644
--- a/src/include/replication/snapbuild.h
+++ b/src/include/replication/snapbuild.h
@@ -60,8 +60,8 @@ struct xl_running_xacts;
 extern void CheckPointSnapBuild(void);
 
 extern SnapBuild *AllocateSnapshotBuilder(struct ReorderBuffer *cache,
-						TransactionId xmin_horizon, XLogRecPtr start_lsn,
-						bool need_full_snapshot);
+										  TransactionId xmin_horizon, XLogRecPtr start_lsn,
+										  bool need_full_snapshot);
 extern void FreeSnapshotBuilder(SnapBuild *cache);
 
 extern void SnapBuildSnapDecRefcount(Snapshot snap);
@@ -72,19 +72,19 @@ extern void SnapBuildClearExportedSnapshot(void);
 
 extern SnapBuildState SnapBuildCurrentState(SnapBuild *snapstate);
 extern Snapshot SnapBuildGetOrBuildSnapshot(SnapBuild *builder,
-							TransactionId xid);
+											TransactionId xid);
 
 extern bool SnapBuildXactNeedsSkip(SnapBuild *snapstate, XLogRecPtr ptr);
 
 extern void SnapBuildCommitTxn(SnapBuild *builder, XLogRecPtr lsn,
-				   TransactionId xid, int nsubxacts,
-				   TransactionId *subxacts);
+							   TransactionId xid, int nsubxacts,
+							   TransactionId *subxacts);
 extern bool SnapBuildProcessChange(SnapBuild *builder, TransactionId xid,
-					   XLogRecPtr lsn);
+								   XLogRecPtr lsn);
 extern void SnapBuildProcessNewCid(SnapBuild *builder, TransactionId xid,
-					   XLogRecPtr lsn, struct xl_heap_new_cid *cid);
+								   XLogRecPtr lsn, struct xl_heap_new_cid *cid);
 extern void SnapBuildProcessRunningXacts(SnapBuild *builder, XLogRecPtr lsn,
-							 struct xl_running_xacts *running);
+										 struct xl_running_xacts *running);
 extern void SnapBuildSerializationPoint(SnapBuild *builder, XLogRecPtr lsn);
 
 #endif							/* SNAPBUILD_H */
diff --git a/src/include/replication/walreceiver.h b/src/include/replication/walreceiver.h
index 7f2927cb46d2..86a81300517c 100644
--- a/src/include/replication/walreceiver.h
+++ b/src/include/replication/walreceiver.h
@@ -311,7 +311,7 @@ extern void ShutdownWalRcv(void);
 extern bool WalRcvStreaming(void);
 extern bool WalRcvRunning(void);
 extern void RequestXLogStreaming(TimeLineID tli, XLogRecPtr recptr,
-					 const char *conninfo, const char *slotname);
+								 const char *conninfo, const char *slotname);
 extern XLogRecPtr GetWalRcvWriteRecPtr(XLogRecPtr *latestChunkStart, TimeLineID *receiveTLI);
 extern int	GetReplicationApplyDelay(void);
 extern int	GetReplicationTransferLatency(void);
diff --git a/src/include/replication/worker_internal.h b/src/include/replication/worker_internal.h
index 90400c85afba..05f4936419a1 100644
--- a/src/include/replication/worker_internal.h
+++ b/src/include/replication/worker_internal.h
@@ -70,10 +70,10 @@ extern bool in_remote_transaction;
 
 extern void logicalrep_worker_attach(int slot);
 extern LogicalRepWorker *logicalrep_worker_find(Oid subid, Oid relid,
-					   bool only_running);
+												bool only_running);
 extern List *logicalrep_workers_find(Oid subid, bool only_running);
 extern void logicalrep_worker_launch(Oid dbid, Oid subid, const char *subname,
-						 Oid userid, Oid relid);
+									 Oid userid, Oid relid);
 extern void logicalrep_worker_stop(Oid subid, Oid relid);
 extern void logicalrep_worker_stop_at_commit(Oid subid, Oid relid);
 extern void logicalrep_worker_wakeup(Oid subid, Oid relid);
@@ -83,8 +83,8 @@ extern int	logicalrep_sync_worker_count(Oid subid);
 
 extern char *LogicalRepSyncTableStart(XLogRecPtr *origin_startpos);
 void		process_syncing_tables(XLogRecPtr current_lsn);
-void invalidate_syncing_table_states(Datum arg, int cacheid,
-								uint32 hashvalue);
+void		invalidate_syncing_table_states(Datum arg, int cacheid,
+											uint32 hashvalue);
 
 static inline bool
 am_tablesync_worker(void)
diff --git a/src/include/rewrite/rewriteDefine.h b/src/include/rewrite/rewriteDefine.h
index f254a21cfebc..1b45985ea407 100644
--- a/src/include/rewrite/rewriteDefine.h
+++ b/src/include/rewrite/rewriteDefine.h
@@ -26,19 +26,19 @@
 extern ObjectAddress DefineRule(RuleStmt *stmt, const char *queryString);
 
 extern ObjectAddress DefineQueryRewrite(const char *rulename,
-				   Oid event_relid,
-				   Node *event_qual,
-				   CmdType event_type,
-				   bool is_instead,
-				   bool replace,
-				   List *action);
+										Oid event_relid,
+										Node *event_qual,
+										CmdType event_type,
+										bool is_instead,
+										bool replace,
+										List *action);
 
 extern ObjectAddress RenameRewriteRule(RangeVar *relation, const char *oldName,
-				  const char *newName);
+									   const char *newName);
 
 extern void setRuleCheckAsUser(Node *node, Oid userid);
 
 extern void EnableDisableRule(Relation rel, const char *rulename,
-				  char fires_when);
+							  char fires_when);
 
 #endif							/* REWRITEDEFINE_H */
diff --git a/src/include/rewrite/rewriteHandler.h b/src/include/rewrite/rewriteHandler.h
index daeaa373adcd..c55fe81a0a3a 100644
--- a/src/include/rewrite/rewriteHandler.h
+++ b/src/include/rewrite/rewriteHandler.h
@@ -19,18 +19,18 @@
 
 extern List *QueryRewrite(Query *parsetree);
 extern void AcquireRewriteLocks(Query *parsetree,
-					bool forExecute,
-					bool forUpdatePushedDown);
+								bool forExecute,
+								bool forUpdatePushedDown);
 
 extern Node *build_column_default(Relation rel, int attrno);
 extern void rewriteTargetListUD(Query *parsetree, RangeTblEntry *target_rte,
-					Relation target_relation);
+								Relation target_relation);
 
 extern Query *get_view_query(Relation view);
 extern const char *view_query_is_auto_updatable(Query *viewquery,
-							 bool check_cols);
-extern int relation_is_updatable(Oid reloid,
-					  bool include_triggers,
-					  Bitmapset *include_cols);
+												bool check_cols);
+extern int	relation_is_updatable(Oid reloid,
+								  bool include_triggers,
+								  Bitmapset *include_cols);
 
 #endif							/* REWRITEHANDLER_H */
diff --git a/src/include/rewrite/rewriteManip.h b/src/include/rewrite/rewriteManip.h
index 00716548407c..8d8fd17e41c8 100644
--- a/src/include/rewrite/rewriteManip.h
+++ b/src/include/rewrite/rewriteManip.h
@@ -41,14 +41,14 @@ typedef enum ReplaceVarsNoMatchOption
 
 extern void OffsetVarNodes(Node *node, int offset, int sublevels_up);
 extern void ChangeVarNodes(Node *node, int old_varno, int new_varno,
-			   int sublevels_up);
+						   int sublevels_up);
 extern void IncrementVarSublevelsUp(Node *node, int delta_sublevels_up,
-						int min_sublevels_up);
+									int min_sublevels_up);
 extern void IncrementVarSublevelsUp_rtable(List *rtable,
-							   int delta_sublevels_up, int min_sublevels_up);
+										   int delta_sublevels_up, int min_sublevels_up);
 
 extern bool rangeTableEntry_used(Node *node, int rt_index,
-					 int sublevels_up);
+								 int sublevels_up);
 
 extern Query *getInsertSelectQuery(Query *parsetree, Query ***subquery_ptr);
 
@@ -62,24 +62,24 @@ extern int	locate_windowfunc(Node *node);
 extern bool checkExprHasSubLink(Node *node);
 
 extern Node *replace_rte_variables(Node *node,
-					  int target_varno, int sublevels_up,
-					  replace_rte_variables_callback callback,
-					  void *callback_arg,
-					  bool *outer_hasSubLinks);
+								   int target_varno, int sublevels_up,
+								   replace_rte_variables_callback callback,
+								   void *callback_arg,
+								   bool *outer_hasSubLinks);
 extern Node *replace_rte_variables_mutator(Node *node,
-							  replace_rte_variables_context *context);
+										   replace_rte_variables_context *context);
 
 extern Node *map_variable_attnos(Node *node,
-					int target_varno, int sublevels_up,
-					const AttrNumber *attno_map, int map_length,
-					Oid to_rowtype, bool *found_whole_row);
+								 int target_varno, int sublevels_up,
+								 const AttrNumber *attno_map, int map_length,
+								 Oid to_rowtype, bool *found_whole_row);
 
 extern Node *ReplaceVarsFromTargetList(Node *node,
-						  int target_varno, int sublevels_up,
-						  RangeTblEntry *target_rte,
-						  List *targetlist,
-						  ReplaceVarsNoMatchOption nomatch_option,
-						  int nomatch_varno,
-						  bool *outer_hasSubLinks);
+									   int target_varno, int sublevels_up,
+									   RangeTblEntry *target_rte,
+									   List *targetlist,
+									   ReplaceVarsNoMatchOption nomatch_option,
+									   int nomatch_varno,
+									   bool *outer_hasSubLinks);
 
 #endif							/* REWRITEMANIP_H */
diff --git a/src/include/rewrite/rowsecurity.h b/src/include/rewrite/rowsecurity.h
index ba8673c5a938..214d556e5065 100644
--- a/src/include/rewrite/rowsecurity.h
+++ b/src/include/rewrite/rowsecurity.h
@@ -42,8 +42,8 @@ extern PGDLLIMPORT row_security_policy_hook_type row_security_policy_hook_permis
 extern PGDLLIMPORT row_security_policy_hook_type row_security_policy_hook_restrictive;
 
 extern void get_row_security_policies(Query *root,
-						  RangeTblEntry *rte, int rt_index,
-						  List **securityQuals, List **withCheckOptions,
-						  bool *hasRowSecurity, bool *hasSubLinks);
+									  RangeTblEntry *rte, int rt_index,
+									  List **securityQuals, List **withCheckOptions,
+									  bool *hasRowSecurity, bool *hasSubLinks);
 
 #endif							/* ROWSECURITY_H */
diff --git a/src/include/statistics/extended_stats_internal.h b/src/include/statistics/extended_stats_internal.h
index 7235a91a06ab..fb03c52f5049 100644
--- a/src/include/statistics/extended_stats_internal.h
+++ b/src/include/statistics/extended_stats_internal.h
@@ -58,53 +58,53 @@ typedef struct SortItem
 } SortItem;
 
 extern MVNDistinct *statext_ndistinct_build(double totalrows,
-						int numrows, HeapTuple *rows,
-						Bitmapset *attrs, VacAttrStats **stats);
+											int numrows, HeapTuple *rows,
+											Bitmapset *attrs, VacAttrStats **stats);
 extern bytea *statext_ndistinct_serialize(MVNDistinct *ndistinct);
 extern MVNDistinct *statext_ndistinct_deserialize(bytea *data);
 
 extern MVDependencies *statext_dependencies_build(int numrows, HeapTuple *rows,
-						   Bitmapset *attrs, VacAttrStats **stats);
+												  Bitmapset *attrs, VacAttrStats **stats);
 extern bytea *statext_dependencies_serialize(MVDependencies *dependencies);
 extern MVDependencies *statext_dependencies_deserialize(bytea *data);
 
 extern MCVList *statext_mcv_build(int numrows, HeapTuple *rows,
-				  Bitmapset *attrs, VacAttrStats **stats,
-				  double totalrows);
+								  Bitmapset *attrs, VacAttrStats **stats,
+								  double totalrows);
 extern bytea *statext_mcv_serialize(MCVList *mcv, VacAttrStats **stats);
 extern MCVList *statext_mcv_deserialize(bytea *data);
 
 extern MultiSortSupport multi_sort_init(int ndims);
 extern void multi_sort_add_dimension(MultiSortSupport mss, int sortdim,
-						 Oid oper, Oid collation);
+									 Oid oper, Oid collation);
 extern int	multi_sort_compare(const void *a, const void *b, void *arg);
-extern int multi_sort_compare_dim(int dim, const SortItem *a,
-					   const SortItem *b, MultiSortSupport mss);
-extern int multi_sort_compare_dims(int start, int end, const SortItem *a,
-						const SortItem *b, MultiSortSupport mss);
+extern int	multi_sort_compare_dim(int dim, const SortItem *a,
+								   const SortItem *b, MultiSortSupport mss);
+extern int	multi_sort_compare_dims(int start, int end, const SortItem *a,
+									const SortItem *b, MultiSortSupport mss);
 extern int	compare_scalars_simple(const void *a, const void *b, void *arg);
 extern int	compare_datums_simple(Datum a, Datum b, SortSupport ssup);
 
 extern void *bsearch_arg(const void *key, const void *base,
-			size_t nmemb, size_t size,
-			int (*compar) (const void *, const void *, void *),
-			void *arg);
+						 size_t nmemb, size_t size,
+						 int (*compar) (const void *, const void *, void *),
+						 void *arg);
 
 extern AttrNumber *build_attnums_array(Bitmapset *attrs, int *numattrs);
 
 extern SortItem *build_sorted_items(int numrows, int *nitems, HeapTuple *rows,
-				   TupleDesc tdesc, MultiSortSupport mss,
-				   int numattrs, AttrNumber *attnums);
+									TupleDesc tdesc, MultiSortSupport mss,
+									int numattrs, AttrNumber *attnums);
 
 
 extern Selectivity mcv_clauselist_selectivity(PlannerInfo *root,
-						   StatisticExtInfo *stat,
-						   List *clauses,
-						   int varRelid,
-						   JoinType jointype,
-						   SpecialJoinInfo *sjinfo,
-						   RelOptInfo *rel,
-						   Selectivity *basesel,
-						   Selectivity *totalsel);
+											  StatisticExtInfo *stat,
+											  List *clauses,
+											  int varRelid,
+											  JoinType jointype,
+											  SpecialJoinInfo *sjinfo,
+											  RelOptInfo *rel,
+											  Selectivity *basesel,
+											  Selectivity *totalsel);
 
 #endif							/* EXTENDED_STATS_INTERNAL_H */
diff --git a/src/include/statistics/statistics.h b/src/include/statistics/statistics.h
index 6810cf60fa40..d0ab04c0ae92 100644
--- a/src/include/statistics/statistics.h
+++ b/src/include/statistics/statistics.h
@@ -98,25 +98,25 @@ extern MVDependencies *statext_dependencies_load(Oid mvoid);
 extern MCVList *statext_mcv_load(Oid mvoid);
 
 extern void BuildRelationExtStatistics(Relation onerel, double totalrows,
-						   int numrows, HeapTuple *rows,
-						   int natts, VacAttrStats **vacattrstats);
+									   int numrows, HeapTuple *rows,
+									   int natts, VacAttrStats **vacattrstats);
 extern bool statext_is_kind_built(HeapTuple htup, char kind);
 extern Selectivity dependencies_clauselist_selectivity(PlannerInfo *root,
-									List *clauses,
-									int varRelid,
-									JoinType jointype,
-									SpecialJoinInfo *sjinfo,
-									RelOptInfo *rel,
-									Bitmapset **estimatedclauses);
+													   List *clauses,
+													   int varRelid,
+													   JoinType jointype,
+													   SpecialJoinInfo *sjinfo,
+													   RelOptInfo *rel,
+													   Bitmapset **estimatedclauses);
 extern Selectivity statext_clauselist_selectivity(PlannerInfo *root,
-							   List *clauses,
-							   int varRelid,
-							   JoinType jointype,
-							   SpecialJoinInfo *sjinfo,
-							   RelOptInfo *rel,
-							   Bitmapset **estimatedclauses);
+												  List *clauses,
+												  int varRelid,
+												  JoinType jointype,
+												  SpecialJoinInfo *sjinfo,
+												  RelOptInfo *rel,
+												  Bitmapset **estimatedclauses);
 extern bool has_stats_of_kind(List *stats, char requiredkind);
 extern StatisticExtInfo *choose_best_statistics(List *stats,
-					   Bitmapset *attnums, char requiredkind);
+												Bitmapset *attnums, char requiredkind);
 
 #endif							/* STATISTICS_H */
diff --git a/src/include/storage/buf_internals.h b/src/include/storage/buf_internals.h
index ba1b5463fc3a..df2dda7e7e73 100644
--- a/src/include/storage/buf_internals.h
+++ b/src/include/storage/buf_internals.h
@@ -307,10 +307,10 @@ extern void ScheduleBufferTagForWriteback(WritebackContext *context, BufferTag *
 
 /* freelist.c */
 extern BufferDesc *StrategyGetBuffer(BufferAccessStrategy strategy,
-				  uint32 *buf_state);
+									 uint32 *buf_state);
 extern void StrategyFreeBuffer(BufferDesc *buf);
 extern bool StrategyRejectBuffer(BufferAccessStrategy strategy,
-					 BufferDesc *buf);
+								 BufferDesc *buf);
 
 extern int	StrategySyncStart(uint32 *complete_passes, uint32 *num_buf_alloc);
 extern void StrategyNotifyBgWriter(int bgwprocno);
@@ -329,12 +329,12 @@ extern void BufTableDelete(BufferTag *tagPtr, uint32 hashcode);
 
 /* localbuf.c */
 extern void LocalPrefetchBuffer(SMgrRelation smgr, ForkNumber forkNum,
-					BlockNumber blockNum);
+								BlockNumber blockNum);
 extern BufferDesc *LocalBufferAlloc(SMgrRelation smgr, ForkNumber forkNum,
-				 BlockNumber blockNum, bool *foundPtr);
+									BlockNumber blockNum, bool *foundPtr);
 extern void MarkLocalBufferDirty(Buffer buffer);
 extern void DropRelFileNodeLocalBuffers(RelFileNode rnode, ForkNumber forkNum,
-							BlockNumber firstDelBlock);
+										BlockNumber firstDelBlock);
 extern void DropRelFileNodeAllLocalBuffers(RelFileNode rnode);
 extern void AtEOXact_LocalBuffers(bool isCommit);
 
diff --git a/src/include/storage/bufmgr.h b/src/include/storage/bufmgr.h
index c5826f691de2..509f4b7ef1c4 100644
--- a/src/include/storage/bufmgr.h
+++ b/src/include/storage/bufmgr.h
@@ -163,20 +163,20 @@ extern PGDLLIMPORT int32 *LocalRefCount;
  */
 extern bool ComputeIoConcurrency(int io_concurrency, double *target);
 extern void PrefetchBuffer(Relation reln, ForkNumber forkNum,
-			   BlockNumber blockNum);
+						   BlockNumber blockNum);
 extern Buffer ReadBuffer(Relation reln, BlockNumber blockNum);
 extern Buffer ReadBufferExtended(Relation reln, ForkNumber forkNum,
-				   BlockNumber blockNum, ReadBufferMode mode,
-				   BufferAccessStrategy strategy);
+								 BlockNumber blockNum, ReadBufferMode mode,
+								 BufferAccessStrategy strategy);
 extern Buffer ReadBufferWithoutRelcache(RelFileNode rnode,
-						  ForkNumber forkNum, BlockNumber blockNum,
-						  ReadBufferMode mode, BufferAccessStrategy strategy);
+										ForkNumber forkNum, BlockNumber blockNum,
+										ReadBufferMode mode, BufferAccessStrategy strategy);
 extern void ReleaseBuffer(Buffer buffer);
 extern void UnlockReleaseBuffer(Buffer buffer);
 extern void MarkBufferDirty(Buffer buffer);
 extern void IncrBufferRefCount(Buffer buffer);
 extern Buffer ReleaseAndReadBuffer(Buffer buffer, Relation relation,
-					 BlockNumber blockNum);
+								   BlockNumber blockNum);
 
 extern void InitBufferPool(void);
 extern void InitBufferPoolAccess(void);
@@ -186,12 +186,12 @@ extern void PrintBufferLeakWarning(Buffer buffer);
 extern void CheckPointBuffers(int flags);
 extern BlockNumber BufferGetBlockNumber(Buffer buffer);
 extern BlockNumber RelationGetNumberOfBlocksInFork(Relation relation,
-								ForkNumber forkNum);
+												   ForkNumber forkNum);
 extern void FlushOneBuffer(Buffer buffer);
 extern void FlushRelationBuffers(Relation rel);
 extern void FlushDatabaseBuffers(Oid dbid);
 extern void DropRelFileNodeBuffers(RelFileNodeBackend rnode,
-					   ForkNumber forkNum, BlockNumber firstDelBlock);
+								   ForkNumber forkNum, BlockNumber firstDelBlock);
 extern void DropRelFileNodesAllBuffers(RelFileNodeBackend *rnodes, int nnodes);
 extern void DropDatabaseBuffers(Oid dbid);
 
@@ -206,7 +206,7 @@ extern void PrintPinnedBufs(void);
 #endif
 extern Size BufferShmemSize(void);
 extern void BufferGetTag(Buffer buffer, RelFileNode *rnode,
-			 ForkNumber *forknum, BlockNumber *blknum);
+						 ForkNumber *forknum, BlockNumber *blknum);
 
 extern void MarkBufferDirtyHint(Buffer buffer, bool buffer_std);
 
diff --git a/src/include/storage/bufpage.h b/src/include/storage/bufpage.h
index 87f16557ba5d..34b68ad0e002 100644
--- a/src/include/storage/bufpage.h
+++ b/src/include/storage/bufpage.h
@@ -421,7 +421,7 @@ do { \
 extern void PageInit(Page page, Size pageSize, Size specialSize);
 extern bool PageIsVerified(Page page, BlockNumber blkno);
 extern OffsetNumber PageAddItemExtended(Page page, Item item, Size size,
-					OffsetNumber offsetNumber, int flags);
+										OffsetNumber offsetNumber, int flags);
 extern Page PageGetTempPage(Page page);
 extern Page PageGetTempPageCopy(Page page);
 extern Page PageGetTempPageCopySpecial(Page page);
@@ -435,7 +435,7 @@ extern void PageIndexTupleDelete(Page page, OffsetNumber offset);
 extern void PageIndexMultiDelete(Page page, OffsetNumber *itemnos, int nitems);
 extern void PageIndexTupleDeleteNoCompact(Page page, OffsetNumber offset);
 extern bool PageIndexTupleOverwrite(Page page, OffsetNumber offnum,
-						Item newtup, Size newsize);
+									Item newtup, Size newsize);
 extern char *PageSetChecksumCopy(Page page, BlockNumber blkno);
 extern void PageSetChecksumInplace(Page page, BlockNumber blkno);
 
diff --git a/src/include/storage/dsm.h b/src/include/storage/dsm.h
index 7c44f4a6e7b3..db4f689c0fbc 100644
--- a/src/include/storage/dsm.h
+++ b/src/include/storage/dsm.h
@@ -53,9 +53,9 @@ extern dsm_handle dsm_segment_handle(dsm_segment *seg);
 /* Cleanup hooks. */
 typedef void (*on_dsm_detach_callback) (dsm_segment *, Datum arg);
 extern void on_dsm_detach(dsm_segment *seg,
-			  on_dsm_detach_callback function, Datum arg);
+						  on_dsm_detach_callback function, Datum arg);
 extern void cancel_on_dsm_detach(dsm_segment *seg,
-					 on_dsm_detach_callback function, Datum arg);
+								 on_dsm_detach_callback function, Datum arg);
 extern void reset_on_dsm_detach(void);
 
 #endif							/* DSM_H */
diff --git a/src/include/storage/dsm_impl.h b/src/include/storage/dsm_impl.h
index 8991f024dfe8..1dc557b791a6 100644
--- a/src/include/storage/dsm_impl.h
+++ b/src/include/storage/dsm_impl.h
@@ -64,12 +64,12 @@ typedef enum
 
 /* Create, attach to, detach from, resize, or destroy a segment. */
 extern bool dsm_impl_op(dsm_op op, dsm_handle handle, Size request_size,
-			void **impl_private, void **mapped_address, Size *mapped_size,
-			int elevel);
+						void **impl_private, void **mapped_address, Size *mapped_size,
+						int elevel);
 
 /* Implementation-dependent actions required to keep segment until shutdown. */
 extern void dsm_impl_pin_segment(dsm_handle handle, void *impl_private,
-					 void **impl_private_pm_handle);
+								 void **impl_private_pm_handle);
 extern void dsm_impl_unpin_segment(dsm_handle handle, void **impl_private);
 
 #endif							/* DSM_IMPL_H */
diff --git a/src/include/storage/fd.h b/src/include/storage/fd.h
index 53f69d46db9e..9959258d7d0f 100644
--- a/src/include/storage/fd.h
+++ b/src/include/storage/fd.h
@@ -108,7 +108,7 @@ extern int	ClosePipeStream(FILE *file);
 extern DIR *AllocateDir(const char *dirname);
 extern struct dirent *ReadDir(DIR *dir, const char *dirname);
 extern struct dirent *ReadDirExtended(DIR *dir, const char *dirname,
-				int elevel);
+									  int elevel);
 extern int	FreeDir(DIR *dir);
 
 /* Operations to allow use of a plain kernel FD, with automatic cleanup */
@@ -133,7 +133,7 @@ extern int	GetTempTablespaces(Oid *tableSpaces, int numSpaces);
 extern Oid	GetNextTempTableSpace(void);
 extern void AtEOXact_Files(bool isCommit);
 extern void AtEOSubXact_Files(bool isCommit, SubTransactionId mySubid,
-				  SubTransactionId parentSubid);
+							  SubTransactionId parentSubid);
 extern void RemovePgTempFiles(void);
 extern bool looks_like_temp_rel_name(const char *name);
 
diff --git a/src/include/storage/freespace.h b/src/include/storage/freespace.h
index 8b0003343827..8d8c465d7bdc 100644
--- a/src/include/storage/freespace.h
+++ b/src/include/storage/freespace.h
@@ -22,17 +22,17 @@
 extern Size GetRecordedFreeSpace(Relation rel, BlockNumber heapBlk);
 extern BlockNumber GetPageWithFreeSpace(Relation rel, Size spaceNeeded);
 extern BlockNumber RecordAndGetPageWithFreeSpace(Relation rel,
-							  BlockNumber oldPage,
-							  Size oldSpaceAvail,
-							  Size spaceNeeded);
+												 BlockNumber oldPage,
+												 Size oldSpaceAvail,
+												 Size spaceNeeded);
 extern void RecordPageWithFreeSpace(Relation rel, BlockNumber heapBlk,
-						Size spaceAvail);
+									Size spaceAvail);
 extern void XLogRecordPageWithFreeSpace(RelFileNode rnode, BlockNumber heapBlk,
-							Size spaceAvail);
+										Size spaceAvail);
 
 extern void FreeSpaceMapTruncateRel(Relation rel, BlockNumber nblocks);
 extern void FreeSpaceMapVacuum(Relation rel);
 extern void FreeSpaceMapVacuumRange(Relation rel, BlockNumber start,
-						BlockNumber end);
+									BlockNumber end);
 
 #endif							/* FREESPACE_H_ */
diff --git a/src/include/storage/fsm_internals.h b/src/include/storage/fsm_internals.h
index 67899b12a56d..0e27db07f2f3 100644
--- a/src/include/storage/fsm_internals.h
+++ b/src/include/storage/fsm_internals.h
@@ -61,8 +61,8 @@ typedef FSMPageData *FSMPage;
 #define SlotsPerFSMPage LeafNodesPerPage
 
 /* Prototypes for functions in fsmpage.c */
-extern int fsm_search_avail(Buffer buf, uint8 min_cat, bool advancenext,
-				 bool exclusive_lock_held);
+extern int	fsm_search_avail(Buffer buf, uint8 min_cat, bool advancenext,
+							 bool exclusive_lock_held);
 extern uint8 fsm_get_avail(Page page, int slot);
 extern uint8 fsm_get_max_avail(Page page);
 extern bool fsm_set_avail(Page page, int slot, uint8 value);
diff --git a/src/include/storage/itemptr.h b/src/include/storage/itemptr.h
index 3364eebdcb68..7eb274adac90 100644
--- a/src/include/storage/itemptr.h
+++ b/src/include/storage/itemptr.h
@@ -41,8 +41,8 @@ typedef struct ItemPointerData
 
 /* If compiler understands packed and aligned pragmas, use those */
 #if defined(pg_attribute_packed) && defined(pg_attribute_aligned)
-pg_attribute_packed()
-pg_attribute_aligned(2)
+			pg_attribute_packed()
+			pg_attribute_aligned(2)
 #endif
 ItemPointerData;
 
diff --git a/src/include/storage/latch.h b/src/include/storage/latch.h
index fc995819d352..bd7af11a8add 100644
--- a/src/include/storage/latch.h
+++ b/src/include/storage/latch.h
@@ -165,17 +165,17 @@ extern void ResetLatch(Latch *latch);
 
 extern WaitEventSet *CreateWaitEventSet(MemoryContext context, int nevents);
 extern void FreeWaitEventSet(WaitEventSet *set);
-extern int AddWaitEventToSet(WaitEventSet *set, uint32 events, pgsocket fd,
-				  Latch *latch, void *user_data);
+extern int	AddWaitEventToSet(WaitEventSet *set, uint32 events, pgsocket fd,
+							  Latch *latch, void *user_data);
 extern void ModifyWaitEvent(WaitEventSet *set, int pos, uint32 events, Latch *latch);
 
-extern int WaitEventSetWait(WaitEventSet *set, long timeout,
-				 WaitEvent *occurred_events, int nevents,
-				 uint32 wait_event_info);
-extern int WaitLatch(Latch *latch, int wakeEvents, long timeout,
-		  uint32 wait_event_info);
-extern int WaitLatchOrSocket(Latch *latch, int wakeEvents,
-				  pgsocket sock, long timeout, uint32 wait_event_info);
+extern int	WaitEventSetWait(WaitEventSet *set, long timeout,
+							 WaitEvent *occurred_events, int nevents,
+							 uint32 wait_event_info);
+extern int	WaitLatch(Latch *latch, int wakeEvents, long timeout,
+					  uint32 wait_event_info);
+extern int	WaitLatchOrSocket(Latch *latch, int wakeEvents,
+							  pgsocket sock, long timeout, uint32 wait_event_info);
 
 /*
  * Unix implementation uses SIGUSR1 for inter-process signaling.
diff --git a/src/include/storage/lmgr.h b/src/include/storage/lmgr.h
index 4f2872de35f0..099e18f2b757 100644
--- a/src/include/storage/lmgr.h
+++ b/src/include/storage/lmgr.h
@@ -46,7 +46,7 @@ extern void LockRelation(Relation relation, LOCKMODE lockmode);
 extern bool ConditionalLockRelation(Relation relation, LOCKMODE lockmode);
 extern void UnlockRelation(Relation relation, LOCKMODE lockmode);
 extern bool CheckRelationLockedByMe(Relation relation, LOCKMODE lockmode,
-						bool orstronger);
+									bool orstronger);
 extern bool LockHasWaitersRelation(Relation relation, LOCKMODE lockmode);
 
 extern void LockRelationIdForSession(LockRelId *relid, LOCKMODE lockmode);
@@ -56,7 +56,7 @@ extern void UnlockRelationIdForSession(LockRelId *relid, LOCKMODE lockmode);
 extern void LockRelationForExtension(Relation relation, LOCKMODE lockmode);
 extern void UnlockRelationForExtension(Relation relation, LOCKMODE lockmode);
 extern bool ConditionalLockRelationForExtension(Relation relation,
-									LOCKMODE lockmode);
+												LOCKMODE lockmode);
 extern int	RelationExtensionLockWaiterCount(Relation relation);
 
 /* Lock a page (currently only used within indexes) */
@@ -67,14 +67,14 @@ extern void UnlockPage(Relation relation, BlockNumber blkno, LOCKMODE lockmode);
 /* Lock a tuple (see heap_lock_tuple before assuming you understand this) */
 extern void LockTuple(Relation relation, ItemPointer tid, LOCKMODE lockmode);
 extern bool ConditionalLockTuple(Relation relation, ItemPointer tid,
-					 LOCKMODE lockmode);
+								 LOCKMODE lockmode);
 extern void UnlockTuple(Relation relation, ItemPointer tid, LOCKMODE lockmode);
 
 /* Lock an XID (used to wait for a transaction to finish) */
 extern void XactLockTableInsert(TransactionId xid);
 extern void XactLockTableDelete(TransactionId xid);
 extern void XactLockTableWait(TransactionId xid, Relation rel,
-				  ItemPointer ctid, XLTW_Oper oper);
+							  ItemPointer ctid, XLTW_Oper oper);
 extern bool ConditionalXactLockTableWait(TransactionId xid);
 
 /* Lock VXIDs, specified by conflicting locktags */
@@ -88,20 +88,20 @@ extern void SpeculativeInsertionWait(TransactionId xid, uint32 token);
 
 /* Lock a general object (other than a relation) of the current database */
 extern void LockDatabaseObject(Oid classid, Oid objid, uint16 objsubid,
-				   LOCKMODE lockmode);
+							   LOCKMODE lockmode);
 extern void UnlockDatabaseObject(Oid classid, Oid objid, uint16 objsubid,
-					 LOCKMODE lockmode);
+								 LOCKMODE lockmode);
 
 /* Lock a shared-across-databases object (other than a relation) */
 extern void LockSharedObject(Oid classid, Oid objid, uint16 objsubid,
-				 LOCKMODE lockmode);
+							 LOCKMODE lockmode);
 extern void UnlockSharedObject(Oid classid, Oid objid, uint16 objsubid,
-				   LOCKMODE lockmode);
+							   LOCKMODE lockmode);
 
 extern void LockSharedObjectForSession(Oid classid, Oid objid, uint16 objsubid,
-						   LOCKMODE lockmode);
+									   LOCKMODE lockmode);
 extern void UnlockSharedObjectForSession(Oid classid, Oid objid, uint16 objsubid,
-							 LOCKMODE lockmode);
+										 LOCKMODE lockmode);
 
 /* Describe a locktag for error messages */
 extern void DescribeLockTag(StringInfo buf, const LOCKTAG *tag);
diff --git a/src/include/storage/lock.h b/src/include/storage/lock.h
index 38097520740f..986bb6433a05 100644
--- a/src/include/storage/lock.h
+++ b/src/include/storage/lock.h
@@ -527,33 +527,33 @@ extern LockMethod GetLockTagsMethodTable(const LOCKTAG *locktag);
 extern uint32 LockTagHashCode(const LOCKTAG *locktag);
 extern bool DoLockModesConflict(LOCKMODE mode1, LOCKMODE mode2);
 extern LockAcquireResult LockAcquire(const LOCKTAG *locktag,
-			LOCKMODE lockmode,
-			bool sessionLock,
-			bool dontWait);
+									 LOCKMODE lockmode,
+									 bool sessionLock,
+									 bool dontWait);
 extern LockAcquireResult LockAcquireExtended(const LOCKTAG *locktag,
-					LOCKMODE lockmode,
-					bool sessionLock,
-					bool dontWait,
-					bool reportMemoryError,
-					LOCALLOCK **locallockp);
+											 LOCKMODE lockmode,
+											 bool sessionLock,
+											 bool dontWait,
+											 bool reportMemoryError,
+											 LOCALLOCK **locallockp);
 extern void AbortStrongLockAcquire(void);
 extern void MarkLockClear(LOCALLOCK *locallock);
 extern bool LockRelease(const LOCKTAG *locktag,
-			LOCKMODE lockmode, bool sessionLock);
+						LOCKMODE lockmode, bool sessionLock);
 extern void LockReleaseAll(LOCKMETHODID lockmethodid, bool allLocks);
 extern void LockReleaseSession(LOCKMETHODID lockmethodid);
 extern void LockReleaseCurrentOwner(LOCALLOCK **locallocks, int nlocks);
 extern void LockReassignCurrentOwner(LOCALLOCK **locallocks, int nlocks);
 extern bool LockHeldByMe(const LOCKTAG *locktag, LOCKMODE lockmode);
 extern bool LockHasWaiters(const LOCKTAG *locktag,
-			   LOCKMODE lockmode, bool sessionLock);
+						   LOCKMODE lockmode, bool sessionLock);
 extern VirtualTransactionId *GetLockConflicts(const LOCKTAG *locktag,
-				 LOCKMODE lockmode, int *countp);
+											  LOCKMODE lockmode, int *countp);
 extern void AtPrepare_Locks(void);
 extern void PostPrepare_Locks(TransactionId xid);
-extern int LockCheckConflicts(LockMethod lockMethodTable,
-				   LOCKMODE lockmode,
-				   LOCK *lock, PROCLOCK *proclock);
+extern int	LockCheckConflicts(LockMethod lockMethodTable,
+							   LOCKMODE lockmode,
+							   LOCK *lock, PROCLOCK *proclock);
 extern void GrantLock(LOCK *lock, PROCLOCK *proclock, LOCKMODE lockmode);
 extern void GrantAwaitedLock(void);
 extern void RemoveFromWaitQueue(PGPROC *proc, uint32 hashcode);
@@ -565,21 +565,21 @@ extern xl_standby_lock *GetRunningTransactionLocks(int *nlocks);
 extern const char *GetLockmodeName(LOCKMETHODID lockmethodid, LOCKMODE mode);
 
 extern void lock_twophase_recover(TransactionId xid, uint16 info,
-					  void *recdata, uint32 len);
+								  void *recdata, uint32 len);
 extern void lock_twophase_postcommit(TransactionId xid, uint16 info,
-						 void *recdata, uint32 len);
+									 void *recdata, uint32 len);
 extern void lock_twophase_postabort(TransactionId xid, uint16 info,
-						void *recdata, uint32 len);
+									void *recdata, uint32 len);
 extern void lock_twophase_standby_recover(TransactionId xid, uint16 info,
-							  void *recdata, uint32 len);
+										  void *recdata, uint32 len);
 
 extern DeadLockState DeadLockCheck(PGPROC *proc);
 extern PGPROC *GetBlockingAutoVacuumPgproc(void);
 extern void DeadLockReport(void) pg_attribute_noreturn();
 extern void RememberSimpleDeadLock(PGPROC *proc1,
-					   LOCKMODE lockmode,
-					   LOCK *lock,
-					   PGPROC *proc2);
+								   LOCKMODE lockmode,
+								   LOCK *lock,
+								   PGPROC *proc2);
 extern void InitDeadLockChecking(void);
 
 extern int	LockWaiterCount(const LOCKTAG *locktag);
diff --git a/src/include/storage/md.h b/src/include/storage/md.h
index b038c8b1ae33..df24b9316131 100644
--- a/src/include/storage/md.h
+++ b/src/include/storage/md.h
@@ -26,18 +26,18 @@ extern void mdcreate(SMgrRelation reln, ForkNumber forknum, bool isRedo);
 extern bool mdexists(SMgrRelation reln, ForkNumber forknum);
 extern void mdunlink(RelFileNodeBackend rnode, ForkNumber forknum, bool isRedo);
 extern void mdextend(SMgrRelation reln, ForkNumber forknum,
-		 BlockNumber blocknum, char *buffer, bool skipFsync);
+					 BlockNumber blocknum, char *buffer, bool skipFsync);
 extern void mdprefetch(SMgrRelation reln, ForkNumber forknum,
-		   BlockNumber blocknum);
+					   BlockNumber blocknum);
 extern void mdread(SMgrRelation reln, ForkNumber forknum, BlockNumber blocknum,
-	   char *buffer);
+				   char *buffer);
 extern void mdwrite(SMgrRelation reln, ForkNumber forknum,
-		BlockNumber blocknum, char *buffer, bool skipFsync);
+					BlockNumber blocknum, char *buffer, bool skipFsync);
 extern void mdwriteback(SMgrRelation reln, ForkNumber forknum,
-			BlockNumber blocknum, BlockNumber nblocks);
+						BlockNumber blocknum, BlockNumber nblocks);
 extern BlockNumber mdnblocks(SMgrRelation reln, ForkNumber forknum);
 extern void mdtruncate(SMgrRelation reln, ForkNumber forknum,
-		   BlockNumber nblocks);
+					   BlockNumber nblocks);
 extern void mdimmedsync(SMgrRelation reln, ForkNumber forknum);
 
 extern void ForgetDatabaseSyncRequests(Oid dbid);
diff --git a/src/include/storage/pg_shmem.h b/src/include/storage/pg_shmem.h
index 0535d4545c9c..ac24878efbfe 100644
--- a/src/include/storage/pg_shmem.h
+++ b/src/include/storage/pg_shmem.h
@@ -83,7 +83,7 @@ extern void PGSharedMemoryNoReAttach(void);
 #endif
 
 extern PGShmemHeader *PGSharedMemoryCreate(Size size, int port,
-					 PGShmemHeader **shim);
+										   PGShmemHeader **shim);
 extern bool PGSharedMemoryIsInUse(unsigned long id1, unsigned long id2);
 extern void PGSharedMemoryDetach(void);
 
diff --git a/src/include/storage/predicate.h b/src/include/storage/predicate.h
index 23980c6ede75..376245ecd706 100644
--- a/src/include/storage/predicate.h
+++ b/src/include/storage/predicate.h
@@ -52,8 +52,8 @@ extern bool PageIsPredicateLocked(Relation relation, BlockNumber blkno);
 /* predicate lock maintenance */
 extern Snapshot GetSerializableTransactionSnapshot(Snapshot snapshot);
 extern void SetSerializableTransactionSnapshot(Snapshot snapshot,
-								   VirtualTransactionId *sourcevxid,
-								   int sourcepid);
+											   VirtualTransactionId *sourcevxid,
+											   int sourcepid);
 extern void RegisterPredicateLockingXid(TransactionId xid);
 extern void PredicateLockRelation(Relation relation, Snapshot snapshot);
 extern void PredicateLockPage(Relation relation, BlockNumber blkno, Snapshot snapshot);
@@ -65,7 +65,7 @@ extern void ReleasePredicateLocks(bool isCommit, bool isReadOnlySafe);
 
 /* conflict detection (may also trigger rollback) */
 extern void CheckForSerializableConflictOut(bool valid, Relation relation, HeapTuple tuple,
-								Buffer buffer, Snapshot snapshot);
+											Buffer buffer, Snapshot snapshot);
 extern void CheckForSerializableConflictIn(Relation relation, HeapTuple tuple, Buffer buffer);
 extern void CheckTableForSerializableConflictIn(Relation relation);
 
@@ -77,7 +77,7 @@ extern void AtPrepare_PredicateLocks(void);
 extern void PostPrepare_PredicateLocks(TransactionId xid);
 extern void PredicateLockTwoPhaseFinish(TransactionId xid, bool isCommit);
 extern void predicatelock_twophase_recover(TransactionId xid, uint16 info,
-							   void *recdata, uint32 len);
+										   void *recdata, uint32 len);
 
 /* parallel query support */
 extern SerializableXactHandle ShareSerializableXact(void);
diff --git a/src/include/storage/predicate_internals.h b/src/include/storage/predicate_internals.h
index 451ec0eecdf7..de7a846cf353 100644
--- a/src/include/storage/predicate_internals.h
+++ b/src/include/storage/predicate_internals.h
@@ -483,7 +483,7 @@ typedef struct TwoPhasePredicateRecord
  * locking internals.
  */
 extern PredicateLockData *GetPredicateLockStatusData(void);
-extern int GetSafeSnapshotBlockingPids(int blocked_pid,
-							int *output, int output_size);
+extern int	GetSafeSnapshotBlockingPids(int blocked_pid,
+										int *output, int output_size);
 
 #endif							/* PREDICATE_INTERNALS_H */
diff --git a/src/include/storage/procarray.h b/src/include/storage/procarray.h
index bd2485098925..da8b672096f3 100644
--- a/src/include/storage/procarray.h
+++ b/src/include/storage/procarray.h
@@ -66,12 +66,12 @@ extern void ProcArrayClearTransaction(PGPROC *proc);
 extern void ProcArrayInitRecovery(TransactionId initializedUptoXID);
 extern void ProcArrayApplyRecoveryInfo(RunningTransactions running);
 extern void ProcArrayApplyXidAssignment(TransactionId topxid,
-							int nsubxids, TransactionId *subxids);
+										int nsubxids, TransactionId *subxids);
 
 extern void RecordKnownAssignedTransactionIds(TransactionId xid);
 extern void ExpireTreeKnownAssignedTransactionIds(TransactionId xid,
-									  int nsubxids, TransactionId *subxids,
-									  TransactionId max_xid);
+												  int nsubxids, TransactionId *subxids,
+												  TransactionId max_xid);
 extern void ExpireAllKnownAssignedTransactionIds(void);
 extern void ExpireOldKnownAssignedTransactionIds(TransactionId xid);
 
@@ -81,7 +81,7 @@ extern int	GetMaxSnapshotSubxidCount(void);
 extern Snapshot GetSnapshotData(Snapshot snapshot);
 
 extern bool ProcArrayInstallImportedXmin(TransactionId xmin,
-							 VirtualTransactionId *sourcevxid);
+										 VirtualTransactionId *sourcevxid);
 extern bool ProcArrayInstallRestoredXmin(TransactionId xmin, PGPROC *proc);
 
 extern RunningTransactions GetRunningTransactionData(void);
@@ -101,8 +101,8 @@ extern int	BackendXidGetPid(TransactionId xid);
 extern bool IsBackendPid(int pid);
 
 extern VirtualTransactionId *GetCurrentVirtualXIDs(TransactionId limitXmin,
-					  bool excludeXmin0, bool allDbs, int excludeVacuum,
-					  int *nvxids);
+												   bool excludeXmin0, bool allDbs, int excludeVacuum,
+												   int *nvxids);
 extern VirtualTransactionId *GetConflictingVirtualXIDs(TransactionId limitXmin, Oid dbOid);
 extern pid_t CancelVirtualTransaction(VirtualTransactionId vxid, ProcSignalReason sigmode);
 
@@ -112,16 +112,16 @@ extern int	CountDBConnections(Oid databaseid);
 extern void CancelDBBackends(Oid databaseid, ProcSignalReason sigmode, bool conflictPending);
 extern int	CountUserBackends(Oid roleid);
 extern bool CountOtherDBBackends(Oid databaseId,
-					 int *nbackends, int *nprepared);
+								 int *nbackends, int *nprepared);
 
 extern void XidCacheRemoveRunningXids(TransactionId xid,
-						  int nxids, const TransactionId *xids,
-						  TransactionId latestXid);
+									  int nxids, const TransactionId *xids,
+									  TransactionId latestXid);
 
 extern void ProcArraySetReplicationSlotXmin(TransactionId xmin,
-								TransactionId catalog_xmin, bool already_locked);
+											TransactionId catalog_xmin, bool already_locked);
 
 extern void ProcArrayGetReplicationSlotXmin(TransactionId *xmin,
-								TransactionId *catalog_xmin);
+											TransactionId *catalog_xmin);
 
 #endif							/* PROCARRAY_H */
diff --git a/src/include/storage/procsignal.h b/src/include/storage/procsignal.h
index 9f2f965d5c1c..05b186a05c20 100644
--- a/src/include/storage/procsignal.h
+++ b/src/include/storage/procsignal.h
@@ -52,8 +52,8 @@ extern Size ProcSignalShmemSize(void);
 extern void ProcSignalShmemInit(void);
 
 extern void ProcSignalInit(int pss_idx);
-extern int SendProcSignal(pid_t pid, ProcSignalReason reason,
-			   BackendId backendId);
+extern int	SendProcSignal(pid_t pid, ProcSignalReason reason,
+						   BackendId backendId);
 
 extern void procsignal_sigusr1_handler(SIGNAL_ARGS);
 
diff --git a/src/include/storage/reinit.h b/src/include/storage/reinit.h
index 36eeef4aec3b..63d0b56d48e4 100644
--- a/src/include/storage/reinit.h
+++ b/src/include/storage/reinit.h
@@ -20,7 +20,7 @@
 
 extern void ResetUnloggedRelations(int op);
 extern bool parse_filename_for_nontemp_relation(const char *name,
-									int *oidchars, ForkNumber *fork);
+												int *oidchars, ForkNumber *fork);
 
 #define UNLOGGED_RELATION_CLEANUP		0x0001
 #define UNLOGGED_RELATION_INIT			0x0002
diff --git a/src/include/storage/sharedfileset.h b/src/include/storage/sharedfileset.h
index 978707899122..2d3667435b89 100644
--- a/src/include/storage/sharedfileset.h
+++ b/src/include/storage/sharedfileset.h
@@ -39,7 +39,7 @@ extern void SharedFileSetAttach(SharedFileSet *fileset, dsm_segment *seg);
 extern File SharedFileSetCreate(SharedFileSet *fileset, const char *name);
 extern File SharedFileSetOpen(SharedFileSet *fileset, const char *name);
 extern bool SharedFileSetDelete(SharedFileSet *fileset, const char *name,
-					bool error_on_failure);
+								bool error_on_failure);
 extern void SharedFileSetDeleteAll(SharedFileSet *fileset);
 
 #endif
diff --git a/src/include/storage/shm_mq.h b/src/include/storage/shm_mq.h
index d587ec96960f..02d8055d8ab1 100644
--- a/src/include/storage/shm_mq.h
+++ b/src/include/storage/shm_mq.h
@@ -57,7 +57,7 @@ extern PGPROC *shm_mq_get_sender(shm_mq *);
 
 /* Set up backend-local queue state. */
 extern shm_mq_handle *shm_mq_attach(shm_mq *mq, dsm_segment *seg,
-			  BackgroundWorkerHandle *handle);
+									BackgroundWorkerHandle *handle);
 
 /* Associate worker handle with shm_mq. */
 extern void shm_mq_set_handle(shm_mq_handle *, BackgroundWorkerHandle *);
@@ -70,11 +70,11 @@ extern shm_mq *shm_mq_get_queue(shm_mq_handle *mqh);
 
 /* Send or receive messages. */
 extern shm_mq_result shm_mq_send(shm_mq_handle *mqh,
-			Size nbytes, const void *data, bool nowait);
+								 Size nbytes, const void *data, bool nowait);
 extern shm_mq_result shm_mq_sendv(shm_mq_handle *mqh,
-			 shm_mq_iovec *iov, int iovcnt, bool nowait);
+								  shm_mq_iovec *iov, int iovcnt, bool nowait);
 extern shm_mq_result shm_mq_receive(shm_mq_handle *mqh,
-			   Size *nbytesp, void **datap, bool nowait);
+									Size *nbytesp, void **datap, bool nowait);
 
 /* Wait for our counterparty to attach to the queue. */
 extern shm_mq_result shm_mq_wait_for_attach(shm_mq_handle *mqh);
diff --git a/src/include/storage/shmem.h b/src/include/storage/shmem.h
index 4499291a3159..876e90861139 100644
--- a/src/include/storage/shmem.h
+++ b/src/include/storage/shmem.h
@@ -40,7 +40,7 @@ extern void *ShmemAllocUnlocked(Size size);
 extern bool ShmemAddrIsValid(const void *addr);
 extern void InitShmemIndex(void);
 extern HTAB *ShmemInitHash(const char *name, long init_size, long max_size,
-			  HASHCTL *infoP, int hash_flags);
+						   HASHCTL *infoP, int hash_flags);
 extern void *ShmemInitStruct(const char *name, Size size, bool *foundPtr);
 extern Size add_size(Size s1, Size s2);
 extern Size mul_size(Size s1, Size s2);
@@ -71,9 +71,9 @@ extern void SHMQueueDelete(SHM_QUEUE *queue);
 extern void SHMQueueInsertBefore(SHM_QUEUE *queue, SHM_QUEUE *elem);
 extern void SHMQueueInsertAfter(SHM_QUEUE *queue, SHM_QUEUE *elem);
 extern Pointer SHMQueueNext(const SHM_QUEUE *queue, const SHM_QUEUE *curElem,
-			 Size linkOffset);
+							Size linkOffset);
 extern Pointer SHMQueuePrev(const SHM_QUEUE *queue, const SHM_QUEUE *curElem,
-			 Size linkOffset);
+							Size linkOffset);
 extern bool SHMQueueEmpty(const SHM_QUEUE *queue);
 extern bool SHMQueueIsDetached(const SHM_QUEUE *queue);
 
diff --git a/src/include/storage/sinval.h b/src/include/storage/sinval.h
index 635acda0a6e1..c2875a9d329a 100644
--- a/src/include/storage/sinval.h
+++ b/src/include/storage/sinval.h
@@ -128,10 +128,10 @@ extern uint64 SharedInvalidMessageCounter;
 extern volatile sig_atomic_t catchupInterruptPending;
 
 extern void SendSharedInvalidMessages(const SharedInvalidationMessage *msgs,
-						  int n);
+									  int n);
 extern void ReceiveSharedInvalidMessages(
-							 void (*invalFunction) (SharedInvalidationMessage *msg),
-							 void (*resetFunction) (void));
+										 void (*invalFunction) (SharedInvalidationMessage *msg),
+										 void (*resetFunction) (void));
 
 /* signal handler for catchup events (PROCSIG_CATCHUP_INTERRUPT) */
 extern void HandleCatchupInterrupt(void);
@@ -143,11 +143,11 @@ extern void HandleCatchupInterrupt(void);
  */
 extern void ProcessCatchupInterrupt(void);
 
-extern int xactGetCommittedInvalidationMessages(SharedInvalidationMessage **msgs,
-									 bool *RelcacheInitFileInval);
+extern int	xactGetCommittedInvalidationMessages(SharedInvalidationMessage **msgs,
+												 bool *RelcacheInitFileInval);
 extern void ProcessCommittedInvalidationMessages(SharedInvalidationMessage *msgs,
-									 int nmsgs, bool RelcacheInitFileInval,
-									 Oid dbid, Oid tsid);
+												 int nmsgs, bool RelcacheInitFileInval,
+												 Oid dbid, Oid tsid);
 
 extern void LocalExecuteInvalidationMessage(SharedInvalidationMessage *msg);
 
diff --git a/src/include/storage/smgr.h b/src/include/storage/smgr.h
index 770193e285e8..d286c8c7b116 100644
--- a/src/include/storage/smgr.h
+++ b/src/include/storage/smgr.h
@@ -92,18 +92,18 @@ extern void smgrdounlink(SMgrRelation reln, bool isRedo);
 extern void smgrdounlinkall(SMgrRelation *rels, int nrels, bool isRedo);
 extern void smgrdounlinkfork(SMgrRelation reln, ForkNumber forknum, bool isRedo);
 extern void smgrextend(SMgrRelation reln, ForkNumber forknum,
-		   BlockNumber blocknum, char *buffer, bool skipFsync);
+					   BlockNumber blocknum, char *buffer, bool skipFsync);
 extern void smgrprefetch(SMgrRelation reln, ForkNumber forknum,
-			 BlockNumber blocknum);
+						 BlockNumber blocknum);
 extern void smgrread(SMgrRelation reln, ForkNumber forknum,
-		 BlockNumber blocknum, char *buffer);
+					 BlockNumber blocknum, char *buffer);
 extern void smgrwrite(SMgrRelation reln, ForkNumber forknum,
-		  BlockNumber blocknum, char *buffer, bool skipFsync);
+					  BlockNumber blocknum, char *buffer, bool skipFsync);
 extern void smgrwriteback(SMgrRelation reln, ForkNumber forknum,
-			  BlockNumber blocknum, BlockNumber nblocks);
+						  BlockNumber blocknum, BlockNumber nblocks);
 extern BlockNumber smgrnblocks(SMgrRelation reln, ForkNumber forknum);
 extern void smgrtruncate(SMgrRelation reln, ForkNumber forknum,
-			 BlockNumber nblocks);
+						 BlockNumber nblocks);
 extern void smgrimmedsync(SMgrRelation reln, ForkNumber forknum);
 extern void AtEOXact_SMgr(void);
 
diff --git a/src/include/storage/standby.h b/src/include/storage/standby.h
index 236124351486..a3f8f82ff32f 100644
--- a/src/include/storage/standby.h
+++ b/src/include/storage/standby.h
@@ -28,7 +28,7 @@ extern void InitRecoveryTransactionEnvironment(void);
 extern void ShutdownRecoveryTransactionEnvironment(void);
 
 extern void ResolveRecoveryConflictWithSnapshot(TransactionId latestRemovedXid,
-									RelFileNode node);
+												RelFileNode node);
 extern void ResolveRecoveryConflictWithTablespace(Oid tsid);
 extern void ResolveRecoveryConflictWithDatabase(Oid dbid);
 
@@ -48,7 +48,7 @@ extern void StandbyLockTimeoutHandler(void);
  */
 extern void StandbyAcquireAccessExclusiveLock(TransactionId xid, Oid dbOid, Oid relOid);
 extern void StandbyReleaseLockTree(TransactionId xid,
-					   int nsubxids, TransactionId *subxids);
+								   int nsubxids, TransactionId *subxids);
 extern void StandbyReleaseAllLocks(void);
 extern void StandbyReleaseOldLocks(TransactionId oldxid);
 
@@ -86,6 +86,6 @@ extern void LogAccessExclusiveLockPrepare(void);
 
 extern XLogRecPtr LogStandbySnapshot(void);
 extern void LogStandbyInvalidations(int nmsgs, SharedInvalidationMessage *msgs,
-						bool relcacheInitFileInval);
+									bool relcacheInitFileInval);
 
 #endif							/* STANDBY_H */
diff --git a/src/include/storage/standbydefs.h b/src/include/storage/standbydefs.h
index 01d2db6ac6e0..befdbf60bf81 100644
--- a/src/include/storage/standbydefs.h
+++ b/src/include/storage/standbydefs.h
@@ -24,9 +24,9 @@ extern void standby_redo(XLogReaderState *record);
 extern void standby_desc(StringInfo buf, XLogReaderState *record);
 extern const char *standby_identify(uint8 info);
 extern void standby_desc_invalidations(StringInfo buf,
-						   int nmsgs, SharedInvalidationMessage *msgs,
-						   Oid dbId, Oid tsId,
-						   bool relcacheInitFileInval);
+									   int nmsgs, SharedInvalidationMessage *msgs,
+									   Oid dbId, Oid tsId,
+									   bool relcacheInitFileInval);
 
 /*
  * XLOG message types
diff --git a/src/include/storage/sync.h b/src/include/storage/sync.h
index 8efb68f8e01f..1e453a5b30a5 100644
--- a/src/include/storage/sync.h
+++ b/src/include/storage/sync.h
@@ -57,6 +57,6 @@ extern void ProcessSyncRequests(void);
 extern void RememberSyncRequest(const FileTag *ftag, SyncRequestType type);
 extern void EnableSyncRequestForwarding(void);
 extern bool RegisterSyncRequest(const FileTag *ftag, SyncRequestType type,
-					bool retryOnError);
+								bool retryOnError);
 
 #endif							/* SYNC_H */
diff --git a/src/include/tcop/pquery.h b/src/include/tcop/pquery.h
index bc61149e66eb..9e24cfa66109 100644
--- a/src/include/tcop/pquery.h
+++ b/src/include/tcop/pquery.h
@@ -28,18 +28,18 @@ extern List *FetchPortalTargetList(Portal portal);
 extern List *FetchStatementTargetList(Node *stmt);
 
 extern void PortalStart(Portal portal, ParamListInfo params,
-			int eflags, Snapshot snapshot);
+						int eflags, Snapshot snapshot);
 
 extern void PortalSetResultFormat(Portal portal, int nFormats,
-					  int16 *formats);
+								  int16 *formats);
 
 extern bool PortalRun(Portal portal, long count, bool isTopLevel,
-		  bool run_once, DestReceiver *dest, DestReceiver *altdest,
-		  char *completionTag);
+					  bool run_once, DestReceiver *dest, DestReceiver *altdest,
+					  char *completionTag);
 
 extern uint64 PortalRunFetch(Portal portal,
-			   FetchDirection fdirection,
-			   long count,
-			   DestReceiver *dest);
+							 FetchDirection fdirection,
+							 long count,
+							 DestReceiver *dest);
 
 #endif							/* PQUERY_H */
diff --git a/src/include/tcop/tcopprot.h b/src/include/tcop/tcopprot.h
index b367838612ee..8dcfb407285b 100644
--- a/src/include/tcop/tcopprot.h
+++ b/src/include/tcop/tcopprot.h
@@ -49,18 +49,18 @@ extern PGDLLIMPORT int log_statement;
 
 extern List *pg_parse_query(const char *query_string);
 extern List *pg_analyze_and_rewrite(RawStmt *parsetree,
-					   const char *query_string,
-					   Oid *paramTypes, int numParams,
-					   QueryEnvironment *queryEnv);
+									const char *query_string,
+									Oid *paramTypes, int numParams,
+									QueryEnvironment *queryEnv);
 extern List *pg_analyze_and_rewrite_params(RawStmt *parsetree,
-							  const char *query_string,
-							  ParserSetupHook parserSetup,
-							  void *parserSetupArg,
-							  QueryEnvironment *queryEnv);
+										   const char *query_string,
+										   ParserSetupHook parserSetup,
+										   void *parserSetupArg,
+										   QueryEnvironment *queryEnv);
 extern PlannedStmt *pg_plan_query(Query *querytree, int cursorOptions,
-			  ParamListInfo boundParams);
+								  ParamListInfo boundParams);
 extern List *pg_plan_queries(List *querytrees, int cursorOptions,
-				ParamListInfo boundParams);
+							 ParamListInfo boundParams);
 
 extern bool check_max_stack_depth(int *newval, void **extra, GucSource source);
 extern void assign_max_stack_depth(int newval, void *extra);
@@ -75,18 +75,18 @@ extern void ProcessClientReadInterrupt(bool blocked);
 extern void ProcessClientWriteInterrupt(bool blocked);
 
 extern void process_postgres_switches(int argc, char *argv[],
-						  GucContext ctx, const char **dbname);
+									  GucContext ctx, const char **dbname);
 extern void PostgresMain(int argc, char *argv[],
-			 const char *dbname,
-			 const char *username) pg_attribute_noreturn();
+						 const char *dbname,
+						 const char *username) pg_attribute_noreturn();
 extern long get_stack_depth_rlimit(void);
 extern void ResetUsage(void);
 extern void ShowUsage(const char *title);
 extern int	check_log_duration(char *msec_str, bool was_logged);
 extern void set_debug_options(int debug_flag,
-				  GucContext context, GucSource source);
+							  GucContext context, GucSource source);
 extern bool set_plan_disabling_options(const char *arg,
-						   GucContext context, GucSource source);
+									   GucContext context, GucSource source);
 extern const char *get_stats_option_name(const char *arg);
 
 #endif							/* TCOPPROT_H */
diff --git a/src/include/tcop/utility.h b/src/include/tcop/utility.h
index a5d79ab7699f..5abcacf6a0c1 100644
--- a/src/include/tcop/utility.h
+++ b/src/include/tcop/utility.h
@@ -34,13 +34,13 @@ typedef void (*ProcessUtility_hook_type) (PlannedStmt *pstmt,
 extern PGDLLIMPORT ProcessUtility_hook_type ProcessUtility_hook;
 
 extern void ProcessUtility(PlannedStmt *pstmt, const char *queryString,
-			   ProcessUtilityContext context, ParamListInfo params,
-			   QueryEnvironment *queryEnv,
-			   DestReceiver *dest, char *completionTag);
+						   ProcessUtilityContext context, ParamListInfo params,
+						   QueryEnvironment *queryEnv,
+						   DestReceiver *dest, char *completionTag);
 extern void standard_ProcessUtility(PlannedStmt *pstmt, const char *queryString,
-						ProcessUtilityContext context, ParamListInfo params,
-						QueryEnvironment *queryEnv,
-						DestReceiver *dest, char *completionTag);
+									ProcessUtilityContext context, ParamListInfo params,
+									QueryEnvironment *queryEnv,
+									DestReceiver *dest, char *completionTag);
 
 extern bool UtilityReturnsTuples(Node *parsetree);
 
diff --git a/src/include/tsearch/ts_locale.h b/src/include/tsearch/ts_locale.h
index 068bd3fd4252..9e8cd77245b3 100644
--- a/src/include/tsearch/ts_locale.h
+++ b/src/include/tsearch/ts_locale.h
@@ -55,7 +55,7 @@ extern char *lowerstr(const char *str);
 extern char *lowerstr_with_len(const char *str, int len);
 
 extern bool tsearch_readline_begin(tsearch_readline_state *stp,
-					   const char *filename);
+								   const char *filename);
 extern char *tsearch_readline(tsearch_readline_state *stp);
 extern void tsearch_readline_end(tsearch_readline_state *stp);
 
diff --git a/src/include/tsearch/ts_public.h b/src/include/tsearch/ts_public.h
index b325fa122c0c..465a3616a6e5 100644
--- a/src/include/tsearch/ts_public.h
+++ b/src/include/tsearch/ts_public.h
@@ -65,7 +65,7 @@ typedef struct
  * Common useful things for tsearch subsystem
  */
 extern char *get_tsearch_config_filename(const char *basename,
-							const char *extension);
+										 const char *extension);
 
 /*
  * Often useful stopword list management
@@ -77,7 +77,7 @@ typedef struct
 } StopList;
 
 extern void readstoplist(const char *fname, StopList *s,
-			 char *(*wordop) (const char *));
+						 char *(*wordop) (const char *));
 extern bool searchstoplist(StopList *s, char *key);
 
 /*
diff --git a/src/include/tsearch/ts_utils.h b/src/include/tsearch/ts_utils.h
index 679da2e26c8d..ee60a2a629c3 100644
--- a/src/include/tsearch/ts_utils.h
+++ b/src/include/tsearch/ts_utils.h
@@ -32,9 +32,9 @@ typedef struct TSVectorParseStateData *TSVectorParseState;
 extern TSVectorParseState init_tsvector_parser(char *input, int flags);
 extern void reset_tsvector_parser(TSVectorParseState state, char *input);
 extern bool gettoken_tsvector(TSVectorParseState state,
-				  char **token, int *len,
-				  WordEntryPos **pos, int *poslen,
-				  char **endptr);
+							  char **token, int *len,
+							  WordEntryPos **pos, int *poslen,
+							  char **endptr);
 extern void close_tsvector_parser(TSVectorParseState state);
 
 /* phrase operator begins with '<' */
@@ -62,13 +62,13 @@ typedef void (*PushFunction) (Datum opaque, TSQueryParserState state,
 #define P_TSQ_WEB		(1 << 1)
 
 extern TSQuery parse_tsquery(char *buf,
-			  PushFunction pushval,
-			  Datum opaque,
-			  int flags);
+							 PushFunction pushval,
+							 Datum opaque,
+							 int flags);
 
 /* Functions for use by PushFunction implementations */
 extern void pushValue(TSQueryParserState state,
-		  char *strval, int lenval, int16 weight, bool prefix);
+					  char *strval, int lenval, int16 weight, bool prefix);
 extern void pushStop(TSQueryParserState state);
 extern void pushOperator(TSQueryParserState state, int8 oper, int16 distance);
 
@@ -113,7 +113,7 @@ extern void parsetext(Oid cfgId, ParsedText *prs, char *buf, int32 buflen);
  */
 
 extern void hlparsetext(Oid cfgId, HeadlineParsedText *prs, TSQuery query,
-			char *buf, int32 buflen);
+						char *buf, int32 buflen);
 extern text *generateHeadline(HeadlineParsedText *prs);
 
 /*
@@ -190,7 +190,7 @@ typedef bool (*TSExecuteCallback) (void *arg, QueryOperand *val,
 #define TS_EXEC_PHRASE_NO_POS	(0x02)
 
 extern bool TS_execute(QueryItem *curitem, void *arg, uint32 flags,
-		   TSExecuteCallback chkcond);
+					   TSExecuteCallback chkcond);
 extern bool tsquery_requires_match(QueryItem *curitem);
 
 /*
@@ -250,6 +250,6 @@ extern void QTNClearFlags(QTNode *in, uint32 flags);
 extern bool QTNEq(QTNode *a, QTNode *b);
 extern TSQuerySign makeTSQuerySign(TSQuery a);
 extern QTNode *findsubquery(QTNode *root, QTNode *ex, QTNode *subs,
-			 bool *isfind);
+							bool *isfind);
 
 #endif							/* _PG_TS_UTILS_H_ */
diff --git a/src/include/utils/acl.h b/src/include/utils/acl.h
index a839d1aa447b..f4c160ee7238 100644
--- a/src/include/utils/acl.h
+++ b/src/include/utils/acl.h
@@ -188,12 +188,12 @@ typedef enum
  */
 extern Acl *acldefault(ObjectType objtype, Oid ownerId);
 extern Acl *get_user_default_acl(ObjectType objtype, Oid ownerId,
-					 Oid nsp_oid);
+								 Oid nsp_oid);
 extern void recordDependencyOnNewAcl(Oid classId, Oid objectId, int32 objsubId,
-						 Oid ownerId, Acl *acl);
+									 Oid ownerId, Acl *acl);
 
 extern Acl *aclupdate(const Acl *old_acl, const AclItem *mod_aip,
-		  int modechg, Oid ownerId, DropBehavior behavior);
+					  int modechg, Oid ownerId, DropBehavior behavior);
 extern Acl *aclnewowner(const Acl *old_acl, Oid oldOwnerId, Oid newOwnerId);
 extern Acl *make_empty_acl(void);
 extern Acl *aclcopy(const Acl *orig_acl);
@@ -203,7 +203,7 @@ extern void aclitemsort(Acl *acl);
 extern bool aclequal(const Acl *left_acl, const Acl *right_acl);
 
 extern AclMode aclmask(const Acl *acl, Oid roleid, Oid ownerId,
-		AclMode mask, AclMaskHow how);
+					   AclMode mask, AclMaskHow how);
 extern int	aclmembers(const Acl *acl, Oid **roleids);
 
 extern bool has_privs_of_role(Oid member, Oid role);
@@ -219,8 +219,8 @@ extern HeapTuple get_rolespec_tuple(const RoleSpec *role);
 extern char *get_rolespec_name(const RoleSpec *role);
 
 extern void select_best_grantor(Oid roleId, AclMode privileges,
-					const Acl *acl, Oid ownerId,
-					Oid *grantorId, AclMode *grantOptions);
+								const Acl *acl, Oid ownerId,
+								Oid *grantorId, AclMode *grantOptions);
 
 extern void initialize_acl(void);
 
@@ -234,38 +234,38 @@ extern void RemoveRoleFromObjectACL(Oid roleid, Oid classid, Oid objid);
 extern void RemoveDefaultACLById(Oid defaclOid);
 
 extern AclMode pg_attribute_aclmask(Oid table_oid, AttrNumber attnum,
-					 Oid roleid, AclMode mask, AclMaskHow how);
+									Oid roleid, AclMode mask, AclMaskHow how);
 extern AclMode pg_class_aclmask(Oid table_oid, Oid roleid,
-				 AclMode mask, AclMaskHow how);
+								AclMode mask, AclMaskHow how);
 extern AclMode pg_database_aclmask(Oid db_oid, Oid roleid,
-					AclMode mask, AclMaskHow how);
+								   AclMode mask, AclMaskHow how);
 extern AclMode pg_proc_aclmask(Oid proc_oid, Oid roleid,
-				AclMode mask, AclMaskHow how);
+							   AclMode mask, AclMaskHow how);
 extern AclMode pg_language_aclmask(Oid lang_oid, Oid roleid,
-					AclMode mask, AclMaskHow how);
+								   AclMode mask, AclMaskHow how);
 extern AclMode pg_largeobject_aclmask_snapshot(Oid lobj_oid, Oid roleid,
-								AclMode mask, AclMaskHow how, Snapshot snapshot);
+											   AclMode mask, AclMaskHow how, Snapshot snapshot);
 extern AclMode pg_namespace_aclmask(Oid nsp_oid, Oid roleid,
-					 AclMode mask, AclMaskHow how);
+									AclMode mask, AclMaskHow how);
 extern AclMode pg_tablespace_aclmask(Oid spc_oid, Oid roleid,
-					  AclMode mask, AclMaskHow how);
+									 AclMode mask, AclMaskHow how);
 extern AclMode pg_foreign_data_wrapper_aclmask(Oid fdw_oid, Oid roleid,
-								AclMode mask, AclMaskHow how);
+											   AclMode mask, AclMaskHow how);
 extern AclMode pg_foreign_server_aclmask(Oid srv_oid, Oid roleid,
-						  AclMode mask, AclMaskHow how);
+										 AclMode mask, AclMaskHow how);
 extern AclMode pg_type_aclmask(Oid type_oid, Oid roleid,
-				AclMode mask, AclMaskHow how);
+							   AclMode mask, AclMaskHow how);
 
 extern AclResult pg_attribute_aclcheck(Oid table_oid, AttrNumber attnum,
-					  Oid roleid, AclMode mode);
+									   Oid roleid, AclMode mode);
 extern AclResult pg_attribute_aclcheck_all(Oid table_oid, Oid roleid,
-						  AclMode mode, AclMaskHow how);
+										   AclMode mode, AclMaskHow how);
 extern AclResult pg_class_aclcheck(Oid table_oid, Oid roleid, AclMode mode);
 extern AclResult pg_database_aclcheck(Oid db_oid, Oid roleid, AclMode mode);
 extern AclResult pg_proc_aclcheck(Oid proc_oid, Oid roleid, AclMode mode);
 extern AclResult pg_language_aclcheck(Oid lang_oid, Oid roleid, AclMode mode);
 extern AclResult pg_largeobject_aclcheck_snapshot(Oid lang_oid, Oid roleid,
-								 AclMode mode, Snapshot snapshot);
+												  AclMode mode, Snapshot snapshot);
 extern AclResult pg_namespace_aclcheck(Oid nsp_oid, Oid roleid, AclMode mode);
 extern AclResult pg_tablespace_aclcheck(Oid spc_oid, Oid roleid, AclMode mode);
 extern AclResult pg_foreign_data_wrapper_aclcheck(Oid fdw_oid, Oid roleid, AclMode mode);
@@ -273,10 +273,10 @@ extern AclResult pg_foreign_server_aclcheck(Oid srv_oid, Oid roleid, AclMode mod
 extern AclResult pg_type_aclcheck(Oid type_oid, Oid roleid, AclMode mode);
 
 extern void aclcheck_error(AclResult aclerr, ObjectType objtype,
-			   const char *objectname);
+						   const char *objectname);
 
 extern void aclcheck_error_col(AclResult aclerr, ObjectType objtype,
-				   const char *objectname, const char *colname);
+							   const char *objectname, const char *colname);
 
 extern void aclcheck_error_type(AclResult aclerr, Oid typeOid);
 
diff --git a/src/include/utils/array.h b/src/include/utils/array.h
index 735b86102efe..7c3f94706a35 100644
--- a/src/include/utils/array.h
+++ b/src/include/utils/array.h
@@ -333,92 +333,92 @@ extern bool Array_nulls;
  * prototypes for functions defined in arrayfuncs.c
  */
 extern void CopyArrayEls(ArrayType *array,
-			 Datum *values,
-			 bool *nulls,
-			 int nitems,
-			 int typlen,
-			 bool typbyval,
-			 char typalign,
-			 bool freedata);
+						 Datum *values,
+						 bool *nulls,
+						 int nitems,
+						 int typlen,
+						 bool typbyval,
+						 char typalign,
+						 bool freedata);
 
 extern Datum array_get_element(Datum arraydatum, int nSubscripts, int *indx,
-				  int arraytyplen, int elmlen, bool elmbyval, char elmalign,
-				  bool *isNull);
+							   int arraytyplen, int elmlen, bool elmbyval, char elmalign,
+							   bool *isNull);
 extern Datum array_set_element(Datum arraydatum, int nSubscripts, int *indx,
-				  Datum dataValue, bool isNull,
-				  int arraytyplen, int elmlen, bool elmbyval, char elmalign);
+							   Datum dataValue, bool isNull,
+							   int arraytyplen, int elmlen, bool elmbyval, char elmalign);
 extern Datum array_get_slice(Datum arraydatum, int nSubscripts,
-				int *upperIndx, int *lowerIndx,
-				bool *upperProvided, bool *lowerProvided,
-				int arraytyplen, int elmlen, bool elmbyval, char elmalign);
+							 int *upperIndx, int *lowerIndx,
+							 bool *upperProvided, bool *lowerProvided,
+							 int arraytyplen, int elmlen, bool elmbyval, char elmalign);
 extern Datum array_set_slice(Datum arraydatum, int nSubscripts,
-				int *upperIndx, int *lowerIndx,
-				bool *upperProvided, bool *lowerProvided,
-				Datum srcArrayDatum, bool isNull,
-				int arraytyplen, int elmlen, bool elmbyval, char elmalign);
+							 int *upperIndx, int *lowerIndx,
+							 bool *upperProvided, bool *lowerProvided,
+							 Datum srcArrayDatum, bool isNull,
+							 int arraytyplen, int elmlen, bool elmbyval, char elmalign);
 
 extern Datum array_ref(ArrayType *array, int nSubscripts, int *indx,
-		  int arraytyplen, int elmlen, bool elmbyval, char elmalign,
-		  bool *isNull);
+					   int arraytyplen, int elmlen, bool elmbyval, char elmalign,
+					   bool *isNull);
 extern ArrayType *array_set(ArrayType *array, int nSubscripts, int *indx,
-		  Datum dataValue, bool isNull,
-		  int arraytyplen, int elmlen, bool elmbyval, char elmalign);
+							Datum dataValue, bool isNull,
+							int arraytyplen, int elmlen, bool elmbyval, char elmalign);
 
 extern Datum array_map(Datum arrayd,
-		  struct ExprState *exprstate, struct ExprContext *econtext,
-		  Oid retType, ArrayMapState *amstate);
+					   struct ExprState *exprstate, struct ExprContext *econtext,
+					   Oid retType, ArrayMapState *amstate);
 
 extern void array_bitmap_copy(bits8 *destbitmap, int destoffset,
-				  const bits8 *srcbitmap, int srcoffset,
-				  int nitems);
+							  const bits8 *srcbitmap, int srcoffset,
+							  int nitems);
 
 extern ArrayType *construct_array(Datum *elems, int nelems,
-				Oid elmtype,
-				int elmlen, bool elmbyval, char elmalign);
+								  Oid elmtype,
+								  int elmlen, bool elmbyval, char elmalign);
 extern ArrayType *construct_md_array(Datum *elems,
-				   bool *nulls,
-				   int ndims,
-				   int *dims,
-				   int *lbs,
-				   Oid elmtype, int elmlen, bool elmbyval, char elmalign);
+									 bool *nulls,
+									 int ndims,
+									 int *dims,
+									 int *lbs,
+									 Oid elmtype, int elmlen, bool elmbyval, char elmalign);
 extern ArrayType *construct_empty_array(Oid elmtype);
 extern ExpandedArrayHeader *construct_empty_expanded_array(Oid element_type,
-							   MemoryContext parentcontext,
-							   ArrayMetaState *metacache);
+														   MemoryContext parentcontext,
+														   ArrayMetaState *metacache);
 extern void deconstruct_array(ArrayType *array,
-				  Oid elmtype,
-				  int elmlen, bool elmbyval, char elmalign,
-				  Datum **elemsp, bool **nullsp, int *nelemsp);
+							  Oid elmtype,
+							  int elmlen, bool elmbyval, char elmalign,
+							  Datum **elemsp, bool **nullsp, int *nelemsp);
 extern bool array_contains_nulls(ArrayType *array);
 
 extern ArrayBuildState *initArrayResult(Oid element_type,
-				MemoryContext rcontext, bool subcontext);
+										MemoryContext rcontext, bool subcontext);
 extern ArrayBuildState *accumArrayResult(ArrayBuildState *astate,
-				 Datum dvalue, bool disnull,
-				 Oid element_type,
-				 MemoryContext rcontext);
+										 Datum dvalue, bool disnull,
+										 Oid element_type,
+										 MemoryContext rcontext);
 extern Datum makeArrayResult(ArrayBuildState *astate,
-				MemoryContext rcontext);
+							 MemoryContext rcontext);
 extern Datum makeMdArrayResult(ArrayBuildState *astate, int ndims,
-				  int *dims, int *lbs, MemoryContext rcontext, bool release);
+							   int *dims, int *lbs, MemoryContext rcontext, bool release);
 
 extern ArrayBuildStateArr *initArrayResultArr(Oid array_type, Oid element_type,
-				   MemoryContext rcontext, bool subcontext);
+											  MemoryContext rcontext, bool subcontext);
 extern ArrayBuildStateArr *accumArrayResultArr(ArrayBuildStateArr *astate,
-					Datum dvalue, bool disnull,
-					Oid array_type,
-					MemoryContext rcontext);
+											   Datum dvalue, bool disnull,
+											   Oid array_type,
+											   MemoryContext rcontext);
 extern Datum makeArrayResultArr(ArrayBuildStateArr *astate,
-				   MemoryContext rcontext, bool release);
+								MemoryContext rcontext, bool release);
 
 extern ArrayBuildStateAny *initArrayResultAny(Oid input_type,
-				   MemoryContext rcontext, bool subcontext);
+											  MemoryContext rcontext, bool subcontext);
 extern ArrayBuildStateAny *accumArrayResultAny(ArrayBuildStateAny *astate,
-					Datum dvalue, bool disnull,
-					Oid input_type,
-					MemoryContext rcontext);
+											   Datum dvalue, bool disnull,
+											   Oid input_type,
+											   MemoryContext rcontext);
 extern Datum makeArrayResultAny(ArrayBuildStateAny *astate,
-				   MemoryContext rcontext, bool release);
+								MemoryContext rcontext, bool release);
 
 extern ArrayIterator array_create_iterator(ArrayType *arr, int slice_ndim, ArrayMetaState *mstate);
 extern bool array_iterate(ArrayIterator iterator, Datum *value, bool *isnull);
@@ -441,10 +441,10 @@ extern int32 *ArrayGetIntegerTypmods(ArrayType *arr, int *n);
  * prototypes for functions defined in array_expanded.c
  */
 extern Datum expand_array(Datum arraydatum, MemoryContext parentcontext,
-			 ArrayMetaState *metacache);
+						  ArrayMetaState *metacache);
 extern ExpandedArrayHeader *DatumGetExpandedArray(Datum d);
 extern ExpandedArrayHeader *DatumGetExpandedArrayX(Datum d,
-					   ArrayMetaState *metacache);
+												   ArrayMetaState *metacache);
 extern AnyArrayType *DatumGetAnyArrayP(Datum d);
 extern void deconstruct_expanded_array(ExpandedArrayHeader *eah);
 
diff --git a/src/include/utils/builtins.h b/src/include/utils/builtins.h
index 03d0ee27669a..a3cd7d26fae0 100644
--- a/src/include/utils/builtins.h
+++ b/src/include/utils/builtins.h
@@ -25,7 +25,7 @@ extern bool parse_bool_with_len(const char *value, size_t len, bool *result);
 
 /* domains.c */
 extern void domain_check(Datum value, bool isnull, Oid domainType,
-			 void **extra, MemoryContext mcxt);
+						 void **extra, MemoryContext mcxt);
 extern int	errdatatype(Oid datatypeOid);
 extern int	errdomainconstraint(Oid datatypeOid, const char *conname);
 
@@ -59,17 +59,17 @@ extern int	oid_cmp(const void *p1, const void *p2);
 
 /* regexp.c */
 extern char *regexp_fixed_prefix(text *text_re, bool case_insensitive,
-					Oid collation, bool *exact);
+								 Oid collation, bool *exact);
 
 /* ruleutils.c */
 extern bool quote_all_identifiers;
 extern const char *quote_identifier(const char *ident);
 extern char *quote_qualified_identifier(const char *qualifier,
-						   const char *ident);
+										const char *ident);
 extern void generate_operator_clause(fmStringInfo buf,
-						 const char *leftop, Oid leftoptype,
-						 Oid opoid,
-						 const char *rightop, Oid rightoptype);
+									 const char *leftop, Oid leftoptype,
+									 Oid opoid,
+									 const char *rightop, Oid rightoptype);
 
 /* varchar.c */
 extern int	bpchartruelen(char *s, int len);
@@ -88,11 +88,11 @@ extern int	xidComparator(const void *arg1, const void *arg2);
 
 /* inet_cidr_ntop.c */
 extern char *inet_cidr_ntop(int af, const void *src, int bits,
-			   char *dst, size_t size);
+							char *dst, size_t size);
 
 /* inet_net_pton.c */
-extern int inet_net_pton(int af, const char *src,
-			  void *dst, size_t size);
+extern int	inet_net_pton(int af, const char *src,
+						  void *dst, size_t size);
 
 /* network.c */
 extern double convert_network_to_scalar(Datum value, Oid typid, bool *failure);
diff --git a/src/include/utils/catcache.h b/src/include/utils/catcache.h
index 65d816a5831c..ff1fabaca142 100644
--- a/src/include/utils/catcache.h
+++ b/src/include/utils/catcache.h
@@ -192,38 +192,38 @@ extern PGDLLIMPORT MemoryContext CacheMemoryContext;
 extern void CreateCacheMemoryContext(void);
 
 extern CatCache *InitCatCache(int id, Oid reloid, Oid indexoid,
-			 int nkeys, const int *key,
-			 int nbuckets);
+							  int nkeys, const int *key,
+							  int nbuckets);
 extern void InitCatCachePhase2(CatCache *cache, bool touch_index);
 
 extern HeapTuple SearchCatCache(CatCache *cache,
-			   Datum v1, Datum v2, Datum v3, Datum v4);
+								Datum v1, Datum v2, Datum v3, Datum v4);
 extern HeapTuple SearchCatCache1(CatCache *cache,
-				Datum v1);
+								 Datum v1);
 extern HeapTuple SearchCatCache2(CatCache *cache,
-				Datum v1, Datum v2);
+								 Datum v1, Datum v2);
 extern HeapTuple SearchCatCache3(CatCache *cache,
-				Datum v1, Datum v2, Datum v3);
+								 Datum v1, Datum v2, Datum v3);
 extern HeapTuple SearchCatCache4(CatCache *cache,
-				Datum v1, Datum v2, Datum v3, Datum v4);
+								 Datum v1, Datum v2, Datum v3, Datum v4);
 extern void ReleaseCatCache(HeapTuple tuple);
 
 extern uint32 GetCatCacheHashValue(CatCache *cache,
-					 Datum v1, Datum v2,
-					 Datum v3, Datum v4);
+								   Datum v1, Datum v2,
+								   Datum v3, Datum v4);
 
 extern CatCList *SearchCatCacheList(CatCache *cache, int nkeys,
-				   Datum v1, Datum v2,
-				   Datum v3);
+									Datum v1, Datum v2,
+									Datum v3);
 extern void ReleaseCatCacheList(CatCList *list);
 
 extern void ResetCatalogCaches(void);
 extern void CatalogCacheFlushCatalog(Oid catId);
 extern void CatCacheInvalidate(CatCache *cache, uint32 hashValue);
 extern void PrepareToInvalidateCacheTuple(Relation relation,
-							  HeapTuple tuple,
-							  HeapTuple newtuple,
-							  void (*function) (int, uint32, Oid));
+										  HeapTuple tuple,
+										  HeapTuple newtuple,
+										  void (*function) (int, uint32, Oid));
 
 extern void PrintCatCacheLeakWarning(HeapTuple tuple);
 extern void PrintCatCacheListLeakWarning(CatCList *list);
diff --git a/src/include/utils/datetime.h b/src/include/utils/datetime.h
index 87f819e76e06..4de78ebe3665 100644
--- a/src/include/utils/datetime.h
+++ b/src/include/utils/datetime.h
@@ -291,28 +291,28 @@ extern void GetCurrentTimeUsec(struct pg_tm *tm, fsec_t *fsec, int *tzp);
 extern void j2date(int jd, int *year, int *month, int *day);
 extern int	date2j(int year, int month, int day);
 
-extern int ParseDateTime(const char *timestr, char *workbuf, size_t buflen,
-			  char **field, int *ftype,
-			  int maxfields, int *numfields);
-extern int DecodeDateTime(char **field, int *ftype,
-			   int nf, int *dtype,
-			   struct pg_tm *tm, fsec_t *fsec, int *tzp);
+extern int	ParseDateTime(const char *timestr, char *workbuf, size_t buflen,
+						  char **field, int *ftype,
+						  int maxfields, int *numfields);
+extern int	DecodeDateTime(char **field, int *ftype,
+						   int nf, int *dtype,
+						   struct pg_tm *tm, fsec_t *fsec, int *tzp);
 extern int	DecodeTimezone(char *str, int *tzp);
-extern int DecodeTimeOnly(char **field, int *ftype,
-			   int nf, int *dtype,
-			   struct pg_tm *tm, fsec_t *fsec, int *tzp);
-extern int DecodeInterval(char **field, int *ftype, int nf, int range,
-			   int *dtype, struct pg_tm *tm, fsec_t *fsec);
-extern int DecodeISO8601Interval(char *str,
-					  int *dtype, struct pg_tm *tm, fsec_t *fsec);
+extern int	DecodeTimeOnly(char **field, int *ftype,
+						   int nf, int *dtype,
+						   struct pg_tm *tm, fsec_t *fsec, int *tzp);
+extern int	DecodeInterval(char **field, int *ftype, int nf, int range,
+						   int *dtype, struct pg_tm *tm, fsec_t *fsec);
+extern int	DecodeISO8601Interval(char *str,
+								  int *dtype, struct pg_tm *tm, fsec_t *fsec);
 
 extern void DateTimeParseError(int dterr, const char *str,
-				   const char *datatype) pg_attribute_noreturn();
+							   const char *datatype) pg_attribute_noreturn();
 
 extern int	DetermineTimeZoneOffset(struct pg_tm *tm, pg_tz *tzp);
 extern int	DetermineTimeZoneAbbrevOffset(struct pg_tm *tm, const char *abbr, pg_tz *tzp);
-extern int DetermineTimeZoneAbbrevOffsetTS(TimestampTz ts, const char *abbr,
-								pg_tz *tzp, int *isdst);
+extern int	DetermineTimeZoneAbbrevOffsetTS(TimestampTz ts, const char *abbr,
+											pg_tz *tzp, int *isdst);
 
 extern void EncodeDateOnly(struct pg_tm *tm, int style, char *str);
 extern void EncodeTimeOnly(struct pg_tm *tm, fsec_t fsec, bool print_tz, int tz, int style, char *str);
@@ -320,11 +320,11 @@ extern void EncodeDateTime(struct pg_tm *tm, fsec_t fsec, bool print_tz, int tz,
 extern void EncodeInterval(struct pg_tm *tm, fsec_t fsec, int style, char *str);
 extern void EncodeSpecialTimestamp(Timestamp dt, char *str);
 
-extern int ValidateDate(int fmask, bool isjulian, bool is2digits, bool bc,
-			 struct pg_tm *tm);
+extern int	ValidateDate(int fmask, bool isjulian, bool is2digits, bool bc,
+						 struct pg_tm *tm);
 
-extern int DecodeTimezoneAbbrev(int field, char *lowtoken,
-					 int *offset, pg_tz **tz);
+extern int	DecodeTimezoneAbbrev(int field, char *lowtoken,
+								 int *offset, pg_tz **tz);
 extern int	DecodeSpecial(int field, char *lowtoken, int *val);
 extern int	DecodeUnits(int field, char *lowtoken, int *val);
 
@@ -335,7 +335,7 @@ extern Node *TemporalSimplify(int32 max_precis, Node *node);
 extern bool CheckDateTokenTables(void);
 
 extern TimeZoneAbbrevTable *ConvertTimeZoneAbbrevs(struct tzEntry *abbrevs,
-					   int n);
+												   int n);
 extern void InstallTimeZoneAbbrevs(TimeZoneAbbrevTable *tbl);
 
 #endif							/* DATETIME_H */
diff --git a/src/include/utils/datum.h b/src/include/utils/datum.h
index 2d78c8774cf7..4b068f810366 100644
--- a/src/include/utils/datum.h
+++ b/src/include/utils/datum.h
@@ -44,7 +44,7 @@ extern Datum datumTransfer(Datum value, bool typByVal, int typLen);
  * XXX : See comments in the code for restrictions!
  */
 extern bool datumIsEqual(Datum value1, Datum value2,
-			 bool typByVal, int typLen);
+						 bool typByVal, int typLen);
 
 /*
  * datum_image_eq
@@ -53,16 +53,16 @@ extern bool datumIsEqual(Datum value1, Datum value2,
  * true if the two datums are equal, false otherwise.
  */
 extern bool datum_image_eq(Datum value1, Datum value2,
-			   bool typByVal, int typLen);
+						   bool typByVal, int typLen);
 
 /*
  * Serialize and restore datums so that we can transfer them to parallel
  * workers.
  */
 extern Size datumEstimateSpace(Datum value, bool isnull, bool typByVal,
-				   int typLen);
+							   int typLen);
 extern void datumSerialize(Datum value, bool isnull, bool typByVal,
-			   int typLen, char **start_address);
+						   int typLen, char **start_address);
 extern Datum datumRestore(char **start_address, bool *isnull);
 
 #endif							/* DATUM_H */
diff --git a/src/include/utils/dsa.h b/src/include/utils/dsa.h
index ed9c035df45e..ddd3cef8c2fc 100644
--- a/src/include/utils/dsa.h
+++ b/src/include/utils/dsa.h
@@ -103,7 +103,7 @@ extern void dsa_startup(void);
 
 extern dsa_area *dsa_create(int tranche_id);
 extern dsa_area *dsa_create_in_place(void *place, size_t size,
-					int tranche_id, dsm_segment *segment);
+									 int tranche_id, dsm_segment *segment);
 extern dsa_area *dsa_attach(dsa_handle handle);
 extern dsa_area *dsa_attach_in_place(void *place, dsm_segment *segment);
 extern void dsa_release_in_place(void *place);
diff --git a/src/include/utils/elog.h b/src/include/utils/elog.h
index 7ac37fd270e9..dbfd8efd2696 100644
--- a/src/include/utils/elog.h
+++ b/src/include/utils/elog.h
@@ -144,7 +144,7 @@
 #define TEXTDOMAIN NULL
 
 extern bool errstart(int elevel, const char *filename, int lineno,
-		 const char *funcname, const char *domain);
+					 const char *funcname, const char *domain);
 extern void errfinish(int dummy,...);
 
 extern int	errcode(int sqlerrcode);
@@ -155,20 +155,20 @@ extern int	errcode_for_socket_access(void);
 extern int	errmsg(const char *fmt,...) pg_attribute_printf(1, 2);
 extern int	errmsg_internal(const char *fmt,...) pg_attribute_printf(1, 2);
 
-extern int errmsg_plural(const char *fmt_singular, const char *fmt_plural,
-			  unsigned long n,...) pg_attribute_printf(1, 4) pg_attribute_printf(2, 4);
+extern int	errmsg_plural(const char *fmt_singular, const char *fmt_plural,
+						  unsigned long n,...) pg_attribute_printf(1, 4) pg_attribute_printf(2, 4);
 
 extern int	errdetail(const char *fmt,...) pg_attribute_printf(1, 2);
 extern int	errdetail_internal(const char *fmt,...) pg_attribute_printf(1, 2);
 
 extern int	errdetail_log(const char *fmt,...) pg_attribute_printf(1, 2);
 
-extern int errdetail_log_plural(const char *fmt_singular,
-					 const char *fmt_plural,
-					 unsigned long n,...) pg_attribute_printf(1, 4) pg_attribute_printf(2, 4);
+extern int	errdetail_log_plural(const char *fmt_singular,
+								 const char *fmt_plural,
+								 unsigned long n,...) pg_attribute_printf(1, 4) pg_attribute_printf(2, 4);
 
-extern int errdetail_plural(const char *fmt_singular, const char *fmt_plural,
-				 unsigned long n,...) pg_attribute_printf(1, 4) pg_attribute_printf(2, 4);
+extern int	errdetail_plural(const char *fmt_singular, const char *fmt_plural,
+							 unsigned long n,...) pg_attribute_printf(1, 4) pg_attribute_printf(2, 4);
 
 extern int	errhint(const char *fmt,...) pg_attribute_printf(1, 2);
 
diff --git a/src/include/utils/expandeddatum.h b/src/include/utils/expandeddatum.h
index 9e27384ff757..12e3ac2be17a 100644
--- a/src/include/utils/expandeddatum.h
+++ b/src/include/utils/expandeddatum.h
@@ -147,11 +147,11 @@ struct ExpandedObjectHeader
 
 extern ExpandedObjectHeader *DatumGetEOHP(Datum d);
 extern void EOH_init_header(ExpandedObjectHeader *eohptr,
-				const ExpandedObjectMethods *methods,
-				MemoryContext obj_context);
+							const ExpandedObjectMethods *methods,
+							MemoryContext obj_context);
 extern Size EOH_get_flat_size(ExpandedObjectHeader *eohptr);
 extern void EOH_flatten_into(ExpandedObjectHeader *eohptr,
-				 void *result, Size allocated_size);
+							 void *result, Size allocated_size);
 extern Datum MakeExpandedObjectReadOnlyInternal(Datum d);
 extern Datum TransferExpandedObject(Datum d, MemoryContext new_parent);
 extern void DeleteExpandedObject(Datum d);
diff --git a/src/include/utils/expandedrecord.h b/src/include/utils/expandedrecord.h
index 5a907fb9b1de..84e6aae23fe3 100644
--- a/src/include/utils/expandedrecord.h
+++ b/src/include/utils/expandedrecord.h
@@ -167,32 +167,32 @@ typedef struct ExpandedRecordFieldInfo
  * prototypes for functions defined in expandedrecord.c
  */
 extern ExpandedRecordHeader *make_expanded_record_from_typeid(Oid type_id, int32 typmod,
-								 MemoryContext parentcontext);
+															  MemoryContext parentcontext);
 extern ExpandedRecordHeader *make_expanded_record_from_tupdesc(TupleDesc tupdesc,
-								  MemoryContext parentcontext);
+															   MemoryContext parentcontext);
 extern ExpandedRecordHeader *make_expanded_record_from_exprecord(ExpandedRecordHeader *olderh,
-									MemoryContext parentcontext);
+																 MemoryContext parentcontext);
 extern void expanded_record_set_tuple(ExpandedRecordHeader *erh,
-						  HeapTuple tuple, bool copy, bool expand_external);
+									  HeapTuple tuple, bool copy, bool expand_external);
 extern Datum make_expanded_record_from_datum(Datum recorddatum,
-								MemoryContext parentcontext);
+											 MemoryContext parentcontext);
 extern TupleDesc expanded_record_fetch_tupdesc(ExpandedRecordHeader *erh);
 extern HeapTuple expanded_record_get_tuple(ExpandedRecordHeader *erh);
 extern ExpandedRecordHeader *DatumGetExpandedRecord(Datum d);
 extern void deconstruct_expanded_record(ExpandedRecordHeader *erh);
 extern bool expanded_record_lookup_field(ExpandedRecordHeader *erh,
-							 const char *fieldname,
-							 ExpandedRecordFieldInfo *finfo);
+										 const char *fieldname,
+										 ExpandedRecordFieldInfo *finfo);
 extern Datum expanded_record_fetch_field(ExpandedRecordHeader *erh, int fnumber,
-							bool *isnull);
+										 bool *isnull);
 extern void expanded_record_set_field_internal(ExpandedRecordHeader *erh,
-								   int fnumber,
-								   Datum newValue, bool isnull,
-								   bool expand_external,
-								   bool check_constraints);
+											   int fnumber,
+											   Datum newValue, bool isnull,
+											   bool expand_external,
+											   bool check_constraints);
 extern void expanded_record_set_fields(ExpandedRecordHeader *erh,
-						   const Datum *newValues, const bool *isnulls,
-						   bool expand_external);
+									   const Datum *newValues, const bool *isnulls,
+									   bool expand_external);
 
 /* outside code should never call expanded_record_set_field_internal as such */
 #define expanded_record_set_field(erh, fnumber, newValue, isnull, expand_external) \
diff --git a/src/include/utils/float.h b/src/include/utils/float.h
index 5d935bb032df..543d00e59101 100644
--- a/src/include/utils/float.h
+++ b/src/include/utils/float.h
@@ -39,10 +39,10 @@ extern PGDLLIMPORT int extra_float_digits;
  */
 extern int	is_infinite(float8 val);
 extern float8 float8in_internal(char *num, char **endptr_p,
-				  const char *type_name, const char *orig_string);
+								const char *type_name, const char *orig_string);
 extern float8 float8in_internal_opt_error(char *num, char **endptr_p,
-							const char *type_name, const char *orig_string,
-							bool *have_error);
+										  const char *type_name, const char *orig_string,
+										  bool *have_error);
 extern char *float8out_internal(float8 num);
 extern int	float4_cmp_internal(float4 a, float4 b);
 extern int	float8_cmp_internal(float8 a, float8 b);
diff --git a/src/include/utils/freepage.h b/src/include/utils/freepage.h
index 4cda6191995a..adce535e3adf 100644
--- a/src/include/utils/freepage.h
+++ b/src/include/utils/freepage.h
@@ -91,9 +91,9 @@ struct FreePageManager
 /* Functions to manipulate the free page map. */
 extern void FreePageManagerInitialize(FreePageManager *fpm, char *base);
 extern bool FreePageManagerGet(FreePageManager *fpm, Size npages,
-				   Size *first_page);
+							   Size *first_page);
 extern void FreePageManagerPut(FreePageManager *fpm, Size first_page,
-				   Size npages);
+							   Size npages);
 extern char *FreePageManagerDump(FreePageManager *fpm);
 
 #endif							/* FREEPAGE_H */
diff --git a/src/include/utils/guc.h b/src/include/utils/guc.h
index 6c41edac008a..e709177c3769 100644
--- a/src/include/utils/guc.h
+++ b/src/include/utils/guc.h
@@ -143,17 +143,17 @@ typedef struct ConfigVariable
 } ConfigVariable;
 
 extern bool ParseConfigFile(const char *config_file, bool strict,
-				const char *calling_file, int calling_lineno,
-				int depth, int elevel,
-				ConfigVariable **head_p, ConfigVariable **tail_p);
+							const char *calling_file, int calling_lineno,
+							int depth, int elevel,
+							ConfigVariable **head_p, ConfigVariable **tail_p);
 extern bool ParseConfigFp(FILE *fp, const char *config_file,
-			  int depth, int elevel,
-			  ConfigVariable **head_p, ConfigVariable **tail_p);
+						  int depth, int elevel,
+						  ConfigVariable **head_p, ConfigVariable **tail_p);
 extern bool ParseConfigDirectory(const char *includedir,
-					 const char *calling_file, int calling_lineno,
-					 int depth, int elevel,
-					 ConfigVariable **head_p,
-					 ConfigVariable **tail_p);
+								 const char *calling_file, int calling_lineno,
+								 int depth, int elevel,
+								 ConfigVariable **head_p,
+								 ConfigVariable **tail_p);
 extern void FreeConfigVariables(ConfigVariable *list);
 
 /*
@@ -281,77 +281,77 @@ extern bool trace_sort;
  * Functions exported by guc.c
  */
 extern void SetConfigOption(const char *name, const char *value,
-				GucContext context, GucSource source);
+							GucContext context, GucSource source);
 
 extern void DefineCustomBoolVariable(
-						 const char *name,
-						 const char *short_desc,
-						 const char *long_desc,
-						 bool *valueAddr,
-						 bool bootValue,
-						 GucContext context,
-						 int flags,
-						 GucBoolCheckHook check_hook,
-						 GucBoolAssignHook assign_hook,
-						 GucShowHook show_hook);
+									 const char *name,
+									 const char *short_desc,
+									 const char *long_desc,
+									 bool *valueAddr,
+									 bool bootValue,
+									 GucContext context,
+									 int flags,
+									 GucBoolCheckHook check_hook,
+									 GucBoolAssignHook assign_hook,
+									 GucShowHook show_hook);
 
 extern void DefineCustomIntVariable(
-						const char *name,
-						const char *short_desc,
-						const char *long_desc,
-						int *valueAddr,
-						int bootValue,
-						int minValue,
-						int maxValue,
-						GucContext context,
-						int flags,
-						GucIntCheckHook check_hook,
-						GucIntAssignHook assign_hook,
-						GucShowHook show_hook);
+									const char *name,
+									const char *short_desc,
+									const char *long_desc,
+									int *valueAddr,
+									int bootValue,
+									int minValue,
+									int maxValue,
+									GucContext context,
+									int flags,
+									GucIntCheckHook check_hook,
+									GucIntAssignHook assign_hook,
+									GucShowHook show_hook);
 
 extern void DefineCustomRealVariable(
-						 const char *name,
-						 const char *short_desc,
-						 const char *long_desc,
-						 double *valueAddr,
-						 double bootValue,
-						 double minValue,
-						 double maxValue,
-						 GucContext context,
-						 int flags,
-						 GucRealCheckHook check_hook,
-						 GucRealAssignHook assign_hook,
-						 GucShowHook show_hook);
+									 const char *name,
+									 const char *short_desc,
+									 const char *long_desc,
+									 double *valueAddr,
+									 double bootValue,
+									 double minValue,
+									 double maxValue,
+									 GucContext context,
+									 int flags,
+									 GucRealCheckHook check_hook,
+									 GucRealAssignHook assign_hook,
+									 GucShowHook show_hook);
 
 extern void DefineCustomStringVariable(
-						   const char *name,
-						   const char *short_desc,
-						   const char *long_desc,
-						   char **valueAddr,
-						   const char *bootValue,
-						   GucContext context,
-						   int flags,
-						   GucStringCheckHook check_hook,
-						   GucStringAssignHook assign_hook,
-						   GucShowHook show_hook);
+									   const char *name,
+									   const char *short_desc,
+									   const char *long_desc,
+									   char **valueAddr,
+									   const char *bootValue,
+									   GucContext context,
+									   int flags,
+									   GucStringCheckHook check_hook,
+									   GucStringAssignHook assign_hook,
+									   GucShowHook show_hook);
 
 extern void DefineCustomEnumVariable(
-						 const char *name,
-						 const char *short_desc,
-						 const char *long_desc,
-						 int *valueAddr,
-						 int bootValue,
-						 const struct config_enum_entry *options,
-						 GucContext context,
-						 int flags,
-						 GucEnumCheckHook check_hook,
-						 GucEnumAssignHook assign_hook,
-						 GucShowHook show_hook);
+									 const char *name,
+									 const char *short_desc,
+									 const char *long_desc,
+									 int *valueAddr,
+									 int bootValue,
+									 const struct config_enum_entry *options,
+									 GucContext context,
+									 int flags,
+									 GucEnumCheckHook check_hook,
+									 GucEnumAssignHook assign_hook,
+									 GucShowHook show_hook);
 
 extern void EmitWarningsOnPlaceholders(const char *className);
 
 extern const char *GetConfigOption(const char *name, bool missing_ok,
-				bool restrict_privileged);
+								   bool restrict_privileged);
 extern const char *GetConfigOptionResetString(const char *name);
 extern int	GetConfigOptionFlags(const char *name, bool missing_ok);
 extern void ProcessConfigFile(GucContext context);
@@ -364,16 +364,16 @@ extern void AtEOXact_GUC(bool isCommit, int nestLevel);
 extern void BeginReportingGUCOptions(void);
 extern void ParseLongOption(const char *string, char **name, char **value);
 extern bool parse_int(const char *value, int *result, int flags,
-		  const char **hintmsg);
+					  const char **hintmsg);
 extern bool parse_real(const char *value, double *result, int flags,
-		   const char **hintmsg);
-extern int set_config_option(const char *name, const char *value,
-				  GucContext context, GucSource source,
-				  GucAction action, bool changeVal, int elevel,
-				  bool is_reload);
+					   const char **hintmsg);
+extern int	set_config_option(const char *name, const char *value,
+							  GucContext context, GucSource source,
+							  GucAction action, bool changeVal, int elevel,
+							  bool is_reload);
 extern void AlterSystemSetConfigFile(AlterSystemStmt *setstmt);
 extern char *GetConfigOptionByName(const char *name, const char **varname,
-					  bool missing_ok);
+								   bool missing_ok);
 extern void GetConfigOptionByNum(int varnum, const char **values, bool *noshow);
 extern int	GetNumConfigOptions(void);
 
@@ -385,7 +385,7 @@ extern void ExecSetVariableStmt(VariableSetStmt *stmt, bool isTopLevel);
 extern char *ExtractSetVariableArgs(VariableSetStmt *stmt);
 
 extern void ProcessGUCArray(ArrayType *array,
-				GucContext context, GucSource source, GucAction action);
+							GucContext context, GucSource source, GucAction action);
 extern ArrayType *GUCArrayAdd(ArrayType *array, const char *name, const char *value);
 extern ArrayType *GUCArrayDelete(ArrayType *array, const char *name);
 extern ArrayType *GUCArrayReset(ArrayType *array);
diff --git a/src/include/utils/guc_tables.h b/src/include/utils/guc_tables.h
index 2a74b30b2f8b..d68976fafa94 100644
--- a/src/include/utils/guc_tables.h
+++ b/src/include/utils/guc_tables.h
@@ -266,7 +266,7 @@ extern void build_guc_variables(void);
 /* search in enum options */
 extern const char *config_enum_lookup_by_value(struct config_enum *record, int val);
 extern bool config_enum_lookup_by_name(struct config_enum *record,
-						   const char *value, int *retval);
+									   const char *value, int *retval);
 extern struct config_generic **get_explain_guc_options(int *num);
 
 #endif							/* GUC_TABLES_H */
diff --git a/src/include/utils/hashutils.h b/src/include/utils/hashutils.h
index aa90d4195ad3..22aea6b89fc5 100644
--- a/src/include/utils/hashutils.h
+++ b/src/include/utils/hashutils.h
@@ -22,7 +22,7 @@
 
 extern Datum hash_any(register const unsigned char *k, register int keylen);
 extern Datum hash_any_extended(register const unsigned char *k,
-				  register int keylen, uint64 seed);
+							   register int keylen, uint64 seed);
 extern Datum hash_uint32(uint32 k);
 extern Datum hash_uint32_extended(uint32 k, uint64 seed);
 
diff --git a/src/include/utils/hsearch.h b/src/include/utils/hsearch.h
index 373854cc4d32..fe5ab9c86814 100644
--- a/src/include/utils/hsearch.h
+++ b/src/include/utils/hsearch.h
@@ -120,17 +120,17 @@ typedef struct
  * prototypes for functions in dynahash.c
  */
 extern HTAB *hash_create(const char *tabname, long nelem,
-			HASHCTL *info, int flags);
+						 HASHCTL *info, int flags);
 extern void hash_destroy(HTAB *hashp);
 extern void hash_stats(const char *where, HTAB *hashp);
 extern void *hash_search(HTAB *hashp, const void *keyPtr, HASHACTION action,
-			bool *foundPtr);
+						 bool *foundPtr);
 extern uint32 get_hash_value(HTAB *hashp, const void *keyPtr);
 extern void *hash_search_with_hash_value(HTAB *hashp, const void *keyPtr,
-							uint32 hashvalue, HASHACTION action,
-							bool *foundPtr);
+										 uint32 hashvalue, HASHACTION action,
+										 bool *foundPtr);
 extern bool hash_update_hash_key(HTAB *hashp, void *existingEntry,
-					 const void *newKeyPtr);
+								 const void *newKeyPtr);
 extern long hash_get_num_entries(HTAB *hashp);
 extern void hash_seq_init(HASH_SEQ_STATUS *status, HTAB *hashp);
 extern void *hash_seq_search(HASH_SEQ_STATUS *status);
diff --git a/src/include/utils/index_selfuncs.h b/src/include/utils/index_selfuncs.h
index c100b4352ae3..b81556d7a1ec 100644
--- a/src/include/utils/index_selfuncs.h
+++ b/src/include/utils/index_selfuncs.h
@@ -23,52 +23,52 @@
 
 /* Functions in selfuncs.c */
 extern void brincostestimate(struct PlannerInfo *root,
-				 struct IndexPath *path,
-				 double loop_count,
-				 Cost *indexStartupCost,
-				 Cost *indexTotalCost,
-				 Selectivity *indexSelectivity,
-				 double *indexCorrelation,
-				 double *indexPages);
+							 struct IndexPath *path,
+							 double loop_count,
+							 Cost *indexStartupCost,
+							 Cost *indexTotalCost,
+							 Selectivity *indexSelectivity,
+							 double *indexCorrelation,
+							 double *indexPages);
 extern void btcostestimate(struct PlannerInfo *root,
-			   struct IndexPath *path,
-			   double loop_count,
-			   Cost *indexStartupCost,
-			   Cost *indexTotalCost,
-			   Selectivity *indexSelectivity,
-			   double *indexCorrelation,
-			   double *indexPages);
+						   struct IndexPath *path,
+						   double loop_count,
+						   Cost *indexStartupCost,
+						   Cost *indexTotalCost,
+						   Selectivity *indexSelectivity,
+						   double *indexCorrelation,
+						   double *indexPages);
 extern void hashcostestimate(struct PlannerInfo *root,
-				 struct IndexPath *path,
-				 double loop_count,
-				 Cost *indexStartupCost,
-				 Cost *indexTotalCost,
-				 Selectivity *indexSelectivity,
-				 double *indexCorrelation,
-				 double *indexPages);
+							 struct IndexPath *path,
+							 double loop_count,
+							 Cost *indexStartupCost,
+							 Cost *indexTotalCost,
+							 Selectivity *indexSelectivity,
+							 double *indexCorrelation,
+							 double *indexPages);
 extern void gistcostestimate(struct PlannerInfo *root,
-				 struct IndexPath *path,
-				 double loop_count,
-				 Cost *indexStartupCost,
-				 Cost *indexTotalCost,
-				 Selectivity *indexSelectivity,
-				 double *indexCorrelation,
-				 double *indexPages);
+							 struct IndexPath *path,
+							 double loop_count,
+							 Cost *indexStartupCost,
+							 Cost *indexTotalCost,
+							 Selectivity *indexSelectivity,
+							 double *indexCorrelation,
+							 double *indexPages);
 extern void spgcostestimate(struct PlannerInfo *root,
-				struct IndexPath *path,
-				double loop_count,
-				Cost *indexStartupCost,
-				Cost *indexTotalCost,
-				Selectivity *indexSelectivity,
-				double *indexCorrelation,
-				double *indexPages);
+							struct IndexPath *path,
+							double loop_count,
+							Cost *indexStartupCost,
+							Cost *indexTotalCost,
+							Selectivity *indexSelectivity,
+							double *indexCorrelation,
+							double *indexPages);
 extern void gincostestimate(struct PlannerInfo *root,
-				struct IndexPath *path,
-				double loop_count,
-				Cost *indexStartupCost,
-				Cost *indexTotalCost,
-				Selectivity *indexSelectivity,
-				double *indexCorrelation,
-				double *indexPages);
+							struct IndexPath *path,
+							double loop_count,
+							Cost *indexStartupCost,
+							Cost *indexTotalCost,
+							Selectivity *indexSelectivity,
+							double *indexCorrelation,
+							double *indexPages);
 
 #endif							/* INDEX_SELFUNCS_H */
diff --git a/src/include/utils/inval.h b/src/include/utils/inval.h
index c557640479e9..e7baa39d2a49 100644
--- a/src/include/utils/inval.h
+++ b/src/include/utils/inval.h
@@ -36,8 +36,8 @@ extern void PostPrepare_Inval(void);
 extern void CommandEndInvalidationMessages(void);
 
 extern void CacheInvalidateHeapTuple(Relation relation,
-						 HeapTuple tuple,
-						 HeapTuple newtuple);
+									 HeapTuple tuple,
+									 HeapTuple newtuple);
 
 extern void CacheInvalidateCatalog(Oid catalogId);
 
@@ -54,11 +54,11 @@ extern void CacheInvalidateSmgr(RelFileNodeBackend rnode);
 extern void CacheInvalidateRelmap(Oid databaseId);
 
 extern void CacheRegisterSyscacheCallback(int cacheid,
-							  SyscacheCallbackFunction func,
-							  Datum arg);
+										  SyscacheCallbackFunction func,
+										  Datum arg);
 
 extern void CacheRegisterRelcacheCallback(RelcacheCallbackFunction func,
-							  Datum arg);
+										  Datum arg);
 
 extern void CallSyscacheCallbacks(int cacheid, uint32 hashvalue);
 
diff --git a/src/include/utils/jsonapi.h b/src/include/utils/jsonapi.h
index b9993a9aad4e..35830df8c318 100644
--- a/src/include/utils/jsonapi.h
+++ b/src/include/utils/jsonapi.h
@@ -122,8 +122,8 @@ extern int	json_count_array_elements(JsonLexContext *lex);
  */
 extern JsonLexContext *makeJsonLexContext(text *json, bool need_escapes);
 extern JsonLexContext *makeJsonLexContextCstringLen(char *json,
-							 int len,
-							 bool need_escapes);
+													int len,
+													bool need_escapes);
 
 /*
  * Utility function to check if a string is a valid JSON number.
@@ -153,13 +153,13 @@ typedef text *(*JsonTransformStringValuesAction) (void *state, char *elem_value,
 
 extern uint32 parse_jsonb_index_flags(Jsonb *jb);
 extern void iterate_jsonb_values(Jsonb *jb, uint32 flags, void *state,
-					 JsonIterateStringValuesAction action);
+								 JsonIterateStringValuesAction action);
 extern void iterate_json_values(text *json, uint32 flags, void *action_state,
-					JsonIterateStringValuesAction action);
+								JsonIterateStringValuesAction action);
 extern Jsonb *transform_jsonb_string_values(Jsonb *jsonb, void *action_state,
-							  JsonTransformStringValuesAction transform_action);
+											JsonTransformStringValuesAction transform_action);
 extern text *transform_json_string_values(text *json, void *action_state,
-							 JsonTransformStringValuesAction transform_action);
+										  JsonTransformStringValuesAction transform_action);
 
 extern char *JsonEncodeDateTime(char *buf, Datum value, Oid typid);
 
diff --git a/src/include/utils/jsonb.h b/src/include/utils/jsonb.h
index 432331b3b9e4..2fe7d32fec2d 100644
--- a/src/include/utils/jsonb.h
+++ b/src/include/utils/jsonb.h
@@ -362,27 +362,27 @@ extern uint32 getJsonbOffset(const JsonbContainer *jc, int index);
 extern uint32 getJsonbLength(const JsonbContainer *jc, int index);
 extern int	compareJsonbContainers(JsonbContainer *a, JsonbContainer *b);
 extern JsonbValue *findJsonbValueFromContainer(JsonbContainer *sheader,
-							uint32 flags,
-							JsonbValue *key);
+											   uint32 flags,
+											   JsonbValue *key);
 extern JsonbValue *getIthJsonbValueFromContainer(JsonbContainer *sheader,
-							  uint32 i);
+												 uint32 i);
 extern JsonbValue *pushJsonbValue(JsonbParseState **pstate,
-			   JsonbIteratorToken seq, JsonbValue *jbVal);
+								  JsonbIteratorToken seq, JsonbValue *jbVal);
 extern JsonbIterator *JsonbIteratorInit(JsonbContainer *container);
 extern JsonbIteratorToken JsonbIteratorNext(JsonbIterator **it, JsonbValue *val,
-				  bool skipNested);
+											bool skipNested);
 extern Jsonb *JsonbValueToJsonb(JsonbValue *val);
 extern bool JsonbDeepContains(JsonbIterator **val,
-				  JsonbIterator **mContained);
+							  JsonbIterator **mContained);
 extern void JsonbHashScalarValue(const JsonbValue *scalarVal, uint32 *hash);
 extern void JsonbHashScalarValueExtended(const JsonbValue *scalarVal,
-							 uint64 *hash, uint64 seed);
+										 uint64 *hash, uint64 seed);
 
 /* jsonb.c support functions */
 extern char *JsonbToCString(StringInfo out, JsonbContainer *in,
-			   int estimated_len);
+							int estimated_len);
 extern char *JsonbToCStringIndent(StringInfo out, JsonbContainer *in,
-					 int estimated_len);
+								  int estimated_len);
 extern bool JsonbExtractScalar(JsonbContainer *jbc, JsonbValue *res);
 extern const char *JsonbTypeName(JsonbValue *jb);
 
diff --git a/src/include/utils/jsonpath.h b/src/include/utils/jsonpath.h
index ae8a995c7f88..0732fe2ba99a 100644
--- a/src/include/utils/jsonpath.h
+++ b/src/include/utils/jsonpath.h
@@ -171,7 +171,7 @@ extern Numeric jspGetNumeric(JsonPathItem *v);
 extern bool jspGetBool(JsonPathItem *v);
 extern char *jspGetString(JsonPathItem *v, int32 *len);
 extern bool jspGetArraySubscript(JsonPathItem *v, JsonPathItem *from,
-					 JsonPathItem *to, int i);
+								 JsonPathItem *to, int i);
 
 extern const char *jspOperationName(JsonPathItemType type);
 
diff --git a/src/include/utils/logtape.h b/src/include/utils/logtape.h
index f15ca59a4aa1..081b03880a00 100644
--- a/src/include/utils/logtape.h
+++ b/src/include/utils/logtape.h
@@ -55,24 +55,24 @@ typedef struct TapeShare
  */
 
 extern LogicalTapeSet *LogicalTapeSetCreate(int ntapes, TapeShare *shared,
-					 SharedFileSet *fileset, int worker);
+											SharedFileSet *fileset, int worker);
 extern void LogicalTapeSetClose(LogicalTapeSet *lts);
 extern void LogicalTapeSetForgetFreeSpace(LogicalTapeSet *lts);
 extern size_t LogicalTapeRead(LogicalTapeSet *lts, int tapenum,
-				void *ptr, size_t size);
+							  void *ptr, size_t size);
 extern void LogicalTapeWrite(LogicalTapeSet *lts, int tapenum,
-				 void *ptr, size_t size);
+							 void *ptr, size_t size);
 extern void LogicalTapeRewindForRead(LogicalTapeSet *lts, int tapenum,
-						 size_t buffer_size);
+									 size_t buffer_size);
 extern void LogicalTapeRewindForWrite(LogicalTapeSet *lts, int tapenum);
 extern void LogicalTapeFreeze(LogicalTapeSet *lts, int tapenum,
-				  TapeShare *share);
+							  TapeShare *share);
 extern size_t LogicalTapeBackspace(LogicalTapeSet *lts, int tapenum,
-					 size_t size);
+								   size_t size);
 extern void LogicalTapeSeek(LogicalTapeSet *lts, int tapenum,
-				long blocknum, int offset);
+							long blocknum, int offset);
 extern void LogicalTapeTell(LogicalTapeSet *lts, int tapenum,
-				long *blocknum, int *offset);
+							long *blocknum, int *offset);
 extern long LogicalTapeSetBlocks(LogicalTapeSet *lts);
 
 #endif							/* LOGTAPE_H */
diff --git a/src/include/utils/lsyscache.h b/src/include/utils/lsyscache.h
index 9606d021b10b..c8df5bff9f99 100644
--- a/src/include/utils/lsyscache.h
+++ b/src/include/utils/lsyscache.h
@@ -66,30 +66,30 @@ extern bool op_in_opfamily(Oid opno, Oid opfamily);
 extern int	get_op_opfamily_strategy(Oid opno, Oid opfamily);
 extern Oid	get_op_opfamily_sortfamily(Oid opno, Oid opfamily);
 extern void get_op_opfamily_properties(Oid opno, Oid opfamily, bool ordering_op,
-						   int *strategy,
-						   Oid *lefttype,
-						   Oid *righttype);
-extern Oid get_opfamily_member(Oid opfamily, Oid lefttype, Oid righttype,
-					int16 strategy);
+									   int *strategy,
+									   Oid *lefttype,
+									   Oid *righttype);
+extern Oid	get_opfamily_member(Oid opfamily, Oid lefttype, Oid righttype,
+								int16 strategy);
 extern bool get_ordering_op_properties(Oid opno,
-						   Oid *opfamily, Oid *opcintype, int16 *strategy);
+									   Oid *opfamily, Oid *opcintype, int16 *strategy);
 extern Oid	get_equality_op_for_ordering_op(Oid opno, bool *reverse);
 extern Oid	get_ordering_op_for_equality_op(Oid opno, bool use_lhs_type);
 extern List *get_mergejoin_opfamilies(Oid opno);
 extern bool get_compatible_hash_operators(Oid opno,
-							  Oid *lhs_opno, Oid *rhs_opno);
+										  Oid *lhs_opno, Oid *rhs_opno);
 extern bool get_op_hash_functions(Oid opno,
-					  RegProcedure *lhs_procno, RegProcedure *rhs_procno);
+								  RegProcedure *lhs_procno, RegProcedure *rhs_procno);
 extern List *get_op_btree_interpretation(Oid opno);
 extern bool equality_ops_are_compatible(Oid opno1, Oid opno2);
-extern Oid get_opfamily_proc(Oid opfamily, Oid lefttype, Oid righttype,
-				  int16 procnum);
+extern Oid	get_opfamily_proc(Oid opfamily, Oid lefttype, Oid righttype,
+							  int16 procnum);
 extern char *get_attname(Oid relid, AttrNumber attnum, bool missing_ok);
 extern AttrNumber get_attnum(Oid relid, const char *attname);
 extern char get_attgenerated(Oid relid, AttrNumber attnum);
 extern Oid	get_atttype(Oid relid, AttrNumber attnum);
 extern void get_atttypetypmodcoll(Oid relid, AttrNumber attnum,
-					  Oid *typid, int32 *typmod, Oid *collid);
+								  Oid *typid, int32 *typmod, Oid *collid);
 extern char *get_collation_name(Oid colloid);
 extern bool get_collation_isdeterministic(Oid colloid);
 extern char *get_constraint_name(Oid conoid);
@@ -97,7 +97,7 @@ extern char *get_language_name(Oid langoid, bool missing_ok);
 extern Oid	get_opclass_family(Oid opclass);
 extern Oid	get_opclass_input_type(Oid opclass);
 extern bool get_opclass_opfamily_and_input_type(Oid opclass,
-									Oid *opfamily, Oid *opcintype);
+												Oid *opfamily, Oid *opcintype);
 extern RegProcedure get_opcode(Oid opno);
 extern char *get_opname(Oid opno);
 extern Oid	get_op_rettype(Oid opno);
@@ -138,16 +138,16 @@ extern int16 get_typlen(Oid typid);
 extern bool get_typbyval(Oid typid);
 extern void get_typlenbyval(Oid typid, int16 *typlen, bool *typbyval);
 extern void get_typlenbyvalalign(Oid typid, int16 *typlen, bool *typbyval,
-					 char *typalign);
+								 char *typalign);
 extern Oid	getTypeIOParam(HeapTuple typeTuple);
 extern void get_type_io_data(Oid typid,
-				 IOFuncSelector which_func,
-				 int16 *typlen,
-				 bool *typbyval,
-				 char *typalign,
-				 char *typdelim,
-				 Oid *typioparam,
-				 Oid *func);
+							 IOFuncSelector which_func,
+							 int16 *typlen,
+							 bool *typbyval,
+							 char *typalign,
+							 char *typdelim,
+							 Oid *typioparam,
+							 Oid *func);
 extern char get_typstorage(Oid typid);
 extern Node *get_typdefault(Oid typid);
 extern char get_typtype(Oid typid);
@@ -155,8 +155,8 @@ extern bool type_is_rowtype(Oid typid);
 extern bool type_is_enum(Oid typid);
 extern bool type_is_range(Oid typid);
 extern void get_type_category_preferred(Oid typid,
-							char *typcategory,
-							bool *typispreferred);
+										char *typcategory,
+										bool *typispreferred);
 extern Oid	get_typ_typrelid(Oid typid);
 extern Oid	get_element_type(Oid typid);
 extern Oid	get_array_type(Oid typid);
@@ -174,7 +174,7 @@ extern Oid	getBaseTypeAndTypmod(Oid typid, int32 *typmod);
 extern int32 get_typavgwidth(Oid typid, int32 typmod);
 extern int32 get_attavgwidth(Oid relid, AttrNumber attnum);
 extern bool get_attstatsslot(AttStatsSlot *sslot, HeapTuple statstuple,
-				 int reqkind, Oid reqop, int flags);
+							 int reqkind, Oid reqop, int flags);
 extern void free_attstatsslot(AttStatsSlot *sslot);
 extern char *get_namespace_name(Oid nspid);
 extern char *get_namespace_name_or_temp(Oid nspid);
diff --git a/src/include/utils/memutils.h b/src/include/utils/memutils.h
index 30d7998c3b1a..ffe6de536e20 100644
--- a/src/include/utils/memutils.h
+++ b/src/include/utils/memutils.h
@@ -78,14 +78,14 @@ extern void MemoryContextResetChildren(MemoryContext context);
 extern void MemoryContextDeleteChildren(MemoryContext context);
 extern void MemoryContextSetIdentifier(MemoryContext context, const char *id);
 extern void MemoryContextSetParent(MemoryContext context,
-					   MemoryContext new_parent);
+								   MemoryContext new_parent);
 extern Size GetMemoryChunkSpace(void *pointer);
 extern MemoryContext MemoryContextGetParent(MemoryContext context);
 extern bool MemoryContextIsEmpty(MemoryContext context);
 extern void MemoryContextStats(MemoryContext context);
 extern void MemoryContextStatsDetail(MemoryContext context, int max_children);
 extern void MemoryContextAllowInCriticalSection(MemoryContext context,
-									bool allow);
+												bool allow);
 
 #ifdef MEMORY_CONTEXT_CHECKING
 extern void MemoryContextCheck(MemoryContext context);
@@ -138,10 +138,10 @@ GetMemoryChunkContext(void *pointer)
  * specific creation routines, and noplace else.
  */
 extern void MemoryContextCreate(MemoryContext node,
-					NodeTag tag,
-					const MemoryContextMethods *methods,
-					MemoryContext parent,
-					const char *name);
+								NodeTag tag,
+								const MemoryContextMethods *methods,
+								MemoryContext parent,
+								const char *name);
 
 
 /*
@@ -150,10 +150,10 @@ extern void MemoryContextCreate(MemoryContext node,
 
 /* aset.c */
 extern MemoryContext AllocSetContextCreateInternal(MemoryContext parent,
-							  const char *name,
-							  Size minContextSize,
-							  Size initBlockSize,
-							  Size maxBlockSize);
+												   const char *name,
+												   Size minContextSize,
+												   Size initBlockSize,
+												   Size maxBlockSize);
 
 /*
  * This wrapper macro exists to check for non-constant strings used as context
@@ -172,14 +172,14 @@ extern MemoryContext AllocSetContextCreateInternal(MemoryContext parent,
 
 /* slab.c */
 extern MemoryContext SlabContextCreate(MemoryContext parent,
-				  const char *name,
-				  Size blockSize,
-				  Size chunkSize);
+									   const char *name,
+									   Size blockSize,
+									   Size chunkSize);
 
 /* generation.c */
 extern MemoryContext GenerationContextCreate(MemoryContext parent,
-						const char *name,
-						Size blockSize);
+											 const char *name,
+											 Size blockSize);
 
 /*
  * Recommended default alloc parameters, suitable for "ordinary" contexts
diff --git a/src/include/utils/numeric.h b/src/include/utils/numeric.h
index b475c93e0473..7cc597d7b090 100644
--- a/src/include/utils/numeric.h
+++ b/src/include/utils/numeric.h
@@ -62,15 +62,15 @@ extern char *numeric_out_sci(Numeric num, int scale);
 extern char *numeric_normalize(Numeric num);
 
 extern Numeric numeric_add_opt_error(Numeric num1, Numeric num2,
-					  bool *have_error);
+									 bool *have_error);
 extern Numeric numeric_sub_opt_error(Numeric num1, Numeric num2,
-					  bool *have_error);
+									 bool *have_error);
 extern Numeric numeric_mul_opt_error(Numeric num1, Numeric num2,
-					  bool *have_error);
+									 bool *have_error);
 extern Numeric numeric_div_opt_error(Numeric num1, Numeric num2,
-					  bool *have_error);
+									 bool *have_error);
 extern Numeric numeric_mod_opt_error(Numeric num1, Numeric num2,
-					  bool *have_error);
+									 bool *have_error);
 extern int32 numeric_int4_opt_error(Numeric num, bool *error);
 
 #endif							/* _PG_NUMERIC_H_ */
diff --git a/src/include/utils/palloc.h b/src/include/utils/palloc.h
index d644eddf92f1..a5f435ee0687 100644
--- a/src/include/utils/palloc.h
+++ b/src/include/utils/palloc.h
@@ -72,7 +72,7 @@ extern void *MemoryContextAlloc(MemoryContext context, Size size);
 extern void *MemoryContextAllocZero(MemoryContext context, Size size);
 extern void *MemoryContextAllocZeroAligned(MemoryContext context, Size size);
 extern void *MemoryContextAllocExtended(MemoryContext context,
-						   Size size, int flags);
+										Size size, int flags);
 
 extern void *palloc(Size size);
 extern void *palloc0(Size size);
@@ -117,7 +117,7 @@ MemoryContextSwitchTo(MemoryContext context)
 
 /* Registration of memory context reset/delete callbacks */
 extern void MemoryContextRegisterResetCallback(MemoryContext context,
-								   MemoryContextCallback *cb);
+											   MemoryContextCallback *cb);
 
 /*
  * These are like standard strdup() except the copied string is
diff --git a/src/include/utils/pg_locale.h b/src/include/utils/pg_locale.h
index a342a6254905..b4b3aa5843e6 100644
--- a/src/include/utils/pg_locale.h
+++ b/src/include/utils/pg_locale.h
@@ -112,8 +112,8 @@ extern int32_t icu_from_uchar(char **result, const UChar *buff_uchar, int32_t le
 
 /* These functions convert from/to libc's wchar_t, *not* pg_wchar_t */
 extern size_t wchar2char(char *to, const wchar_t *from, size_t tolen,
-		   pg_locale_t locale);
+						 pg_locale_t locale);
 extern size_t char2wchar(wchar_t *to, size_t tolen,
-		   const char *from, size_t fromlen, pg_locale_t locale);
+						 const char *from, size_t fromlen, pg_locale_t locale);
 
 #endif							/* _PG_LOCALE_ */
diff --git a/src/include/utils/plancache.h b/src/include/utils/plancache.h
index 936fe6bef539..de2555ec2d3e 100644
--- a/src/include/utils/plancache.h
+++ b/src/include/utils/plancache.h
@@ -185,38 +185,38 @@ extern void InitPlanCache(void);
 extern void ResetPlanCache(void);
 
 extern CachedPlanSource *CreateCachedPlan(struct RawStmt *raw_parse_tree,
-				 const char *query_string,
-				 const char *commandTag);
+										  const char *query_string,
+										  const char *commandTag);
 extern CachedPlanSource *CreateOneShotCachedPlan(struct RawStmt *raw_parse_tree,
-						const char *query_string,
-						const char *commandTag);
+												 const char *query_string,
+												 const char *commandTag);
 extern void CompleteCachedPlan(CachedPlanSource *plansource,
-				   List *querytree_list,
-				   MemoryContext querytree_context,
-				   Oid *param_types,
-				   int num_params,
-				   ParserSetupHook parserSetup,
-				   void *parserSetupArg,
-				   int cursor_options,
-				   bool fixed_result);
+							   List *querytree_list,
+							   MemoryContext querytree_context,
+							   Oid *param_types,
+							   int num_params,
+							   ParserSetupHook parserSetup,
+							   void *parserSetupArg,
+							   int cursor_options,
+							   bool fixed_result);
 
 extern void SaveCachedPlan(CachedPlanSource *plansource);
 extern void DropCachedPlan(CachedPlanSource *plansource);
 
 extern void CachedPlanSetParentContext(CachedPlanSource *plansource,
-						   MemoryContext newcontext);
+									   MemoryContext newcontext);
 
 extern CachedPlanSource *CopyCachedPlan(CachedPlanSource *plansource);
 
 extern bool CachedPlanIsValid(CachedPlanSource *plansource);
 
 extern List *CachedPlanGetTargetList(CachedPlanSource *plansource,
-						QueryEnvironment *queryEnv);
+									 QueryEnvironment *queryEnv);
 
 extern CachedPlan *GetCachedPlan(CachedPlanSource *plansource,
-			  ParamListInfo boundParams,
-			  bool useResOwner,
-			  QueryEnvironment *queryEnv);
+								 ParamListInfo boundParams,
+								 bool useResOwner,
+								 QueryEnvironment *queryEnv);
 extern void ReleaseCachedPlan(CachedPlan *plan, bool useResOwner);
 
 extern CachedExpression *GetCachedExpression(Node *expr);
diff --git a/src/include/utils/portal.h b/src/include/utils/portal.h
index bbef89e3daa7..098c837e0a13 100644
--- a/src/include/utils/portal.h
+++ b/src/include/utils/portal.h
@@ -208,12 +208,12 @@ extern void AtAbort_Portals(void);
 extern void AtCleanup_Portals(void);
 extern void PortalErrorCleanup(void);
 extern void AtSubCommit_Portals(SubTransactionId mySubid,
-					SubTransactionId parentSubid,
-					ResourceOwner parentXactOwner);
+								SubTransactionId parentSubid,
+								ResourceOwner parentXactOwner);
 extern void AtSubAbort_Portals(SubTransactionId mySubid,
-				   SubTransactionId parentSubid,
-				   ResourceOwner myXactOwner,
-				   ResourceOwner parentXactOwner);
+							   SubTransactionId parentSubid,
+							   ResourceOwner myXactOwner,
+							   ResourceOwner parentXactOwner);
 extern void AtSubCleanup_Portals(SubTransactionId mySubid);
 extern Portal CreatePortal(const char *name, bool allowDup, bool dupSilent);
 extern Portal CreateNewPortal(void);
@@ -225,11 +225,11 @@ extern void MarkPortalFailed(Portal portal);
 extern void PortalDrop(Portal portal, bool isTopCommit);
 extern Portal GetPortalByName(const char *name);
 extern void PortalDefineQuery(Portal portal,
-				  const char *prepStmtName,
-				  const char *sourceText,
-				  const char *commandTag,
-				  List *stmts,
-				  CachedPlan *cplan);
+							  const char *prepStmtName,
+							  const char *sourceText,
+							  const char *commandTag,
+							  List *stmts,
+							  CachedPlan *cplan);
 extern PlannedStmt *PortalGetPrimaryStmt(Portal portal);
 extern void PortalCreateHoldStore(Portal portal);
 extern void PortalHashTableDeleteAll(void);
diff --git a/src/include/utils/ps_status.h b/src/include/utils/ps_status.h
index 2ba5a0ea2eac..23f1e59ffcd6 100644
--- a/src/include/utils/ps_status.h
+++ b/src/include/utils/ps_status.h
@@ -17,7 +17,7 @@ extern bool update_process_title;
 extern char **save_ps_display_args(int argc, char **argv);
 
 extern void init_ps_display(const char *username, const char *dbname,
-				const char *host_info, const char *initial_str);
+							const char *host_info, const char *initial_str);
 
 extern void set_ps_display(const char *activity, bool force);
 
diff --git a/src/include/utils/rangetypes.h b/src/include/utils/rangetypes.h
index 8c23ed276b50..580e47650175 100644
--- a/src/include/utils/rangetypes.h
+++ b/src/include/utils/rangetypes.h
@@ -96,44 +96,44 @@ extern bool range_contains_elem_internal(TypeCacheEntry *typcache, RangeType *r,
 
 /* internal versions of the above */
 extern bool range_eq_internal(TypeCacheEntry *typcache, RangeType *r1,
-				  RangeType *r2);
+							  RangeType *r2);
 extern bool range_ne_internal(TypeCacheEntry *typcache, RangeType *r1,
-				  RangeType *r2);
+							  RangeType *r2);
 extern bool range_contains_internal(TypeCacheEntry *typcache, RangeType *r1,
-						RangeType *r2);
+									RangeType *r2);
 extern bool range_contained_by_internal(TypeCacheEntry *typcache, RangeType *r1,
-							RangeType *r2);
+										RangeType *r2);
 extern bool range_before_internal(TypeCacheEntry *typcache, RangeType *r1,
-					  RangeType *r2);
+								  RangeType *r2);
 extern bool range_after_internal(TypeCacheEntry *typcache, RangeType *r1,
-					 RangeType *r2);
+								 RangeType *r2);
 extern bool range_adjacent_internal(TypeCacheEntry *typcache, RangeType *r1,
-						RangeType *r2);
+									RangeType *r2);
 extern bool range_overlaps_internal(TypeCacheEntry *typcache, RangeType *r1,
-						RangeType *r2);
+									RangeType *r2);
 extern bool range_overleft_internal(TypeCacheEntry *typcache, RangeType *r1,
-						RangeType *r2);
+									RangeType *r2);
 extern bool range_overright_internal(TypeCacheEntry *typcache, RangeType *r1,
-						 RangeType *r2);
+									 RangeType *r2);
 
 /* assorted support functions */
 extern TypeCacheEntry *range_get_typcache(FunctionCallInfo fcinfo,
-				   Oid rngtypid);
+										  Oid rngtypid);
 extern RangeType *range_serialize(TypeCacheEntry *typcache, RangeBound *lower,
-				RangeBound *upper, bool empty);
+								  RangeBound *upper, bool empty);
 extern void range_deserialize(TypeCacheEntry *typcache, RangeType *range,
-				  RangeBound *lower, RangeBound *upper,
-				  bool *empty);
+							  RangeBound *lower, RangeBound *upper,
+							  bool *empty);
 extern char range_get_flags(RangeType *range);
 extern void range_set_contain_empty(RangeType *range);
 extern RangeType *make_range(TypeCacheEntry *typcache, RangeBound *lower,
-		   RangeBound *upper, bool empty);
-extern int range_cmp_bounds(TypeCacheEntry *typcache, RangeBound *b1,
-				 RangeBound *b2);
-extern int range_cmp_bound_values(TypeCacheEntry *typcache, RangeBound *b1,
-					   RangeBound *b2);
+							 RangeBound *upper, bool empty);
+extern int	range_cmp_bounds(TypeCacheEntry *typcache, RangeBound *b1,
+							 RangeBound *b2);
+extern int	range_cmp_bound_values(TypeCacheEntry *typcache, RangeBound *b1,
+								   RangeBound *b2);
 extern bool bounds_adjacent(TypeCacheEntry *typcache, RangeBound bound1,
-				RangeBound bound2);
+							RangeBound bound2);
 extern RangeType *make_empty_range(TypeCacheEntry *typcache);
 
 #endif							/* RANGETYPES_H */
diff --git a/src/include/utils/regproc.h b/src/include/utils/regproc.h
index a0df86ebe129..494f36121b13 100644
--- a/src/include/utils/regproc.h
+++ b/src/include/utils/regproc.h
@@ -19,10 +19,10 @@ extern List *stringToQualifiedNameList(const char *string);
 extern char *format_procedure(Oid procedure_oid);
 extern char *format_procedure_qualified(Oid procedure_oid);
 extern void format_procedure_parts(Oid operator_oid, List **objnames,
-					   List **objargs);
+								   List **objargs);
 extern char *format_operator(Oid operator_oid);
 extern char *format_operator_qualified(Oid operator_oid);
 extern void format_operator_parts(Oid operator_oid, List **objnames,
-					  List **objargs);
+								  List **objargs);
 
 #endif
diff --git a/src/include/utils/relcache.h b/src/include/utils/relcache.h
index 364495a5f0b8..d9c10ffcbafb 100644
--- a/src/include/utils/relcache.h
+++ b/src/include/utils/relcache.h
@@ -59,12 +59,12 @@ typedef enum IndexAttrBitmapKind
 } IndexAttrBitmapKind;
 
 extern Bitmapset *RelationGetIndexAttrBitmap(Relation relation,
-						   IndexAttrBitmapKind keyAttrs);
+											 IndexAttrBitmapKind keyAttrs);
 
 extern void RelationGetExclusionInfo(Relation indexRelation,
-						 Oid **operators,
-						 Oid **procs,
-						 uint16 **strategies);
+									 Oid **operators,
+									 Oid **procs,
+									 uint16 **strategies);
 
 extern void RelationInitIndexAccessInfo(Relation relation);
 
@@ -93,16 +93,16 @@ extern void RelationCacheInitializePhase3(void);
  * Routine to create a relcache entry for an about-to-be-created relation
  */
 extern Relation RelationBuildLocalRelation(const char *relname,
-						   Oid relnamespace,
-						   TupleDesc tupDesc,
-						   Oid relid,
-						   Oid accessmtd,
-						   Oid relfilenode,
-						   Oid reltablespace,
-						   bool shared_relation,
-						   bool mapped_relation,
-						   char relpersistence,
-						   char relkind);
+										   Oid relnamespace,
+										   TupleDesc tupDesc,
+										   Oid relid,
+										   Oid accessmtd,
+										   Oid relfilenode,
+										   Oid reltablespace,
+										   bool shared_relation,
+										   bool mapped_relation,
+										   char relpersistence,
+										   char relkind);
 
 /*
  * Routine to manage assignment of new relfilenode to a relation
@@ -122,7 +122,7 @@ extern void RelationCloseSmgrByOid(Oid relationId);
 
 extern void AtEOXact_RelationCache(bool isCommit);
 extern void AtEOSubXact_RelationCache(bool isCommit, SubTransactionId mySubid,
-						  SubTransactionId parentSubid);
+									  SubTransactionId parentSubid);
 
 /*
  * Routines to help manage rebuilding of relcache init files
diff --git a/src/include/utils/relmapper.h b/src/include/utils/relmapper.h
index 175e5a043c19..2a0a5e2e10a5 100644
--- a/src/include/utils/relmapper.h
+++ b/src/include/utils/relmapper.h
@@ -40,7 +40,7 @@ extern Oid	RelationMapOidToFilenode(Oid relationId, bool shared);
 extern Oid	RelationMapFilenodeToOid(Oid relationId, bool shared);
 
 extern void RelationMapUpdateMap(Oid relationId, Oid fileNode, bool shared,
-					 bool immediate);
+								 bool immediate);
 
 extern void RelationMapRemoveMapping(Oid relationId);
 
diff --git a/src/include/utils/resowner.h b/src/include/utils/resowner.h
index f33d3aaa03d5..d1670daf791b 100644
--- a/src/include/utils/resowner.h
+++ b/src/include/utils/resowner.h
@@ -66,19 +66,19 @@ typedef void (*ResourceReleaseCallback) (ResourceReleasePhase phase,
 
 /* generic routines */
 extern ResourceOwner ResourceOwnerCreate(ResourceOwner parent,
-					const char *name);
+										 const char *name);
 extern void ResourceOwnerRelease(ResourceOwner owner,
-					 ResourceReleasePhase phase,
-					 bool isCommit,
-					 bool isTopLevel);
+								 ResourceReleasePhase phase,
+								 bool isCommit,
+								 bool isTopLevel);
 extern void ResourceOwnerDelete(ResourceOwner owner);
 extern ResourceOwner ResourceOwnerGetParent(ResourceOwner owner);
 extern void ResourceOwnerNewParent(ResourceOwner owner,
-					   ResourceOwner newparent);
+								   ResourceOwner newparent);
 extern void RegisterResourceReleaseCallback(ResourceReleaseCallback callback,
-								void *arg);
+											void *arg);
 extern void UnregisterResourceReleaseCallback(ResourceReleaseCallback callback,
-								  void *arg);
+											  void *arg);
 extern void CreateAuxProcessResourceOwner(void);
 extern void ReleaseAuxProcessResources(bool isCommit);
 
diff --git a/src/include/utils/resowner_private.h b/src/include/utils/resowner_private.h
index dea005b92043..b8261ad8665b 100644
--- a/src/include/utils/resowner_private.h
+++ b/src/include/utils/resowner_private.h
@@ -37,62 +37,62 @@ extern void ResourceOwnerForgetLock(ResourceOwner owner, LOCALLOCK *locallock);
 /* support for catcache refcount management */
 extern void ResourceOwnerEnlargeCatCacheRefs(ResourceOwner owner);
 extern void ResourceOwnerRememberCatCacheRef(ResourceOwner owner,
-								 HeapTuple tuple);
+											 HeapTuple tuple);
 extern void ResourceOwnerForgetCatCacheRef(ResourceOwner owner,
-							   HeapTuple tuple);
+										   HeapTuple tuple);
 extern void ResourceOwnerEnlargeCatCacheListRefs(ResourceOwner owner);
 extern void ResourceOwnerRememberCatCacheListRef(ResourceOwner owner,
-									 CatCList *list);
+												 CatCList *list);
 extern void ResourceOwnerForgetCatCacheListRef(ResourceOwner owner,
-								   CatCList *list);
+											   CatCList *list);
 
 /* support for relcache refcount management */
 extern void ResourceOwnerEnlargeRelationRefs(ResourceOwner owner);
 extern void ResourceOwnerRememberRelationRef(ResourceOwner owner,
-								 Relation rel);
+											 Relation rel);
 extern void ResourceOwnerForgetRelationRef(ResourceOwner owner,
-							   Relation rel);
+										   Relation rel);
 
 /* support for plancache refcount management */
 extern void ResourceOwnerEnlargePlanCacheRefs(ResourceOwner owner);
 extern void ResourceOwnerRememberPlanCacheRef(ResourceOwner owner,
-								  CachedPlan *plan);
+											  CachedPlan *plan);
 extern void ResourceOwnerForgetPlanCacheRef(ResourceOwner owner,
-								CachedPlan *plan);
+											CachedPlan *plan);
 
 /* support for tupledesc refcount management */
 extern void ResourceOwnerEnlargeTupleDescs(ResourceOwner owner);
 extern void ResourceOwnerRememberTupleDesc(ResourceOwner owner,
-							   TupleDesc tupdesc);
+										   TupleDesc tupdesc);
 extern void ResourceOwnerForgetTupleDesc(ResourceOwner owner,
-							 TupleDesc tupdesc);
+										 TupleDesc tupdesc);
 
 /* support for snapshot refcount management */
 extern void ResourceOwnerEnlargeSnapshots(ResourceOwner owner);
 extern void ResourceOwnerRememberSnapshot(ResourceOwner owner,
-							  Snapshot snapshot);
+										  Snapshot snapshot);
 extern void ResourceOwnerForgetSnapshot(ResourceOwner owner,
-							Snapshot snapshot);
+										Snapshot snapshot);
 
 /* support for temporary file management */
 extern void ResourceOwnerEnlargeFiles(ResourceOwner owner);
 extern void ResourceOwnerRememberFile(ResourceOwner owner,
-						  File file);
+									  File file);
 extern void ResourceOwnerForgetFile(ResourceOwner owner,
-						File file);
+									File file);
 
 /* support for dynamic shared memory management */
 extern void ResourceOwnerEnlargeDSMs(ResourceOwner owner);
 extern void ResourceOwnerRememberDSM(ResourceOwner owner,
-						 dsm_segment *);
+									 dsm_segment *);
 extern void ResourceOwnerForgetDSM(ResourceOwner owner,
-					   dsm_segment *);
+								   dsm_segment *);
 
 /* support for JITContext management */
 extern void ResourceOwnerEnlargeJIT(ResourceOwner owner);
 extern void ResourceOwnerRememberJIT(ResourceOwner owner,
-						 Datum handle);
+									 Datum handle);
 extern void ResourceOwnerForgetJIT(ResourceOwner owner,
-					   Datum handle);
+								   Datum handle);
 
 #endif							/* RESOWNER_PRIVATE_H */
diff --git a/src/include/utils/ruleutils.h b/src/include/utils/ruleutils.h
index 7c49e9d0a83b..d34cad2f4b8f 100644
--- a/src/include/utils/ruleutils.h
+++ b/src/include/utils/ruleutils.h
@@ -26,13 +26,13 @@ extern char *pg_get_partconstrdef_string(Oid partitionId, char *aliasname);
 
 extern char *pg_get_constraintdef_command(Oid constraintId);
 extern char *deparse_expression(Node *expr, List *dpcontext,
-				   bool forceprefix, bool showimplicit);
+								bool forceprefix, bool showimplicit);
 extern List *deparse_context_for(const char *aliasname, Oid relid);
 extern List *deparse_context_for_plan_rtable(List *rtable, List *rtable_names);
 extern List *set_deparse_context_planstate(List *dpcontext,
-							  Node *planstate, List *ancestors);
+										   Node *planstate, List *ancestors);
 extern List *select_rtable_names_for_explain(List *rtable,
-								Bitmapset *rels_used);
+											 Bitmapset *rels_used);
 extern char *generate_collation_name(Oid collid);
 extern char *get_range_partbound_string(List *bound_datums);
 
diff --git a/src/include/utils/sampling.h b/src/include/utils/sampling.h
index 1530804e3256..541b507fb502 100644
--- a/src/include/utils/sampling.h
+++ b/src/include/utils/sampling.h
@@ -20,7 +20,7 @@
 typedef unsigned short SamplerRandomState[3];
 
 extern void sampler_random_init_state(long seed,
-						  SamplerRandomState randstate);
+									  SamplerRandomState randstate);
 extern double sampler_random_fract(SamplerRandomState randstate);
 
 /* Block sampling methods */
@@ -38,7 +38,7 @@ typedef struct
 typedef BlockSamplerData *BlockSampler;
 
 extern void BlockSampler_Init(BlockSampler bs, BlockNumber nblocks,
-				  int samplesize, long randseed);
+							  int samplesize, long randseed);
 extern bool BlockSampler_HasMore(BlockSampler bs);
 extern BlockNumber BlockSampler_Next(BlockSampler bs);
 
diff --git a/src/include/utils/selfuncs.h b/src/include/utils/selfuncs.h
index 848051523388..85d9ecbfc6ea 100644
--- a/src/include/utils/selfuncs.h
+++ b/src/include/utils/selfuncs.h
@@ -127,83 +127,83 @@ extern PGDLLIMPORT get_index_stats_hook_type get_index_stats_hook;
 /* Functions in selfuncs.c */
 
 extern void examine_variable(PlannerInfo *root, Node *node, int varRelid,
-				 VariableStatData *vardata);
+							 VariableStatData *vardata);
 extern bool statistic_proc_security_check(VariableStatData *vardata, Oid func_oid);
 extern bool get_restriction_variable(PlannerInfo *root, List *args,
-						 int varRelid,
-						 VariableStatData *vardata, Node **other,
-						 bool *varonleft);
+									 int varRelid,
+									 VariableStatData *vardata, Node **other,
+									 bool *varonleft);
 extern void get_join_variables(PlannerInfo *root, List *args,
-				   SpecialJoinInfo *sjinfo,
-				   VariableStatData *vardata1,
-				   VariableStatData *vardata2,
-				   bool *join_is_reversed);
+							   SpecialJoinInfo *sjinfo,
+							   VariableStatData *vardata1,
+							   VariableStatData *vardata2,
+							   bool *join_is_reversed);
 extern double get_variable_numdistinct(VariableStatData *vardata,
-						 bool *isdefault);
+									   bool *isdefault);
 extern double mcv_selectivity(VariableStatData *vardata, FmgrInfo *opproc,
-				Datum constval, bool varonleft,
-				double *sumcommonp);
+							  Datum constval, bool varonleft,
+							  double *sumcommonp);
 extern double histogram_selectivity(VariableStatData *vardata, FmgrInfo *opproc,
-					  Datum constval, bool varonleft,
-					  int min_hist_size, int n_skip,
-					  int *hist_size);
+									Datum constval, bool varonleft,
+									int min_hist_size, int n_skip,
+									int *hist_size);
 extern double ineq_histogram_selectivity(PlannerInfo *root,
-						   VariableStatData *vardata,
-						   FmgrInfo *opproc, bool isgt, bool iseq,
-						   Datum constval, Oid consttype);
+										 VariableStatData *vardata,
+										 FmgrInfo *opproc, bool isgt, bool iseq,
+										 Datum constval, Oid consttype);
 extern double var_eq_const(VariableStatData *vardata, Oid oproid,
-			 Datum constval, bool constisnull,
-			 bool varonleft, bool negate);
+						   Datum constval, bool constisnull,
+						   bool varonleft, bool negate);
 extern double var_eq_non_const(VariableStatData *vardata, Oid oproid,
-				 Node *other,
-				 bool varonleft, bool negate);
+							   Node *other,
+							   bool varonleft, bool negate);
 
 extern Selectivity boolvarsel(PlannerInfo *root, Node *arg, int varRelid);
 extern Selectivity booltestsel(PlannerInfo *root, BoolTestType booltesttype,
-			Node *arg, int varRelid,
-			JoinType jointype, SpecialJoinInfo *sjinfo);
+							   Node *arg, int varRelid,
+							   JoinType jointype, SpecialJoinInfo *sjinfo);
 extern Selectivity nulltestsel(PlannerInfo *root, NullTestType nulltesttype,
-			Node *arg, int varRelid,
-			JoinType jointype, SpecialJoinInfo *sjinfo);
+							   Node *arg, int varRelid,
+							   JoinType jointype, SpecialJoinInfo *sjinfo);
 extern Selectivity scalararraysel(PlannerInfo *root,
-			   ScalarArrayOpExpr *clause,
-			   bool is_join_clause,
-			   int varRelid, JoinType jointype, SpecialJoinInfo *sjinfo);
+								  ScalarArrayOpExpr *clause,
+								  bool is_join_clause,
+								  int varRelid, JoinType jointype, SpecialJoinInfo *sjinfo);
 extern int	estimate_array_length(Node *arrayexpr);
 extern Selectivity rowcomparesel(PlannerInfo *root,
-			  RowCompareExpr *clause,
-			  int varRelid, JoinType jointype, SpecialJoinInfo *sjinfo);
+								 RowCompareExpr *clause,
+								 int varRelid, JoinType jointype, SpecialJoinInfo *sjinfo);
 
 extern void mergejoinscansel(PlannerInfo *root, Node *clause,
-				 Oid opfamily, int strategy, bool nulls_first,
-				 Selectivity *leftstart, Selectivity *leftend,
-				 Selectivity *rightstart, Selectivity *rightend);
+							 Oid opfamily, int strategy, bool nulls_first,
+							 Selectivity *leftstart, Selectivity *leftend,
+							 Selectivity *rightstart, Selectivity *rightend);
 
 extern double estimate_num_groups(PlannerInfo *root, List *groupExprs,
-					double input_rows, List **pgset);
+								  double input_rows, List **pgset);
 
 extern void estimate_hash_bucket_stats(PlannerInfo *root,
-						   Node *hashkey, double nbuckets,
-						   Selectivity *mcv_freq,
-						   Selectivity *bucketsize_frac);
+									   Node *hashkey, double nbuckets,
+									   Selectivity *mcv_freq,
+									   Selectivity *bucketsize_frac);
 extern double estimate_hashagg_tablesize(Path *path,
-						   const AggClauseCosts *agg_costs,
-						   double dNumGroups);
+										 const AggClauseCosts *agg_costs,
+										 double dNumGroups);
 
 extern List *get_quals_from_indexclauses(List *indexclauses);
 extern Cost index_other_operands_eval_cost(PlannerInfo *root,
-							   List *indexquals);
+										   List *indexquals);
 extern List *add_predicate_to_index_quals(IndexOptInfo *index,
-							 List *indexQuals);
+										  List *indexQuals);
 extern void genericcostestimate(PlannerInfo *root, IndexPath *path,
-					double loop_count,
-					GenericCosts *costs);
+								double loop_count,
+								GenericCosts *costs);
 
 /* Functions in array_selfuncs.c */
 
 extern Selectivity scalararraysel_containment(PlannerInfo *root,
-						   Node *leftop, Node *rightop,
-						   Oid elemtype, bool isEquality, bool useOr,
-						   int varRelid);
+											  Node *leftop, Node *rightop,
+											  Oid elemtype, bool isEquality, bool useOr,
+											  int varRelid);
 
 #endif							/* SELFUNCS_H */
diff --git a/src/include/utils/sharedtuplestore.h b/src/include/utils/sharedtuplestore.h
index af4289d1e6b8..863c6e4f9066 100644
--- a/src/include/utils/sharedtuplestore.h
+++ b/src/include/utils/sharedtuplestore.h
@@ -32,16 +32,16 @@ typedef struct SharedTuplestoreAccessor SharedTuplestoreAccessor;
 extern size_t sts_estimate(int participants);
 
 extern SharedTuplestoreAccessor *sts_initialize(SharedTuplestore *sts,
-			   int participants,
-			   int my_participant_number,
-			   size_t meta_data_size,
-			   int flags,
-			   SharedFileSet *fileset,
-			   const char *name);
+												int participants,
+												int my_participant_number,
+												size_t meta_data_size,
+												int flags,
+												SharedFileSet *fileset,
+												const char *name);
 
 extern SharedTuplestoreAccessor *sts_attach(SharedTuplestore *sts,
-		   int my_participant_number,
-		   SharedFileSet *fileset);
+											int my_participant_number,
+											SharedFileSet *fileset);
 
 extern void sts_end_write(SharedTuplestoreAccessor *accessor);
 
@@ -52,10 +52,10 @@ extern void sts_begin_parallel_scan(SharedTuplestoreAccessor *accessor);
 extern void sts_end_parallel_scan(SharedTuplestoreAccessor *accessor);
 
 extern void sts_puttuple(SharedTuplestoreAccessor *accessor,
-			 void *meta_data,
-			 MinimalTuple tuple);
+						 void *meta_data,
+						 MinimalTuple tuple);
 
 extern MinimalTuple sts_parallel_scan_next(SharedTuplestoreAccessor *accessor,
-					   void *meta_data);
+										   void *meta_data);
 
 #endif							/* SHAREDTUPLESTORE_H */
diff --git a/src/include/utils/snapmgr.h b/src/include/utils/snapmgr.h
index c49aceadfb12..58ae3b0c7a16 100644
--- a/src/include/utils/snapmgr.h
+++ b/src/include/utils/snapmgr.h
@@ -131,9 +131,9 @@ extern bool XactHasExportedSnapshots(void);
 extern void DeleteAllExportedSnapshotFiles(void);
 extern bool ThereAreNoPriorRegisteredSnapshots(void);
 extern TransactionId TransactionIdLimitedForOldSnapshots(TransactionId recentXmin,
-									Relation relation);
+														 Relation relation);
 extern void MaintainOldSnapshotTimeMapping(TimestampTz whenTaken,
-							   TransactionId xmin);
+										   TransactionId xmin);
 
 extern char *ExportSnapshot(Snapshot snapshot);
 
diff --git a/src/include/utils/sortsupport.h b/src/include/utils/sortsupport.h
index 45b292e9c7d5..1eb89da3f748 100644
--- a/src/include/utils/sortsupport.h
+++ b/src/include/utils/sortsupport.h
@@ -271,6 +271,6 @@ ApplySortAbbrevFullComparator(Datum datum1, bool isNull1,
 extern void PrepareSortSupportComparisonShim(Oid cmpFunc, SortSupport ssup);
 extern void PrepareSortSupportFromOrderingOp(Oid orderingOp, SortSupport ssup);
 extern void PrepareSortSupportFromIndexRel(Relation indexRel, int16 strategy,
-							   SortSupport ssup);
+										   SortSupport ssup);
 
 #endif							/* SORTSUPPORT_H */
diff --git a/src/include/utils/spccache.h b/src/include/utils/spccache.h
index 9120abcd9b6c..5f7aa6b90112 100644
--- a/src/include/utils/spccache.h
+++ b/src/include/utils/spccache.h
@@ -13,8 +13,8 @@
 #ifndef SPCCACHE_H
 #define SPCCACHE_H
 
-void get_tablespace_page_costs(Oid spcid, float8 *spc_random_page_cost,
-						  float8 *spc_seq_page_cost);
+void		get_tablespace_page_costs(Oid spcid, float8 *spc_random_page_cost,
+									  float8 *spc_seq_page_cost);
 int			get_tablespace_io_concurrency(Oid spcid);
 
 #endif							/* SPCCACHE_H */
diff --git a/src/include/utils/syscache.h b/src/include/utils/syscache.h
index 95ee48954e95..a6307474eed4 100644
--- a/src/include/utils/syscache.h
+++ b/src/include/utils/syscache.h
@@ -116,30 +116,30 @@ extern void InitCatalogCache(void);
 extern void InitCatalogCachePhase2(void);
 
 extern HeapTuple SearchSysCache(int cacheId,
-			   Datum key1, Datum key2, Datum key3, Datum key4);
+								Datum key1, Datum key2, Datum key3, Datum key4);
 
 /*
  * The use of argument specific numbers is encouraged. They're faster, and
  * insulates the caller from changes in the maximum number of keys.
  */
 extern HeapTuple SearchSysCache1(int cacheId,
-				Datum key1);
+								 Datum key1);
 extern HeapTuple SearchSysCache2(int cacheId,
-				Datum key1, Datum key2);
+								 Datum key1, Datum key2);
 extern HeapTuple SearchSysCache3(int cacheId,
-				Datum key1, Datum key2, Datum key3);
+								 Datum key1, Datum key2, Datum key3);
 extern HeapTuple SearchSysCache4(int cacheId,
-				Datum key1, Datum key2, Datum key3, Datum key4);
+								 Datum key1, Datum key2, Datum key3, Datum key4);
 
 extern void ReleaseSysCache(HeapTuple tuple);
 
 /* convenience routines */
 extern HeapTuple SearchSysCacheCopy(int cacheId,
-				   Datum key1, Datum key2, Datum key3, Datum key4);
+									Datum key1, Datum key2, Datum key3, Datum key4);
 extern bool SearchSysCacheExists(int cacheId,
-					 Datum key1, Datum key2, Datum key3, Datum key4);
-extern Oid GetSysCacheOid(int cacheId, AttrNumber oidcol,
-			   Datum key1, Datum key2, Datum key3, Datum key4);
+								 Datum key1, Datum key2, Datum key3, Datum key4);
+extern Oid	GetSysCacheOid(int cacheId, AttrNumber oidcol,
+						   Datum key1, Datum key2, Datum key3, Datum key4);
 
 extern HeapTuple SearchSysCacheAttName(Oid relid, const char *attname);
 extern HeapTuple SearchSysCacheCopyAttName(Oid relid, const char *attname);
@@ -149,15 +149,15 @@ extern HeapTuple SearchSysCacheAttNum(Oid relid, int16 attnum);
 extern HeapTuple SearchSysCacheCopyAttNum(Oid relid, int16 attnum);
 
 extern Datum SysCacheGetAttr(int cacheId, HeapTuple tup,
-				AttrNumber attributeNumber, bool *isNull);
+							 AttrNumber attributeNumber, bool *isNull);
 
 extern uint32 GetSysCacheHashValue(int cacheId,
-					 Datum key1, Datum key2, Datum key3, Datum key4);
+								   Datum key1, Datum key2, Datum key3, Datum key4);
 
 /* list-search interface.  Users of this must import catcache.h too */
 struct catclist;
 extern struct catclist *SearchSysCacheList(int cacheId, int nkeys,
-				   Datum key1, Datum key2, Datum key3);
+										   Datum key1, Datum key2, Datum key3);
 
 extern void SysCacheInvalidate(int cacheId, uint32 hashValue);
 
diff --git a/src/include/utils/timestamp.h b/src/include/utils/timestamp.h
index cb6bb4b242d8..ea16190ec3de 100644
--- a/src/include/utils/timestamp.h
+++ b/src/include/utils/timestamp.h
@@ -71,10 +71,10 @@ extern TimestampTz GetCurrentTimestamp(void);
 extern TimestampTz GetSQLCurrentTimestamp(int32 typmod);
 extern Timestamp GetSQLLocalTimestamp(int32 typmod);
 extern void TimestampDifference(TimestampTz start_time, TimestampTz stop_time,
-					long *secs, int *microsecs);
+								long *secs, int *microsecs);
 extern bool TimestampDifferenceExceeds(TimestampTz start_time,
-						   TimestampTz stop_time,
-						   int msec);
+									   TimestampTz stop_time,
+									   int msec);
 
 extern TimestampTz time_t_to_timestamptz(pg_time_t tm);
 extern pg_time_t timestamptz_to_time_t(TimestampTz t);
@@ -82,8 +82,8 @@ extern pg_time_t timestamptz_to_time_t(TimestampTz t);
 extern const char *timestamptz_to_str(TimestampTz t);
 
 extern int	tm2timestamp(struct pg_tm *tm, fsec_t fsec, int *tzp, Timestamp *dt);
-extern int timestamp2tm(Timestamp dt, int *tzp, struct pg_tm *tm,
-			 fsec_t *fsec, const char **tzn, pg_tz *attimezone);
+extern int	timestamp2tm(Timestamp dt, int *tzp, struct pg_tm *tm,
+						 fsec_t *fsec, const char **tzn, pg_tz *attimezone);
 extern void dt2time(Timestamp dt, int *hour, int *min, int *sec, fsec_t *fsec);
 
 extern int	interval2tm(Interval span, struct pg_tm *tm, fsec_t *fsec);
diff --git a/src/include/utils/tuplesort.h b/src/include/utils/tuplesort.h
index 7f225da7775e..4521de18e13d 100644
--- a/src/include/utils/tuplesort.h
+++ b/src/include/utils/tuplesort.h
@@ -189,59 +189,59 @@ typedef struct TuplesortInstrumentation
  */
 
 extern Tuplesortstate *tuplesort_begin_heap(TupleDesc tupDesc,
-					 int nkeys, AttrNumber *attNums,
-					 Oid *sortOperators, Oid *sortCollations,
-					 bool *nullsFirstFlags,
-					 int workMem, SortCoordinate coordinate,
-					 bool randomAccess);
+											int nkeys, AttrNumber *attNums,
+											Oid *sortOperators, Oid *sortCollations,
+											bool *nullsFirstFlags,
+											int workMem, SortCoordinate coordinate,
+											bool randomAccess);
 extern Tuplesortstate *tuplesort_begin_cluster(TupleDesc tupDesc,
-						Relation indexRel, int workMem,
-						SortCoordinate coordinate, bool randomAccess);
+											   Relation indexRel, int workMem,
+											   SortCoordinate coordinate, bool randomAccess);
 extern Tuplesortstate *tuplesort_begin_index_btree(Relation heapRel,
-							Relation indexRel,
-							bool enforceUnique,
-							int workMem, SortCoordinate coordinate,
-							bool randomAccess);
+												   Relation indexRel,
+												   bool enforceUnique,
+												   int workMem, SortCoordinate coordinate,
+												   bool randomAccess);
 extern Tuplesortstate *tuplesort_begin_index_hash(Relation heapRel,
-						   Relation indexRel,
-						   uint32 high_mask,
-						   uint32 low_mask,
-						   uint32 max_buckets,
-						   int workMem, SortCoordinate coordinate,
-						   bool randomAccess);
+												  Relation indexRel,
+												  uint32 high_mask,
+												  uint32 low_mask,
+												  uint32 max_buckets,
+												  int workMem, SortCoordinate coordinate,
+												  bool randomAccess);
 extern Tuplesortstate *tuplesort_begin_datum(Oid datumType,
-					  Oid sortOperator, Oid sortCollation,
-					  bool nullsFirstFlag,
-					  int workMem, SortCoordinate coordinate,
-					  bool randomAccess);
+											 Oid sortOperator, Oid sortCollation,
+											 bool nullsFirstFlag,
+											 int workMem, SortCoordinate coordinate,
+											 bool randomAccess);
 
 extern void tuplesort_set_bound(Tuplesortstate *state, int64 bound);
 
 extern void tuplesort_puttupleslot(Tuplesortstate *state,
-					   TupleTableSlot *slot);
+								   TupleTableSlot *slot);
 extern void tuplesort_putheaptuple(Tuplesortstate *state, HeapTuple tup);
 extern void tuplesort_putindextuplevalues(Tuplesortstate *state,
-							  Relation rel, ItemPointer self,
-							  Datum *values, bool *isnull);
+										  Relation rel, ItemPointer self,
+										  Datum *values, bool *isnull);
 extern void tuplesort_putdatum(Tuplesortstate *state, Datum val,
-				   bool isNull);
+							   bool isNull);
 
 extern void tuplesort_performsort(Tuplesortstate *state);
 
 extern bool tuplesort_gettupleslot(Tuplesortstate *state, bool forward,
-					   bool copy, TupleTableSlot *slot, Datum *abbrev);
+								   bool copy, TupleTableSlot *slot, Datum *abbrev);
 extern HeapTuple tuplesort_getheaptuple(Tuplesortstate *state, bool forward);
 extern IndexTuple tuplesort_getindextuple(Tuplesortstate *state, bool forward);
 extern bool tuplesort_getdatum(Tuplesortstate *state, bool forward,
-				   Datum *val, bool *isNull, Datum *abbrev);
+							   Datum *val, bool *isNull, Datum *abbrev);
 
 extern bool tuplesort_skiptuples(Tuplesortstate *state, int64 ntuples,
-					 bool forward);
+								 bool forward);
 
 extern void tuplesort_end(Tuplesortstate *state);
 
 extern void tuplesort_get_stats(Tuplesortstate *state,
-					TuplesortInstrumentation *stats);
+								TuplesortInstrumentation *stats);
 extern const char *tuplesort_method_name(TuplesortMethod m);
 extern const char *tuplesort_space_type_name(TuplesortSpaceType t);
 
@@ -249,7 +249,7 @@ extern int	tuplesort_merge_order(int64 allowedMem);
 
 extern Size tuplesort_estimate_shared(int nworkers);
 extern void tuplesort_initialize_shared(Sharedsort *shared, int nWorkers,
-							dsm_segment *seg);
+										dsm_segment *seg);
 extern void tuplesort_attach_shared(Sharedsort *shared, dsm_segment *seg);
 
 /*
diff --git a/src/include/utils/tuplestore.h b/src/include/utils/tuplestore.h
index 6e52073e5042..f9b6fcec29e3 100644
--- a/src/include/utils/tuplestore.h
+++ b/src/include/utils/tuplestore.h
@@ -45,16 +45,16 @@ typedef struct Tuplestorestate Tuplestorestate;
  */
 
 extern Tuplestorestate *tuplestore_begin_heap(bool randomAccess,
-					  bool interXact,
-					  int maxKBytes);
+											  bool interXact,
+											  int maxKBytes);
 
 extern void tuplestore_set_eflags(Tuplestorestate *state, int eflags);
 
 extern void tuplestore_puttupleslot(Tuplestorestate *state,
-						TupleTableSlot *slot);
+									TupleTableSlot *slot);
 extern void tuplestore_puttuple(Tuplestorestate *state, HeapTuple tuple);
 extern void tuplestore_putvalues(Tuplestorestate *state, TupleDesc tdesc,
-					 Datum *values, bool *isnull);
+								 Datum *values, bool *isnull);
 
 /* tuplestore_donestoring() used to be required, but is no longer used */
 #define tuplestore_donestoring(state)	((void) 0)
@@ -64,19 +64,19 @@ extern int	tuplestore_alloc_read_pointer(Tuplestorestate *state, int eflags);
 extern void tuplestore_select_read_pointer(Tuplestorestate *state, int ptr);
 
 extern void tuplestore_copy_read_pointer(Tuplestorestate *state,
-							 int srcptr, int destptr);
+										 int srcptr, int destptr);
 
 extern void tuplestore_trim(Tuplestorestate *state);
 
 extern bool tuplestore_in_memory(Tuplestorestate *state);
 
 extern bool tuplestore_gettupleslot(Tuplestorestate *state, bool forward,
-						bool copy, TupleTableSlot *slot);
+									bool copy, TupleTableSlot *slot);
 
 extern bool tuplestore_advance(Tuplestorestate *state, bool forward);
 
 extern bool tuplestore_skiptuples(Tuplestorestate *state,
-					  int64 ntuples, bool forward);
+								  int64 ntuples, bool forward);
 
 extern int64 tuplestore_tuple_count(Tuplestorestate *state);
 
diff --git a/src/include/utils/typcache.h b/src/include/utils/typcache.h
index e1733990293d..04bf28180df7 100644
--- a/src/include/utils/typcache.h
+++ b/src/include/utils/typcache.h
@@ -168,7 +168,7 @@ typedef struct SharedRecordTypmodRegistry SharedRecordTypmodRegistry;
 extern TypeCacheEntry *lookup_type_cache(Oid type_id, int flags);
 
 extern void InitDomainConstraintRef(Oid type_id, DomainConstraintRef *ref,
-						MemoryContext refctx, bool need_exprstate);
+									MemoryContext refctx, bool need_exprstate);
 
 extern void UpdateDomainConstraintRef(DomainConstraintRef *ref);
 
@@ -177,12 +177,12 @@ extern bool DomainHasConstraints(Oid type_id);
 extern TupleDesc lookup_rowtype_tupdesc(Oid type_id, int32 typmod);
 
 extern TupleDesc lookup_rowtype_tupdesc_noerror(Oid type_id, int32 typmod,
-							   bool noError);
+												bool noError);
 
 extern TupleDesc lookup_rowtype_tupdesc_copy(Oid type_id, int32 typmod);
 
 extern TupleDesc lookup_rowtype_tupdesc_domain(Oid type_id, int32 typmod,
-							  bool noError);
+											   bool noError);
 
 extern void assign_record_type_typmod(TupleDesc tupDesc);
 
@@ -193,7 +193,7 @@ extern int	compare_values_of_enum(TypeCacheEntry *tcache, Oid arg1, Oid arg2);
 extern size_t SharedRecordTypmodRegistryEstimate(void);
 
 extern void SharedRecordTypmodRegistryInit(SharedRecordTypmodRegistry *,
-							   dsm_segment *segment, dsa_area *area);
+										   dsm_segment *segment, dsa_area *area);
 
 extern void SharedRecordTypmodRegistryAttach(SharedRecordTypmodRegistry *);
 
diff --git a/src/include/utils/varlena.h b/src/include/utils/varlena.h
index a405ad4565cb..2bad1dfc8217 100644
--- a/src/include/utils/varlena.h
+++ b/src/include/utils/varlena.h
@@ -18,22 +18,22 @@
 
 extern int	varstr_cmp(const char *arg1, int len1, const char *arg2, int len2, Oid collid);
 extern void varstr_sortsupport(SortSupport ssup, Oid typid, Oid collid);
-extern int varstr_levenshtein(const char *source, int slen,
-				   const char *target, int tlen,
-				   int ins_c, int del_c, int sub_c,
-				   bool trusted);
-extern int varstr_levenshtein_less_equal(const char *source, int slen,
-							  const char *target, int tlen,
-							  int ins_c, int del_c, int sub_c,
-							  int max_d, bool trusted);
+extern int	varstr_levenshtein(const char *source, int slen,
+							   const char *target, int tlen,
+							   int ins_c, int del_c, int sub_c,
+							   bool trusted);
+extern int	varstr_levenshtein_less_equal(const char *source, int slen,
+										  const char *target, int tlen,
+										  int ins_c, int del_c, int sub_c,
+										  int max_d, bool trusted);
 extern List *textToQualifiedNameList(text *textval);
 extern bool SplitIdentifierString(char *rawstring, char separator,
-					  List **namelist);
+								  List **namelist);
 extern bool SplitDirectoriesString(char *rawstring, char separator,
-					   List **namelist);
+								   List **namelist);
 extern bool SplitGUCList(char *rawstring, char separator,
-			 List **namelist);
+						 List **namelist);
 extern text *replace_text_regexp(text *src_text, void *regexp,
-					text *replace_text, bool glob);
+								 text *replace_text, bool glob);
 
 #endif
diff --git a/src/include/utils/xml.h b/src/include/utils/xml.h
index cf9b26a97475..90d08b1fcf27 100644
--- a/src/include/utils/xml.h
+++ b/src/include/utils/xml.h
@@ -58,12 +58,12 @@ extern PgXmlErrorContext *pg_xml_init(PgXmlStrictness strictness);
 extern void pg_xml_done(PgXmlErrorContext *errcxt, bool isError);
 extern bool pg_xml_error_occurred(PgXmlErrorContext *errcxt);
 extern void xml_ereport(PgXmlErrorContext *errcxt, int level, int sqlcode,
-			const char *msg);
+						const char *msg);
 
 extern xmltype *xmlconcat(List *args);
 extern xmltype *xmlelement(XmlExpr *xexpr,
-		   Datum *named_argvalue, bool *named_argnull,
-		   Datum *argvalue, bool *argnull);
+						   Datum *named_argvalue, bool *named_argnull,
+						   Datum *argvalue, bool *argnull);
 extern xmltype *xmlparse(text *data, XmlOptionType xmloption, bool preserve_whitespace);
 extern xmltype *xmlpi(const char *target, text *arg, bool arg_is_null, bool *result_is_null);
 extern xmltype *xmlroot(xmltype *data, text *version, int standalone);
diff --git a/src/include/windowapi.h b/src/include/windowapi.h
index 6d655cf94f3c..b86730043c44 100644
--- a/src/include/windowapi.h
+++ b/src/include/windowapi.h
@@ -51,14 +51,14 @@ extern void WinSetMarkPosition(WindowObject winobj, int64 markpos);
 extern bool WinRowsArePeers(WindowObject winobj, int64 pos1, int64 pos2);
 
 extern Datum WinGetFuncArgInPartition(WindowObject winobj, int argno,
-						 int relpos, int seektype, bool set_mark,
-						 bool *isnull, bool *isout);
+									  int relpos, int seektype, bool set_mark,
+									  bool *isnull, bool *isout);
 
 extern Datum WinGetFuncArgInFrame(WindowObject winobj, int argno,
-					 int relpos, int seektype, bool set_mark,
-					 bool *isnull, bool *isout);
+								  int relpos, int seektype, bool set_mark,
+								  bool *isnull, bool *isout);
 
 extern Datum WinGetFuncArgCurrent(WindowObject winobj, int argno,
-					 bool *isnull);
+								  bool *isnull);
 
 #endif							/* WINDOWAPI_H */
diff --git a/src/interfaces/ecpg/ecpglib/ecpglib_extern.h b/src/interfaces/ecpg/ecpglib/ecpglib_extern.h
index d34a75c04d81..f9336a0c23d9 100644
--- a/src/interfaces/ecpg/ecpglib/ecpglib_extern.h
+++ b/src/interfaces/ecpg/ecpglib/ecpglib_extern.h
@@ -177,9 +177,9 @@ extern struct var_list *ivlist;
 
 bool		ecpg_add_mem(void *ptr, int lineno);
 
-bool ecpg_get_data(const PGresult *, int, int, int, enum ECPGttype type,
-			  enum ECPGttype, char *, char *, long, long, long,
-			  enum ARRAY_TYPE, enum COMPAT_MODE, bool);
+bool		ecpg_get_data(const PGresult *, int, int, int, enum ECPGttype type,
+						  enum ECPGttype, char *, char *, long, long, long,
+						  enum ARRAY_TYPE, enum COMPAT_MODE, bool);
 
 #ifdef ENABLE_THREAD_SAFETY
 void		ecpg_pthreads_init(void);
@@ -202,27 +202,27 @@ struct descriptor *ecpggetdescp(int, char *);
 struct descriptor *ecpg_find_desc(int line, const char *name);
 
 struct prepared_statement *ecpg_find_prepared_statement(const char *,
-							 struct connection *, struct prepared_statement **);
+														struct connection *, struct prepared_statement **);
 
 void		ecpg_update_declare_statement(const char *, const char *, const int);
 char	   *ecpg_get_con_name_by_declared_name(const char *);
 const char *ecpg_get_con_name_by_cursor_name(const char *);
 void		ecpg_release_declared_statement(const char *);
 
-bool ecpg_store_result(const PGresult *results, int act_field,
-				  const struct statement *stmt, struct variable *var);
+bool		ecpg_store_result(const PGresult *results, int act_field,
+							  const struct statement *stmt, struct variable *var);
 bool		ecpg_store_input(const int, const bool, const struct variable *, char **, bool);
 void		ecpg_free_params(struct statement *stmt, bool print);
-bool ecpg_do_prologue(int, const int, const int, const char *, const bool,
-				 enum ECPG_statement_type, const char *, va_list,
-				 struct statement **);
+bool		ecpg_do_prologue(int, const int, const int, const char *, const bool,
+							 enum ECPG_statement_type, const char *, va_list,
+							 struct statement **);
 bool		ecpg_build_params(struct statement *);
 bool		ecpg_autostart_transaction(struct statement *stmt);
 bool		ecpg_execute(struct statement *stmt);
 bool		ecpg_process_output(struct statement *, bool);
 void		ecpg_do_epilogue(struct statement *);
-bool ecpg_do(const int, const int, const int, const char *, const bool,
-		const int, const char *, va_list);
+bool		ecpg_do(const int, const int, const int, const char *, const bool,
+					const int, const char *, va_list);
 
 bool		ecpg_check_PQresult(PGresult *, int, PGconn *, enum COMPAT_MODE);
 void		ecpg_raise(int line, int code, const char *sqlstate, const char *str);
diff --git a/src/interfaces/ecpg/ecpglib/prepare.c b/src/interfaces/ecpg/ecpglib/prepare.c
index 387e4f27ce75..fa9d74b80dc5 100644
--- a/src/interfaces/ecpg/ecpglib/prepare.c
+++ b/src/interfaces/ecpg/ecpglib/prepare.c
@@ -39,7 +39,7 @@ static stmtCacheEntry *stmtCacheEntries = NULL;
 static struct declared_statement *g_declared_list;
 
 static bool deallocate_one(int lineno, enum COMPAT_MODE c, struct connection *con,
-			   struct prepared_statement *prev, struct prepared_statement *this);
+						   struct prepared_statement *prev, struct prepared_statement *this);
 static struct declared_statement *ecpg_find_declared_statement(const char *);
 static bool
 isvarchar(unsigned char c)
diff --git a/src/interfaces/ecpg/pgtypeslib/dt.h b/src/interfaces/ecpg/pgtypeslib/dt.h
index 2c967b303ad9..a9884f278cf2 100644
--- a/src/interfaces/ecpg/pgtypeslib/dt.h
+++ b/src/interfaces/ecpg/pgtypeslib/dt.h
@@ -327,10 +327,10 @@ void		GetCurrentDateTime(struct tm *);
 int			date2j(int, int, int);
 void		TrimTrailingZeros(char *);
 void		dt2time(double, int *, int *, int *, fsec_t *);
-int PGTYPEStimestamp_defmt_scan(char **str, char *fmt, timestamp * d,
-							int *year, int *month, int *day,
-							int *hour, int *minute, int *second,
-							int *tz);
+int			PGTYPEStimestamp_defmt_scan(char **str, char *fmt, timestamp * d,
+										int *year, int *month, int *day,
+										int *hour, int *minute, int *second,
+										int *tz);
 
 extern char *pgtypes_date_weekdays_short[];
 extern char *pgtypes_date_months[];
diff --git a/src/interfaces/ecpg/preproc/type.c b/src/interfaces/ecpg/preproc/type.c
index a9b4acfddfbc..165b5df24f3b 100644
--- a/src/interfaces/ecpg/preproc/type.c
+++ b/src/interfaces/ecpg/preproc/type.c
@@ -232,10 +232,10 @@ get_type(enum ECPGttype type)
    the variable (required to do array fetches of structs).
  */
 static void ECPGdump_a_simple(FILE *o, const char *name, enum ECPGttype type,
-				  char *varcharsize,
-				  char *arrsize, const char *size, const char *prefix, int);
+							  char *varcharsize,
+							  char *arrsize, const char *size, const char *prefix, int);
 static void ECPGdump_a_struct(FILE *o, const char *name, const char *ind_name, char *arrsize,
-				  struct ECPGtype *type, struct ECPGtype *ind_type, const char *prefix, const char *ind_prefix);
+							  struct ECPGtype *type, struct ECPGtype *ind_type, const char *prefix, const char *ind_prefix);
 
 void
 ECPGdump_a_type(FILE *o, const char *name, struct ECPGtype *type, const int brace_level,
diff --git a/src/interfaces/ecpg/preproc/type.h b/src/interfaces/ecpg/preproc/type.h
index b16a92c3f28a..ceb6270973d1 100644
--- a/src/interfaces/ecpg/preproc/type.h
+++ b/src/interfaces/ecpg/preproc/type.h
@@ -53,10 +53,10 @@ void		ECPGfree_type(struct ECPGtype *);
    size is the maxsize in case it is a varchar. Otherwise it is the size of
 	   the variable (required to do array fetches of structs).
  */
-void ECPGdump_a_type(FILE *, const char *, struct ECPGtype *, const int,
-				const char *, struct ECPGtype *, const int,
-				const char *, const char *, char *,
-				const char *, const char *);
+void		ECPGdump_a_type(FILE *, const char *, struct ECPGtype *, const int,
+							const char *, struct ECPGtype *, const int,
+							const char *, const char *, char *,
+							const char *, const char *);
 
 /* A simple struct to keep a variable and its type. */
 struct ECPGtemp_type
diff --git a/src/interfaces/libpq/fe-auth-scram.c b/src/interfaces/libpq/fe-auth-scram.c
index 07da22fb93b0..719570a45ce2 100644
--- a/src/interfaces/libpq/fe-auth-scram.c
+++ b/src/interfaces/libpq/fe-auth-scram.c
@@ -65,8 +65,8 @@ static char *build_client_first_message(fe_scram_state *state);
 static char *build_client_final_message(fe_scram_state *state);
 static bool verify_server_signature(fe_scram_state *state);
 static void calculate_client_proof(fe_scram_state *state,
-					   const char *client_final_message_without_proof,
-					   uint8 *result);
+								   const char *client_final_message_without_proof,
+								   uint8 *result);
 
 /*
  * Initialize SCRAM exchange status.
diff --git a/src/interfaces/libpq/fe-auth.h b/src/interfaces/libpq/fe-auth.h
index 3514e53fa082..122ba5ccbafc 100644
--- a/src/interfaces/libpq/fe-auth.h
+++ b/src/interfaces/libpq/fe-auth.h
@@ -24,12 +24,12 @@ extern char *pg_fe_getauthname(PQExpBuffer errorMessage);
 
 /* Prototypes for functions in fe-auth-scram.c */
 extern void *pg_fe_scram_init(PGconn *conn,
-				 const char *password,
-				 const char *sasl_mechanism);
+							  const char *password,
+							  const char *sasl_mechanism);
 extern void pg_fe_scram_free(void *opaq);
 extern void pg_fe_scram_exchange(void *opaq, char *input, int inputlen,
-					 char **output, int *outputlen,
-					 bool *done, bool *success);
+								 char **output, int *outputlen,
+								 bool *done, bool *success);
 extern char *pg_fe_scram_build_verifier(const char *password);
 
 #endif							/* FE_AUTH_H */
diff --git a/src/interfaces/libpq/fe-connect.c b/src/interfaces/libpq/fe-connect.c
index d3bcb9827520..e58fa6742a4d 100644
--- a/src/interfaces/libpq/fe-connect.c
+++ b/src/interfaces/libpq/fe-connect.c
@@ -66,8 +66,8 @@
 #include <ldap.h>
 typedef struct timeval LDAP_TIMEVAL;
 #endif
-static int ldapServiceLookup(const char *purl, PQconninfoOption *options,
-				  PQExpBuffer errorMessage);
+static int	ldapServiceLookup(const char *purl, PQconninfoOption *options,
+							  PQExpBuffer errorMessage);
 #endif
 
 #include "common/ip.h"
@@ -383,44 +383,44 @@ static void release_conn_addrinfo(PGconn *conn);
 static void sendTerminateConn(PGconn *conn);
 static PQconninfoOption *conninfo_init(PQExpBuffer errorMessage);
 static PQconninfoOption *parse_connection_string(const char *conninfo,
-						PQExpBuffer errorMessage, bool use_defaults);
+												 PQExpBuffer errorMessage, bool use_defaults);
 static int	uri_prefix_length(const char *connstr);
 static bool recognized_connection_string(const char *connstr);
 static PQconninfoOption *conninfo_parse(const char *conninfo,
-			   PQExpBuffer errorMessage, bool use_defaults);
+										PQExpBuffer errorMessage, bool use_defaults);
 static PQconninfoOption *conninfo_array_parse(const char *const *keywords,
-					 const char *const *values, PQExpBuffer errorMessage,
-					 bool use_defaults, int expand_dbname);
+											  const char *const *values, PQExpBuffer errorMessage,
+											  bool use_defaults, int expand_dbname);
 static bool conninfo_add_defaults(PQconninfoOption *options,
-					  PQExpBuffer errorMessage);
+								  PQExpBuffer errorMessage);
 static PQconninfoOption *conninfo_uri_parse(const char *uri,
-				   PQExpBuffer errorMessage, bool use_defaults);
+											PQExpBuffer errorMessage, bool use_defaults);
 static bool conninfo_uri_parse_options(PQconninfoOption *options,
-						   const char *uri, PQExpBuffer errorMessage);
+									   const char *uri, PQExpBuffer errorMessage);
 static bool conninfo_uri_parse_params(char *params,
-						  PQconninfoOption *connOptions,
-						  PQExpBuffer errorMessage);
+									  PQconninfoOption *connOptions,
+									  PQExpBuffer errorMessage);
 static char *conninfo_uri_decode(const char *str, PQExpBuffer errorMessage);
 static bool get_hexdigit(char digit, int *value);
 static const char *conninfo_getval(PQconninfoOption *connOptions,
-				const char *keyword);
+								   const char *keyword);
 static PQconninfoOption *conninfo_storeval(PQconninfoOption *connOptions,
-				  const char *keyword, const char *value,
-				  PQExpBuffer errorMessage, bool ignoreMissing, bool uri_decode);
+										   const char *keyword, const char *value,
+										   PQExpBuffer errorMessage, bool ignoreMissing, bool uri_decode);
 static PQconninfoOption *conninfo_find(PQconninfoOption *connOptions,
-			  const char *keyword);
+									   const char *keyword);
 static void defaultNoticeReceiver(void *arg, const PGresult *res);
 static void defaultNoticeProcessor(void *arg, const char *message);
-static int parseServiceInfo(PQconninfoOption *options,
-				 PQExpBuffer errorMessage);
-static int parseServiceFile(const char *serviceFile,
-				 const char *service,
-				 PQconninfoOption *options,
-				 PQExpBuffer errorMessage,
-				 bool *group_found);
+static int	parseServiceInfo(PQconninfoOption *options,
+							 PQExpBuffer errorMessage);
+static int	parseServiceFile(const char *serviceFile,
+							 const char *service,
+							 PQconninfoOption *options,
+							 PQExpBuffer errorMessage,
+							 bool *group_found);
 static char *pwdfMatchesString(char *buf, const char *token);
 static char *passwordFromFile(const char *hostname, const char *port, const char *dbname,
-				 const char *username, const char *pgpassfile);
+							  const char *username, const char *pgpassfile);
 static void pgpassfileWarning(PGconn *conn);
 static void default_threadlock(int acquire);
 
diff --git a/src/interfaces/libpq/fe-exec.c b/src/interfaces/libpq/fe-exec.c
index 62026538264c..3a8cddf4ff45 100644
--- a/src/interfaces/libpq/fe-exec.c
+++ b/src/interfaces/libpq/fe-exec.c
@@ -53,23 +53,23 @@ static bool static_std_strings = false;
 
 static PGEvent *dupEvents(PGEvent *events, int count, size_t *memSize);
 static bool pqAddTuple(PGresult *res, PGresAttValue *tup,
-		   const char **errmsgp);
+					   const char **errmsgp);
 static bool PQsendQueryStart(PGconn *conn);
-static int PQsendQueryGuts(PGconn *conn,
-				const char *command,
-				const char *stmtName,
-				int nParams,
-				const Oid *paramTypes,
-				const char *const *paramValues,
-				const int *paramLengths,
-				const int *paramFormats,
-				int resultFormat);
+static int	PQsendQueryGuts(PGconn *conn,
+							const char *command,
+							const char *stmtName,
+							int nParams,
+							const Oid *paramTypes,
+							const char *const *paramValues,
+							const int *paramLengths,
+							const int *paramFormats,
+							int resultFormat);
 static void parseInput(PGconn *conn);
 static PGresult *getCopyResult(PGconn *conn, ExecStatusType copytype);
 static bool PQexecStart(PGconn *conn);
 static PGresult *PQexecFinish(PGconn *conn);
-static int PQsendDescribe(PGconn *conn, char desc_type,
-			   const char *desc_target);
+static int	PQsendDescribe(PGconn *conn, char desc_type,
+						   const char *desc_target);
 static int	check_field_number(const PGresult *res, int field_num);
 
 
diff --git a/src/interfaces/libpq/fe-gssapi-common.h b/src/interfaces/libpq/fe-gssapi-common.h
index b429e79848bf..659ddcbc4d4e 100644
--- a/src/interfaces/libpq/fe-gssapi-common.h
+++ b/src/interfaces/libpq/fe-gssapi-common.h
@@ -16,8 +16,8 @@
 #include "libpq-fe.h"
 #include "libpq-int.h"
 
-void pg_GSS_error(const char *mprefix, PGconn *conn,
-			 OM_uint32 maj_stat, OM_uint32 min_stat);
+void		pg_GSS_error(const char *mprefix, PGconn *conn,
+						 OM_uint32 maj_stat, OM_uint32 min_stat);
 bool		pg_GSS_have_ccache(gss_cred_id_t *cred_out);
 int			pg_GSS_load_servicename(PGconn *conn);
 #endif							/* FE_GSSAPI_COMMON_H */
diff --git a/src/interfaces/libpq/fe-misc.c b/src/interfaces/libpq/fe-misc.c
index f8786ebe9c84..2d44845ccb2c 100644
--- a/src/interfaces/libpq/fe-misc.c
+++ b/src/interfaces/libpq/fe-misc.c
@@ -56,8 +56,8 @@
 
 static int	pqPutMsgBytes(const void *buf, size_t len, PGconn *conn);
 static int	pqSendSome(PGconn *conn, int len);
-static int pqSocketCheck(PGconn *conn, int forRead, int forWrite,
-			  time_t end_time);
+static int	pqSocketCheck(PGconn *conn, int forRead, int forWrite,
+						  time_t end_time);
 static int	pqSocketPoll(int sock, int forRead, int forWrite, time_t end_time);
 
 /*
diff --git a/src/interfaces/libpq/fe-print.c b/src/interfaces/libpq/fe-print.c
index bb1eed6c4ad2..8b403c678b3c 100644
--- a/src/interfaces/libpq/fe-print.c
+++ b/src/interfaces/libpq/fe-print.c
@@ -38,17 +38,17 @@
 
 
 static void do_field(const PQprintOpt *po, const PGresult *res,
-		 const int i, const int j, const int fs_len,
-		 char **fields,
-		 const int nFields, const char **fieldNames,
-		 unsigned char *fieldNotNum, int *fieldMax,
-		 const int fieldMaxLen, FILE *fout);
+					 const int i, const int j, const int fs_len,
+					 char **fields,
+					 const int nFields, const char **fieldNames,
+					 unsigned char *fieldNotNum, int *fieldMax,
+					 const int fieldMaxLen, FILE *fout);
 static char *do_header(FILE *fout, const PQprintOpt *po, const int nFields,
-		  int *fieldMax, const char **fieldNames, unsigned char *fieldNotNum,
-		  const int fs_len, const PGresult *res);
+					   int *fieldMax, const char **fieldNames, unsigned char *fieldNotNum,
+					   const int fs_len, const PGresult *res);
 static void output_row(FILE *fout, const PQprintOpt *po, const int nFields, char **fields,
-		   unsigned char *fieldNotNum, int *fieldMax, char *border,
-		   const int row_index);
+					   unsigned char *fieldNotNum, int *fieldMax, char *border,
+					   const int row_index);
 static void fill(int length, int max, char filler, FILE *fp);
 
 /*
diff --git a/src/interfaces/libpq/fe-protocol3.c b/src/interfaces/libpq/fe-protocol3.c
index d582cfd4e9c7..467563d7a411 100644
--- a/src/interfaces/libpq/fe-protocol3.c
+++ b/src/interfaces/libpq/fe-protocol3.c
@@ -51,9 +51,9 @@ static int	getNotify(PGconn *conn);
 static int	getCopyStart(PGconn *conn, ExecStatusType copytype);
 static int	getReadyForQuery(PGconn *conn);
 static void reportErrorPosition(PQExpBuffer msg, const char *query,
-					int loc, int encoding);
-static int build_startup_packet(const PGconn *conn, char *packet,
-					 const PQEnvironmentOption *options);
+								int loc, int encoding);
+static int	build_startup_packet(const PGconn *conn, char *packet,
+								 const PQEnvironmentOption *options);
 
 
 /*
diff --git a/src/interfaces/libpq/fe-secure-common.h b/src/interfaces/libpq/fe-secure-common.h
index 350a1c77094a..87020a00faae 100644
--- a/src/interfaces/libpq/fe-secure-common.h
+++ b/src/interfaces/libpq/fe-secure-common.h
@@ -18,9 +18,9 @@
 
 #include "libpq-fe.h"
 
-extern int pq_verify_peer_name_matches_certificate_name(PGconn *conn,
-											 const char *namedata, size_t namelen,
-											 char **store_name);
+extern int	pq_verify_peer_name_matches_certificate_name(PGconn *conn,
+														 const char *namedata, size_t namelen,
+														 char **store_name);
 extern bool pq_verify_peer_name_matches_certificate(PGconn *conn);
 
 #endif							/* FE_SECURE_COMMON_H */
diff --git a/src/interfaces/libpq/fe-secure-openssl.c b/src/interfaces/libpq/fe-secure-openssl.c
index b62b49696985..1a14a4a0a7e1 100644
--- a/src/interfaces/libpq/fe-secure-openssl.c
+++ b/src/interfaces/libpq/fe-secure-openssl.c
@@ -62,9 +62,9 @@
 #include <openssl/x509v3.h>
 
 static int	verify_cb(int ok, X509_STORE_CTX *ctx);
-static int openssl_verify_peer_name_matches_certificate_name(PGconn *conn,
-												  ASN1_STRING *name,
-												  char **store_name);
+static int	openssl_verify_peer_name_matches_certificate_name(PGconn *conn,
+															  ASN1_STRING *name,
+															  char **store_name);
 static void destroy_ssl_system(void);
 static int	initialize_SSL(PGconn *conn);
 static PostgresPollingStatusType open_client_SSL(PGconn *);
diff --git a/src/interfaces/libpq/libpq-events.h b/src/interfaces/libpq/libpq-events.h
index 424b4054ec80..449aea54c775 100644
--- a/src/interfaces/libpq/libpq-events.h
+++ b/src/interfaces/libpq/libpq-events.h
@@ -69,8 +69,8 @@ typedef struct
 typedef int (*PGEventProc) (PGEventId evtId, void *evtInfo, void *passThrough);
 
 /* Registers an event proc with the given PGconn. */
-extern int PQregisterEventProc(PGconn *conn, PGEventProc proc,
-					const char *name, void *passThrough);
+extern int	PQregisterEventProc(PGconn *conn, PGEventProc proc,
+								const char *name, void *passThrough);
 
 /* Sets the PGconn instance data for the provided proc to data. */
 extern int	PQsetInstanceData(PGconn *conn, PGEventProc proc, void *data);
diff --git a/src/interfaces/libpq/libpq-fe.h b/src/interfaces/libpq/libpq-fe.h
index 54c951723cec..26198fc1de4a 100644
--- a/src/interfaces/libpq/libpq-fe.h
+++ b/src/interfaces/libpq/libpq-fe.h
@@ -256,17 +256,17 @@ typedef struct pgresAttDesc
 /* Asynchronous (non-blocking) */
 extern PGconn *PQconnectStart(const char *conninfo);
 extern PGconn *PQconnectStartParams(const char *const *keywords,
-					 const char *const *values, int expand_dbname);
+									const char *const *values, int expand_dbname);
 extern PostgresPollingStatusType PQconnectPoll(PGconn *conn);
 
 /* Synchronous (blocking) */
 extern PGconn *PQconnectdb(const char *conninfo);
 extern PGconn *PQconnectdbParams(const char *const *keywords,
-				  const char *const *values, int expand_dbname);
+								 const char *const *values, int expand_dbname);
 extern PGconn *PQsetdbLogin(const char *pghost, const char *pgport,
-			 const char *pgoptions, const char *pgtty,
-			 const char *dbName,
-			 const char *login, const char *pwd);
+							const char *pgoptions, const char *pgtty,
+							const char *dbName,
+							const char *login, const char *pwd);
 
 #define PQsetdb(M_PGHOST,M_PGPORT,M_PGOPT,M_PGTTY,M_DBNAME)  \
 	PQsetdbLogin(M_PGHOST, M_PGPORT, M_PGOPT, M_PGTTY, M_DBNAME, NULL, NULL)
@@ -321,7 +321,7 @@ extern char *PQoptions(const PGconn *conn);
 extern ConnStatusType PQstatus(const PGconn *conn);
 extern PGTransactionStatusType PQtransactionStatus(const PGconn *conn);
 extern const char *PQparameterStatus(const PGconn *conn,
-				  const char *paramName);
+									 const char *paramName);
 extern int	PQprotocolVersion(const PGconn *conn);
 extern int	PQserverVersion(const PGconn *conn);
 extern char *PQerrorMessage(const PGconn *conn);
@@ -359,7 +359,7 @@ extern PGVerbosity PQsetErrorVerbosity(PGconn *conn, PGVerbosity verbosity);
 
 /* Set CONTEXT visibility for PQerrorMessage and PQresultErrorMessage */
 extern PGContextVisibility PQsetErrorContextVisibility(PGconn *conn,
-							PGContextVisibility show_context);
+													   PGContextVisibility show_context);
 
 /* Enable/disable tracing */
 extern void PQtrace(PGconn *conn, FILE *debug_port);
@@ -367,11 +367,11 @@ extern void PQuntrace(PGconn *conn);
 
 /* Override default notice handling routines */
 extern PQnoticeReceiver PQsetNoticeReceiver(PGconn *conn,
-					PQnoticeReceiver proc,
-					void *arg);
+											PQnoticeReceiver proc,
+											void *arg);
 extern PQnoticeProcessor PQsetNoticeProcessor(PGconn *conn,
-					 PQnoticeProcessor proc,
-					 void *arg);
+											  PQnoticeProcessor proc,
+											  void *arg);
 
 /*
  *	   Used to set callback that prevents concurrent access to
@@ -389,44 +389,44 @@ extern pgthreadlock_t PQregisterThreadLock(pgthreadlock_t newhandler);
 /* Simple synchronous query */
 extern PGresult *PQexec(PGconn *conn, const char *query);
 extern PGresult *PQexecParams(PGconn *conn,
-			 const char *command,
-			 int nParams,
-			 const Oid *paramTypes,
-			 const char *const *paramValues,
-			 const int *paramLengths,
-			 const int *paramFormats,
-			 int resultFormat);
+							  const char *command,
+							  int nParams,
+							  const Oid *paramTypes,
+							  const char *const *paramValues,
+							  const int *paramLengths,
+							  const int *paramFormats,
+							  int resultFormat);
 extern PGresult *PQprepare(PGconn *conn, const char *stmtName,
-		  const char *query, int nParams,
-		  const Oid *paramTypes);
+						   const char *query, int nParams,
+						   const Oid *paramTypes);
 extern PGresult *PQexecPrepared(PGconn *conn,
-			   const char *stmtName,
-			   int nParams,
-			   const char *const *paramValues,
-			   const int *paramLengths,
-			   const int *paramFormats,
-			   int resultFormat);
+								const char *stmtName,
+								int nParams,
+								const char *const *paramValues,
+								const int *paramLengths,
+								const int *paramFormats,
+								int resultFormat);
 
 /* Interface for multiple-result or asynchronous queries */
 extern int	PQsendQuery(PGconn *conn, const char *query);
-extern int PQsendQueryParams(PGconn *conn,
-				  const char *command,
-				  int nParams,
-				  const Oid *paramTypes,
-				  const char *const *paramValues,
-				  const int *paramLengths,
-				  const int *paramFormats,
-				  int resultFormat);
-extern int PQsendPrepare(PGconn *conn, const char *stmtName,
-			  const char *query, int nParams,
-			  const Oid *paramTypes);
-extern int PQsendQueryPrepared(PGconn *conn,
-					const char *stmtName,
-					int nParams,
-					const char *const *paramValues,
-					const int *paramLengths,
-					const int *paramFormats,
-					int resultFormat);
+extern int	PQsendQueryParams(PGconn *conn,
+							  const char *command,
+							  int nParams,
+							  const Oid *paramTypes,
+							  const char *const *paramValues,
+							  const int *paramLengths,
+							  const int *paramFormats,
+							  int resultFormat);
+extern int	PQsendPrepare(PGconn *conn, const char *stmtName,
+						  const char *query, int nParams,
+						  const Oid *paramTypes);
+extern int	PQsendQueryPrepared(PGconn *conn,
+								const char *stmtName,
+								int nParams,
+								const char *const *paramValues,
+								const int *paramLengths,
+								const int *paramFormats,
+								int resultFormat);
 extern int	PQsetSingleRowMode(PGconn *conn);
 extern PGresult *PQgetResult(PGconn *conn);
 
@@ -455,7 +455,7 @@ extern int	PQisnonblocking(const PGconn *conn);
 extern int	PQisthreadsafe(void);
 extern PGPing PQping(const char *conninfo);
 extern PGPing PQpingParams(const char *const *keywords,
-			 const char *const *values, int expand_dbname);
+						   const char *const *values, int expand_dbname);
 
 /* Force the write buffer to be written (or at least try) */
 extern int	PQflush(PGconn *conn);
@@ -465,20 +465,20 @@ extern int	PQflush(PGconn *conn);
  * use
  */
 extern PGresult *PQfn(PGconn *conn,
-	 int fnid,
-	 int *result_buf,
-	 int *result_len,
-	 int result_is_int,
-	 const PQArgBlock *args,
-	 int nargs);
+					  int fnid,
+					  int *result_buf,
+					  int *result_len,
+					  int result_is_int,
+					  const PQArgBlock *args,
+					  int nargs);
 
 /* Accessor functions for PGresult objects */
 extern ExecStatusType PQresultStatus(const PGresult *res);
 extern char *PQresStatus(ExecStatusType status);
 extern char *PQresultErrorMessage(const PGresult *res);
 extern char *PQresultVerboseErrorMessage(const PGresult *res,
-							PGVerbosity verbosity,
-							PGContextVisibility show_context);
+										 PGVerbosity verbosity,
+										 PGContextVisibility show_context);
 extern char *PQresultErrorField(const PGresult *res, int fieldcode);
 extern int	PQntuples(const PGresult *res);
 extern int	PQnfields(const PGresult *res);
@@ -530,44 +530,45 @@ extern int	PQsetvalue(PGresult *res, int tup_num, int field_num, char *value, in
 
 /* Quoting strings before inclusion in queries. */
 extern size_t PQescapeStringConn(PGconn *conn,
-				   char *to, const char *from, size_t length,
-				   int *error);
+								 char *to, const char *from, size_t length,
+								 int *error);
 extern char *PQescapeLiteral(PGconn *conn, const char *str, size_t len);
 extern char *PQescapeIdentifier(PGconn *conn, const char *str, size_t len);
 extern unsigned char *PQescapeByteaConn(PGconn *conn,
-				  const unsigned char *from, size_t from_length,
-				  size_t *to_length);
+										const unsigned char *from, size_t from_length,
+										size_t *to_length);
 extern unsigned char *PQunescapeBytea(const unsigned char *strtext,
-				size_t *retbuflen);
+									  size_t *retbuflen);
 
 /* These forms are deprecated! */
 extern size_t PQescapeString(char *to, const char *from, size_t length);
 extern unsigned char *PQescapeBytea(const unsigned char *from, size_t from_length,
-			  size_t *to_length);
+									size_t *to_length);
 
 
 
 /* === in fe-print.c === */
 
-extern void PQprint(FILE *fout,				/* output stream */
-		const PGresult *res,
-		const PQprintOpt *ps);	/* option structure */
+extern void PQprint(FILE *fout, /* output stream */
+					const PGresult *res,
+					const PQprintOpt *ps);	/* option structure */
 
 /*
  * really old printing routines
  */
 extern void PQdisplayTuples(const PGresult *res,
-				FILE *fp,		/* where to send the output */
-				int fillAlign,	/* pad the fields with spaces */
-				const char *fieldSep,	/* field separator */
-				int printHeader,	/* display headers? */
-				int quiet);
+							FILE *fp,	/* where to send the output */
+							int fillAlign,	/* pad the fields with spaces */
+							const char *fieldSep,	/* field separator */
+							int printHeader,	/* display headers? */
+							int quiet);
 
 extern void PQprintTuples(const PGresult *res,
-			  FILE *fout,		/* output stream */
-			  int printAttName, /* print attribute names */
-			  int terseOutput,	/* delimiter bars */
-			  int width);		/* width of column, if 0, use variable width */
+						  FILE *fout,	/* output stream */
+						  int printAttName, /* print attribute names */
+						  int terseOutput,	/* delimiter bars */
+						  int width);	/* width of column, if 0, use variable
+										 * width */
 
 
 /* === in fe-lobj.c === */
diff --git a/src/interfaces/libpq/libpq-int.h b/src/interfaces/libpq/libpq-int.h
index 1221ea9eefa2..c0b8e3f8cefc 100644
--- a/src/interfaces/libpq/libpq-int.h
+++ b/src/interfaces/libpq/libpq-int.h
@@ -558,8 +558,8 @@ extern char *const pgresStatus[];
 /* === in fe-connect.c === */
 
 extern void pqDropConnection(PGconn *conn, bool flushInput);
-extern int pqPacketSend(PGconn *conn, char pack_type,
-			 const void *buf, size_t buf_len);
+extern int	pqPacketSend(PGconn *conn, char pack_type,
+						 const void *buf, size_t buf_len);
 extern bool pqGetHomeDirectory(char *buf, int bufsize);
 
 #ifdef ENABLE_THREAD_SAFETY
@@ -590,9 +590,9 @@ extern void pqSaveErrorResult(PGconn *conn);
 extern PGresult *pqPrepareAsyncResult(PGconn *conn);
 extern void pqInternalNotice(const PGNoticeHooks *hooks, const char *fmt,...) pg_attribute_printf(2, 3);
 extern void pqSaveMessageField(PGresult *res, char code,
-				   const char *value);
+							   const char *value);
 extern void pqSaveParameterStatus(PGconn *conn, const char *name,
-					  const char *value);
+								  const char *value);
 extern int	pqRowProcessor(PGconn *conn, const char **errmsgp);
 
 /* === in fe-protocol2.c === */
@@ -600,33 +600,33 @@ extern int	pqRowProcessor(PGconn *conn, const char **errmsgp);
 extern PostgresPollingStatusType pqSetenvPoll(PGconn *conn);
 
 extern char *pqBuildStartupPacket2(PGconn *conn, int *packetlen,
-					  const PQEnvironmentOption *options);
+								   const PQEnvironmentOption *options);
 extern void pqParseInput2(PGconn *conn);
 extern int	pqGetCopyData2(PGconn *conn, char **buffer, int async);
 extern int	pqGetline2(PGconn *conn, char *s, int maxlen);
 extern int	pqGetlineAsync2(PGconn *conn, char *buffer, int bufsize);
 extern int	pqEndcopy2(PGconn *conn);
 extern PGresult *pqFunctionCall2(PGconn *conn, Oid fnid,
-				int *result_buf, int *actual_result_len,
-				int result_is_int,
-				const PQArgBlock *args, int nargs);
+								 int *result_buf, int *actual_result_len,
+								 int result_is_int,
+								 const PQArgBlock *args, int nargs);
 
 /* === in fe-protocol3.c === */
 
 extern char *pqBuildStartupPacket3(PGconn *conn, int *packetlen,
-					  const PQEnvironmentOption *options);
+								   const PQEnvironmentOption *options);
 extern void pqParseInput3(PGconn *conn);
 extern int	pqGetErrorNotice3(PGconn *conn, bool isError);
 extern void pqBuildErrorMessage3(PQExpBuffer msg, const PGresult *res,
-					 PGVerbosity verbosity, PGContextVisibility show_context);
+								 PGVerbosity verbosity, PGContextVisibility show_context);
 extern int	pqGetCopyData3(PGconn *conn, char **buffer, int async);
 extern int	pqGetline3(PGconn *conn, char *s, int maxlen);
 extern int	pqGetlineAsync3(PGconn *conn, char *buffer, int bufsize);
 extern int	pqEndcopy3(PGconn *conn);
 extern PGresult *pqFunctionCall3(PGconn *conn, Oid fnid,
-				int *result_buf, int *actual_result_len,
-				int result_is_int,
-				const PQArgBlock *args, int nargs);
+								 int *result_buf, int *actual_result_len,
+								 int result_is_int,
+								 const PQArgBlock *args, int nargs);
 
 /* === in fe-misc.c === */
 
@@ -652,8 +652,8 @@ extern int	pqPutMsgEnd(PGconn *conn);
 extern int	pqReadData(PGconn *conn);
 extern int	pqFlush(PGconn *conn);
 extern int	pqWait(int forRead, int forWrite, PGconn *conn);
-extern int pqWaitTimed(int forRead, int forWrite, PGconn *conn,
-			time_t finish_time);
+extern int	pqWaitTimed(int forRead, int forWrite, PGconn *conn,
+						time_t finish_time);
 extern int	pqReadReady(PGconn *conn);
 extern int	pqWriteReady(PGconn *conn);
 
@@ -671,7 +671,7 @@ extern ssize_t pqsecure_raw_write(PGconn *, const void *ptr, size_t len);
 #if defined(ENABLE_THREAD_SAFETY) && !defined(WIN32)
 extern int	pq_block_sigpipe(sigset_t *osigset, bool *sigpipe_pending);
 extern void pq_reset_sigpipe(sigset_t *osigset, bool sigpipe_pending,
-				 bool got_epipe);
+							 bool got_epipe);
 #endif
 
 /* === SSL === */
@@ -752,9 +752,9 @@ extern char *pgtls_get_peer_certificate_hash(PGconn *conn, size_t *len);
  * -1, and sets the libpq error message.
  *
  */
-extern int pgtls_verify_peer_name_matches_certificate_guts(PGconn *conn,
-												int *names_examined,
-												char **first_name);
+extern int	pgtls_verify_peer_name_matches_certificate_guts(PGconn *conn,
+															int *names_examined,
+															char **first_name);
 
 /* === GSSAPI === */
 
diff --git a/src/interfaces/libpq/pqexpbuffer.h b/src/interfaces/libpq/pqexpbuffer.h
index 277f7f12223a..8a412e998339 100644
--- a/src/interfaces/libpq/pqexpbuffer.h
+++ b/src/interfaces/libpq/pqexpbuffer.h
@@ -177,6 +177,6 @@ extern void appendPQExpBufferChar(PQExpBuffer str, char ch);
  * if necessary.
  */
 extern void appendBinaryPQExpBuffer(PQExpBuffer str,
-						const char *data, size_t datalen);
+									const char *data, size_t datalen);
 
 #endif							/* PQEXPBUFFER_H */
diff --git a/src/pl/plperl/plperl.c b/src/pl/plperl/plperl.c
index bda9517971fd..5cb3a447291c 100644
--- a/src/pl/plperl/plperl.c
+++ b/src/pl/plperl/plperl.c
@@ -263,8 +263,8 @@ static void plperl_event_trigger_handler(PG_FUNCTION_ARGS);
 static void free_plperl_function(plperl_proc_desc *prodesc);
 
 static plperl_proc_desc *compile_plperl_function(Oid fn_oid,
-						bool is_trigger,
-						bool is_event_trigger);
+												 bool is_trigger,
+												 bool is_event_trigger);
 
 static SV  *plperl_hash_from_tuple(HeapTuple tuple, TupleDesc tupdesc, bool include_generated);
 static SV  *plperl_hash_from_datum(Datum attr);
@@ -273,15 +273,15 @@ static SV  *split_array(plperl_array_info *info, int first, int last, int nest);
 static SV  *make_array_ref(plperl_array_info *info, int first, int last);
 static SV  *get_perl_array_ref(SV *sv);
 static Datum plperl_sv_to_datum(SV *sv, Oid typid, int32 typmod,
-				   FunctionCallInfo fcinfo,
-				   FmgrInfo *finfo, Oid typioparam,
-				   bool *isnull);
+								FunctionCallInfo fcinfo,
+								FmgrInfo *finfo, Oid typioparam,
+								bool *isnull);
 static void _sv_to_datum_finfo(Oid typid, FmgrInfo *finfo, Oid *typioparam);
 static Datum plperl_array_to_datum(SV *src, Oid typid, int32 typmod);
 static void array_to_datum_internal(AV *av, ArrayBuildState *astate,
-						int *ndims, int *dims, int cur_depth,
-						Oid arraytypid, Oid elemtypid, int32 typmod,
-						FmgrInfo *finfo, Oid typioparam);
+									int *ndims, int *dims, int cur_depth,
+									Oid arraytypid, Oid elemtypid, int32 typmod,
+									FmgrInfo *finfo, Oid typioparam);
 static Datum plperl_hash_to_datum(SV *src, TupleDesc td);
 
 static void plperl_init_shared_libs(pTHX);
@@ -294,7 +294,7 @@ static SV **hv_store_string(HV *hv, const char *key, SV *val);
 static SV **hv_fetch_string(HV *hv, const char *key);
 static void plperl_create_sub(plperl_proc_desc *desc, const char *s, Oid fn_oid);
 static SV  *plperl_call_perl_func(plperl_proc_desc *desc,
-					  FunctionCallInfo fcinfo);
+								  FunctionCallInfo fcinfo);
 static void plperl_compile_callback(void *arg);
 static void plperl_exec_callback(void *arg);
 static void plperl_inline_callback(void *arg);
diff --git a/src/pl/plpgsql/src/pl_comp.c b/src/pl/plpgsql/src/pl_comp.c
index 3b8e137ab584..6a3b2986a114 100644
--- a/src/pl/plpgsql/src/pl_comp.c
+++ b/src/pl/plpgsql/src/pl_comp.c
@@ -91,10 +91,10 @@ static const ExceptionLabelMap exception_label_map[] = {
  * ----------
  */
 static PLpgSQL_function *do_compile(FunctionCallInfo fcinfo,
-		   HeapTuple procTup,
-		   PLpgSQL_function *function,
-		   PLpgSQL_func_hashkey *hashkey,
-		   bool forValidator);
+									HeapTuple procTup,
+									PLpgSQL_function *function,
+									PLpgSQL_func_hashkey *hashkey,
+									bool forValidator);
 static void plpgsql_compile_error_callback(void *arg);
 static void add_parameter_name(PLpgSQL_nsitem_type itemtype, int itemno, const char *name);
 static void add_dummy_return(PLpgSQL_function *function);
@@ -102,23 +102,23 @@ static Node *plpgsql_pre_column_ref(ParseState *pstate, ColumnRef *cref);
 static Node *plpgsql_post_column_ref(ParseState *pstate, ColumnRef *cref, Node *var);
 static Node *plpgsql_param_ref(ParseState *pstate, ParamRef *pref);
 static Node *resolve_column_ref(ParseState *pstate, PLpgSQL_expr *expr,
-				   ColumnRef *cref, bool error_if_no_field);
+								ColumnRef *cref, bool error_if_no_field);
 static Node *make_datum_param(PLpgSQL_expr *expr, int dno, int location);
 static PLpgSQL_row *build_row_from_vars(PLpgSQL_variable **vars, int numvars);
 static PLpgSQL_type *build_datatype(HeapTuple typeTup, int32 typmod, Oid collation);
 static void plpgsql_start_datums(void);
 static void plpgsql_finish_datums(PLpgSQL_function *function);
 static void compute_function_hashkey(FunctionCallInfo fcinfo,
-						 Form_pg_proc procStruct,
-						 PLpgSQL_func_hashkey *hashkey,
-						 bool forValidator);
+									 Form_pg_proc procStruct,
+									 PLpgSQL_func_hashkey *hashkey,
+									 bool forValidator);
 static void plpgsql_resolve_polymorphic_argtypes(int numargs,
-									 Oid *argtypes, char *argmodes,
-									 Node *call_expr, bool forValidator,
-									 const char *proname);
+												 Oid *argtypes, char *argmodes,
+												 Node *call_expr, bool forValidator,
+												 const char *proname);
 static PLpgSQL_function *plpgsql_HashTableLookup(PLpgSQL_func_hashkey *func_key);
 static void plpgsql_HashTableInsert(PLpgSQL_function *function,
-						PLpgSQL_func_hashkey *func_key);
+									PLpgSQL_func_hashkey *func_key);
 static void plpgsql_HashTableDelete(PLpgSQL_function *function);
 static void delete_function(PLpgSQL_function *func);
 
diff --git a/src/pl/plpgsql/src/pl_exec.c b/src/pl/plpgsql/src/pl_exec.c
index bb2249b81e83..a5d1d1db3d80 100644
--- a/src/pl/plpgsql/src/pl_exec.c
+++ b/src/pl/plpgsql/src/pl_exec.c
@@ -239,197 +239,197 @@ static HTAB *shared_cast_hash = NULL;
  * Local function forward declarations
  ************************************************************/
 static void coerce_function_result_tuple(PLpgSQL_execstate *estate,
-							 TupleDesc tupdesc);
+										 TupleDesc tupdesc);
 static void plpgsql_exec_error_callback(void *arg);
 static void copy_plpgsql_datums(PLpgSQL_execstate *estate,
-					PLpgSQL_function *func);
+								PLpgSQL_function *func);
 static void plpgsql_fulfill_promise(PLpgSQL_execstate *estate,
-						PLpgSQL_var *var);
+									PLpgSQL_var *var);
 static MemoryContext get_stmt_mcontext(PLpgSQL_execstate *estate);
 static void push_stmt_mcontext(PLpgSQL_execstate *estate);
 static void pop_stmt_mcontext(PLpgSQL_execstate *estate);
 
-static int exec_stmt_block(PLpgSQL_execstate *estate,
-				PLpgSQL_stmt_block *block);
-static int exec_stmts(PLpgSQL_execstate *estate,
-		   List *stmts);
-static int exec_stmt(PLpgSQL_execstate *estate,
-		  PLpgSQL_stmt *stmt);
-static int exec_stmt_assign(PLpgSQL_execstate *estate,
-				 PLpgSQL_stmt_assign *stmt);
-static int exec_stmt_perform(PLpgSQL_execstate *estate,
-				  PLpgSQL_stmt_perform *stmt);
-static int exec_stmt_call(PLpgSQL_execstate *estate,
-			   PLpgSQL_stmt_call *stmt);
-static int exec_stmt_getdiag(PLpgSQL_execstate *estate,
-				  PLpgSQL_stmt_getdiag *stmt);
-static int exec_stmt_if(PLpgSQL_execstate *estate,
-			 PLpgSQL_stmt_if *stmt);
-static int exec_stmt_case(PLpgSQL_execstate *estate,
-			   PLpgSQL_stmt_case *stmt);
-static int exec_stmt_loop(PLpgSQL_execstate *estate,
-			   PLpgSQL_stmt_loop *stmt);
-static int exec_stmt_while(PLpgSQL_execstate *estate,
-				PLpgSQL_stmt_while *stmt);
-static int exec_stmt_fori(PLpgSQL_execstate *estate,
-			   PLpgSQL_stmt_fori *stmt);
-static int exec_stmt_fors(PLpgSQL_execstate *estate,
-			   PLpgSQL_stmt_fors *stmt);
-static int exec_stmt_forc(PLpgSQL_execstate *estate,
-			   PLpgSQL_stmt_forc *stmt);
-static int exec_stmt_foreach_a(PLpgSQL_execstate *estate,
-					PLpgSQL_stmt_foreach_a *stmt);
-static int exec_stmt_open(PLpgSQL_execstate *estate,
-			   PLpgSQL_stmt_open *stmt);
-static int exec_stmt_fetch(PLpgSQL_execstate *estate,
-				PLpgSQL_stmt_fetch *stmt);
-static int exec_stmt_close(PLpgSQL_execstate *estate,
-				PLpgSQL_stmt_close *stmt);
-static int exec_stmt_exit(PLpgSQL_execstate *estate,
-			   PLpgSQL_stmt_exit *stmt);
-static int exec_stmt_return(PLpgSQL_execstate *estate,
-				 PLpgSQL_stmt_return *stmt);
-static int exec_stmt_return_next(PLpgSQL_execstate *estate,
-					  PLpgSQL_stmt_return_next *stmt);
-static int exec_stmt_return_query(PLpgSQL_execstate *estate,
-					   PLpgSQL_stmt_return_query *stmt);
-static int exec_stmt_raise(PLpgSQL_execstate *estate,
-				PLpgSQL_stmt_raise *stmt);
-static int exec_stmt_assert(PLpgSQL_execstate *estate,
-				 PLpgSQL_stmt_assert *stmt);
-static int exec_stmt_execsql(PLpgSQL_execstate *estate,
-				  PLpgSQL_stmt_execsql *stmt);
-static int exec_stmt_dynexecute(PLpgSQL_execstate *estate,
-					 PLpgSQL_stmt_dynexecute *stmt);
-static int exec_stmt_dynfors(PLpgSQL_execstate *estate,
-				  PLpgSQL_stmt_dynfors *stmt);
-static int exec_stmt_commit(PLpgSQL_execstate *estate,
-				 PLpgSQL_stmt_commit *stmt);
-static int exec_stmt_rollback(PLpgSQL_execstate *estate,
-				   PLpgSQL_stmt_rollback *stmt);
-static int exec_stmt_set(PLpgSQL_execstate *estate,
-			  PLpgSQL_stmt_set *stmt);
+static int	exec_stmt_block(PLpgSQL_execstate *estate,
+							PLpgSQL_stmt_block *block);
+static int	exec_stmts(PLpgSQL_execstate *estate,
+					   List *stmts);
+static int	exec_stmt(PLpgSQL_execstate *estate,
+					  PLpgSQL_stmt *stmt);
+static int	exec_stmt_assign(PLpgSQL_execstate *estate,
+							 PLpgSQL_stmt_assign *stmt);
+static int	exec_stmt_perform(PLpgSQL_execstate *estate,
+							  PLpgSQL_stmt_perform *stmt);
+static int	exec_stmt_call(PLpgSQL_execstate *estate,
+						   PLpgSQL_stmt_call *stmt);
+static int	exec_stmt_getdiag(PLpgSQL_execstate *estate,
+							  PLpgSQL_stmt_getdiag *stmt);
+static int	exec_stmt_if(PLpgSQL_execstate *estate,
+						 PLpgSQL_stmt_if *stmt);
+static int	exec_stmt_case(PLpgSQL_execstate *estate,
+						   PLpgSQL_stmt_case *stmt);
+static int	exec_stmt_loop(PLpgSQL_execstate *estate,
+						   PLpgSQL_stmt_loop *stmt);
+static int	exec_stmt_while(PLpgSQL_execstate *estate,
+							PLpgSQL_stmt_while *stmt);
+static int	exec_stmt_fori(PLpgSQL_execstate *estate,
+						   PLpgSQL_stmt_fori *stmt);
+static int	exec_stmt_fors(PLpgSQL_execstate *estate,
+						   PLpgSQL_stmt_fors *stmt);
+static int	exec_stmt_forc(PLpgSQL_execstate *estate,
+						   PLpgSQL_stmt_forc *stmt);
+static int	exec_stmt_foreach_a(PLpgSQL_execstate *estate,
+								PLpgSQL_stmt_foreach_a *stmt);
+static int	exec_stmt_open(PLpgSQL_execstate *estate,
+						   PLpgSQL_stmt_open *stmt);
+static int	exec_stmt_fetch(PLpgSQL_execstate *estate,
+							PLpgSQL_stmt_fetch *stmt);
+static int	exec_stmt_close(PLpgSQL_execstate *estate,
+							PLpgSQL_stmt_close *stmt);
+static int	exec_stmt_exit(PLpgSQL_execstate *estate,
+						   PLpgSQL_stmt_exit *stmt);
+static int	exec_stmt_return(PLpgSQL_execstate *estate,
+							 PLpgSQL_stmt_return *stmt);
+static int	exec_stmt_return_next(PLpgSQL_execstate *estate,
+								  PLpgSQL_stmt_return_next *stmt);
+static int	exec_stmt_return_query(PLpgSQL_execstate *estate,
+								   PLpgSQL_stmt_return_query *stmt);
+static int	exec_stmt_raise(PLpgSQL_execstate *estate,
+							PLpgSQL_stmt_raise *stmt);
+static int	exec_stmt_assert(PLpgSQL_execstate *estate,
+							 PLpgSQL_stmt_assert *stmt);
+static int	exec_stmt_execsql(PLpgSQL_execstate *estate,
+							  PLpgSQL_stmt_execsql *stmt);
+static int	exec_stmt_dynexecute(PLpgSQL_execstate *estate,
+								 PLpgSQL_stmt_dynexecute *stmt);
+static int	exec_stmt_dynfors(PLpgSQL_execstate *estate,
+							  PLpgSQL_stmt_dynfors *stmt);
+static int	exec_stmt_commit(PLpgSQL_execstate *estate,
+							 PLpgSQL_stmt_commit *stmt);
+static int	exec_stmt_rollback(PLpgSQL_execstate *estate,
+							   PLpgSQL_stmt_rollback *stmt);
+static int	exec_stmt_set(PLpgSQL_execstate *estate,
+						  PLpgSQL_stmt_set *stmt);
 
 static void plpgsql_estate_setup(PLpgSQL_execstate *estate,
-					 PLpgSQL_function *func,
-					 ReturnSetInfo *rsi,
-					 EState *simple_eval_estate);
+								 PLpgSQL_function *func,
+								 ReturnSetInfo *rsi,
+								 EState *simple_eval_estate);
 static void exec_eval_cleanup(PLpgSQL_execstate *estate);
 
 static void exec_prepare_plan(PLpgSQL_execstate *estate,
-				  PLpgSQL_expr *expr, int cursorOptions,
-				  bool keepplan);
+							  PLpgSQL_expr *expr, int cursorOptions,
+							  bool keepplan);
 static void exec_simple_check_plan(PLpgSQL_execstate *estate, PLpgSQL_expr *expr);
 static void exec_save_simple_expr(PLpgSQL_expr *expr, CachedPlan *cplan);
 static void exec_check_rw_parameter(PLpgSQL_expr *expr, int target_dno);
 static bool contains_target_param(Node *node, int *target_dno);
 static bool exec_eval_simple_expr(PLpgSQL_execstate *estate,
-					  PLpgSQL_expr *expr,
-					  Datum *result,
-					  bool *isNull,
-					  Oid *rettype,
-					  int32 *rettypmod);
+								  PLpgSQL_expr *expr,
+								  Datum *result,
+								  bool *isNull,
+								  Oid *rettype,
+								  int32 *rettypmod);
 
 static void exec_assign_expr(PLpgSQL_execstate *estate,
-				 PLpgSQL_datum *target,
-				 PLpgSQL_expr *expr);
+							 PLpgSQL_datum *target,
+							 PLpgSQL_expr *expr);
 static void exec_assign_c_string(PLpgSQL_execstate *estate,
-					 PLpgSQL_datum *target,
-					 const char *str);
+								 PLpgSQL_datum *target,
+								 const char *str);
 static void exec_assign_value(PLpgSQL_execstate *estate,
-				  PLpgSQL_datum *target,
-				  Datum value, bool isNull,
-				  Oid valtype, int32 valtypmod);
+							  PLpgSQL_datum *target,
+							  Datum value, bool isNull,
+							  Oid valtype, int32 valtypmod);
 static void exec_eval_datum(PLpgSQL_execstate *estate,
-				PLpgSQL_datum *datum,
-				Oid *typeid,
-				int32 *typetypmod,
-				Datum *value,
-				bool *isnull);
-static int exec_eval_integer(PLpgSQL_execstate *estate,
-				  PLpgSQL_expr *expr,
-				  bool *isNull);
+							PLpgSQL_datum *datum,
+							Oid *typeid,
+							int32 *typetypmod,
+							Datum *value,
+							bool *isnull);
+static int	exec_eval_integer(PLpgSQL_execstate *estate,
+							  PLpgSQL_expr *expr,
+							  bool *isNull);
 static bool exec_eval_boolean(PLpgSQL_execstate *estate,
-				  PLpgSQL_expr *expr,
-				  bool *isNull);
+							  PLpgSQL_expr *expr,
+							  bool *isNull);
 static Datum exec_eval_expr(PLpgSQL_execstate *estate,
-			   PLpgSQL_expr *expr,
-			   bool *isNull,
-			   Oid *rettype,
-			   int32 *rettypmod);
-static int exec_run_select(PLpgSQL_execstate *estate,
-				PLpgSQL_expr *expr, long maxtuples, Portal *portalP);
-static int exec_for_query(PLpgSQL_execstate *estate, PLpgSQL_stmt_forq *stmt,
-			   Portal portal, bool prefetch_ok);
+							PLpgSQL_expr *expr,
+							bool *isNull,
+							Oid *rettype,
+							int32 *rettypmod);
+static int	exec_run_select(PLpgSQL_execstate *estate,
+							PLpgSQL_expr *expr, long maxtuples, Portal *portalP);
+static int	exec_for_query(PLpgSQL_execstate *estate, PLpgSQL_stmt_forq *stmt,
+						   Portal portal, bool prefetch_ok);
 static ParamListInfo setup_param_list(PLpgSQL_execstate *estate,
-				 PLpgSQL_expr *expr);
+									  PLpgSQL_expr *expr);
 static ParamExternData *plpgsql_param_fetch(ParamListInfo params,
-					int paramid, bool speculative,
-					ParamExternData *workspace);
+											int paramid, bool speculative,
+											ParamExternData *workspace);
 static void plpgsql_param_compile(ParamListInfo params, Param *param,
-					  ExprState *state,
-					  Datum *resv, bool *resnull);
+								  ExprState *state,
+								  Datum *resv, bool *resnull);
 static void plpgsql_param_eval_var(ExprState *state, ExprEvalStep *op,
-					   ExprContext *econtext);
+								   ExprContext *econtext);
 static void plpgsql_param_eval_var_ro(ExprState *state, ExprEvalStep *op,
-						  ExprContext *econtext);
+									  ExprContext *econtext);
 static void plpgsql_param_eval_recfield(ExprState *state, ExprEvalStep *op,
-							ExprContext *econtext);
+										ExprContext *econtext);
 static void plpgsql_param_eval_generic(ExprState *state, ExprEvalStep *op,
-						   ExprContext *econtext);
+									   ExprContext *econtext);
 static void plpgsql_param_eval_generic_ro(ExprState *state, ExprEvalStep *op,
-							  ExprContext *econtext);
+										  ExprContext *econtext);
 static void exec_move_row(PLpgSQL_execstate *estate,
-			  PLpgSQL_variable *target,
-			  HeapTuple tup, TupleDesc tupdesc);
+						  PLpgSQL_variable *target,
+						  HeapTuple tup, TupleDesc tupdesc);
 static ExpandedRecordHeader *make_expanded_record_for_rec(PLpgSQL_execstate *estate,
-							 PLpgSQL_rec *rec,
-							 TupleDesc srctupdesc,
-							 ExpandedRecordHeader *srcerh);
+														  PLpgSQL_rec *rec,
+														  TupleDesc srctupdesc,
+														  ExpandedRecordHeader *srcerh);
 static void exec_move_row_from_fields(PLpgSQL_execstate *estate,
-						  PLpgSQL_variable *target,
-						  ExpandedRecordHeader *newerh,
-						  Datum *values, bool *nulls,
-						  TupleDesc tupdesc);
+									  PLpgSQL_variable *target,
+									  ExpandedRecordHeader *newerh,
+									  Datum *values, bool *nulls,
+									  TupleDesc tupdesc);
 static bool compatible_tupdescs(TupleDesc src_tupdesc, TupleDesc dst_tupdesc);
 static HeapTuple make_tuple_from_row(PLpgSQL_execstate *estate,
-					PLpgSQL_row *row,
-					TupleDesc tupdesc);
+									 PLpgSQL_row *row,
+									 TupleDesc tupdesc);
 static TupleDesc deconstruct_composite_datum(Datum value,
-							HeapTupleData *tmptup);
+											 HeapTupleData *tmptup);
 static void exec_move_row_from_datum(PLpgSQL_execstate *estate,
-						 PLpgSQL_variable *target,
-						 Datum value);
+									 PLpgSQL_variable *target,
+									 Datum value);
 static void instantiate_empty_record_variable(PLpgSQL_execstate *estate,
-								  PLpgSQL_rec *rec);
+											  PLpgSQL_rec *rec);
 static char *convert_value_to_string(PLpgSQL_execstate *estate,
-						Datum value, Oid valtype);
+									 Datum value, Oid valtype);
 static Datum exec_cast_value(PLpgSQL_execstate *estate,
-				Datum value, bool *isnull,
-				Oid valtype, int32 valtypmod,
-				Oid reqtype, int32 reqtypmod);
+							 Datum value, bool *isnull,
+							 Oid valtype, int32 valtypmod,
+							 Oid reqtype, int32 reqtypmod);
 static plpgsql_CastHashEntry *get_cast_hashentry(PLpgSQL_execstate *estate,
-				   Oid srctype, int32 srctypmod,
-				   Oid dsttype, int32 dsttypmod);
+												 Oid srctype, int32 srctypmod,
+												 Oid dsttype, int32 dsttypmod);
 static void exec_init_tuple_store(PLpgSQL_execstate *estate);
 static void exec_set_found(PLpgSQL_execstate *estate, bool state);
 static void plpgsql_create_econtext(PLpgSQL_execstate *estate);
 static void plpgsql_destroy_econtext(PLpgSQL_execstate *estate);
 static void assign_simple_var(PLpgSQL_execstate *estate, PLpgSQL_var *var,
-				  Datum newvalue, bool isnull, bool freeable);
+							  Datum newvalue, bool isnull, bool freeable);
 static void assign_text_var(PLpgSQL_execstate *estate, PLpgSQL_var *var,
-				const char *str);
+							const char *str);
 static void assign_record_var(PLpgSQL_execstate *estate, PLpgSQL_rec *rec,
-				  ExpandedRecordHeader *erh);
+							  ExpandedRecordHeader *erh);
 static PreparedParamsData *exec_eval_using_params(PLpgSQL_execstate *estate,
-					   List *params);
+												  List *params);
 static Portal exec_dynquery_with_params(PLpgSQL_execstate *estate,
-						  PLpgSQL_expr *dynquery, List *params,
-						  const char *portalname, int cursorOptions);
+										PLpgSQL_expr *dynquery, List *params,
+										const char *portalname, int cursorOptions);
 static char *format_expr_params(PLpgSQL_execstate *estate,
-				   const PLpgSQL_expr *expr);
+								const PLpgSQL_expr *expr);
 static char *format_preparedparamsdata(PLpgSQL_execstate *estate,
-						  const PreparedParamsData *ppd);
+									   const PreparedParamsData *ppd);
 
 
 /* ----------
diff --git a/src/pl/plpgsql/src/plpgsql.h b/src/pl/plpgsql/src/plpgsql.h
index a72e319e55ff..921ed72bdcdf 100644
--- a/src/pl/plpgsql/src/plpgsql.h
+++ b/src/pl/plpgsql/src/plpgsql.h
@@ -1212,32 +1212,32 @@ extern PLpgSQL_plugin **plpgsql_plugin_ptr;
  * Functions in pl_comp.c
  */
 extern PLpgSQL_function *plpgsql_compile(FunctionCallInfo fcinfo,
-				bool forValidator);
+										 bool forValidator);
 extern PLpgSQL_function *plpgsql_compile_inline(char *proc_source);
 extern void plpgsql_parser_setup(struct ParseState *pstate,
-					 PLpgSQL_expr *expr);
+								 PLpgSQL_expr *expr);
 extern bool plpgsql_parse_word(char *word1, const char *yytxt, bool lookup,
-				   PLwdatum *wdatum, PLword *word);
+							   PLwdatum *wdatum, PLword *word);
 extern bool plpgsql_parse_dblword(char *word1, char *word2,
-					  PLwdatum *wdatum, PLcword *cword);
+								  PLwdatum *wdatum, PLcword *cword);
 extern bool plpgsql_parse_tripword(char *word1, char *word2, char *word3,
-					   PLwdatum *wdatum, PLcword *cword);
+								   PLwdatum *wdatum, PLcword *cword);
 extern PLpgSQL_type *plpgsql_parse_wordtype(char *ident);
 extern PLpgSQL_type *plpgsql_parse_cwordtype(List *idents);
 extern PLpgSQL_type *plpgsql_parse_wordrowtype(char *ident);
 extern PLpgSQL_type *plpgsql_parse_cwordrowtype(List *idents);
 extern PLpgSQL_type *plpgsql_build_datatype(Oid typeOid, int32 typmod,
-					   Oid collation);
+											Oid collation);
 extern PLpgSQL_variable *plpgsql_build_variable(const char *refname, int lineno,
-					   PLpgSQL_type *dtype,
-					   bool add2namespace);
+												PLpgSQL_type *dtype,
+												bool add2namespace);
 extern PLpgSQL_rec *plpgsql_build_record(const char *refname, int lineno,
-					 PLpgSQL_type *dtype, Oid rectypeid,
-					 bool add2namespace);
+										 PLpgSQL_type *dtype, Oid rectypeid,
+										 bool add2namespace);
 extern PLpgSQL_recfield *plpgsql_build_recfield(PLpgSQL_rec *rec,
-					   const char *fldname);
-extern int plpgsql_recognize_err_condition(const char *condname,
-								bool allow_sqlstate);
+												const char *fldname);
+extern int	plpgsql_recognize_err_condition(const char *condname,
+											bool allow_sqlstate);
 extern PLpgSQL_condition *plpgsql_parse_err_condition(char *condname);
 extern void plpgsql_adddatum(PLpgSQL_datum *new);
 extern int	plpgsql_add_initdatums(int **varnos);
@@ -1252,36 +1252,36 @@ extern void _PG_init(void);
  * Functions in pl_exec.c
  */
 extern Datum plpgsql_exec_function(PLpgSQL_function *func,
-					  FunctionCallInfo fcinfo,
-					  EState *simple_eval_estate,
-					  bool atomic);
+								   FunctionCallInfo fcinfo,
+								   EState *simple_eval_estate,
+								   bool atomic);
 extern HeapTuple plpgsql_exec_trigger(PLpgSQL_function *func,
-					 TriggerData *trigdata);
+									  TriggerData *trigdata);
 extern void plpgsql_exec_event_trigger(PLpgSQL_function *func,
-						   EventTriggerData *trigdata);
+									   EventTriggerData *trigdata);
 extern void plpgsql_xact_cb(XactEvent event, void *arg);
 extern void plpgsql_subxact_cb(SubXactEvent event, SubTransactionId mySubid,
-				   SubTransactionId parentSubid, void *arg);
-extern Oid plpgsql_exec_get_datum_type(PLpgSQL_execstate *estate,
-							PLpgSQL_datum *datum);
+							   SubTransactionId parentSubid, void *arg);
+extern Oid	plpgsql_exec_get_datum_type(PLpgSQL_execstate *estate,
+										PLpgSQL_datum *datum);
 extern void plpgsql_exec_get_datum_type_info(PLpgSQL_execstate *estate,
-								 PLpgSQL_datum *datum,
-								 Oid *typeid, int32 *typmod, Oid *collation);
+											 PLpgSQL_datum *datum,
+											 Oid *typeid, int32 *typmod, Oid *collation);
 
 /*
  * Functions for namespace handling in pl_funcs.c
  */
 extern void plpgsql_ns_init(void);
 extern void plpgsql_ns_push(const char *label,
-				PLpgSQL_label_type label_type);
+							PLpgSQL_label_type label_type);
 extern void plpgsql_ns_pop(void);
 extern PLpgSQL_nsitem *plpgsql_ns_top(void);
 extern void plpgsql_ns_additem(PLpgSQL_nsitem_type itemtype, int itemno, const char *name);
 extern PLpgSQL_nsitem *plpgsql_ns_lookup(PLpgSQL_nsitem *ns_cur, bool localmode,
-				  const char *name1, const char *name2,
-				  const char *name3, int *names_used);
+										 const char *name1, const char *name2,
+										 const char *name3, int *names_used);
 extern PLpgSQL_nsitem *plpgsql_ns_lookup_label(PLpgSQL_nsitem *ns_cur,
-						const char *name);
+											   const char *name);
 extern PLpgSQL_nsitem *plpgsql_ns_find_nearest_loop(PLpgSQL_nsitem *ns_cur);
 
 /*
@@ -1300,10 +1300,10 @@ extern int	plpgsql_yylex(void);
 extern void plpgsql_push_back_token(int token);
 extern bool plpgsql_token_is_unreserved_keyword(int token);
 extern void plpgsql_append_source_text(StringInfo buf,
-						   int startlocation, int endlocation);
+									   int startlocation, int endlocation);
 extern int	plpgsql_peek(void);
 extern void plpgsql_peek2(int *tok1_p, int *tok2_p, int *tok1_loc,
-			  int *tok2_loc);
+						  int *tok2_loc);
 extern int	plpgsql_scanner_errposition(int location);
 extern void plpgsql_yyerror(const char *message) pg_attribute_noreturn();
 extern int	plpgsql_location_to_lineno(int location);
diff --git a/src/pl/plpython/plpy_elog.c b/src/pl/plpython/plpy_elog.c
index ec7e624e1017..25930f99d785 100644
--- a/src/pl/plpython/plpy_elog.c
+++ b/src/pl/plpython/plpy_elog.c
@@ -22,14 +22,14 @@ PyObject   *PLy_exc_spi_error = NULL;
 
 
 static void PLy_traceback(PyObject *e, PyObject *v, PyObject *tb,
-			  char **xmsg, char **tbmsg, int *tb_depth);
+						  char **xmsg, char **tbmsg, int *tb_depth);
 static void PLy_get_spi_error_data(PyObject *exc, int *sqlerrcode, char **detail,
-					   char **hint, char **query, int *position,
-					   char **schema_name, char **table_name, char **column_name,
-					   char **datatype_name, char **constraint_name);
+								   char **hint, char **query, int *position,
+								   char **schema_name, char **table_name, char **column_name,
+								   char **datatype_name, char **constraint_name);
 static void PLy_get_error_data(PyObject *exc, int *sqlerrcode, char **detail,
-				   char **hint, char **schema_name, char **table_name, char **column_name,
-				   char **datatype_name, char **constraint_name);
+							   char **hint, char **schema_name, char **table_name, char **column_name,
+							   char **datatype_name, char **constraint_name);
 static char *get_source_line(const char *src, int lineno);
 
 static void get_string_attr(PyObject *obj, char *attrname, char **str);
diff --git a/src/pl/plpython/plpy_elog.h b/src/pl/plpython/plpy_elog.h
index b56ac412476d..967df784652a 100644
--- a/src/pl/plpython/plpy_elog.h
+++ b/src/pl/plpython/plpy_elog.h
@@ -37,7 +37,7 @@ extern void PLy_elog_impl(int elevel, const char *fmt,...) pg_attribute_printf(2
 extern void PLy_exception_set(PyObject *exc, const char *fmt,...) pg_attribute_printf(2, 3);
 
 extern void PLy_exception_set_plural(PyObject *exc, const char *fmt_singular, const char *fmt_plural,
-						 unsigned long n,...) pg_attribute_printf(2, 5) pg_attribute_printf(3, 5);
+									 unsigned long n,...) pg_attribute_printf(2, 5) pg_attribute_printf(3, 5);
 
 extern void PLy_exception_set_with_details(PyObject *excclass, ErrorData *edata);
 
diff --git a/src/pl/plpython/plpy_exec.c b/src/pl/plpython/plpy_exec.c
index c0c3ae9df0e2..920322e912b3 100644
--- a/src/pl/plpython/plpy_exec.c
+++ b/src/pl/plpython/plpy_exec.c
@@ -45,9 +45,9 @@ static void plpython_srf_cleanup_callback(void *arg);
 static void plpython_return_error_callback(void *arg);
 
 static PyObject *PLy_trigger_build_args(FunctionCallInfo fcinfo, PLyProcedure *proc,
-					   HeapTuple *rv);
+										HeapTuple *rv);
 static HeapTuple PLy_modify_tuple(PLyProcedure *proc, PyObject *pltd,
-				 TriggerData *tdata, HeapTuple otup);
+								  TriggerData *tdata, HeapTuple otup);
 static void plpython_trigger_error_callback(void *arg);
 
 static PyObject *PLy_procedure_call(PLyProcedure *proc, const char *kargs, PyObject *vargs);
diff --git a/src/pl/plpython/plpy_plpymodule.c b/src/pl/plpython/plpy_plpymodule.c
index f40f0846bbc8..c80b35040bf7 100644
--- a/src/pl/plpython/plpy_plpymodule.c
+++ b/src/pl/plpython/plpy_plpymodule.c
@@ -29,8 +29,8 @@ HTAB	   *PLy_spi_exceptions = NULL;
 
 static void PLy_add_exceptions(PyObject *plpy);
 static PyObject *PLy_create_exception(char *name,
-					 PyObject *base, PyObject *dict,
-					 const char *modname, PyObject *mod);
+									  PyObject *base, PyObject *dict,
+									  const char *modname, PyObject *mod);
 static void PLy_generate_spi_exceptions(PyObject *mod, PyObject *base);
 
 /* module functions */
@@ -298,7 +298,7 @@ PLy_generate_spi_exceptions(PyObject *mod, PyObject *base)
  * don't confuse these with PLy_elog
  */
 static PyObject *PLy_output(volatile int level, PyObject *self,
-		   PyObject *args, PyObject *kw);
+							PyObject *args, PyObject *kw);
 
 static PyObject *
 PLy_debug(PyObject *self, PyObject *args, PyObject *kw)
diff --git a/src/pl/plpython/plpy_spi.c b/src/pl/plpython/plpy_spi.c
index fb23a7b3a45d..2fe435d42b03 100644
--- a/src/pl/plpython/plpy_spi.c
+++ b/src/pl/plpython/plpy_spi.c
@@ -31,7 +31,7 @@
 
 static PyObject *PLy_spi_execute_query(char *query, long limit);
 static PyObject *PLy_spi_execute_fetch_result(SPITupleTable *tuptable,
-							 uint64 rows, int status);
+											  uint64 rows, int status);
 static void PLy_spi_exception_set(PyObject *excclass, ErrorData *edata);
 
 
diff --git a/src/pl/plpython/plpy_typeio.c b/src/pl/plpython/plpy_typeio.c
index 6365e461e921..371e534fd225 100644
--- a/src/pl/plpython/plpy_typeio.c
+++ b/src/pl/plpython/plpy_typeio.c
@@ -39,28 +39,28 @@ static PyObject *PLyString_FromScalar(PLyDatumToOb *arg, Datum d);
 static PyObject *PLyObject_FromTransform(PLyDatumToOb *arg, Datum d);
 static PyObject *PLyList_FromArray(PLyDatumToOb *arg, Datum d);
 static PyObject *PLyList_FromArray_recurse(PLyDatumToOb *elm, int *dims, int ndim, int dim,
-						  char **dataptr_p, bits8 **bitmap_p, int *bitmask_p);
+										   char **dataptr_p, bits8 **bitmap_p, int *bitmask_p);
 static PyObject *PLyDict_FromComposite(PLyDatumToOb *arg, Datum d);
 static PyObject *PLyDict_FromTuple(PLyDatumToOb *arg, HeapTuple tuple, TupleDesc desc, bool include_generated);
 
 /* conversion from Python objects to Datums */
 static Datum PLyObject_ToBool(PLyObToDatum *arg, PyObject *plrv,
-				 bool *isnull, bool inarray);
+							  bool *isnull, bool inarray);
 static Datum PLyObject_ToBytea(PLyObToDatum *arg, PyObject *plrv,
-				  bool *isnull, bool inarray);
+							   bool *isnull, bool inarray);
 static Datum PLyObject_ToComposite(PLyObToDatum *arg, PyObject *plrv,
-					  bool *isnull, bool inarray);
+								   bool *isnull, bool inarray);
 static Datum PLyObject_ToScalar(PLyObToDatum *arg, PyObject *plrv,
-				   bool *isnull, bool inarray);
+								bool *isnull, bool inarray);
 static Datum PLyObject_ToDomain(PLyObToDatum *arg, PyObject *plrv,
-				   bool *isnull, bool inarray);
+								bool *isnull, bool inarray);
 static Datum PLyObject_ToTransform(PLyObToDatum *arg, PyObject *plrv,
-					  bool *isnull, bool inarray);
+								   bool *isnull, bool inarray);
 static Datum PLySequence_ToArray(PLyObToDatum *arg, PyObject *plrv,
-					bool *isnull, bool inarray);
+								 bool *isnull, bool inarray);
 static void PLySequence_ToArray_recurse(PLyObToDatum *elm, PyObject *list,
-							int *dims, int ndim, int dim,
-							Datum *elems, bool *nulls, int *currelem);
+										int *dims, int ndim, int dim,
+										Datum *elems, bool *nulls, int *currelem);
 
 /* conversion from Python objects to composite Datums */
 static Datum PLyString_ToComposite(PLyObToDatum *arg, PyObject *string, bool inarray);
diff --git a/src/pl/plpython/plpy_typeio.h b/src/pl/plpython/plpy_typeio.h
index f210178238f8..64c72fa4785e 100644
--- a/src/pl/plpython/plpy_typeio.h
+++ b/src/pl/plpython/plpy_typeio.h
@@ -148,25 +148,25 @@ struct PLyObToDatum
 
 extern PyObject *PLy_input_convert(PLyDatumToOb *arg, Datum val);
 extern Datum PLy_output_convert(PLyObToDatum *arg, PyObject *val,
-				   bool *isnull);
+								bool *isnull);
 
 extern PyObject *PLy_input_from_tuple(PLyDatumToOb *arg, HeapTuple tuple,
-					 TupleDesc desc, bool include_generated);
+									  TupleDesc desc, bool include_generated);
 
 extern void PLy_input_setup_func(PLyDatumToOb *arg, MemoryContext arg_mcxt,
-					 Oid typeOid, int32 typmod,
-					 struct PLyProcedure *proc);
+								 Oid typeOid, int32 typmod,
+								 struct PLyProcedure *proc);
 extern void PLy_output_setup_func(PLyObToDatum *arg, MemoryContext arg_mcxt,
-					  Oid typeOid, int32 typmod,
-					  struct PLyProcedure *proc);
+								  Oid typeOid, int32 typmod,
+								  struct PLyProcedure *proc);
 
 extern void PLy_input_setup_tuple(PLyDatumToOb *arg, TupleDesc desc,
-					  struct PLyProcedure *proc);
+								  struct PLyProcedure *proc);
 extern void PLy_output_setup_tuple(PLyObToDatum *arg, TupleDesc desc,
-					   struct PLyProcedure *proc);
+								   struct PLyProcedure *proc);
 
 extern void PLy_output_setup_record(PLyObToDatum *arg, TupleDesc desc,
-						struct PLyProcedure *proc);
+									struct PLyProcedure *proc);
 
 /* conversion from Python objects to C strings --- exported for transforms */
 extern char *PLyObject_AsString(PyObject *plrv);
diff --git a/src/pl/tcl/pltcl.c b/src/pl/tcl/pltcl.c
index db8ca6abd719..eecd2032d878 100644
--- a/src/pl/tcl/pltcl.c
+++ b/src/pl/tcl/pltcl.c
@@ -263,7 +263,7 @@ static const TclExceptionNameMap exception_name_map[] = {
 void		_PG_init(void);
 
 static void pltcl_init_interp(pltcl_interp_desc *interp_desc,
-				  Oid prolang, bool pltrusted);
+							  Oid prolang, bool pltrusted);
 static pltcl_interp_desc *pltcl_fetch_interp(Oid prolang, bool pltrusted);
 static void call_pltcl_start_proc(Oid prolang, bool pltrusted);
 static void start_proc_error_callback(void *arg);
@@ -271,63 +271,63 @@ static void start_proc_error_callback(void *arg);
 static Datum pltcl_handler(PG_FUNCTION_ARGS, bool pltrusted);
 
 static Datum pltcl_func_handler(PG_FUNCTION_ARGS, pltcl_call_state *call_state,
-				   bool pltrusted);
+								bool pltrusted);
 static HeapTuple pltcl_trigger_handler(PG_FUNCTION_ARGS, pltcl_call_state *call_state,
-					  bool pltrusted);
+									   bool pltrusted);
 static void pltcl_event_trigger_handler(PG_FUNCTION_ARGS, pltcl_call_state *call_state,
-							bool pltrusted);
+										bool pltrusted);
 
 static void throw_tcl_error(Tcl_Interp *interp, const char *proname);
 
 static pltcl_proc_desc *compile_pltcl_function(Oid fn_oid, Oid tgreloid,
-					   bool is_event_trigger,
-					   bool pltrusted);
+											   bool is_event_trigger,
+											   bool pltrusted);
 
-static int pltcl_elog(ClientData cdata, Tcl_Interp *interp,
-		   int objc, Tcl_Obj *const objv[]);
+static int	pltcl_elog(ClientData cdata, Tcl_Interp *interp,
+					   int objc, Tcl_Obj *const objv[]);
 static void pltcl_construct_errorCode(Tcl_Interp *interp, ErrorData *edata);
 static const char *pltcl_get_condition_name(int sqlstate);
-static int pltcl_quote(ClientData cdata, Tcl_Interp *interp,
-			int objc, Tcl_Obj *const objv[]);
-static int pltcl_argisnull(ClientData cdata, Tcl_Interp *interp,
-				int objc, Tcl_Obj *const objv[]);
-static int pltcl_returnnull(ClientData cdata, Tcl_Interp *interp,
-				 int objc, Tcl_Obj *const objv[]);
-static int pltcl_returnnext(ClientData cdata, Tcl_Interp *interp,
-				 int objc, Tcl_Obj *const objv[]);
-static int pltcl_SPI_execute(ClientData cdata, Tcl_Interp *interp,
-				  int objc, Tcl_Obj *const objv[]);
-static int pltcl_process_SPI_result(Tcl_Interp *interp,
-						 const char *arrayname,
-						 Tcl_Obj *loop_body,
-						 int spi_rc,
-						 SPITupleTable *tuptable,
-						 uint64 ntuples);
-static int pltcl_SPI_prepare(ClientData cdata, Tcl_Interp *interp,
-				  int objc, Tcl_Obj *const objv[]);
-static int pltcl_SPI_execute_plan(ClientData cdata, Tcl_Interp *interp,
-					   int objc, Tcl_Obj *const objv[]);
-static int pltcl_subtransaction(ClientData cdata, Tcl_Interp *interp,
-					 int objc, Tcl_Obj *const objv[]);
-static int pltcl_commit(ClientData cdata, Tcl_Interp *interp,
-			 int objc, Tcl_Obj *const objv[]);
-static int pltcl_rollback(ClientData cdata, Tcl_Interp *interp,
-			   int objc, Tcl_Obj *const objv[]);
+static int	pltcl_quote(ClientData cdata, Tcl_Interp *interp,
+						int objc, Tcl_Obj *const objv[]);
+static int	pltcl_argisnull(ClientData cdata, Tcl_Interp *interp,
+							int objc, Tcl_Obj *const objv[]);
+static int	pltcl_returnnull(ClientData cdata, Tcl_Interp *interp,
+							 int objc, Tcl_Obj *const objv[]);
+static int	pltcl_returnnext(ClientData cdata, Tcl_Interp *interp,
+							 int objc, Tcl_Obj *const objv[]);
+static int	pltcl_SPI_execute(ClientData cdata, Tcl_Interp *interp,
+							  int objc, Tcl_Obj *const objv[]);
+static int	pltcl_process_SPI_result(Tcl_Interp *interp,
+									 const char *arrayname,
+									 Tcl_Obj *loop_body,
+									 int spi_rc,
+									 SPITupleTable *tuptable,
+									 uint64 ntuples);
+static int	pltcl_SPI_prepare(ClientData cdata, Tcl_Interp *interp,
+							  int objc, Tcl_Obj *const objv[]);
+static int	pltcl_SPI_execute_plan(ClientData cdata, Tcl_Interp *interp,
+								   int objc, Tcl_Obj *const objv[]);
+static int	pltcl_subtransaction(ClientData cdata, Tcl_Interp *interp,
+								 int objc, Tcl_Obj *const objv[]);
+static int	pltcl_commit(ClientData cdata, Tcl_Interp *interp,
+						 int objc, Tcl_Obj *const objv[]);
+static int	pltcl_rollback(ClientData cdata, Tcl_Interp *interp,
+						   int objc, Tcl_Obj *const objv[]);
 
 static void pltcl_subtrans_begin(MemoryContext oldcontext,
-					 ResourceOwner oldowner);
+								 ResourceOwner oldowner);
 static void pltcl_subtrans_commit(MemoryContext oldcontext,
-					  ResourceOwner oldowner);
+								  ResourceOwner oldowner);
 static void pltcl_subtrans_abort(Tcl_Interp *interp,
-					 MemoryContext oldcontext,
-					 ResourceOwner oldowner);
+								 MemoryContext oldcontext,
+								 ResourceOwner oldowner);
 
 static void pltcl_set_tuple_values(Tcl_Interp *interp, const char *arrayname,
-					   uint64 tupno, HeapTuple tuple, TupleDesc tupdesc);
+								   uint64 tupno, HeapTuple tuple, TupleDesc tupdesc);
 static Tcl_Obj *pltcl_build_tuple_argument(HeapTuple tuple, TupleDesc tupdesc, bool include_generated);
 static HeapTuple pltcl_build_tuple_result(Tcl_Interp *interp,
-						 Tcl_Obj **kvObjv, int kvObjc,
-						 pltcl_call_state *call_state);
+										  Tcl_Obj **kvObjv, int kvObjc,
+										  pltcl_call_state *call_state);
 static void pltcl_init_tuple_store(pltcl_call_state *call_state);
 
 
diff --git a/src/port/inet_net_ntop.c b/src/port/inet_net_ntop.c
index 90dfeed42dcc..67aff110da59 100644
--- a/src/port/inet_net_ntop.c
+++ b/src/port/inet_net_ntop.c
@@ -54,9 +54,9 @@ static const char rcsid[] = "Id: inet_net_ntop.c,v 1.1.2.2 2004/03/09 09:17:27 m
 #endif
 
 static char *inet_net_ntop_ipv4(const u_char *src, int bits,
-				   char *dst, size_t size);
+								char *dst, size_t size);
 static char *inet_net_ntop_ipv6(const u_char *src, int bits,
-				   char *dst, size_t size);
+								char *dst, size_t size);
 
 
 /*
diff --git a/src/port/path.c b/src/port/path.c
index 4b214e89e4eb..710988bd2434 100644
--- a/src/port/path.c
+++ b/src/port/path.c
@@ -45,7 +45,7 @@
 #endif
 
 static void make_relative_path(char *ret_path, const char *target_path,
-				   const char *bin_path, const char *my_exec_path);
+							   const char *bin_path, const char *my_exec_path);
 static void trim_directory(char *path);
 static void trim_trailing_separator(char *path);
 
diff --git a/src/port/qsort.c b/src/port/qsort.c
index 1a8ee08c8bee..409f69a128b5 100644
--- a/src/port/qsort.c
+++ b/src/port/qsort.c
@@ -48,7 +48,7 @@
 
 
 static char *med3(char *a, char *b, char *c,
-	 int (*cmp) (const void *, const void *));
+				  int (*cmp) (const void *, const void *));
 static void swapfunc(char *, char *, size_t, int);
 
 /*
diff --git a/src/port/qsort_arg.c b/src/port/qsort_arg.c
index 24acd2cd4e4a..a2194b0fb186 100644
--- a/src/port/qsort_arg.c
+++ b/src/port/qsort_arg.c
@@ -48,7 +48,7 @@
 
 
 static char *med3(char *a, char *b, char *c,
-	 qsort_arg_comparator cmp, void *arg);
+				  qsort_arg_comparator cmp, void *arg);
 static void swapfunc(char *, char *, size_t, int);
 
 /*
diff --git a/src/port/snprintf.c b/src/port/snprintf.c
index 1a815403e31e..8fd997553eb5 100644
--- a/src/port/snprintf.c
+++ b/src/port/snprintf.c
@@ -317,24 +317,24 @@ flushbuffer(PrintfTarget *target)
 
 
 static bool find_arguments(const char *format, va_list args,
-			   PrintfArgValue *argvalues);
+						   PrintfArgValue *argvalues);
 static void fmtstr(const char *value, int leftjust, int minlen, int maxwidth,
-	   int pointflag, PrintfTarget *target);
+				   int pointflag, PrintfTarget *target);
 static void fmtptr(void *value, PrintfTarget *target);
 static void fmtint(long long value, char type, int forcesign,
-	   int leftjust, int minlen, int zpad, int precision, int pointflag,
-	   PrintfTarget *target);
+				   int leftjust, int minlen, int zpad, int precision, int pointflag,
+				   PrintfTarget *target);
 static void fmtchar(int value, int leftjust, int minlen, PrintfTarget *target);
 static void fmtfloat(double value, char type, int forcesign,
-		 int leftjust, int minlen, int zpad, int precision, int pointflag,
-		 PrintfTarget *target);
+					 int leftjust, int minlen, int zpad, int precision, int pointflag,
+					 PrintfTarget *target);
 static void dostr(const char *str, int slen, PrintfTarget *target);
 static void dopr_outch(int c, PrintfTarget *target);
 static void dopr_outchmulti(int c, int slen, PrintfTarget *target);
 static int	adjust_sign(int is_negative, int forcesign, int *signvalue);
 static int	compute_padlen(int minlen, int vallen, int leftjust);
 static void leading_pad(int zpad, int signvalue, int *padlen,
-			PrintfTarget *target);
+						PrintfTarget *target);
 static void trailing_pad(int padlen, PrintfTarget *target);
 
 /*
diff --git a/src/test/isolation/isolationtester.c b/src/test/isolation/isolationtester.c
index e59cf667bad4..2f039b83eea8 100644
--- a/src/test/isolation/isolationtester.c
+++ b/src/test/isolation/isolationtester.c
@@ -35,7 +35,7 @@ static int	dry_run = false;
 static void run_testspec(TestSpec *testspec);
 static void run_all_permutations(TestSpec *testspec);
 static void run_all_permutations_recurse(TestSpec *testspec, int nsteps,
-							 Step **steps);
+										 Step **steps);
 static void run_named_permutations(TestSpec *testspec);
 static void run_permutation(TestSpec *testspec, int nsteps, Step **steps);
 
diff --git a/src/test/modules/test_shm_mq/setup.c b/src/test/modules/test_shm_mq/setup.c
index 349b043e6409..a3181685f697 100644
--- a/src/test/modules/test_shm_mq/setup.c
+++ b/src/test/modules/test_shm_mq/setup.c
@@ -31,14 +31,14 @@ typedef struct
 } worker_state;
 
 static void setup_dynamic_shared_memory(int64 queue_size, int nworkers,
-							dsm_segment **segp,
-							test_shm_mq_header **hdrp,
-							shm_mq **outp, shm_mq **inp);
+										dsm_segment **segp,
+										test_shm_mq_header **hdrp,
+										shm_mq **outp, shm_mq **inp);
 static worker_state *setup_background_workers(int nworkers,
-						 dsm_segment *seg);
+											  dsm_segment *seg);
 static void cleanup_background_workers(dsm_segment *seg, Datum arg);
 static void wait_for_workers_to_become_ready(worker_state *wstate,
-								 volatile test_shm_mq_header *hdr);
+											 volatile test_shm_mq_header *hdr);
 static bool check_worker_status(worker_state *wstate);
 
 /*
diff --git a/src/test/modules/test_shm_mq/test.c b/src/test/modules/test_shm_mq/test.c
index a8f8447a467b..9b849cccc308 100644
--- a/src/test/modules/test_shm_mq/test.c
+++ b/src/test/modules/test_shm_mq/test.c
@@ -27,7 +27,7 @@ PG_FUNCTION_INFO_V1(test_shm_mq_pipelined);
 void		_PG_init(void);
 
 static void verify_message(Size origlen, char *origdata, Size newlen,
-			   char *newdata);
+						   char *newdata);
 
 /*
  * Simple test of the shared memory message queue infrastructure.
diff --git a/src/test/modules/test_shm_mq/test_shm_mq.h b/src/test/modules/test_shm_mq/test_shm_mq.h
index e12ba1e081bb..4c0722297e94 100644
--- a/src/test/modules/test_shm_mq/test_shm_mq.h
+++ b/src/test/modules/test_shm_mq/test_shm_mq.h
@@ -36,8 +36,8 @@ typedef struct
 
 /* Set up dynamic shared memory and background workers for test run. */
 extern void test_shm_mq_setup(int64 queue_size, int32 nworkers,
-				  dsm_segment **seg, shm_mq_handle **output,
-				  shm_mq_handle **input);
+							  dsm_segment **seg, shm_mq_handle **output,
+							  shm_mq_handle **input);
 
 /* Main entrypoint for a worker. */
 extern void test_shm_mq_main(Datum) pg_attribute_noreturn();
diff --git a/src/test/modules/test_shm_mq/worker.c b/src/test/modules/test_shm_mq/worker.c
index 3ff4987c815d..9f8e77e08c3c 100644
--- a/src/test/modules/test_shm_mq/worker.c
+++ b/src/test/modules/test_shm_mq/worker.c
@@ -29,8 +29,8 @@
 
 static void handle_sigterm(SIGNAL_ARGS);
 static void attach_to_queues(dsm_segment *seg, shm_toc *toc,
-				 int myworkernumber, shm_mq_handle **inqhp,
-				 shm_mq_handle **outqhp);
+							 int myworkernumber, shm_mq_handle **inqhp,
+							 shm_mq_handle **outqhp);
 static void copy_messages(shm_mq_handle *inqh, shm_mq_handle *outqh);
 
 /*
diff --git a/src/test/regress/pg_regress.h b/src/test/regress/pg_regress.h
index 581c299ed497..af47f20dd21b 100644
--- a/src/test/regress/pg_regress.h
+++ b/src/test/regress/pg_regress.h
@@ -45,8 +45,8 @@ extern char *launcher;
 extern const char *basic_diff_opts;
 extern const char *pretty_diff_opts;
 
-int regression_main(int argc, char *argv[],
-				init_function ifunc, test_function tfunc);
+int			regression_main(int argc, char *argv[],
+							init_function ifunc, test_function tfunc);
 void		add_stringlist_item(_stringlist **listhead, const char *str);
 PID_TYPE	spawn_process(const char *cmdline);
 void		replace_string(char *string, const char *replace, const char *replacement);
diff --git a/src/timezone/localtime.c b/src/timezone/localtime.c
index 9fe43135fe34..82365aed2f4e 100644
--- a/src/timezone/localtime.c
+++ b/src/timezone/localtime.c
@@ -93,7 +93,7 @@ static struct pg_tm *gmtsub(pg_time_t const *, int32, struct pg_tm *);
 static bool increment_overflow(int *, int);
 static bool increment_overflow_time(pg_time_t *, int32);
 static struct pg_tm *timesub(pg_time_t const *, int32, struct state const *,
-		struct pg_tm *);
+							 struct pg_tm *);
 static bool typesequiv(struct state const *, int, int);
 
 
diff --git a/src/timezone/pgtz.c b/src/timezone/pgtz.c
index ee111a80d400..1d5bd90afb73 100644
--- a/src/timezone/pgtz.c
+++ b/src/timezone/pgtz.c
@@ -32,8 +32,8 @@ pg_tz	   *log_timezone = NULL;
 
 
 static bool scan_directory_ci(const char *dirname,
-				  const char *fname, int fnamelen,
-				  char *canonname, int canonnamelen);
+							  const char *fname, int fnamelen,
+							  char *canonname, int canonnamelen);
 
 
 /*
diff --git a/src/timezone/pgtz.h b/src/timezone/pgtz.h
index ab2b2bb74016..ff83bffc7ef9 100644
--- a/src/timezone/pgtz.h
+++ b/src/timezone/pgtz.h
@@ -74,8 +74,8 @@ struct pg_tz
 extern int	pg_open_tzfile(const char *name, char *canonname);
 
 /* in localtime.c */
-extern int tzload(const char *name, char *canonname, struct state *sp,
-	   bool doextend);
+extern int	tzload(const char *name, char *canonname, struct state *sp,
+				   bool doextend);
 extern bool tzparse(const char *name, struct state *sp, bool lastditch);
 
 #endif							/* _PGTZ_H */
diff --git a/src/timezone/strftime.c b/src/timezone/strftime.c
index 217dd375f365..55c617f8c22c 100644
--- a/src/timezone/strftime.c
+++ b/src/timezone/strftime.c
@@ -114,7 +114,7 @@ enum warn
 static char *_add(const char *, char *, const char *);
 static char *_conv(int, const char *, char *, const char *);
 static char *_fmt(const char *, const struct pg_tm *, char *, const char *,
-	 enum warn *);
+				  enum warn *);
 static char *_yconv(int, int, bool, bool, char *, char const *);
 
 
diff --git a/src/timezone/zic.c b/src/timezone/zic.c
index de8daaee5c9f..fb22622a1cc9 100644
--- a/src/timezone/zic.c
+++ b/src/timezone/zic.c
@@ -151,9 +151,9 @@ static zic_t oadd(zic_t t1, zic_t t2);
 static void outzone(const struct zone *zp, ptrdiff_t ntzones);
 static zic_t rpytime(const struct rule *rp, zic_t wantedy);
 static void rulesub(struct rule *rp,
-		const char *loyearp, const char *hiyearp,
-		const char *typep, const char *monthp,
-		const char *dayp, const char *timep);
+					const char *loyearp, const char *hiyearp,
+					const char *typep, const char *monthp,
+					const char *dayp, const char *timep);
 static zic_t tadd(zic_t t1, zic_t t2);
 static bool yearistype(zic_t year, const char *type);
 
@@ -304,7 +304,7 @@ struct lookup
 };
 
 static struct lookup const *byword(const char *string,
-	   const struct lookup *lp);
+								   const struct lookup *lp);
 
 static struct lookup const zi_line_codes[] = {
 	{"Rule", LC_RULE},
diff --git a/src/tools/pgindent/pgindent b/src/tools/pgindent/pgindent
index 2d81672e158b..d726a69a5ef7 100755
--- a/src/tools/pgindent/pgindent
+++ b/src/tools/pgindent/pgindent
@@ -12,7 +12,7 @@ use IO::Handle;
 use Getopt::Long;
 
 # Update for pg_bsd_indent version
-my $INDENT_VERSION = "2.0";
+my $INDENT_VERSION = "2.1";
 
 # Our standard indent settings
 my $indent_opts =
@@ -250,22 +250,6 @@ sub post_indent
 	# Use a single space before '*' in function return types
 	$source =~ s!^([A-Za-z_]\S*)[ \t]+\*$!$1 *!gm;
 
-	# Move prototype names to the same line as return type.  Useful
-	# for ctags.  Indent should do this, but it does not.  It formats
-	# prototypes just like real functions.
-
-	my $ident   = qr/[a-zA-Z_][a-zA-Z_0-9]*/;
-	my $comment = qr!/\*.*\*/!;
-
-	$source =~ s!
-			(\n$ident[^(\n]*)\n                  # e.g. static void
-			(
-				$ident\(\n?                      # func_name(
-				(.*,([ \t]*$comment)?\n)*        # args b4 final ln
-				.*\);([ \t]*$comment)?$          # final line
-			)
-		!$1 . (substr($1,-1,1) eq '*' ? '' : ' ') . $2!gmxe;
-
 	return $source;
 }
 
diff --git a/src/tutorial/funcs.c b/src/tutorial/funcs.c
index 721c0c87fcd7..0bc90d18ded7 100644
--- a/src/tutorial/funcs.c
+++ b/src/tutorial/funcs.c
@@ -25,8 +25,8 @@ float8	   *add_one_float8(float8 *arg);
 Point	   *makepoint(Point *pointx, Point *pointy);
 text	   *copytext(text *t);
 text	   *concat_text(text *arg1, text *arg2);
-bool c_overpaid(HeapTupleHeader t,		/* the current instance of EMP */
-		   int32 limit);
+bool		c_overpaid(HeapTupleHeader t,	/* the current instance of EMP */
+					   int32 limit);
 
 
 /* By Value */
