From 6bdf1a1400d3fb8c87e020be943942dcab7e75e2 Mon Sep 17 00:00:00 2001
From: Michael Paquier <michael@paquier.xyz>
Date: Tue, 15 Mar 2022 11:29:23 +0900
Subject: [PATCH] Fix collection of typos in the code and the documentation

Some words were duplicated while other places were grammatically
incorrect, including one variable name in the code.

Author: Otto Kekalainen, Justin Pryzby
Discussion: https://postgr.es/m/7DDBEFC5-09B6-4325-B942-B563D1A24BDC@amazon.com
---
 config/pkg.m4                                     |  2 +-
 contrib/pageinspect/expected/gist.out             |  2 +-
 contrib/pageinspect/sql/gist.sql                  |  2 +-
 doc/src/sgml/config.sgml                          |  4 ++--
 doc/src/sgml/logicaldecoding.sgml                 | 10 +++++-----
 doc/src/sgml/postgres-fdw.sgml                    |  2 +-
 src/backend/access/heap/pruneheap.c               |  2 +-
 src/backend/access/transam/xlog.c                 |  2 +-
 src/backend/catalog/index.c                       |  2 +-
 src/backend/commands/explain.c                    |  6 +++---
 src/backend/main/main.c                           |  2 +-
 src/backend/postmaster/bgworker.c                 |  2 +-
 src/backend/replication/basebackup_sink.c         |  4 ++--
 src/backend/utils/adt/tsrank.c                    |  2 +-
 src/bin/pg_basebackup/pg_basebackup.c             |  2 +-
 src/bin/pg_basebackup/t/010_pg_basebackup.pl      |  4 ++--
 src/bin/pg_verifybackup/t/008_untar.pl            |  2 +-
 src/bin/pg_verifybackup/t/010_client_untar.pl     |  2 +-
 src/bin/pgbench/pgbench.c                         |  2 +-
 src/include/libpq/sasl.h                          |  2 +-
 src/interfaces/libpq/t/001_uri.pl                 |  2 +-
 src/test/perl/PostgreSQL/Test/Cluster.pm          |  6 +++---
 src/test/regress/expected/create_function_sql.out |  2 +-
 src/test/regress/expected/create_table.out        |  2 +-
 src/test/regress/expected/object_address.out      |  2 +-
 src/test/regress/sql/create_function_sql.sql      |  2 +-
 src/test/regress/sql/create_table.sql             |  2 +-
 src/test/regress/sql/object_address.sql           |  2 +-
 src/test/subscription/t/001_rep_changes.pl        |  2 +-
 29 files changed, 40 insertions(+), 40 deletions(-)

diff --git a/config/pkg.m4 b/config/pkg.m4
index 13a889017866..f9075e56c87a 100644
--- a/config/pkg.m4
+++ b/config/pkg.m4
@@ -86,7 +86,7 @@ dnl Check to see whether a particular set of modules exists. Similar to
 dnl PKG_CHECK_MODULES(), but does not set variables or print errors.
 dnl
 dnl Please remember that m4 expands AC_REQUIRE([PKG_PROG_PKG_CONFIG])
-dnl only at the first occurence in configure.ac, so if the first place
+dnl only at the first occurrence in configure.ac, so if the first place
 dnl it's called might be skipped (such as if it is within an "if", you
 dnl have to call PKG_CHECK_EXISTS manually
 AC_DEFUN([PKG_CHECK_EXISTS],
diff --git a/contrib/pageinspect/expected/gist.out b/contrib/pageinspect/expected/gist.out
index b26b56ba15df..93abfcdd5e1d 100644
--- a/contrib/pageinspect/expected/gist.out
+++ b/contrib/pageinspect/expected/gist.out
@@ -52,7 +52,7 @@ SELECT * FROM gist_page_items(get_raw_page('test_gist_idx', 1), 'test_gist_idx')
 (5 rows)
 
 -- gist_page_items_bytea prints the raw key data as a bytea. The output of that is
--- platform-dependent (endianess), so omit the actual key data from the output.
+-- platform-dependent (endianness), so omit the actual key data from the output.
 SELECT itemoffset, ctid, itemlen FROM gist_page_items_bytea(get_raw_page('test_gist_idx', 0));
  itemoffset |   ctid    | itemlen 
 ------------+-----------+---------
diff --git a/contrib/pageinspect/sql/gist.sql b/contrib/pageinspect/sql/gist.sql
index 1560d1e15c31..3e83239a9d0a 100644
--- a/contrib/pageinspect/sql/gist.sql
+++ b/contrib/pageinspect/sql/gist.sql
@@ -23,7 +23,7 @@ SELECT * FROM gist_page_items(get_raw_page('test_gist_idx', 0), 'test_gist_idx')
 SELECT * FROM gist_page_items(get_raw_page('test_gist_idx', 1), 'test_gist_idx') LIMIT 5;
 
 -- gist_page_items_bytea prints the raw key data as a bytea. The output of that is
--- platform-dependent (endianess), so omit the actual key data from the output.
+-- platform-dependent (endianness), so omit the actual key data from the output.
 SELECT itemoffset, ctid, itemlen FROM gist_page_items_bytea(get_raw_page('test_gist_idx', 0));
 
 DROP TABLE test_gist;
diff --git a/doc/src/sgml/config.sgml b/doc/src/sgml/config.sgml
index 5b763bf60f40..7a48973b3c86 100644
--- a/doc/src/sgml/config.sgml
+++ b/doc/src/sgml/config.sgml
@@ -4746,7 +4746,7 @@ ANY <replaceable class="parameter">num_sync</replaceable> ( <replaceable class="
         log file by reducing the value of this parameter. On a system with
         low WAL activity, increasing it reduces the amount of requests necessary
         to access WAL archives, something useful for example in cloud
-        environments where the amount of times an infrastructure is accessed
+        environments where the number of times an infrastructure is accessed
         is taken into account.
        </para>
       </listitem>
@@ -7515,7 +7515,7 @@ COPY postgres_log FROM '/full/path/to/logfile.csv' WITH csv;
       Including <literal>jsonlog</literal> in the
       <varname>log_destination</varname> list provides a convenient way to
       import log files into many different programs. This option emits log
-      lines in (<acronym>JSON</acronym>) format.
+      lines in <acronym>JSON</acronym> format.
      </para>
 
      <para>
diff --git a/doc/src/sgml/logicaldecoding.sgml b/doc/src/sgml/logicaldecoding.sgml
index 3d7d52a84d60..a6ea6ff3fcff 100644
--- a/doc/src/sgml/logicaldecoding.sgml
+++ b/doc/src/sgml/logicaldecoding.sgml
@@ -832,10 +832,10 @@ typedef void (*LogicalDecodeSequenceCB) (struct LogicalDecodingContext *ctx,
       The <parameter>txn</parameter> parameter contains meta information about
       the transaction the sequence change is part of. Note however that for
       non-transactional increments, the transaction may be either NULL or not
-      NULL, depending on if the transaction already has XID assigned.
-      The <parameter>sequence_lsn</parameter> has WAL location of the sequence
-      update. The <parameter>transactional</parameter> says if the sequence has
-      to be replayed as part of the transaction or directly.
+      NULL, depending on if the transaction already has an XID assigned.
+      The <parameter>sequence_lsn</parameter> has the WAL location of the
+      sequence update. <parameter>transactional</parameter> says if the
+      sequence has to be replayed as part of the transaction or directly.
 
       The <parameter>last_value</parameter>, <parameter>log_cnt</parameter> and
       <parameter>is_called</parameter> parameters describe the sequence change.
@@ -1264,7 +1264,7 @@ OutputPluginWrite(ctx, true);
     streamed in blocks demarcated by <function>stream_start_cb</function>
     and <function>stream_stop_cb</function> callbacks. Once all the decoded
     changes are transmitted, the transaction can be committed using the
-    the <function>stream_commit_cb</function> callback
+    <function>stream_commit_cb</function> callback
     (or possibly aborted using the <function>stream_abort_cb</function> callback).
     If two-phase commits are supported, the transaction can be prepared using the
     <function>stream_prepare_cb</function> callback,
diff --git a/doc/src/sgml/postgres-fdw.sgml b/doc/src/sgml/postgres-fdw.sgml
index 8ebf0dc3a058..d8dc71558745 100644
--- a/doc/src/sgml/postgres-fdw.sgml
+++ b/doc/src/sgml/postgres-fdw.sgml
@@ -1003,7 +1003,7 @@ postgres=# SELECT postgres_fdw_disconnect_all();
       it's passed to and used as <varname>application_name</varname>
       in a foreign server, note that it will be truncated to less than
       <symbol>NAMEDATALEN</symbol> characters and anything other than
-      than printable ASCII characters will be replaced with question
+      printable ASCII characters will be replaced with question
       marks (<literal>?</literal>).
       See <xref linkend="guc-application-name"/> for details.
      </para>
diff --git a/src/backend/access/heap/pruneheap.c b/src/backend/access/heap/pruneheap.c
index b6500763a5ac..4656f1b3db4e 100644
--- a/src/backend/access/heap/pruneheap.c
+++ b/src/backend/access/heap/pruneheap.c
@@ -69,7 +69,7 @@ typedef struct
 	/*
 	 * Tuple visibility is only computed once for each tuple, for correctness
 	 * and efficiency reasons; see comment in heap_page_prune() for
-	 * details. This is of type int8[,] intead of HTSV_Result[], so we can use
+	 * details. This is of type int8[,] instead of HTSV_Result[], so we can use
 	 * -1 to indicate no visibility has been computed, e.g. for LP_DEAD items.
 	 *
 	 * Same indexing as ->marked.
diff --git a/src/backend/access/transam/xlog.c b/src/backend/access/transam/xlog.c
index a22f7addacc9..ed16f279b1f6 100644
--- a/src/backend/access/transam/xlog.c
+++ b/src/backend/access/transam/xlog.c
@@ -5870,7 +5870,7 @@ GetRedoRecPtr(void)
  * full-page image to be included in the WAL record.
  *
  * The returned values are cached copies from backend-private memory, and
- * possibly out-of-date or, indeed, uninitalized, in which case they will
+ * possibly out-of-date or, indeed, uninitialized, in which case they will
  * be InvalidXLogRecPtr and false, respectively.  XLogInsertRecord will
  * re-check them against up-to-date values, while holding the WAL insert lock.
  */
diff --git a/src/backend/catalog/index.c b/src/backend/catalog/index.c
index 5e3fc2b35dc3..e43117ffefeb 100644
--- a/src/backend/catalog/index.c
+++ b/src/backend/catalog/index.c
@@ -918,7 +918,7 @@ index_create(Relation heapRelation,
 			indexRelationId = binary_upgrade_next_index_pg_class_oid;
 			binary_upgrade_next_index_pg_class_oid = InvalidOid;
 
-			/* Overide the index relfilenode */
+			/* Override the index relfilenode */
 			if ((relkind == RELKIND_INDEX) &&
 				(!OidIsValid(binary_upgrade_next_index_pg_class_relfilenode)))
 				ereport(ERROR,
diff --git a/src/backend/commands/explain.c b/src/backend/commands/explain.c
index de81379da39a..9f632285b628 100644
--- a/src/backend/commands/explain.c
+++ b/src/backend/commands/explain.c
@@ -3102,7 +3102,7 @@ show_memoize_info(MemoizeState *mstate, List *ancestors, ExplainState *es)
 	ListCell   *lc;
 	List	   *context;
 	StringInfoData keystr;
-	char	   *seperator = "";
+	char	   *separator = "";
 	bool		useprefix;
 	int64		memPeakKb;
 
@@ -3123,11 +3123,11 @@ show_memoize_info(MemoizeState *mstate, List *ancestors, ExplainState *es)
 	{
 		Node	   *expr = (Node *) lfirst(lc);
 
-		appendStringInfoString(&keystr, seperator);
+		appendStringInfoString(&keystr, separator);
 
 		appendStringInfoString(&keystr, deparse_expression(expr, context,
 														   useprefix, false));
-		seperator = ", ";
+		separator = ", ";
 	}
 
 	if (es->format != EXPLAIN_FORMAT_TEXT)
diff --git a/src/backend/main/main.c b/src/backend/main/main.c
index 3d67ce9dcea1..c43a527d3f99 100644
--- a/src/backend/main/main.c
+++ b/src/backend/main/main.c
@@ -247,7 +247,7 @@ startup_hacks(const char *progname)
 		 * leaving the default in place would make debugging harder.
 		 *
 		 * MINGW's own C runtime doesn't have _set_abort_behavior(). When
-		 * targetting Microsoft's UCRT with mingw, it never links to the debug
+		 * targeting Microsoft's UCRT with mingw, it never links to the debug
 		 * version of the library and thus doesn't need the call to
 		 * _set_abort_behavior() either.
 		 */
diff --git a/src/backend/postmaster/bgworker.c b/src/backend/postmaster/bgworker.c
index e441726c83e3..30682b63b3fa 100644
--- a/src/backend/postmaster/bgworker.c
+++ b/src/backend/postmaster/bgworker.c
@@ -531,7 +531,7 @@ BackgroundWorkerStopNotifications(pid_t pid)
  * This is called during a normal ("smart" or "fast") database shutdown.
  * After this point, no new background workers will be started, so anything
  * that might be waiting for them needs to be kicked off its wait.  We do
- * that by cancelling the bgworker registration entirely, which is perhaps
+ * that by canceling the bgworker registration entirely, which is perhaps
  * overkill, but since we're shutting down it does not matter whether the
  * registration record sticks around.
  *
diff --git a/src/backend/replication/basebackup_sink.c b/src/backend/replication/basebackup_sink.c
index 47ba50c2f878..81353f8f4d12 100644
--- a/src/backend/replication/basebackup_sink.c
+++ b/src/backend/replication/basebackup_sink.c
@@ -18,7 +18,7 @@
  * Forward begin_backup callback.
  *
  * Only use this implementation if you want the bbsink you're implementing to
- * share a buffer with the succesor bbsink.
+ * share a buffer with the successor bbsink.
  */
 void
 bbsink_forward_begin_backup(bbsink *sink)
@@ -43,7 +43,7 @@ bbsink_forward_begin_archive(bbsink *sink, const char *archive_name)
 /*
  * Forward archive_contents callback.
  *
- * Code that wants to use this should initalize its own bbs_buffer and
+ * Code that wants to use this should initialize its own bbs_buffer and
  * bbs_buffer_length fields to the values from the successor sink. In cases
  * where the buffer isn't shared, the data needs to be copied before forwarding
  * the callback. We don't do try to do that here, because there's really no
diff --git a/src/backend/utils/adt/tsrank.c b/src/backend/utils/adt/tsrank.c
index cd8aff0ad244..3858fc59281c 100644
--- a/src/backend/utils/adt/tsrank.c
+++ b/src/backend/utils/adt/tsrank.c
@@ -337,7 +337,7 @@ calc_rank_or(const float *w, TSVector t, TSQuery q)
 			}
 /*
 			limit (sum(1/i^2),i=1,inf) = pi^2/6
-			resj = sum(wi/i^2),i=1,noccurence,
+			resj = sum(wi/i^2),i=1,noccurrence,
 			wi - should be sorted desc,
 			don't sort for now, just choose maximum weight. This should be corrected
 			Oleg Bartunov
diff --git a/src/bin/pg_basebackup/pg_basebackup.c b/src/bin/pg_basebackup/pg_basebackup.c
index d265ee3b3c5e..2943d9ec1a08 100644
--- a/src/bin/pg_basebackup/pg_basebackup.c
+++ b/src/bin/pg_basebackup/pg_basebackup.c
@@ -1722,7 +1722,7 @@ GetCopyDataEnd(size_t r, char *copybuf, size_t cursor)
  *
  * As a debugging aid, we try to give some hint about what kind of message
  * provoked the failure. Perhaps this is not detailed enough, but it's not
- * clear that it's worth expending any more code on what shoud be a
+ * clear that it's worth expending any more code on what should be a
  * can't-happen case.
  */
 static void
diff --git a/src/bin/pg_basebackup/t/010_pg_basebackup.pl b/src/bin/pg_basebackup/t/010_pg_basebackup.pl
index 8cb8cfe045e2..efefe947d9af 100644
--- a/src/bin/pg_basebackup/t/010_pg_basebackup.pl
+++ b/src/bin/pg_basebackup/t/010_pg_basebackup.pl
@@ -22,7 +22,7 @@
 
 # For nearly all pg_basebackup invocations some options should be specified,
 # to keep test times reasonable. Using @pg_basebackup_defs as the first
-# element of the array passed to to IPC::Run interpolate the array (as it is
+# element of the array passed to IPC::Run interpolate the array (as it is
 # not a reference to an array)...
 my @pg_basebackup_defs = ('pg_basebackup', '--no-sync', '-cfast');
 
@@ -287,7 +287,7 @@
 SKIP:
 {
 	my $tar = $ENV{TAR};
-	# don't check for a working tar here, to accomodate various odd
+	# don't check for a working tar here, to accommodate various odd
 	# cases such as AIX. If tar doesn't work the init_from_backup below
 	# will fail.
 	skip "no tar program available", 1
diff --git a/src/bin/pg_verifybackup/t/008_untar.pl b/src/bin/pg_verifybackup/t/008_untar.pl
index efbc910dfbb9..d52ca17430b6 100644
--- a/src/bin/pg_verifybackup/t/008_untar.pl
+++ b/src/bin/pg_verifybackup/t/008_untar.pl
@@ -95,7 +95,7 @@
 
 		SKIP: {
 			my $tar = $ENV{TAR};
-			# don't check for a working tar here, to accomodate various odd
+			# don't check for a working tar here, to accommodate various odd
 			# cases such as AIX. If tar doesn't work the init_from_backup below
 			# will fail.
 			skip "no tar program available", 1
diff --git a/src/bin/pg_verifybackup/t/010_client_untar.pl b/src/bin/pg_verifybackup/t/010_client_untar.pl
index c2a6161be689..0b96b6cc43ce 100644
--- a/src/bin/pg_verifybackup/t/010_client_untar.pl
+++ b/src/bin/pg_verifybackup/t/010_client_untar.pl
@@ -96,7 +96,7 @@
 
 		SKIP: {
 			my $tar = $ENV{TAR};
-			# don't check for a working tar here, to accomodate various odd
+			# don't check for a working tar here, to accommodate various odd
 			# cases such as AIX. If tar doesn't work the init_from_backup below
 			# will fail.
 			skip "no tar program available", 1
diff --git a/src/bin/pgbench/pgbench.c b/src/bin/pgbench/pgbench.c
index 4ebe5e6ea46f..000ffc4a5cc9 100644
--- a/src/bin/pgbench/pgbench.c
+++ b/src/bin/pgbench/pgbench.c
@@ -4183,7 +4183,7 @@ initGenerateDataClientSide(PGconn *con)
 	 * accounts is big enough to be worth using COPY and tracking runtime
 	 */
 
-	/* use COPY with FREEZE on v14 and later without partioning */
+	/* use COPY with FREEZE on v14 and later without partitioning */
 	if (partitions == 0 && PQserverVersion(con) >= 140000)
 		copy_statement = "copy pgbench_accounts from stdin with (freeze on)";
 	else
diff --git a/src/include/libpq/sasl.h b/src/include/libpq/sasl.h
index 71cc0dc25142..39ccf8f0e316 100644
--- a/src/include/libpq/sasl.h
+++ b/src/include/libpq/sasl.h
@@ -62,7 +62,7 @@ typedef struct pg_be_sasl_mech
 	 * must return a pointer to its allocated state, which will be passed
 	 * as-is as the first argument to the other callbacks.
 	 *
-	 * Input paramters:
+	 * Input parameters:
 	 *
 	 *	port:        The client Port.
 	 *
diff --git a/src/interfaces/libpq/t/001_uri.pl b/src/interfaces/libpq/t/001_uri.pl
index 90f370f8fd67..1d595c05292e 100644
--- a/src/interfaces/libpq/t/001_uri.pl
+++ b/src/interfaces/libpq/t/001_uri.pl
@@ -232,7 +232,7 @@ sub test_uri
 	chomp($result{stderr});
 
 	# use is_deeply so there's one test result for each test above, without
-	# loosing the information whether stdout/stderr mismatched.
+	# losing the information whether stdout/stderr mismatched.
 	is_deeply(\%result, \%expect, $uri);
 }
 
diff --git a/src/test/perl/PostgreSQL/Test/Cluster.pm b/src/test/perl/PostgreSQL/Test/Cluster.pm
index 4db52bc93674..e7b916113742 100644
--- a/src/test/perl/PostgreSQL/Test/Cluster.pm
+++ b/src/test/perl/PostgreSQL/Test/Cluster.pm
@@ -1372,9 +1372,9 @@ sub _set_pg_version
 #    local %ENV = $self->_get_env{[%extra_settings]);
 #
 # A copy of the environment is taken and node's host and port settings are
-# added as PGHOST and PGPORT, Then the extra settings (if any) are applied.
-# Any setting in %extra_settings with a value that is undefined is deleted
-# the remainder are# set. Then the PATH and (DY)LD_LIBRARY_PATH are adjusted
+# added as PGHOST and PGPORT, then the extra settings (if any) are applied.
+# Any setting in %extra_settings with a value that is undefined is deleted;
+# the remainder are set. Then the PATH and (DY)LD_LIBRARY_PATH are adjusted
 # if the node's install path is set, and the copy environment is returned.
 #
 # The install path set in new() needs to be a directory containing
diff --git a/src/test/regress/expected/create_function_sql.out b/src/test/regress/expected/create_function_sql.out
index f95695546482..a31daffbf348 100644
--- a/src/test/regress/expected/create_function_sql.out
+++ b/src/test/regress/expected/create_function_sql.out
@@ -279,7 +279,7 @@ CREATE FUNCTION functest_S_13() RETURNS boolean
         SELECT 1;
         SELECT false;
     END;
--- check display of function argments in sub-SELECT
+-- check display of function arguments in sub-SELECT
 CREATE TABLE functest1 (i int);
 CREATE FUNCTION functest_S_16(a int, b int) RETURNS void
     LANGUAGE SQL
diff --git a/src/test/regress/expected/create_table.out b/src/test/regress/expected/create_table.out
index 02d09995808a..4407a017a9f4 100644
--- a/src/test/regress/expected/create_table.out
+++ b/src/test/regress/expected/create_table.out
@@ -811,7 +811,7 @@ create table parted_notnull_inh_test1 partition of parted_notnull_inh_test (a no
 insert into parted_notnull_inh_test (b) values (null);
 ERROR:  null value in column "b" of relation "parted_notnull_inh_test1" violates not-null constraint
 DETAIL:  Failing row contains (1, null).
--- note that while b's default is overriden, a's default is preserved
+-- note that while b's default is overridden, a's default is preserved
 \d parted_notnull_inh_test1
       Table "public.parted_notnull_inh_test1"
  Column |  Type   | Collation | Nullable | Default 
diff --git a/src/test/regress/expected/object_address.out b/src/test/regress/expected/object_address.out
index a9e7f2eed56d..4117fc27c9a5 100644
--- a/src/test/regress/expected/object_address.out
+++ b/src/test/regress/expected/object_address.out
@@ -558,7 +558,7 @@ WITH objects (classid, objid, objsubid) AS (VALUES
     ('pg_namespace'::regclass, 0, 0), -- no schema
     ('pg_statistic_ext'::regclass, 0, 0), -- no statistics
     ('pg_ts_parser'::regclass, 0, 0), -- no TS parser
-    ('pg_ts_dict'::regclass, 0, 0), -- no TS dictionnary
+    ('pg_ts_dict'::regclass, 0, 0), -- no TS dictionary
     ('pg_ts_template'::regclass, 0, 0), -- no TS template
     ('pg_ts_config'::regclass, 0, 0), -- no TS configuration
     ('pg_authid'::regclass, 0, 0), -- no role
diff --git a/src/test/regress/sql/create_function_sql.sql b/src/test/regress/sql/create_function_sql.sql
index 4512456eae2b..cc0ccd8db123 100644
--- a/src/test/regress/sql/create_function_sql.sql
+++ b/src/test/regress/sql/create_function_sql.sql
@@ -180,7 +180,7 @@ CREATE FUNCTION functest_S_13() RETURNS boolean
         SELECT false;
     END;
 
--- check display of function argments in sub-SELECT
+-- check display of function arguments in sub-SELECT
 CREATE TABLE functest1 (i int);
 CREATE FUNCTION functest_S_16(a int, b int) RETURNS void
     LANGUAGE SQL
diff --git a/src/test/regress/sql/create_table.sql b/src/test/regress/sql/create_table.sql
index 37dac6b5fb93..5175f404f77e 100644
--- a/src/test/regress/sql/create_table.sql
+++ b/src/test/regress/sql/create_table.sql
@@ -559,7 +559,7 @@ CREATE TABLE part_c_1_10 PARTITION OF part_c FOR VALUES FROM (1) TO (10);
 create table parted_notnull_inh_test (a int default 1, b int not null default 0) partition by list (a);
 create table parted_notnull_inh_test1 partition of parted_notnull_inh_test (a not null, b default 1) for values in (1);
 insert into parted_notnull_inh_test (b) values (null);
--- note that while b's default is overriden, a's default is preserved
+-- note that while b's default is overridden, a's default is preserved
 \d parted_notnull_inh_test1
 drop table parted_notnull_inh_test;
 
diff --git a/src/test/regress/sql/object_address.sql b/src/test/regress/sql/object_address.sql
index 2f40156eb48e..acd0468a9d9f 100644
--- a/src/test/regress/sql/object_address.sql
+++ b/src/test/regress/sql/object_address.sql
@@ -259,7 +259,7 @@ WITH objects (classid, objid, objsubid) AS (VALUES
     ('pg_namespace'::regclass, 0, 0), -- no schema
     ('pg_statistic_ext'::regclass, 0, 0), -- no statistics
     ('pg_ts_parser'::regclass, 0, 0), -- no TS parser
-    ('pg_ts_dict'::regclass, 0, 0), -- no TS dictionnary
+    ('pg_ts_dict'::regclass, 0, 0), -- no TS dictionary
     ('pg_ts_template'::regclass, 0, 0), -- no TS template
     ('pg_ts_config'::regclass, 0, 0), -- no TS configuration
     ('pg_authid'::regclass, 0, 0), -- no role
diff --git a/src/test/subscription/t/001_rep_changes.pl b/src/test/subscription/t/001_rep_changes.pl
index af0cff6a30f8..eca1c6333599 100644
--- a/src/test/subscription/t/001_rep_changes.pl
+++ b/src/test/subscription/t/001_rep_changes.pl
@@ -418,7 +418,7 @@
 # application_name to ensure that the walsender is (re)started.
 #
 # Not all of these are registered as tests as we need to poll for a change
-# but the test suite will fail none the less when something goes wrong.
+# but the test suite will fail nonetheless when something goes wrong.
 my $oldpid = $node_publisher->safe_psql('postgres',
 	"SELECT pid FROM pg_stat_replication WHERE application_name = 'tap_sub' AND state = 'streaming';"
 );
